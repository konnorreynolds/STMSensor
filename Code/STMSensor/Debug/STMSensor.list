
STMSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000961c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08009728  08009728  0000a728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009884  08009884  0000b1d0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009884  08009884  0000a884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800988c  0800988c  0000b1d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800988c  0800988c  0000a88c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009890  08009890  0000a890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d0  20000000  08009894  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001388  200001d0  08009a64  0000b1d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001558  08009a64  0000b558  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f99a  00000000  00000000  0000b1f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030fc  00000000  00000000  0001ab93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  0001dc90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a3a  00000000  00000000  0001ea40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a02b  00000000  00000000  0001f47a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000139f4  00000000  00000000  000394a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087733  00000000  00000000  0004ce99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d45cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b5c  00000000  00000000  000d4610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000d816c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001d0 	.word	0x200001d0
 8000128:	00000000 	.word	0x00000000
 800012c:	08009710 	.word	0x08009710

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001d4 	.word	0x200001d4
 8000148:	08009710 	.word	0x08009710

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fbdf 	bl	8000924 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f8c1 	bl	80002ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f947 	bl	80003fc <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800016e:	f008 f96f 	bl	8008450 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8000172:	f000 f915 	bl	80003a0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* Attempt to initialize the VL53L0X sensor on I2C bus 1
  * This checks if sensor is connected and responding with correct ID (0xEE) */
  if (VL53L0X_Init(&hi2c1) == HAL_OK) {
 8000176:	484f      	ldr	r0, [pc, #316]	@ (80002b4 <main+0x158>)
 8000178:	f000 fb2e 	bl	80007d8 <VL53L0X_Init>
 800017c:	4603      	mov	r3, r0
 800017e:	2b00      	cmp	r3, #0
 8000180:	d103      	bne.n	800018a <main+0x2e>
     /* Sensor found and initialized successfully */
     SendMessageUSB("VL53L0X Sensor Initialize Success...\n");
 8000182:	484d      	ldr	r0, [pc, #308]	@ (80002b8 <main+0x15c>)
 8000184:	f000 fac2 	bl	800070c <SendMessageUSB>
 8000188:	e005      	b.n	8000196 <main+0x3a>
  } else {
     /* Sensor initialization failed - either not connected, wrong wiring,
      * or not a VL53L0X sensor (wrong ID) */
     SendMessageUSB("VL53L0X Sensor Initialize Fail...\n");
 800018a:	484c      	ldr	r0, [pc, #304]	@ (80002bc <main+0x160>)
 800018c:	f000 fabe 	bl	800070c <SendMessageUSB>
     initError = 1;  // Set error flag to track initialization failure
 8000190:	4b4b      	ldr	r3, [pc, #300]	@ (80002c0 <main+0x164>)
 8000192:	2201      	movs	r2, #1
 8000194:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* Check initial sensor state from initialization */
	  if (initError) {
 8000196:	4b4a      	ldr	r3, [pc, #296]	@ (80002c0 <main+0x164>)
 8000198:	781b      	ldrb	r3, [r3, #0]
 800019a:	2b00      	cmp	r3, #0
 800019c:	d002      	beq.n	80001a4 <main+0x48>
	     sensorOK = 0;  // Sensor failed during init
 800019e:	4b49      	ldr	r3, [pc, #292]	@ (80002c4 <main+0x168>)
 80001a0:	2200      	movs	r2, #0
 80001a2:	701a      	strb	r2, [r3, #0]
	  }

	  /* Attempt sensor reconnection every ~1 second if it's not working */
	  if (!sensorOK) {
 80001a4:	4b47      	ldr	r3, [pc, #284]	@ (80002c4 <main+0x168>)
 80001a6:	781b      	ldrb	r3, [r3, #0]
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	d126      	bne.n	80001fa <main+0x9e>
	     reconnectTimer++;
 80001ac:	4b46      	ldr	r3, [pc, #280]	@ (80002c8 <main+0x16c>)
 80001ae:	781b      	ldrb	r3, [r3, #0]
 80001b0:	3301      	adds	r3, #1
 80001b2:	b2da      	uxtb	r2, r3
 80001b4:	4b44      	ldr	r3, [pc, #272]	@ (80002c8 <main+0x16c>)
 80001b6:	701a      	strb	r2, [r3, #0]
	     if (reconnectTimer >= 50) {  // 50 loops * 20ms = 1 second
 80001b8:	4b43      	ldr	r3, [pc, #268]	@ (80002c8 <main+0x16c>)
 80001ba:	781b      	ldrb	r3, [r3, #0]
 80001bc:	2b31      	cmp	r3, #49	@ 0x31
 80001be:	d91c      	bls.n	80001fa <main+0x9e>
	         reconnectTimer = 0; // Reset reconnectTimer
 80001c0:	4b41      	ldr	r3, [pc, #260]	@ (80002c8 <main+0x16c>)
 80001c2:	2200      	movs	r2, #0
 80001c4:	701a      	strb	r2, [r3, #0]

	         /* Reset I2C bus before trying to reconnect
	                  * This clears any stuck I2C conditions */
	                 HAL_I2C_DeInit(&hi2c1);
 80001c6:	483b      	ldr	r0, [pc, #236]	@ (80002b4 <main+0x158>)
 80001c8:	f001 f8dc 	bl	8001384 <HAL_I2C_DeInit>
	                 HAL_Delay(10);
 80001cc:	200a      	movs	r0, #10
 80001ce:	f000 fc0b 	bl	80009e8 <HAL_Delay>
	                 MX_I2C1_Init();  // Reinitialize I2C peripheral
 80001d2:	f000 f8e5 	bl	80003a0 <MX_I2C1_Init>
	                 HAL_Delay(10);
 80001d6:	200a      	movs	r0, #10
 80001d8:	f000 fc06 	bl	80009e8 <HAL_Delay>

	         /* Try to initialize sensor again */
	         if (VL53L0X_Init(&hi2c1) == HAL_OK) {
 80001dc:	4835      	ldr	r0, [pc, #212]	@ (80002b4 <main+0x158>)
 80001de:	f000 fafb 	bl	80007d8 <VL53L0X_Init>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d108      	bne.n	80001fa <main+0x9e>
	             sensorOK = 1;  // Sensor is back online
 80001e8:	4b36      	ldr	r3, [pc, #216]	@ (80002c4 <main+0x168>)
 80001ea:	2201      	movs	r2, #1
 80001ec:	701a      	strb	r2, [r3, #0]
	             initError = 0;
 80001ee:	4b34      	ldr	r3, [pc, #208]	@ (80002c0 <main+0x164>)
 80001f0:	2200      	movs	r2, #0
 80001f2:	701a      	strb	r2, [r3, #0]
	             SendMessageUSB("Sensor reconnected\n");
 80001f4:	4835      	ldr	r0, [pc, #212]	@ (80002cc <main+0x170>)
 80001f6:	f000 fa89 	bl	800070c <SendMessageUSB>
	         }
	     }
	  }

	  /* Read and transmit sensor data if sensor is working */
	  if (sensorOK) {
 80001fa:	4b32      	ldr	r3, [pc, #200]	@ (80002c4 <main+0x168>)
 80001fc:	781b      	ldrb	r3, [r3, #0]
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d01e      	beq.n	8000240 <main+0xe4>
	     uint16_t distance = VL53L0X_ReadDistance(&hi2c1);
 8000202:	482c      	ldr	r0, [pc, #176]	@ (80002b4 <main+0x158>)
 8000204:	f000 fb08 	bl	8000818 <VL53L0X_ReadDistance>
 8000208:	4603      	mov	r3, r0
 800020a:	80fb      	strh	r3, [r7, #6]

	     if (distance != DISTANCE_ERROR) {
 800020c:	88fb      	ldrh	r3, [r7, #6]
 800020e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000212:	4293      	cmp	r3, r2
 8000214:	d00e      	beq.n	8000234 <main+0xd8>
	         /* Valid reading - try to send over USB */
	         if (SendSensorUSB(distance) != USBD_OK) {
 8000216:	88fb      	ldrh	r3, [r7, #6]
 8000218:	4618      	mov	r0, r3
 800021a:	f000 faa7 	bl	800076c <SendSensorUSB>
 800021e:	4603      	mov	r3, r0
 8000220:	2b00      	cmp	r3, #0
 8000222:	d003      	beq.n	800022c <main+0xd0>
	             usbOK = 0;  // USB transmission failed
 8000224:	4b2a      	ldr	r3, [pc, #168]	@ (80002d0 <main+0x174>)
 8000226:	2200      	movs	r2, #0
 8000228:	701a      	strb	r2, [r3, #0]
 800022a:	e009      	b.n	8000240 <main+0xe4>
	         } else {
	             usbOK = 1;  // USB working fine
 800022c:	4b28      	ldr	r3, [pc, #160]	@ (80002d0 <main+0x174>)
 800022e:	2201      	movs	r2, #1
 8000230:	701a      	strb	r2, [r3, #0]
 8000232:	e005      	b.n	8000240 <main+0xe4>
	         }
	         // TODO Add CAN Imple
	     } else {
	         /* Sensor read failed - mark as not working */
	         sensorOK = 0;
 8000234:	4b23      	ldr	r3, [pc, #140]	@ (80002c4 <main+0x168>)
 8000236:	2200      	movs	r2, #0
 8000238:	701a      	strb	r2, [r3, #0]
	         SendMessageUSB("Sensor read failed\n");
 800023a:	4826      	ldr	r0, [pc, #152]	@ (80002d4 <main+0x178>)
 800023c:	f000 fa66 	bl	800070c <SendMessageUSB>
	     }
	  }

	  /* Check USB connection health (optional - implement based on your USB stack) */
	  if (USBStatus() != USBD_OK) {
 8000240:	f000 fac0 	bl	80007c4 <USBStatus>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d002      	beq.n	8000250 <main+0xf4>
	     usbOK = 0;  // USB disconnected or not ready
 800024a:	4b21      	ldr	r3, [pc, #132]	@ (80002d0 <main+0x174>)
 800024c:	2200      	movs	r2, #0
 800024e:	701a      	strb	r2, [r3, #0]

	  /* LED Status Indicator (Pull-Up: LOW = ON, HIGH = OFF)
	  * Different patterns for different states:
	  * - All OK: LED ON (solid)
	  * - Any error: LED OFF */
	  if (sensorOK && usbOK && canOK) {
 8000250:	4b1c      	ldr	r3, [pc, #112]	@ (80002c4 <main+0x168>)
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	2b00      	cmp	r3, #0
 8000256:	d00e      	beq.n	8000276 <main+0x11a>
 8000258:	4b1d      	ldr	r3, [pc, #116]	@ (80002d0 <main+0x174>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d00a      	beq.n	8000276 <main+0x11a>
 8000260:	4b1d      	ldr	r3, [pc, #116]	@ (80002d8 <main+0x17c>)
 8000262:	781b      	ldrb	r3, [r3, #0]
 8000264:	2b00      	cmp	r3, #0
 8000266:	d006      	beq.n	8000276 <main+0x11a>
	     /* Everything working - LED ON */
	     HAL_GPIO_WritePin(LED_BUILTIN, GPIO_PIN_RESET);
 8000268:	2200      	movs	r2, #0
 800026a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800026e:	481b      	ldr	r0, [pc, #108]	@ (80002dc <main+0x180>)
 8000270:	f000 ff2c 	bl	80010cc <HAL_GPIO_WritePin>
 8000274:	e01a      	b.n	80002ac <main+0x150>
	  } else {
	     /* Something has failed - LED OFF
	      * Could expand this to blink patterns for specific errors */
	     HAL_GPIO_WritePin(LED_BUILTIN, GPIO_PIN_SET);
 8000276:	2201      	movs	r2, #1
 8000278:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800027c:	4817      	ldr	r0, [pc, #92]	@ (80002dc <main+0x180>)
 800027e:	f000 ff25 	bl	80010cc <HAL_GPIO_WritePin>

	     /* Print which system failed for debugging */
	     if (!sensorOK) SendMessageUSB("ERROR: Sensor\n");
 8000282:	4b10      	ldr	r3, [pc, #64]	@ (80002c4 <main+0x168>)
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	2b00      	cmp	r3, #0
 8000288:	d102      	bne.n	8000290 <main+0x134>
 800028a:	4815      	ldr	r0, [pc, #84]	@ (80002e0 <main+0x184>)
 800028c:	f000 fa3e 	bl	800070c <SendMessageUSB>
	     if (!usbOK)    SendMessageUSB("ERROR: USB\n");
 8000290:	4b0f      	ldr	r3, [pc, #60]	@ (80002d0 <main+0x174>)
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d102      	bne.n	800029e <main+0x142>
 8000298:	4812      	ldr	r0, [pc, #72]	@ (80002e4 <main+0x188>)
 800029a:	f000 fa37 	bl	800070c <SendMessageUSB>
	     if (!canOK)    SendMessageUSB("ERROR: CAN\n");
 800029e:	4b0e      	ldr	r3, [pc, #56]	@ (80002d8 <main+0x17c>)
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d102      	bne.n	80002ac <main+0x150>
 80002a6:	4810      	ldr	r0, [pc, #64]	@ (80002e8 <main+0x18c>)
 80002a8:	f000 fa30 	bl	800070c <SendMessageUSB>
	  }

	  /* Wait 20ms before next loop iteration
	  * This matches FRC CAN bus update period (50Hz) */
	  HAL_Delay(20);
 80002ac:	2014      	movs	r0, #20
 80002ae:	f000 fb9b 	bl	80009e8 <HAL_Delay>
	  if (initError) {
 80002b2:	e770      	b.n	8000196 <main+0x3a>
 80002b4:	200001ec 	.word	0x200001ec
 80002b8:	08009728 	.word	0x08009728
 80002bc:	08009750 	.word	0x08009750
 80002c0:	20000240 	.word	0x20000240
 80002c4:	20000241 	.word	0x20000241
 80002c8:	20000242 	.word	0x20000242
 80002cc:	08009774 	.word	0x08009774
 80002d0:	20000000 	.word	0x20000000
 80002d4:	08009788 	.word	0x08009788
 80002d8:	20000001 	.word	0x20000001
 80002dc:	40011000 	.word	0x40011000
 80002e0:	0800979c 	.word	0x0800979c
 80002e4:	080097ac 	.word	0x080097ac
 80002e8:	080097b8 	.word	0x080097b8

080002ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b094      	sub	sp, #80	@ 0x50
 80002f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80002f6:	2228      	movs	r2, #40	@ 0x28
 80002f8:	2100      	movs	r1, #0
 80002fa:	4618      	mov	r0, r3
 80002fc:	f008 fd7a 	bl	8008df4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000300:	f107 0314 	add.w	r3, r7, #20
 8000304:	2200      	movs	r2, #0
 8000306:	601a      	str	r2, [r3, #0]
 8000308:	605a      	str	r2, [r3, #4]
 800030a:	609a      	str	r2, [r3, #8]
 800030c:	60da      	str	r2, [r3, #12]
 800030e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	605a      	str	r2, [r3, #4]
 8000318:	609a      	str	r2, [r3, #8]
 800031a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800031c:	2301      	movs	r3, #1
 800031e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000320:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000324:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000326:	2300      	movs	r3, #0
 8000328:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800032a:	2301      	movs	r3, #1
 800032c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800032e:	2302      	movs	r3, #2
 8000330:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000332:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000336:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000338:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800033c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000342:	4618      	mov	r0, r3
 8000344:	f003 fcd0 	bl	8003ce8 <HAL_RCC_OscConfig>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800034e:	f000 f8ad 	bl	80004ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000352:	230f      	movs	r3, #15
 8000354:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000356:	2302      	movs	r3, #2
 8000358:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800035a:	2300      	movs	r3, #0
 800035c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800035e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000362:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000364:	2300      	movs	r3, #0
 8000366:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000368:	f107 0314 	add.w	r3, r7, #20
 800036c:	2102      	movs	r1, #2
 800036e:	4618      	mov	r0, r3
 8000370:	f003 ff3c 	bl	80041ec <HAL_RCC_ClockConfig>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800037a:	f000 f897 	bl	80004ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800037e:	2310      	movs	r3, #16
 8000380:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000382:	2300      	movs	r3, #0
 8000384:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	4618      	mov	r0, r3
 800038a:	f004 f8a9 	bl	80044e0 <HAL_RCCEx_PeriphCLKConfig>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000394:	f000 f88a 	bl	80004ac <Error_Handler>
  }
}
 8000398:	bf00      	nop
 800039a:	3750      	adds	r7, #80	@ 0x50
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}

080003a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003a4:	4b12      	ldr	r3, [pc, #72]	@ (80003f0 <MX_I2C1_Init+0x50>)
 80003a6:	4a13      	ldr	r2, [pc, #76]	@ (80003f4 <MX_I2C1_Init+0x54>)
 80003a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80003aa:	4b11      	ldr	r3, [pc, #68]	@ (80003f0 <MX_I2C1_Init+0x50>)
 80003ac:	4a12      	ldr	r2, [pc, #72]	@ (80003f8 <MX_I2C1_Init+0x58>)
 80003ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003b0:	4b0f      	ldr	r3, [pc, #60]	@ (80003f0 <MX_I2C1_Init+0x50>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80003b6:	4b0e      	ldr	r3, [pc, #56]	@ (80003f0 <MX_I2C1_Init+0x50>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003bc:	4b0c      	ldr	r3, [pc, #48]	@ (80003f0 <MX_I2C1_Init+0x50>)
 80003be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80003c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003c4:	4b0a      	ldr	r3, [pc, #40]	@ (80003f0 <MX_I2C1_Init+0x50>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80003ca:	4b09      	ldr	r3, [pc, #36]	@ (80003f0 <MX_I2C1_Init+0x50>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003d0:	4b07      	ldr	r3, [pc, #28]	@ (80003f0 <MX_I2C1_Init+0x50>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003d6:	4b06      	ldr	r3, [pc, #24]	@ (80003f0 <MX_I2C1_Init+0x50>)
 80003d8:	2200      	movs	r2, #0
 80003da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003dc:	4804      	ldr	r0, [pc, #16]	@ (80003f0 <MX_I2C1_Init+0x50>)
 80003de:	f000 fe8d 	bl	80010fc <HAL_I2C_Init>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d001      	beq.n	80003ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80003e8:	f000 f860 	bl	80004ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003ec:	bf00      	nop
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	200001ec 	.word	0x200001ec
 80003f4:	40005400 	.word	0x40005400
 80003f8:	000186a0 	.word	0x000186a0

080003fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b088      	sub	sp, #32
 8000400:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000402:	f107 0310 	add.w	r3, r7, #16
 8000406:	2200      	movs	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
 800040a:	605a      	str	r2, [r3, #4]
 800040c:	609a      	str	r2, [r3, #8]
 800040e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000410:	4b24      	ldr	r3, [pc, #144]	@ (80004a4 <MX_GPIO_Init+0xa8>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	4a23      	ldr	r2, [pc, #140]	@ (80004a4 <MX_GPIO_Init+0xa8>)
 8000416:	f043 0310 	orr.w	r3, r3, #16
 800041a:	6193      	str	r3, [r2, #24]
 800041c:	4b21      	ldr	r3, [pc, #132]	@ (80004a4 <MX_GPIO_Init+0xa8>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	f003 0310 	and.w	r3, r3, #16
 8000424:	60fb      	str	r3, [r7, #12]
 8000426:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000428:	4b1e      	ldr	r3, [pc, #120]	@ (80004a4 <MX_GPIO_Init+0xa8>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	4a1d      	ldr	r2, [pc, #116]	@ (80004a4 <MX_GPIO_Init+0xa8>)
 800042e:	f043 0320 	orr.w	r3, r3, #32
 8000432:	6193      	str	r3, [r2, #24]
 8000434:	4b1b      	ldr	r3, [pc, #108]	@ (80004a4 <MX_GPIO_Init+0xa8>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	f003 0320 	and.w	r3, r3, #32
 800043c:	60bb      	str	r3, [r7, #8]
 800043e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000440:	4b18      	ldr	r3, [pc, #96]	@ (80004a4 <MX_GPIO_Init+0xa8>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	4a17      	ldr	r2, [pc, #92]	@ (80004a4 <MX_GPIO_Init+0xa8>)
 8000446:	f043 0304 	orr.w	r3, r3, #4
 800044a:	6193      	str	r3, [r2, #24]
 800044c:	4b15      	ldr	r3, [pc, #84]	@ (80004a4 <MX_GPIO_Init+0xa8>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	f003 0304 	and.w	r3, r3, #4
 8000454:	607b      	str	r3, [r7, #4]
 8000456:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000458:	4b12      	ldr	r3, [pc, #72]	@ (80004a4 <MX_GPIO_Init+0xa8>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	4a11      	ldr	r2, [pc, #68]	@ (80004a4 <MX_GPIO_Init+0xa8>)
 800045e:	f043 0308 	orr.w	r3, r3, #8
 8000462:	6193      	str	r3, [r2, #24]
 8000464:	4b0f      	ldr	r3, [pc, #60]	@ (80004a4 <MX_GPIO_Init+0xa8>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	f003 0308 	and.w	r3, r3, #8
 800046c:	603b      	str	r3, [r7, #0]
 800046e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Status_LED_GPIO_Port, Status_LED_Pin, GPIO_PIN_RESET);
 8000470:	2200      	movs	r2, #0
 8000472:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000476:	480c      	ldr	r0, [pc, #48]	@ (80004a8 <MX_GPIO_Init+0xac>)
 8000478:	f000 fe28 	bl	80010cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Status_LED_Pin */
  GPIO_InitStruct.Pin = Status_LED_Pin;
 800047c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000480:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000482:	2301      	movs	r3, #1
 8000484:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000486:	2301      	movs	r3, #1
 8000488:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800048a:	2303      	movs	r3, #3
 800048c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Status_LED_GPIO_Port, &GPIO_InitStruct);
 800048e:	f107 0310 	add.w	r3, r7, #16
 8000492:	4619      	mov	r1, r3
 8000494:	4804      	ldr	r0, [pc, #16]	@ (80004a8 <MX_GPIO_Init+0xac>)
 8000496:	f000 fbd9 	bl	8000c4c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800049a:	bf00      	nop
 800049c:	3720      	adds	r7, #32
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	40021000 	.word	0x40021000
 80004a8:	40011000 	.word	0x40011000

080004ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004b0:	b672      	cpsid	i
}
 80004b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004b4:	bf00      	nop
 80004b6:	e7fd      	b.n	80004b4 <Error_Handler+0x8>

080004b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b085      	sub	sp, #20
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004be:	4b15      	ldr	r3, [pc, #84]	@ (8000514 <HAL_MspInit+0x5c>)
 80004c0:	699b      	ldr	r3, [r3, #24]
 80004c2:	4a14      	ldr	r2, [pc, #80]	@ (8000514 <HAL_MspInit+0x5c>)
 80004c4:	f043 0301 	orr.w	r3, r3, #1
 80004c8:	6193      	str	r3, [r2, #24]
 80004ca:	4b12      	ldr	r3, [pc, #72]	@ (8000514 <HAL_MspInit+0x5c>)
 80004cc:	699b      	ldr	r3, [r3, #24]
 80004ce:	f003 0301 	and.w	r3, r3, #1
 80004d2:	60bb      	str	r3, [r7, #8]
 80004d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000514 <HAL_MspInit+0x5c>)
 80004d8:	69db      	ldr	r3, [r3, #28]
 80004da:	4a0e      	ldr	r2, [pc, #56]	@ (8000514 <HAL_MspInit+0x5c>)
 80004dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004e0:	61d3      	str	r3, [r2, #28]
 80004e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000514 <HAL_MspInit+0x5c>)
 80004e4:	69db      	ldr	r3, [r3, #28]
 80004e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80004ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000518 <HAL_MspInit+0x60>)
 80004f0:	685b      	ldr	r3, [r3, #4]
 80004f2:	60fb      	str	r3, [r7, #12]
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000502:	60fb      	str	r3, [r7, #12]
 8000504:	4a04      	ldr	r2, [pc, #16]	@ (8000518 <HAL_MspInit+0x60>)
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800050a:	bf00      	nop
 800050c:	3714      	adds	r7, #20
 800050e:	46bd      	mov	sp, r7
 8000510:	bc80      	pop	{r7}
 8000512:	4770      	bx	lr
 8000514:	40021000 	.word	0x40021000
 8000518:	40010000 	.word	0x40010000

0800051c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b088      	sub	sp, #32
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000524:	f107 0310 	add.w	r3, r7, #16
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4a15      	ldr	r2, [pc, #84]	@ (800058c <HAL_I2C_MspInit+0x70>)
 8000538:	4293      	cmp	r3, r2
 800053a:	d123      	bne.n	8000584 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800053c:	4b14      	ldr	r3, [pc, #80]	@ (8000590 <HAL_I2C_MspInit+0x74>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	4a13      	ldr	r2, [pc, #76]	@ (8000590 <HAL_I2C_MspInit+0x74>)
 8000542:	f043 0308 	orr.w	r3, r3, #8
 8000546:	6193      	str	r3, [r2, #24]
 8000548:	4b11      	ldr	r3, [pc, #68]	@ (8000590 <HAL_I2C_MspInit+0x74>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	f003 0308 	and.w	r3, r3, #8
 8000550:	60fb      	str	r3, [r7, #12]
 8000552:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000554:	23c0      	movs	r3, #192	@ 0xc0
 8000556:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000558:	2312      	movs	r3, #18
 800055a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800055c:	2303      	movs	r3, #3
 800055e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000560:	f107 0310 	add.w	r3, r7, #16
 8000564:	4619      	mov	r1, r3
 8000566:	480b      	ldr	r0, [pc, #44]	@ (8000594 <HAL_I2C_MspInit+0x78>)
 8000568:	f000 fb70 	bl	8000c4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800056c:	4b08      	ldr	r3, [pc, #32]	@ (8000590 <HAL_I2C_MspInit+0x74>)
 800056e:	69db      	ldr	r3, [r3, #28]
 8000570:	4a07      	ldr	r2, [pc, #28]	@ (8000590 <HAL_I2C_MspInit+0x74>)
 8000572:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000576:	61d3      	str	r3, [r2, #28]
 8000578:	4b05      	ldr	r3, [pc, #20]	@ (8000590 <HAL_I2C_MspInit+0x74>)
 800057a:	69db      	ldr	r3, [r3, #28]
 800057c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000584:	bf00      	nop
 8000586:	3720      	adds	r7, #32
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40005400 	.word	0x40005400
 8000590:	40021000 	.word	0x40021000
 8000594:	40010c00 	.word	0x40010c00

08000598 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a0a      	ldr	r2, [pc, #40]	@ (80005d0 <HAL_I2C_MspDeInit+0x38>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d10d      	bne.n	80005c6 <HAL_I2C_MspDeInit+0x2e>
  {
    /* USER CODE BEGIN I2C1_MspDeInit 0 */

    /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80005aa:	4b0a      	ldr	r3, [pc, #40]	@ (80005d4 <HAL_I2C_MspDeInit+0x3c>)
 80005ac:	69db      	ldr	r3, [r3, #28]
 80005ae:	4a09      	ldr	r2, [pc, #36]	@ (80005d4 <HAL_I2C_MspDeInit+0x3c>)
 80005b0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80005b4:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80005b6:	2140      	movs	r1, #64	@ 0x40
 80005b8:	4807      	ldr	r0, [pc, #28]	@ (80005d8 <HAL_I2C_MspDeInit+0x40>)
 80005ba:	f000 fccb 	bl	8000f54 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80005be:	2180      	movs	r1, #128	@ 0x80
 80005c0:	4805      	ldr	r0, [pc, #20]	@ (80005d8 <HAL_I2C_MspDeInit+0x40>)
 80005c2:	f000 fcc7 	bl	8000f54 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C1_MspDeInit 1 */

    /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40005400 	.word	0x40005400
 80005d4:	40021000 	.word	0x40021000
 80005d8:	40010c00 	.word	0x40010c00

080005dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005e0:	bf00      	nop
 80005e2:	e7fd      	b.n	80005e0 <NMI_Handler+0x4>

080005e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005e8:	bf00      	nop
 80005ea:	e7fd      	b.n	80005e8 <HardFault_Handler+0x4>

080005ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005f0:	bf00      	nop
 80005f2:	e7fd      	b.n	80005f0 <MemManage_Handler+0x4>

080005f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005f8:	bf00      	nop
 80005fa:	e7fd      	b.n	80005f8 <BusFault_Handler+0x4>

080005fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000600:	bf00      	nop
 8000602:	e7fd      	b.n	8000600 <UsageFault_Handler+0x4>

08000604 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr

08000610 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr

0800061c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	bc80      	pop	{r7}
 8000626:	4770      	bx	lr

08000628 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800062c:	f000 f9c0 	bl	80009b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}

08000634 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000638:	4802      	ldr	r0, [pc, #8]	@ (8000644 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800063a:	f001 ff10 	bl	800245e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000f18 	.word	0x20000f18

08000648 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000650:	4a14      	ldr	r2, [pc, #80]	@ (80006a4 <_sbrk+0x5c>)
 8000652:	4b15      	ldr	r3, [pc, #84]	@ (80006a8 <_sbrk+0x60>)
 8000654:	1ad3      	subs	r3, r2, r3
 8000656:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800065c:	4b13      	ldr	r3, [pc, #76]	@ (80006ac <_sbrk+0x64>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d102      	bne.n	800066a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000664:	4b11      	ldr	r3, [pc, #68]	@ (80006ac <_sbrk+0x64>)
 8000666:	4a12      	ldr	r2, [pc, #72]	@ (80006b0 <_sbrk+0x68>)
 8000668:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800066a:	4b10      	ldr	r3, [pc, #64]	@ (80006ac <_sbrk+0x64>)
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4413      	add	r3, r2
 8000672:	693a      	ldr	r2, [r7, #16]
 8000674:	429a      	cmp	r2, r3
 8000676:	d207      	bcs.n	8000688 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000678:	f008 fbc4 	bl	8008e04 <__errno>
 800067c:	4603      	mov	r3, r0
 800067e:	220c      	movs	r2, #12
 8000680:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000682:	f04f 33ff 	mov.w	r3, #4294967295
 8000686:	e009      	b.n	800069c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000688:	4b08      	ldr	r3, [pc, #32]	@ (80006ac <_sbrk+0x64>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800068e:	4b07      	ldr	r3, [pc, #28]	@ (80006ac <_sbrk+0x64>)
 8000690:	681a      	ldr	r2, [r3, #0]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	4413      	add	r3, r2
 8000696:	4a05      	ldr	r2, [pc, #20]	@ (80006ac <_sbrk+0x64>)
 8000698:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800069a:	68fb      	ldr	r3, [r7, #12]
}
 800069c:	4618      	mov	r0, r3
 800069e:	3718      	adds	r7, #24
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20005000 	.word	0x20005000
 80006a8:	00000400 	.word	0x00000400
 80006ac:	20000244 	.word	0x20000244
 80006b0:	20001558 	.word	0x20001558

080006b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006b8:	bf00      	nop
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr

080006c0 <USBWrite>:
 * @return USBD_OK if successful, USBD_FAIL if error
 *
 * NOTE: Uses strlen() to determine length, so txData must end with '\0'
 *       The '\0' itself is NOT sent over USB
 */
USBD_StatusTypeDef USBWrite(uint8_t *txData) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
   uint16_t len = strlen((char*)txData);  // Get length of string to send
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f7ff fd3f 	bl	800014c <strlen>
 80006ce:	4603      	mov	r3, r0
 80006d0:	81fb      	strh	r3, [r7, #14]

   /* Keep trying to send until USB is not busy */
   do {
       status = CDC_Transmit_FS(txData, len);  // Attempt to transmit
 80006d2:	89fb      	ldrh	r3, [r7, #14]
 80006d4:	4619      	mov	r1, r3
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	f007 ff78 	bl	80085cc <CDC_Transmit_FS>
 80006dc:	4603      	mov	r3, r0
 80006de:	461a      	mov	r2, r3
 80006e0:	4b09      	ldr	r3, [pc, #36]	@ (8000708 <USBWrite+0x48>)
 80006e2:	701a      	strb	r2, [r3, #0]
       if (status == USBD_BUSY) {
 80006e4:	4b08      	ldr	r3, [pc, #32]	@ (8000708 <USBWrite+0x48>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d102      	bne.n	80006f2 <USBWrite+0x32>
           HAL_Delay(10);  // Small delay before retrying (10ms)
 80006ec:	200a      	movs	r0, #10
 80006ee:	f000 f97b 	bl	80009e8 <HAL_Delay>
       }
   } while (status == USBD_BUSY);  // Loop while USB is busy
 80006f2:	4b05      	ldr	r3, [pc, #20]	@ (8000708 <USBWrite+0x48>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d0eb      	beq.n	80006d2 <USBWrite+0x12>

   /* Return the final status (could be USBD_OK or USBD_FAIL) */
   return status;
 80006fa:	4b03      	ldr	r3, [pc, #12]	@ (8000708 <USBWrite+0x48>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3710      	adds	r7, #16
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000248 	.word	0x20000248

0800070c <SendMessageUSB>:
 * @return USBD_OK if successful, USBD_FAIL if error
 *
 * NOTE: Uses strlen() to determine length, so msg must end with '\0'
 *       The '\0' itself is NOT sent over USB
 */
USBD_StatusTypeDef SendMessageUSB(const char *msg) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b0c4      	sub	sp, #272	@ 0x110
 8000710:	af00      	add	r7, sp, #0
 8000712:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000716:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800071a:	6018      	str	r0, [r3, #0]
   uint8_t buffer[256];           // Local buffer for message
   size_t msgLen = strlen(msg);   // Get message length
 800071c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000720:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000724:	6818      	ldr	r0, [r3, #0]
 8000726:	f7ff fd11 	bl	800014c <strlen>
 800072a:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
   memcpy(buffer, msg, msgLen);   // Copy message to buffer
 800072e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000732:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000736:	f107 000c 	add.w	r0, r7, #12
 800073a:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800073e:	6819      	ldr	r1, [r3, #0]
 8000740:	f008 fb8c 	bl	8008e5c <memcpy>
   buffer[msgLen] = '\0';         // Ensure null termination
 8000744:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000748:	f5a3 7282 	sub.w	r2, r3, #260	@ 0x104
 800074c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000750:	4413      	add	r3, r2
 8000752:	2200      	movs	r2, #0
 8000754:	701a      	strb	r2, [r3, #0]

   return USBWrite(buffer);       // Send the buffer over USB
 8000756:	f107 030c 	add.w	r3, r7, #12
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ffb0 	bl	80006c0 <USBWrite>
 8000760:	4603      	mov	r3, r0
}
 8000762:	4618      	mov	r0, r3
 8000764:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <SendSensorUSB>:
 * @param  distance: Distance value in mm (0-65535)
 * @return USBD_OK if successful, USBD_FAIL if error
 *
 * Sends "Distance: XXXmm\r\n" over USB (without '\0')
 */
USBD_StatusTypeDef SendSensorUSB(uint16_t distance) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b0c6      	sub	sp, #280	@ 0x118
 8000770:	af00      	add	r7, sp, #0
 8000772:	4602      	mov	r2, r0
 8000774:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000778:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 800077c:	801a      	strh	r2, [r3, #0]
   uint8_t buffer[256];        // Buffer for formatted message
   char distance_str[10];      // Temporary string for distance value

   /* Convert distance (uint16_t) to string */
   snprintf(distance_str, sizeof(distance_str), "%u", distance);
 800077e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000782:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 8000786:	881b      	ldrh	r3, [r3, #0]
 8000788:	f107 000c 	add.w	r0, r7, #12
 800078c:	4a0b      	ldr	r2, [pc, #44]	@ (80007bc <SendSensorUSB+0x50>)
 800078e:	210a      	movs	r1, #10
 8000790:	f008 fafa 	bl	8008d88 <sniprintf>

   /* Create full formatted message */
   snprintf((char*)buffer, sizeof(buffer), "Distance: %smm\r\n", distance_str);
 8000794:	f107 030c 	add.w	r3, r7, #12
 8000798:	f107 0018 	add.w	r0, r7, #24
 800079c:	4a08      	ldr	r2, [pc, #32]	@ (80007c0 <SendSensorUSB+0x54>)
 800079e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007a2:	f008 faf1 	bl	8008d88 <sniprintf>

   return USBWrite(buffer);    // Send formatted message over USB
 80007a6:	f107 0318 	add.w	r3, r7, #24
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff ff88 	bl	80006c0 <USBWrite>
 80007b0:	4603      	mov	r3, r0
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	080097c4 	.word	0x080097c4
 80007c0:	080097c8 	.word	0x080097c8

080007c4 <USBStatus>:
* @brief  Get the last USB operation status
* @return Last USB status code
*
* Returns the global status variable from the most recent USB operation
*/
USBD_StatusTypeDef USBStatus() {
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
   return status;
 80007c8:	4b02      	ldr	r3, [pc, #8]	@ (80007d4 <USBStatus+0x10>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr
 80007d4:	20000248 	.word	0x20000248

080007d8 <VL53L0X_Init>:
 * @return HAL_OK if sensor found, HAL_ERROR if something's wrong
 * 
 * We ask the sensor for its ID number to make sure it's really there
 * and that it's the right type of sensor (VL53L0X always returns 0xEE)
 */
HAL_StatusTypeDef VL53L0X_Init(I2C_HandleTypeDef *hi2c) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b088      	sub	sp, #32
 80007dc:	af04      	add	r7, sp, #16
 80007de:	6078      	str	r0, [r7, #4]
    uint8_t sensor_id;  // Variable to store the ID we read from sensor
    
    /* Read the sensor's ID register at address 0xC0 */
    if (HAL_I2C_Mem_Read(hi2c,                    // Use this I2C bus
 80007e0:	2364      	movs	r3, #100	@ 0x64
 80007e2:	9302      	str	r3, [sp, #8]
 80007e4:	2301      	movs	r3, #1
 80007e6:	9301      	str	r3, [sp, #4]
 80007e8:	f107 030f 	add.w	r3, r7, #15
 80007ec:	9300      	str	r3, [sp, #0]
 80007ee:	2301      	movs	r3, #1
 80007f0:	22c0      	movs	r2, #192	@ 0xc0
 80007f2:	2152      	movs	r1, #82	@ 0x52
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f000 feef 	bl	80015d8 <HAL_I2C_Mem_Read>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <VL53L0X_Init+0x2c>
                         &sensor_id,               // Store the ID here
                         1,                        // Read 1 byte
                         I2C_TIMEOUT_MS) != HAL_OK) {  // Wait max 100ms
        
        /* If we can't read the ID, sensor is probably not connected */
        return HAL_ERROR;  
 8000800:	2301      	movs	r3, #1
 8000802:	e005      	b.n	8000810 <VL53L0X_Init+0x38>
    }
    
    /* Check if the ID matches what we expect (0xEE)
     * All genuine VL53L0X sensors have this same ID */
    if (sensor_id != VL53L0X_EXPECTED_ID) {
 8000804:	7bfb      	ldrb	r3, [r7, #15]
 8000806:	2bee      	cmp	r3, #238	@ 0xee
 8000808:	d001      	beq.n	800080e <VL53L0X_Init+0x36>
        /* Wrong ID means it's not a VL53L0X sensor */
        return HAL_ERROR;  
 800080a:	2301      	movs	r3, #1
 800080c:	e000      	b.n	8000810 <VL53L0X_Init+0x38>
    }
    
    /* Sensor found and responding correctly */
    return HAL_OK;  
 800080e:	2300      	movs	r3, #0
}
 8000810:	4618      	mov	r0, r3
 8000812:	3710      	adds	r7, #16
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}

08000818 <VL53L0X_ReadDistance>:
 * The measurement process:
 * 1. Tell sensor to take a measurement
 * 2. Wait for it to finish (check status register)
 * 3. Read the 16-bit result from the distance register
 */
uint16_t VL53L0X_ReadDistance(I2C_HandleTypeDef *hi2c) {
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	@ 0x28
 800081c:	af04      	add	r7, sp, #16
 800081e:	6078      	str	r0, [r7, #4]
    uint8_t distance_bytes[2];  // Array to store the 2-byte distance value
    uint8_t command;            // Command byte to send to sensor
    uint8_t status;             // Sensor's status byte
    uint32_t wait_loops = 0;    // Counter to prevent waiting forever
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]
    
    /* Tell sensor to start a measurement by writing 0x01 to register 0x00 */
    command = START_SINGLE_MEASURE;  // 0x01 = take one measurement
 8000824:	2301      	movs	r3, #1
 8000826:	73fb      	strb	r3, [r7, #15]
    
    if (HAL_I2C_Mem_Write(hi2c,                   // Use this I2C bus
 8000828:	2364      	movs	r3, #100	@ 0x64
 800082a:	9302      	str	r3, [sp, #8]
 800082c:	2301      	movs	r3, #1
 800082e:	9301      	str	r3, [sp, #4]
 8000830:	f107 030f 	add.w	r3, r7, #15
 8000834:	9300      	str	r3, [sp, #0]
 8000836:	2301      	movs	r3, #1
 8000838:	2200      	movs	r2, #0
 800083a:	2152      	movs	r1, #82	@ 0x52
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f000 fdd1 	bl	80013e4 <HAL_I2C_Mem_Write>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d002      	beq.n	800084e <VL53L0X_ReadDistance+0x36>
                          &command,                // Send this command (0x01)
                          1,                       // Send 1 byte
                          I2C_TIMEOUT_MS) != HAL_OK) {  // Wait max 100ms
        
        /* Couldn't send command to sensor */
        return DISTANCE_ERROR;  // Return error value (0xFFFF)
 8000848:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800084c:	e040      	b.n	80008d0 <VL53L0X_ReadDistance+0xb8>
    /* Wait for measurement to complete
     * The sensor sets bit 0 of the status register to 1 when done
     * We keep checking this bit until it becomes 1 */
    do {
        /* Read the status register at address 0x14 */
        if (HAL_I2C_Mem_Read(hi2c,                    // Use this I2C bus
 800084e:	2364      	movs	r3, #100	@ 0x64
 8000850:	9302      	str	r3, [sp, #8]
 8000852:	2301      	movs	r3, #1
 8000854:	9301      	str	r3, [sp, #4]
 8000856:	f107 030e 	add.w	r3, r7, #14
 800085a:	9300      	str	r3, [sp, #0]
 800085c:	2301      	movs	r3, #1
 800085e:	2214      	movs	r2, #20
 8000860:	2152      	movs	r1, #82	@ 0x52
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f000 feb8 	bl	80015d8 <HAL_I2C_Mem_Read>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d002      	beq.n	8000874 <VL53L0X_ReadDistance+0x5c>
                             &status,                  // Store status here
                             1,                        // Read 1 byte
                             I2C_TIMEOUT_MS) != HAL_OK) {  // Wait max 100ms
            
            /* Couldn't read status */
            return DISTANCE_ERROR;  
 800086e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000872:	e02d      	b.n	80008d0 <VL53L0X_ReadDistance+0xb8>
        }
        
        /* Check if we've been waiting too long (>100ms is unusual) */
        wait_loops++;
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	3301      	adds	r3, #1
 8000878:	617b      	str	r3, [r7, #20]
        if (wait_loops > MEASUREMENT_TIMEOUT_MS) {
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	2b64      	cmp	r3, #100	@ 0x64
 800087e:	d902      	bls.n	8000886 <VL53L0X_ReadDistance+0x6e>
            /* Sensor is taking too long, something's wrong */
            return DISTANCE_ERROR;
 8000880:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000884:	e024      	b.n	80008d0 <VL53L0X_ReadDistance+0xb8>
        }
        
        /* Wait 1 millisecond before checking again */
        HAL_Delay(1);
 8000886:	2001      	movs	r0, #1
 8000888:	f000 f8ae 	bl	80009e8 <HAL_Delay>
        
        /* Keep looping while bit 0 is still 0 (not ready) */
    } while ((status & MEASUREMENT_READY_BIT) == 0);
 800088c:	7bbb      	ldrb	r3, [r7, #14]
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	2b00      	cmp	r3, #0
 8000894:	d0db      	beq.n	800084e <VL53L0X_ReadDistance+0x36>
    
    /* Measurement is ready! Read the distance value (2 bytes at address 0x1E) */
    if (HAL_I2C_Mem_Read(hi2c,                    // Use this I2C bus
 8000896:	2364      	movs	r3, #100	@ 0x64
 8000898:	9302      	str	r3, [sp, #8]
 800089a:	2302      	movs	r3, #2
 800089c:	9301      	str	r3, [sp, #4]
 800089e:	f107 0310 	add.w	r3, r7, #16
 80008a2:	9300      	str	r3, [sp, #0]
 80008a4:	2301      	movs	r3, #1
 80008a6:	221e      	movs	r2, #30
 80008a8:	2152      	movs	r1, #82	@ 0x52
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f000 fe94 	bl	80015d8 <HAL_I2C_Mem_Read>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d002      	beq.n	80008bc <VL53L0X_ReadDistance+0xa4>
                         distance_bytes,           // Store 2 bytes here
                         2,                        // Read 2 bytes
                         I2C_TIMEOUT_MS) != HAL_OK) {  // Wait max 100ms
        
        /* Couldn't read the distance */
        return DISTANCE_ERROR;
 80008b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80008ba:	e009      	b.n	80008d0 <VL53L0X_ReadDistance+0xb8>
    
    /* Combine the 2 bytes into one 16-bit number
     * First byte is the high byte (multiply by 256)
     * Second byte is the low byte
     * Example: if bytes are [0x01, 0x2C], distance = (1 * 256) + 44 = 300mm */
    uint16_t distance = (distance_bytes[0] << 8) | distance_bytes[1];
 80008bc:	7c3b      	ldrb	r3, [r7, #16]
 80008be:	b21b      	sxth	r3, r3
 80008c0:	021b      	lsls	r3, r3, #8
 80008c2:	b21a      	sxth	r2, r3
 80008c4:	7c7b      	ldrb	r3, [r7, #17]
 80008c6:	b21b      	sxth	r3, r3
 80008c8:	4313      	orrs	r3, r2
 80008ca:	b21b      	sxth	r3, r3
 80008cc:	827b      	strh	r3, [r7, #18]
    
    /* Return the distance in millimeters */
    return distance;
 80008ce:	8a7b      	ldrh	r3, [r7, #18]
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3718      	adds	r7, #24
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008d8:	f7ff feec 	bl	80006b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008dc:	480b      	ldr	r0, [pc, #44]	@ (800090c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008de:	490c      	ldr	r1, [pc, #48]	@ (8000910 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008e0:	4a0c      	ldr	r2, [pc, #48]	@ (8000914 <LoopFillZerobss+0x16>)
  movs r3, #0
 80008e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e4:	e002      	b.n	80008ec <LoopCopyDataInit>

080008e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ea:	3304      	adds	r3, #4

080008ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f0:	d3f9      	bcc.n	80008e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008f2:	4a09      	ldr	r2, [pc, #36]	@ (8000918 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008f4:	4c09      	ldr	r4, [pc, #36]	@ (800091c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f8:	e001      	b.n	80008fe <LoopFillZerobss>

080008fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008fc:	3204      	adds	r2, #4

080008fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000900:	d3fb      	bcc.n	80008fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000902:	f008 fa85 	bl	8008e10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000906:	f7ff fc29 	bl	800015c <main>
  bx lr
 800090a:	4770      	bx	lr
  ldr r0, =_sdata
 800090c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000910:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8000914:	08009894 	.word	0x08009894
  ldr r2, =_sbss
 8000918:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 800091c:	20001558 	.word	0x20001558

08000920 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000920:	e7fe      	b.n	8000920 <ADC1_2_IRQHandler>
	...

08000924 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000928:	4b08      	ldr	r3, [pc, #32]	@ (800094c <HAL_Init+0x28>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a07      	ldr	r2, [pc, #28]	@ (800094c <HAL_Init+0x28>)
 800092e:	f043 0310 	orr.w	r3, r3, #16
 8000932:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000934:	2003      	movs	r0, #3
 8000936:	f000 f947 	bl	8000bc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800093a:	200f      	movs	r0, #15
 800093c:	f000 f808 	bl	8000950 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000940:	f7ff fdba 	bl	80004b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000944:	2300      	movs	r3, #0
}
 8000946:	4618      	mov	r0, r3
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40022000 	.word	0x40022000

08000950 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000958:	4b12      	ldr	r3, [pc, #72]	@ (80009a4 <HAL_InitTick+0x54>)
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	4b12      	ldr	r3, [pc, #72]	@ (80009a8 <HAL_InitTick+0x58>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	4619      	mov	r1, r3
 8000962:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000966:	fbb3 f3f1 	udiv	r3, r3, r1
 800096a:	fbb2 f3f3 	udiv	r3, r2, r3
 800096e:	4618      	mov	r0, r3
 8000970:	f000 f95f 	bl	8000c32 <HAL_SYSTICK_Config>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800097a:	2301      	movs	r3, #1
 800097c:	e00e      	b.n	800099c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2b0f      	cmp	r3, #15
 8000982:	d80a      	bhi.n	800099a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000984:	2200      	movs	r2, #0
 8000986:	6879      	ldr	r1, [r7, #4]
 8000988:	f04f 30ff 	mov.w	r0, #4294967295
 800098c:	f000 f927 	bl	8000bde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000990:	4a06      	ldr	r2, [pc, #24]	@ (80009ac <HAL_InitTick+0x5c>)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000996:	2300      	movs	r3, #0
 8000998:	e000      	b.n	800099c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800099a:	2301      	movs	r3, #1
}
 800099c:	4618      	mov	r0, r3
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000004 	.word	0x20000004
 80009a8:	2000000c 	.word	0x2000000c
 80009ac:	20000008 	.word	0x20000008

080009b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009b4:	4b05      	ldr	r3, [pc, #20]	@ (80009cc <HAL_IncTick+0x1c>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	461a      	mov	r2, r3
 80009ba:	4b05      	ldr	r3, [pc, #20]	@ (80009d0 <HAL_IncTick+0x20>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4413      	add	r3, r2
 80009c0:	4a03      	ldr	r2, [pc, #12]	@ (80009d0 <HAL_IncTick+0x20>)
 80009c2:	6013      	str	r3, [r2, #0]
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr
 80009cc:	2000000c 	.word	0x2000000c
 80009d0:	2000024c 	.word	0x2000024c

080009d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  return uwTick;
 80009d8:	4b02      	ldr	r3, [pc, #8]	@ (80009e4 <HAL_GetTick+0x10>)
 80009da:	681b      	ldr	r3, [r3, #0]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr
 80009e4:	2000024c 	.word	0x2000024c

080009e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009f0:	f7ff fff0 	bl	80009d4 <HAL_GetTick>
 80009f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a00:	d005      	beq.n	8000a0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a02:	4b0a      	ldr	r3, [pc, #40]	@ (8000a2c <HAL_Delay+0x44>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	461a      	mov	r2, r3
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a0e:	bf00      	nop
 8000a10:	f7ff ffe0 	bl	80009d4 <HAL_GetTick>
 8000a14:	4602      	mov	r2, r0
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	1ad3      	subs	r3, r2, r3
 8000a1a:	68fa      	ldr	r2, [r7, #12]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d8f7      	bhi.n	8000a10 <HAL_Delay+0x28>
  {
  }
}
 8000a20:	bf00      	nop
 8000a22:	bf00      	nop
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	2000000c 	.word	0x2000000c

08000a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f003 0307 	and.w	r3, r3, #7
 8000a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a40:	4b0c      	ldr	r3, [pc, #48]	@ (8000a74 <__NVIC_SetPriorityGrouping+0x44>)
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a46:	68ba      	ldr	r2, [r7, #8]
 8000a48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a62:	4a04      	ldr	r2, [pc, #16]	@ (8000a74 <__NVIC_SetPriorityGrouping+0x44>)
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	60d3      	str	r3, [r2, #12]
}
 8000a68:	bf00      	nop
 8000a6a:	3714      	adds	r7, #20
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bc80      	pop	{r7}
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a7c:	4b04      	ldr	r3, [pc, #16]	@ (8000a90 <__NVIC_GetPriorityGrouping+0x18>)
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	0a1b      	lsrs	r3, r3, #8
 8000a82:	f003 0307 	and.w	r3, r3, #7
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bc80      	pop	{r7}
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	db0b      	blt.n	8000abe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	f003 021f 	and.w	r2, r3, #31
 8000aac:	4906      	ldr	r1, [pc, #24]	@ (8000ac8 <__NVIC_EnableIRQ+0x34>)
 8000aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab2:	095b      	lsrs	r3, r3, #5
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000abe:	bf00      	nop
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr
 8000ac8:	e000e100 	.word	0xe000e100

08000acc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	6039      	str	r1, [r7, #0]
 8000ad6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	db0a      	blt.n	8000af6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	b2da      	uxtb	r2, r3
 8000ae4:	490c      	ldr	r1, [pc, #48]	@ (8000b18 <__NVIC_SetPriority+0x4c>)
 8000ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aea:	0112      	lsls	r2, r2, #4
 8000aec:	b2d2      	uxtb	r2, r2
 8000aee:	440b      	add	r3, r1
 8000af0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000af4:	e00a      	b.n	8000b0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	b2da      	uxtb	r2, r3
 8000afa:	4908      	ldr	r1, [pc, #32]	@ (8000b1c <__NVIC_SetPriority+0x50>)
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	f003 030f 	and.w	r3, r3, #15
 8000b02:	3b04      	subs	r3, #4
 8000b04:	0112      	lsls	r2, r2, #4
 8000b06:	b2d2      	uxtb	r2, r2
 8000b08:	440b      	add	r3, r1
 8000b0a:	761a      	strb	r2, [r3, #24]
}
 8000b0c:	bf00      	nop
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bc80      	pop	{r7}
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	e000e100 	.word	0xe000e100
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b089      	sub	sp, #36	@ 0x24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	f003 0307 	and.w	r3, r3, #7
 8000b32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b34:	69fb      	ldr	r3, [r7, #28]
 8000b36:	f1c3 0307 	rsb	r3, r3, #7
 8000b3a:	2b04      	cmp	r3, #4
 8000b3c:	bf28      	it	cs
 8000b3e:	2304      	movcs	r3, #4
 8000b40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	3304      	adds	r3, #4
 8000b46:	2b06      	cmp	r3, #6
 8000b48:	d902      	bls.n	8000b50 <NVIC_EncodePriority+0x30>
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	3b03      	subs	r3, #3
 8000b4e:	e000      	b.n	8000b52 <NVIC_EncodePriority+0x32>
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b54:	f04f 32ff 	mov.w	r2, #4294967295
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5e:	43da      	mvns	r2, r3
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	401a      	ands	r2, r3
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b68:	f04f 31ff 	mov.w	r1, #4294967295
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b72:	43d9      	mvns	r1, r3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b78:	4313      	orrs	r3, r2
         );
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3724      	adds	r7, #36	@ 0x24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr

08000b84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b94:	d301      	bcc.n	8000b9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b96:	2301      	movs	r3, #1
 8000b98:	e00f      	b.n	8000bba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc4 <SysTick_Config+0x40>)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ba2:	210f      	movs	r1, #15
 8000ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba8:	f7ff ff90 	bl	8000acc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bac:	4b05      	ldr	r3, [pc, #20]	@ (8000bc4 <SysTick_Config+0x40>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bb2:	4b04      	ldr	r3, [pc, #16]	@ (8000bc4 <SysTick_Config+0x40>)
 8000bb4:	2207      	movs	r2, #7
 8000bb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	e000e010 	.word	0xe000e010

08000bc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f7ff ff2d 	bl	8000a30 <__NVIC_SetPriorityGrouping>
}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b086      	sub	sp, #24
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	4603      	mov	r3, r0
 8000be6:	60b9      	str	r1, [r7, #8]
 8000be8:	607a      	str	r2, [r7, #4]
 8000bea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bf0:	f7ff ff42 	bl	8000a78 <__NVIC_GetPriorityGrouping>
 8000bf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	68b9      	ldr	r1, [r7, #8]
 8000bfa:	6978      	ldr	r0, [r7, #20]
 8000bfc:	f7ff ff90 	bl	8000b20 <NVIC_EncodePriority>
 8000c00:	4602      	mov	r2, r0
 8000c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c06:	4611      	mov	r1, r2
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff ff5f 	bl	8000acc <__NVIC_SetPriority>
}
 8000c0e:	bf00      	nop
 8000c10:	3718      	adds	r7, #24
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b082      	sub	sp, #8
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff ff35 	bl	8000a94 <__NVIC_EnableIRQ>
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f7ff ffa2 	bl	8000b84 <SysTick_Config>
 8000c40:	4603      	mov	r3, r0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b08b      	sub	sp, #44	@ 0x2c
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c56:	2300      	movs	r3, #0
 8000c58:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c5e:	e169      	b.n	8000f34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c60:	2201      	movs	r2, #1
 8000c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	69fa      	ldr	r2, [r7, #28]
 8000c70:	4013      	ands	r3, r2
 8000c72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	f040 8158 	bne.w	8000f2e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	4a9a      	ldr	r2, [pc, #616]	@ (8000eec <HAL_GPIO_Init+0x2a0>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d05e      	beq.n	8000d46 <HAL_GPIO_Init+0xfa>
 8000c88:	4a98      	ldr	r2, [pc, #608]	@ (8000eec <HAL_GPIO_Init+0x2a0>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d875      	bhi.n	8000d7a <HAL_GPIO_Init+0x12e>
 8000c8e:	4a98      	ldr	r2, [pc, #608]	@ (8000ef0 <HAL_GPIO_Init+0x2a4>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d058      	beq.n	8000d46 <HAL_GPIO_Init+0xfa>
 8000c94:	4a96      	ldr	r2, [pc, #600]	@ (8000ef0 <HAL_GPIO_Init+0x2a4>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d86f      	bhi.n	8000d7a <HAL_GPIO_Init+0x12e>
 8000c9a:	4a96      	ldr	r2, [pc, #600]	@ (8000ef4 <HAL_GPIO_Init+0x2a8>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d052      	beq.n	8000d46 <HAL_GPIO_Init+0xfa>
 8000ca0:	4a94      	ldr	r2, [pc, #592]	@ (8000ef4 <HAL_GPIO_Init+0x2a8>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d869      	bhi.n	8000d7a <HAL_GPIO_Init+0x12e>
 8000ca6:	4a94      	ldr	r2, [pc, #592]	@ (8000ef8 <HAL_GPIO_Init+0x2ac>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d04c      	beq.n	8000d46 <HAL_GPIO_Init+0xfa>
 8000cac:	4a92      	ldr	r2, [pc, #584]	@ (8000ef8 <HAL_GPIO_Init+0x2ac>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d863      	bhi.n	8000d7a <HAL_GPIO_Init+0x12e>
 8000cb2:	4a92      	ldr	r2, [pc, #584]	@ (8000efc <HAL_GPIO_Init+0x2b0>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d046      	beq.n	8000d46 <HAL_GPIO_Init+0xfa>
 8000cb8:	4a90      	ldr	r2, [pc, #576]	@ (8000efc <HAL_GPIO_Init+0x2b0>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d85d      	bhi.n	8000d7a <HAL_GPIO_Init+0x12e>
 8000cbe:	2b12      	cmp	r3, #18
 8000cc0:	d82a      	bhi.n	8000d18 <HAL_GPIO_Init+0xcc>
 8000cc2:	2b12      	cmp	r3, #18
 8000cc4:	d859      	bhi.n	8000d7a <HAL_GPIO_Init+0x12e>
 8000cc6:	a201      	add	r2, pc, #4	@ (adr r2, 8000ccc <HAL_GPIO_Init+0x80>)
 8000cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ccc:	08000d47 	.word	0x08000d47
 8000cd0:	08000d21 	.word	0x08000d21
 8000cd4:	08000d33 	.word	0x08000d33
 8000cd8:	08000d75 	.word	0x08000d75
 8000cdc:	08000d7b 	.word	0x08000d7b
 8000ce0:	08000d7b 	.word	0x08000d7b
 8000ce4:	08000d7b 	.word	0x08000d7b
 8000ce8:	08000d7b 	.word	0x08000d7b
 8000cec:	08000d7b 	.word	0x08000d7b
 8000cf0:	08000d7b 	.word	0x08000d7b
 8000cf4:	08000d7b 	.word	0x08000d7b
 8000cf8:	08000d7b 	.word	0x08000d7b
 8000cfc:	08000d7b 	.word	0x08000d7b
 8000d00:	08000d7b 	.word	0x08000d7b
 8000d04:	08000d7b 	.word	0x08000d7b
 8000d08:	08000d7b 	.word	0x08000d7b
 8000d0c:	08000d7b 	.word	0x08000d7b
 8000d10:	08000d29 	.word	0x08000d29
 8000d14:	08000d3d 	.word	0x08000d3d
 8000d18:	4a79      	ldr	r2, [pc, #484]	@ (8000f00 <HAL_GPIO_Init+0x2b4>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d013      	beq.n	8000d46 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d1e:	e02c      	b.n	8000d7a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	623b      	str	r3, [r7, #32]
          break;
 8000d26:	e029      	b.n	8000d7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	623b      	str	r3, [r7, #32]
          break;
 8000d30:	e024      	b.n	8000d7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	68db      	ldr	r3, [r3, #12]
 8000d36:	3308      	adds	r3, #8
 8000d38:	623b      	str	r3, [r7, #32]
          break;
 8000d3a:	e01f      	b.n	8000d7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	330c      	adds	r3, #12
 8000d42:	623b      	str	r3, [r7, #32]
          break;
 8000d44:	e01a      	b.n	8000d7c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d102      	bne.n	8000d54 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d4e:	2304      	movs	r3, #4
 8000d50:	623b      	str	r3, [r7, #32]
          break;
 8000d52:	e013      	b.n	8000d7c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d105      	bne.n	8000d68 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d5c:	2308      	movs	r3, #8
 8000d5e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	69fa      	ldr	r2, [r7, #28]
 8000d64:	611a      	str	r2, [r3, #16]
          break;
 8000d66:	e009      	b.n	8000d7c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d68:	2308      	movs	r3, #8
 8000d6a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	69fa      	ldr	r2, [r7, #28]
 8000d70:	615a      	str	r2, [r3, #20]
          break;
 8000d72:	e003      	b.n	8000d7c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d74:	2300      	movs	r3, #0
 8000d76:	623b      	str	r3, [r7, #32]
          break;
 8000d78:	e000      	b.n	8000d7c <HAL_GPIO_Init+0x130>
          break;
 8000d7a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	2bff      	cmp	r3, #255	@ 0xff
 8000d80:	d801      	bhi.n	8000d86 <HAL_GPIO_Init+0x13a>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	e001      	b.n	8000d8a <HAL_GPIO_Init+0x13e>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	3304      	adds	r3, #4
 8000d8a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	2bff      	cmp	r3, #255	@ 0xff
 8000d90:	d802      	bhi.n	8000d98 <HAL_GPIO_Init+0x14c>
 8000d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	e002      	b.n	8000d9e <HAL_GPIO_Init+0x152>
 8000d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d9a:	3b08      	subs	r3, #8
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	210f      	movs	r1, #15
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dac:	43db      	mvns	r3, r3
 8000dae:	401a      	ands	r2, r3
 8000db0:	6a39      	ldr	r1, [r7, #32]
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	fa01 f303 	lsl.w	r3, r1, r3
 8000db8:	431a      	orrs	r2, r3
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	f000 80b1 	beq.w	8000f2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000dcc:	4b4d      	ldr	r3, [pc, #308]	@ (8000f04 <HAL_GPIO_Init+0x2b8>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	4a4c      	ldr	r2, [pc, #304]	@ (8000f04 <HAL_GPIO_Init+0x2b8>)
 8000dd2:	f043 0301 	orr.w	r3, r3, #1
 8000dd6:	6193      	str	r3, [r2, #24]
 8000dd8:	4b4a      	ldr	r3, [pc, #296]	@ (8000f04 <HAL_GPIO_Init+0x2b8>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	f003 0301 	and.w	r3, r3, #1
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000de4:	4a48      	ldr	r2, [pc, #288]	@ (8000f08 <HAL_GPIO_Init+0x2bc>)
 8000de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000de8:	089b      	lsrs	r3, r3, #2
 8000dea:	3302      	adds	r3, #2
 8000dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000df4:	f003 0303 	and.w	r3, r3, #3
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	220f      	movs	r2, #15
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	4013      	ands	r3, r2
 8000e06:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4a40      	ldr	r2, [pc, #256]	@ (8000f0c <HAL_GPIO_Init+0x2c0>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d013      	beq.n	8000e38 <HAL_GPIO_Init+0x1ec>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4a3f      	ldr	r2, [pc, #252]	@ (8000f10 <HAL_GPIO_Init+0x2c4>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d00d      	beq.n	8000e34 <HAL_GPIO_Init+0x1e8>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	4a3e      	ldr	r2, [pc, #248]	@ (8000f14 <HAL_GPIO_Init+0x2c8>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d007      	beq.n	8000e30 <HAL_GPIO_Init+0x1e4>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4a3d      	ldr	r2, [pc, #244]	@ (8000f18 <HAL_GPIO_Init+0x2cc>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d101      	bne.n	8000e2c <HAL_GPIO_Init+0x1e0>
 8000e28:	2303      	movs	r3, #3
 8000e2a:	e006      	b.n	8000e3a <HAL_GPIO_Init+0x1ee>
 8000e2c:	2304      	movs	r3, #4
 8000e2e:	e004      	b.n	8000e3a <HAL_GPIO_Init+0x1ee>
 8000e30:	2302      	movs	r3, #2
 8000e32:	e002      	b.n	8000e3a <HAL_GPIO_Init+0x1ee>
 8000e34:	2301      	movs	r3, #1
 8000e36:	e000      	b.n	8000e3a <HAL_GPIO_Init+0x1ee>
 8000e38:	2300      	movs	r3, #0
 8000e3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e3c:	f002 0203 	and.w	r2, r2, #3
 8000e40:	0092      	lsls	r2, r2, #2
 8000e42:	4093      	lsls	r3, r2
 8000e44:	68fa      	ldr	r2, [r7, #12]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e4a:	492f      	ldr	r1, [pc, #188]	@ (8000f08 <HAL_GPIO_Init+0x2bc>)
 8000e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e4e:	089b      	lsrs	r3, r3, #2
 8000e50:	3302      	adds	r3, #2
 8000e52:	68fa      	ldr	r2, [r7, #12]
 8000e54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d006      	beq.n	8000e72 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e64:	4b2d      	ldr	r3, [pc, #180]	@ (8000f1c <HAL_GPIO_Init+0x2d0>)
 8000e66:	689a      	ldr	r2, [r3, #8]
 8000e68:	492c      	ldr	r1, [pc, #176]	@ (8000f1c <HAL_GPIO_Init+0x2d0>)
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	608b      	str	r3, [r1, #8]
 8000e70:	e006      	b.n	8000e80 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e72:	4b2a      	ldr	r3, [pc, #168]	@ (8000f1c <HAL_GPIO_Init+0x2d0>)
 8000e74:	689a      	ldr	r2, [r3, #8]
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	4928      	ldr	r1, [pc, #160]	@ (8000f1c <HAL_GPIO_Init+0x2d0>)
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d006      	beq.n	8000e9a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e8c:	4b23      	ldr	r3, [pc, #140]	@ (8000f1c <HAL_GPIO_Init+0x2d0>)
 8000e8e:	68da      	ldr	r2, [r3, #12]
 8000e90:	4922      	ldr	r1, [pc, #136]	@ (8000f1c <HAL_GPIO_Init+0x2d0>)
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	60cb      	str	r3, [r1, #12]
 8000e98:	e006      	b.n	8000ea8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e9a:	4b20      	ldr	r3, [pc, #128]	@ (8000f1c <HAL_GPIO_Init+0x2d0>)
 8000e9c:	68da      	ldr	r2, [r3, #12]
 8000e9e:	69bb      	ldr	r3, [r7, #24]
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	491e      	ldr	r1, [pc, #120]	@ (8000f1c <HAL_GPIO_Init+0x2d0>)
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d006      	beq.n	8000ec2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000eb4:	4b19      	ldr	r3, [pc, #100]	@ (8000f1c <HAL_GPIO_Init+0x2d0>)
 8000eb6:	685a      	ldr	r2, [r3, #4]
 8000eb8:	4918      	ldr	r1, [pc, #96]	@ (8000f1c <HAL_GPIO_Init+0x2d0>)
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	604b      	str	r3, [r1, #4]
 8000ec0:	e006      	b.n	8000ed0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ec2:	4b16      	ldr	r3, [pc, #88]	@ (8000f1c <HAL_GPIO_Init+0x2d0>)
 8000ec4:	685a      	ldr	r2, [r3, #4]
 8000ec6:	69bb      	ldr	r3, [r7, #24]
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	4914      	ldr	r1, [pc, #80]	@ (8000f1c <HAL_GPIO_Init+0x2d0>)
 8000ecc:	4013      	ands	r3, r2
 8000ece:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d021      	beq.n	8000f20 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000edc:	4b0f      	ldr	r3, [pc, #60]	@ (8000f1c <HAL_GPIO_Init+0x2d0>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	490e      	ldr	r1, [pc, #56]	@ (8000f1c <HAL_GPIO_Init+0x2d0>)
 8000ee2:	69bb      	ldr	r3, [r7, #24]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	600b      	str	r3, [r1, #0]
 8000ee8:	e021      	b.n	8000f2e <HAL_GPIO_Init+0x2e2>
 8000eea:	bf00      	nop
 8000eec:	10320000 	.word	0x10320000
 8000ef0:	10310000 	.word	0x10310000
 8000ef4:	10220000 	.word	0x10220000
 8000ef8:	10210000 	.word	0x10210000
 8000efc:	10120000 	.word	0x10120000
 8000f00:	10110000 	.word	0x10110000
 8000f04:	40021000 	.word	0x40021000
 8000f08:	40010000 	.word	0x40010000
 8000f0c:	40010800 	.word	0x40010800
 8000f10:	40010c00 	.word	0x40010c00
 8000f14:	40011000 	.word	0x40011000
 8000f18:	40011400 	.word	0x40011400
 8000f1c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f20:	4b0b      	ldr	r3, [pc, #44]	@ (8000f50 <HAL_GPIO_Init+0x304>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	43db      	mvns	r3, r3
 8000f28:	4909      	ldr	r1, [pc, #36]	@ (8000f50 <HAL_GPIO_Init+0x304>)
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f30:	3301      	adds	r3, #1
 8000f32:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	f47f ae8e 	bne.w	8000c60 <HAL_GPIO_Init+0x14>
  }
}
 8000f44:	bf00      	nop
 8000f46:	bf00      	nop
 8000f48:	372c      	adds	r7, #44	@ 0x2c
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bc80      	pop	{r7}
 8000f4e:	4770      	bx	lr
 8000f50:	40010400 	.word	0x40010400

08000f54 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b089      	sub	sp, #36	@ 0x24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8000f62:	e09a      	b.n	800109a <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8000f64:	2201      	movs	r2, #1
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	683a      	ldr	r2, [r7, #0]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	f000 808d 	beq.w	8001094 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8000f7a:	4a4e      	ldr	r2, [pc, #312]	@ (80010b4 <HAL_GPIO_DeInit+0x160>)
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	089b      	lsrs	r3, r3, #2
 8000f80:	3302      	adds	r3, #2
 8000f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f86:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	f003 0303 	and.w	r3, r3, #3
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	220f      	movs	r2, #15
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	697a      	ldr	r2, [r7, #20]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a46      	ldr	r2, [pc, #280]	@ (80010b8 <HAL_GPIO_DeInit+0x164>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d013      	beq.n	8000fcc <HAL_GPIO_DeInit+0x78>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4a45      	ldr	r2, [pc, #276]	@ (80010bc <HAL_GPIO_DeInit+0x168>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d00d      	beq.n	8000fc8 <HAL_GPIO_DeInit+0x74>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4a44      	ldr	r2, [pc, #272]	@ (80010c0 <HAL_GPIO_DeInit+0x16c>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d007      	beq.n	8000fc4 <HAL_GPIO_DeInit+0x70>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4a43      	ldr	r2, [pc, #268]	@ (80010c4 <HAL_GPIO_DeInit+0x170>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d101      	bne.n	8000fc0 <HAL_GPIO_DeInit+0x6c>
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	e006      	b.n	8000fce <HAL_GPIO_DeInit+0x7a>
 8000fc0:	2304      	movs	r3, #4
 8000fc2:	e004      	b.n	8000fce <HAL_GPIO_DeInit+0x7a>
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	e002      	b.n	8000fce <HAL_GPIO_DeInit+0x7a>
 8000fc8:	2301      	movs	r3, #1
 8000fca:	e000      	b.n	8000fce <HAL_GPIO_DeInit+0x7a>
 8000fcc:	2300      	movs	r3, #0
 8000fce:	69fa      	ldr	r2, [r7, #28]
 8000fd0:	f002 0203 	and.w	r2, r2, #3
 8000fd4:	0092      	lsls	r2, r2, #2
 8000fd6:	4093      	lsls	r3, r2
 8000fd8:	697a      	ldr	r2, [r7, #20]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d132      	bne.n	8001044 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8000fde:	4b3a      	ldr	r3, [pc, #232]	@ (80010c8 <HAL_GPIO_DeInit+0x174>)
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	4938      	ldr	r1, [pc, #224]	@ (80010c8 <HAL_GPIO_DeInit+0x174>)
 8000fe8:	4013      	ands	r3, r2
 8000fea:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8000fec:	4b36      	ldr	r3, [pc, #216]	@ (80010c8 <HAL_GPIO_DeInit+0x174>)
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	4934      	ldr	r1, [pc, #208]	@ (80010c8 <HAL_GPIO_DeInit+0x174>)
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8000ffa:	4b33      	ldr	r3, [pc, #204]	@ (80010c8 <HAL_GPIO_DeInit+0x174>)
 8000ffc:	68da      	ldr	r2, [r3, #12]
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	43db      	mvns	r3, r3
 8001002:	4931      	ldr	r1, [pc, #196]	@ (80010c8 <HAL_GPIO_DeInit+0x174>)
 8001004:	4013      	ands	r3, r2
 8001006:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8001008:	4b2f      	ldr	r3, [pc, #188]	@ (80010c8 <HAL_GPIO_DeInit+0x174>)
 800100a:	689a      	ldr	r2, [r3, #8]
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	43db      	mvns	r3, r3
 8001010:	492d      	ldr	r1, [pc, #180]	@ (80010c8 <HAL_GPIO_DeInit+0x174>)
 8001012:	4013      	ands	r3, r2
 8001014:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	f003 0303 	and.w	r3, r3, #3
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	220f      	movs	r2, #15
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8001026:	4a23      	ldr	r2, [pc, #140]	@ (80010b4 <HAL_GPIO_DeInit+0x160>)
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	089b      	lsrs	r3, r3, #2
 800102c:	3302      	adds	r3, #2
 800102e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	43da      	mvns	r2, r3
 8001036:	481f      	ldr	r0, [pc, #124]	@ (80010b4 <HAL_GPIO_DeInit+0x160>)
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	089b      	lsrs	r3, r3, #2
 800103c:	400a      	ands	r2, r1
 800103e:	3302      	adds	r3, #2
 8001040:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	2bff      	cmp	r3, #255	@ 0xff
 8001048:	d801      	bhi.n	800104e <HAL_GPIO_DeInit+0xfa>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	e001      	b.n	8001052 <HAL_GPIO_DeInit+0xfe>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	3304      	adds	r3, #4
 8001052:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	2bff      	cmp	r3, #255	@ 0xff
 8001058:	d802      	bhi.n	8001060 <HAL_GPIO_DeInit+0x10c>
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	e002      	b.n	8001066 <HAL_GPIO_DeInit+0x112>
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	3b08      	subs	r3, #8
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	210f      	movs	r1, #15
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	fa01 f303 	lsl.w	r3, r1, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	401a      	ands	r2, r3
 8001078:	2104      	movs	r1, #4
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	fa01 f303 	lsl.w	r3, r1, r3
 8001080:	431a      	orrs	r2, r3
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	68da      	ldr	r2, [r3, #12]
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	43db      	mvns	r3, r3
 800108e:	401a      	ands	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	60da      	str	r2, [r3, #12]
    }

    position++;
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	3301      	adds	r3, #1
 8001098:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800109a:	683a      	ldr	r2, [r7, #0]
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	fa22 f303 	lsr.w	r3, r2, r3
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	f47f af5e 	bne.w	8000f64 <HAL_GPIO_DeInit+0x10>
  }
}
 80010a8:	bf00      	nop
 80010aa:	bf00      	nop
 80010ac:	3724      	adds	r7, #36	@ 0x24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr
 80010b4:	40010000 	.word	0x40010000
 80010b8:	40010800 	.word	0x40010800
 80010bc:	40010c00 	.word	0x40010c00
 80010c0:	40011000 	.word	0x40011000
 80010c4:	40011400 	.word	0x40011400
 80010c8:	40010400 	.word	0x40010400

080010cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	460b      	mov	r3, r1
 80010d6:	807b      	strh	r3, [r7, #2]
 80010d8:	4613      	mov	r3, r2
 80010da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010dc:	787b      	ldrb	r3, [r7, #1]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010e2:	887a      	ldrh	r2, [r7, #2]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80010e8:	e003      	b.n	80010f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010ea:	887b      	ldrh	r3, [r7, #2]
 80010ec:	041a      	lsls	r2, r3, #16
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	611a      	str	r2, [r3, #16]
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr

080010fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d101      	bne.n	800110e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e12b      	b.n	8001366 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001114:	b2db      	uxtb	r3, r3
 8001116:	2b00      	cmp	r3, #0
 8001118:	d106      	bne.n	8001128 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f7ff f9fa 	bl	800051c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2224      	movs	r2, #36	@ 0x24
 800112c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f022 0201 	bic.w	r2, r2, #1
 800113e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800114e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800115e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001160:	f003 f98c 	bl	800447c <HAL_RCC_GetPCLK1Freq>
 8001164:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	4a81      	ldr	r2, [pc, #516]	@ (8001370 <HAL_I2C_Init+0x274>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d807      	bhi.n	8001180 <HAL_I2C_Init+0x84>
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	4a80      	ldr	r2, [pc, #512]	@ (8001374 <HAL_I2C_Init+0x278>)
 8001174:	4293      	cmp	r3, r2
 8001176:	bf94      	ite	ls
 8001178:	2301      	movls	r3, #1
 800117a:	2300      	movhi	r3, #0
 800117c:	b2db      	uxtb	r3, r3
 800117e:	e006      	b.n	800118e <HAL_I2C_Init+0x92>
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4a7d      	ldr	r2, [pc, #500]	@ (8001378 <HAL_I2C_Init+0x27c>)
 8001184:	4293      	cmp	r3, r2
 8001186:	bf94      	ite	ls
 8001188:	2301      	movls	r3, #1
 800118a:	2300      	movhi	r3, #0
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e0e7      	b.n	8001366 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	4a78      	ldr	r2, [pc, #480]	@ (800137c <HAL_I2C_Init+0x280>)
 800119a:	fba2 2303 	umull	r2, r3, r2, r3
 800119e:	0c9b      	lsrs	r3, r3, #18
 80011a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	68ba      	ldr	r2, [r7, #8]
 80011b2:	430a      	orrs	r2, r1
 80011b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	6a1b      	ldr	r3, [r3, #32]
 80011bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	4a6a      	ldr	r2, [pc, #424]	@ (8001370 <HAL_I2C_Init+0x274>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d802      	bhi.n	80011d0 <HAL_I2C_Init+0xd4>
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	3301      	adds	r3, #1
 80011ce:	e009      	b.n	80011e4 <HAL_I2C_Init+0xe8>
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80011d6:	fb02 f303 	mul.w	r3, r2, r3
 80011da:	4a69      	ldr	r2, [pc, #420]	@ (8001380 <HAL_I2C_Init+0x284>)
 80011dc:	fba2 2303 	umull	r2, r3, r2, r3
 80011e0:	099b      	lsrs	r3, r3, #6
 80011e2:	3301      	adds	r3, #1
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	6812      	ldr	r2, [r2, #0]
 80011e8:	430b      	orrs	r3, r1
 80011ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80011f6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	495c      	ldr	r1, [pc, #368]	@ (8001370 <HAL_I2C_Init+0x274>)
 8001200:	428b      	cmp	r3, r1
 8001202:	d819      	bhi.n	8001238 <HAL_I2C_Init+0x13c>
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	1e59      	subs	r1, r3, #1
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001212:	1c59      	adds	r1, r3, #1
 8001214:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001218:	400b      	ands	r3, r1
 800121a:	2b00      	cmp	r3, #0
 800121c:	d00a      	beq.n	8001234 <HAL_I2C_Init+0x138>
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	1e59      	subs	r1, r3, #1
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	fbb1 f3f3 	udiv	r3, r1, r3
 800122c:	3301      	adds	r3, #1
 800122e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001232:	e051      	b.n	80012d8 <HAL_I2C_Init+0x1dc>
 8001234:	2304      	movs	r3, #4
 8001236:	e04f      	b.n	80012d8 <HAL_I2C_Init+0x1dc>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d111      	bne.n	8001264 <HAL_I2C_Init+0x168>
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	1e58      	subs	r0, r3, #1
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6859      	ldr	r1, [r3, #4]
 8001248:	460b      	mov	r3, r1
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	440b      	add	r3, r1
 800124e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001252:	3301      	adds	r3, #1
 8001254:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001258:	2b00      	cmp	r3, #0
 800125a:	bf0c      	ite	eq
 800125c:	2301      	moveq	r3, #1
 800125e:	2300      	movne	r3, #0
 8001260:	b2db      	uxtb	r3, r3
 8001262:	e012      	b.n	800128a <HAL_I2C_Init+0x18e>
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	1e58      	subs	r0, r3, #1
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6859      	ldr	r1, [r3, #4]
 800126c:	460b      	mov	r3, r1
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	440b      	add	r3, r1
 8001272:	0099      	lsls	r1, r3, #2
 8001274:	440b      	add	r3, r1
 8001276:	fbb0 f3f3 	udiv	r3, r0, r3
 800127a:	3301      	adds	r3, #1
 800127c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001280:	2b00      	cmp	r3, #0
 8001282:	bf0c      	ite	eq
 8001284:	2301      	moveq	r3, #1
 8001286:	2300      	movne	r3, #0
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <HAL_I2C_Init+0x196>
 800128e:	2301      	movs	r3, #1
 8001290:	e022      	b.n	80012d8 <HAL_I2C_Init+0x1dc>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d10e      	bne.n	80012b8 <HAL_I2C_Init+0x1bc>
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	1e58      	subs	r0, r3, #1
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6859      	ldr	r1, [r3, #4]
 80012a2:	460b      	mov	r3, r1
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	440b      	add	r3, r1
 80012a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80012ac:	3301      	adds	r3, #1
 80012ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80012b6:	e00f      	b.n	80012d8 <HAL_I2C_Init+0x1dc>
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	1e58      	subs	r0, r3, #1
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6859      	ldr	r1, [r3, #4]
 80012c0:	460b      	mov	r3, r1
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	440b      	add	r3, r1
 80012c6:	0099      	lsls	r1, r3, #2
 80012c8:	440b      	add	r3, r1
 80012ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80012ce:	3301      	adds	r3, #1
 80012d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80012d8:	6879      	ldr	r1, [r7, #4]
 80012da:	6809      	ldr	r1, [r1, #0]
 80012dc:	4313      	orrs	r3, r2
 80012de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	69da      	ldr	r2, [r3, #28]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6a1b      	ldr	r3, [r3, #32]
 80012f2:	431a      	orrs	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	430a      	orrs	r2, r1
 80012fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001306:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	6911      	ldr	r1, [r2, #16]
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	68d2      	ldr	r2, [r2, #12]
 8001312:	4311      	orrs	r1, r2
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	6812      	ldr	r2, [r2, #0]
 8001318:	430b      	orrs	r3, r1
 800131a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	695a      	ldr	r2, [r3, #20]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	431a      	orrs	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	430a      	orrs	r2, r1
 8001336:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f042 0201 	orr.w	r2, r2, #1
 8001346:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2220      	movs	r2, #32
 8001352:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	000186a0 	.word	0x000186a0
 8001374:	001e847f 	.word	0x001e847f
 8001378:	003d08ff 	.word	0x003d08ff
 800137c:	431bde83 	.word	0x431bde83
 8001380:	10624dd3 	.word	0x10624dd3

08001384 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d101      	bne.n	8001396 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e021      	b.n	80013da <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2224      	movs	r2, #36	@ 0x24
 800139a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f022 0201 	bic.w	r2, r2, #1
 80013ac:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff f8f2 	bl	8000598 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
	...

080013e4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b088      	sub	sp, #32
 80013e8:	af02      	add	r7, sp, #8
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	4608      	mov	r0, r1
 80013ee:	4611      	mov	r1, r2
 80013f0:	461a      	mov	r2, r3
 80013f2:	4603      	mov	r3, r0
 80013f4:	817b      	strh	r3, [r7, #10]
 80013f6:	460b      	mov	r3, r1
 80013f8:	813b      	strh	r3, [r7, #8]
 80013fa:	4613      	mov	r3, r2
 80013fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80013fe:	f7ff fae9 	bl	80009d4 <HAL_GetTick>
 8001402:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800140a:	b2db      	uxtb	r3, r3
 800140c:	2b20      	cmp	r3, #32
 800140e:	f040 80d9 	bne.w	80015c4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	2319      	movs	r3, #25
 8001418:	2201      	movs	r2, #1
 800141a:	496d      	ldr	r1, [pc, #436]	@ (80015d0 <HAL_I2C_Mem_Write+0x1ec>)
 800141c:	68f8      	ldr	r0, [r7, #12]
 800141e:	f000 fccd 	bl	8001dbc <I2C_WaitOnFlagUntilTimeout>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001428:	2302      	movs	r3, #2
 800142a:	e0cc      	b.n	80015c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001432:	2b01      	cmp	r3, #1
 8001434:	d101      	bne.n	800143a <HAL_I2C_Mem_Write+0x56>
 8001436:	2302      	movs	r3, #2
 8001438:	e0c5      	b.n	80015c6 <HAL_I2C_Mem_Write+0x1e2>
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	2201      	movs	r2, #1
 800143e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	2b01      	cmp	r3, #1
 800144e:	d007      	beq.n	8001460 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f042 0201 	orr.w	r2, r2, #1
 800145e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800146e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2221      	movs	r2, #33	@ 0x21
 8001474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2240      	movs	r2, #64	@ 0x40
 800147c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2200      	movs	r2, #0
 8001484:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	6a3a      	ldr	r2, [r7, #32]
 800148a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001490:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001496:	b29a      	uxth	r2, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	4a4d      	ldr	r2, [pc, #308]	@ (80015d4 <HAL_I2C_Mem_Write+0x1f0>)
 80014a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80014a2:	88f8      	ldrh	r0, [r7, #6]
 80014a4:	893a      	ldrh	r2, [r7, #8]
 80014a6:	8979      	ldrh	r1, [r7, #10]
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	9301      	str	r3, [sp, #4]
 80014ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	4603      	mov	r3, r0
 80014b2:	68f8      	ldr	r0, [r7, #12]
 80014b4:	f000 fb04 	bl	8001ac0 <I2C_RequestMemoryWrite>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d052      	beq.n	8001564 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e081      	b.n	80015c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014c2:	697a      	ldr	r2, [r7, #20]
 80014c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80014c6:	68f8      	ldr	r0, [r7, #12]
 80014c8:	f000 fd92 	bl	8001ff0 <I2C_WaitOnTXEFlagUntilTimeout>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d00d      	beq.n	80014ee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d6:	2b04      	cmp	r3, #4
 80014d8:	d107      	bne.n	80014ea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80014e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e06b      	b.n	80015c6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014f2:	781a      	ldrb	r2, [r3, #0]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014fe:	1c5a      	adds	r2, r3, #1
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001508:	3b01      	subs	r3, #1
 800150a:	b29a      	uxth	r2, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001514:	b29b      	uxth	r3, r3
 8001516:	3b01      	subs	r3, #1
 8001518:	b29a      	uxth	r2, r3
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	695b      	ldr	r3, [r3, #20]
 8001524:	f003 0304 	and.w	r3, r3, #4
 8001528:	2b04      	cmp	r3, #4
 800152a:	d11b      	bne.n	8001564 <HAL_I2C_Mem_Write+0x180>
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001530:	2b00      	cmp	r3, #0
 8001532:	d017      	beq.n	8001564 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001538:	781a      	ldrb	r2, [r3, #0]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001544:	1c5a      	adds	r2, r3, #1
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800154e:	3b01      	subs	r3, #1
 8001550:	b29a      	uxth	r2, r3
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800155a:	b29b      	uxth	r3, r3
 800155c:	3b01      	subs	r3, #1
 800155e:	b29a      	uxth	r2, r3
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1aa      	bne.n	80014c2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800156c:	697a      	ldr	r2, [r7, #20]
 800156e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001570:	68f8      	ldr	r0, [r7, #12]
 8001572:	f000 fd85 	bl	8002080 <I2C_WaitOnBTFFlagUntilTimeout>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d00d      	beq.n	8001598 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001580:	2b04      	cmp	r3, #4
 8001582:	d107      	bne.n	8001594 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001592:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e016      	b.n	80015c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80015a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	2220      	movs	r2, #32
 80015ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80015c0:	2300      	movs	r3, #0
 80015c2:	e000      	b.n	80015c6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80015c4:	2302      	movs	r3, #2
  }
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3718      	adds	r7, #24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	00100002 	.word	0x00100002
 80015d4:	ffff0000 	.word	0xffff0000

080015d8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08c      	sub	sp, #48	@ 0x30
 80015dc:	af02      	add	r7, sp, #8
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	4608      	mov	r0, r1
 80015e2:	4611      	mov	r1, r2
 80015e4:	461a      	mov	r2, r3
 80015e6:	4603      	mov	r3, r0
 80015e8:	817b      	strh	r3, [r7, #10]
 80015ea:	460b      	mov	r3, r1
 80015ec:	813b      	strh	r3, [r7, #8]
 80015ee:	4613      	mov	r3, r2
 80015f0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80015f2:	2300      	movs	r3, #0
 80015f4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80015f6:	f7ff f9ed 	bl	80009d4 <HAL_GetTick>
 80015fa:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001602:	b2db      	uxtb	r3, r3
 8001604:	2b20      	cmp	r3, #32
 8001606:	f040 8250 	bne.w	8001aaa <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800160a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800160c:	9300      	str	r3, [sp, #0]
 800160e:	2319      	movs	r3, #25
 8001610:	2201      	movs	r2, #1
 8001612:	4982      	ldr	r1, [pc, #520]	@ (800181c <HAL_I2C_Mem_Read+0x244>)
 8001614:	68f8      	ldr	r0, [r7, #12]
 8001616:	f000 fbd1 	bl	8001dbc <I2C_WaitOnFlagUntilTimeout>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001620:	2302      	movs	r3, #2
 8001622:	e243      	b.n	8001aac <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800162a:	2b01      	cmp	r3, #1
 800162c:	d101      	bne.n	8001632 <HAL_I2C_Mem_Read+0x5a>
 800162e:	2302      	movs	r3, #2
 8001630:	e23c      	b.n	8001aac <HAL_I2C_Mem_Read+0x4d4>
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2201      	movs	r2, #1
 8001636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	2b01      	cmp	r3, #1
 8001646:	d007      	beq.n	8001658 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f042 0201 	orr.w	r2, r2, #1
 8001656:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001666:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2222      	movs	r2, #34	@ 0x22
 800166c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2240      	movs	r2, #64	@ 0x40
 8001674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2200      	movs	r2, #0
 800167c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001682:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001688:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800168e:	b29a      	uxth	r2, r3
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4a62      	ldr	r2, [pc, #392]	@ (8001820 <HAL_I2C_Mem_Read+0x248>)
 8001698:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800169a:	88f8      	ldrh	r0, [r7, #6]
 800169c:	893a      	ldrh	r2, [r7, #8]
 800169e:	8979      	ldrh	r1, [r7, #10]
 80016a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a2:	9301      	str	r3, [sp, #4]
 80016a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	4603      	mov	r3, r0
 80016aa:	68f8      	ldr	r0, [r7, #12]
 80016ac:	f000 fa9e 	bl	8001bec <I2C_RequestMemoryRead>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e1f8      	b.n	8001aac <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d113      	bne.n	80016ea <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016c2:	2300      	movs	r3, #0
 80016c4:	61fb      	str	r3, [r7, #28]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	695b      	ldr	r3, [r3, #20]
 80016cc:	61fb      	str	r3, [r7, #28]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	61fb      	str	r3, [r7, #28]
 80016d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	e1cc      	b.n	8001a84 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d11e      	bne.n	8001730 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001700:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001702:	b672      	cpsid	i
}
 8001704:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001706:	2300      	movs	r3, #0
 8001708:	61bb      	str	r3, [r7, #24]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	695b      	ldr	r3, [r3, #20]
 8001710:	61bb      	str	r3, [r7, #24]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	61bb      	str	r3, [r7, #24]
 800171a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800172a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800172c:	b662      	cpsie	i
}
 800172e:	e035      	b.n	800179c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001734:	2b02      	cmp	r3, #2
 8001736:	d11e      	bne.n	8001776 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001746:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001748:	b672      	cpsid	i
}
 800174a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	617b      	str	r3, [r7, #20]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001770:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001772:	b662      	cpsie	i
}
 8001774:	e012      	b.n	800179c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001784:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	695b      	ldr	r3, [r3, #20]
 8001790:	613b      	str	r3, [r7, #16]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	613b      	str	r3, [r7, #16]
 800179a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800179c:	e172      	b.n	8001a84 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017a2:	2b03      	cmp	r3, #3
 80017a4:	f200 811f 	bhi.w	80019e6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d123      	bne.n	80017f8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017b2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80017b4:	68f8      	ldr	r0, [r7, #12]
 80017b6:	f000 fcab 	bl	8002110 <I2C_WaitOnRXNEFlagUntilTimeout>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e173      	b.n	8001aac <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	691a      	ldr	r2, [r3, #16]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ce:	b2d2      	uxtb	r2, r2
 80017d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d6:	1c5a      	adds	r2, r3, #1
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017e0:	3b01      	subs	r3, #1
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	3b01      	subs	r3, #1
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80017f6:	e145      	b.n	8001a84 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d152      	bne.n	80018a6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001806:	2200      	movs	r2, #0
 8001808:	4906      	ldr	r1, [pc, #24]	@ (8001824 <HAL_I2C_Mem_Read+0x24c>)
 800180a:	68f8      	ldr	r0, [r7, #12]
 800180c:	f000 fad6 	bl	8001dbc <I2C_WaitOnFlagUntilTimeout>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d008      	beq.n	8001828 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e148      	b.n	8001aac <HAL_I2C_Mem_Read+0x4d4>
 800181a:	bf00      	nop
 800181c:	00100002 	.word	0x00100002
 8001820:	ffff0000 	.word	0xffff0000
 8001824:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001828:	b672      	cpsid	i
}
 800182a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800183a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	691a      	ldr	r2, [r3, #16]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001846:	b2d2      	uxtb	r2, r2
 8001848:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800184e:	1c5a      	adds	r2, r3, #1
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001858:	3b01      	subs	r3, #1
 800185a:	b29a      	uxth	r2, r3
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001864:	b29b      	uxth	r3, r3
 8001866:	3b01      	subs	r3, #1
 8001868:	b29a      	uxth	r2, r3
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800186e:	b662      	cpsie	i
}
 8001870:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	691a      	ldr	r2, [r3, #16]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187c:	b2d2      	uxtb	r2, r2
 800187e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001884:	1c5a      	adds	r2, r3, #1
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800188e:	3b01      	subs	r3, #1
 8001890:	b29a      	uxth	r2, r3
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800189a:	b29b      	uxth	r3, r3
 800189c:	3b01      	subs	r3, #1
 800189e:	b29a      	uxth	r2, r3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80018a4:	e0ee      	b.n	8001a84 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80018a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a8:	9300      	str	r3, [sp, #0]
 80018aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018ac:	2200      	movs	r2, #0
 80018ae:	4981      	ldr	r1, [pc, #516]	@ (8001ab4 <HAL_I2C_Mem_Read+0x4dc>)
 80018b0:	68f8      	ldr	r0, [r7, #12]
 80018b2:	f000 fa83 	bl	8001dbc <I2C_WaitOnFlagUntilTimeout>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e0f5      	b.n	8001aac <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80018ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80018d0:	b672      	cpsid	i
}
 80018d2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	691a      	ldr	r2, [r3, #16]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e6:	1c5a      	adds	r2, r3, #1
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018f0:	3b01      	subs	r3, #1
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	3b01      	subs	r3, #1
 8001900:	b29a      	uxth	r2, r3
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001906:	4b6c      	ldr	r3, [pc, #432]	@ (8001ab8 <HAL_I2C_Mem_Read+0x4e0>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	08db      	lsrs	r3, r3, #3
 800190c:	4a6b      	ldr	r2, [pc, #428]	@ (8001abc <HAL_I2C_Mem_Read+0x4e4>)
 800190e:	fba2 2303 	umull	r2, r3, r2, r3
 8001912:	0a1a      	lsrs	r2, r3, #8
 8001914:	4613      	mov	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	00da      	lsls	r2, r3, #3
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001920:	6a3b      	ldr	r3, [r7, #32]
 8001922:	3b01      	subs	r3, #1
 8001924:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001926:	6a3b      	ldr	r3, [r7, #32]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d118      	bne.n	800195e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2200      	movs	r2, #0
 8001930:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2220      	movs	r2, #32
 8001936:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001946:	f043 0220 	orr.w	r2, r3, #32
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800194e:	b662      	cpsie	i
}
 8001950:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e0a6      	b.n	8001aac <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	f003 0304 	and.w	r3, r3, #4
 8001968:	2b04      	cmp	r3, #4
 800196a:	d1d9      	bne.n	8001920 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800197a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	691a      	ldr	r2, [r3, #16]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800198e:	1c5a      	adds	r2, r3, #1
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001998:	3b01      	subs	r3, #1
 800199a:	b29a      	uxth	r2, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	3b01      	subs	r3, #1
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80019ae:	b662      	cpsie	i
}
 80019b0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	691a      	ldr	r2, [r3, #16]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c4:	1c5a      	adds	r2, r3, #1
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019ce:	3b01      	subs	r3, #1
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019da:	b29b      	uxth	r3, r3
 80019dc:	3b01      	subs	r3, #1
 80019de:	b29a      	uxth	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80019e4:	e04e      	b.n	8001a84 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019e8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80019ea:	68f8      	ldr	r0, [r7, #12]
 80019ec:	f000 fb90 	bl	8002110 <I2C_WaitOnRXNEFlagUntilTimeout>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e058      	b.n	8001aac <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	691a      	ldr	r2, [r3, #16]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a04:	b2d2      	uxtb	r2, r2
 8001a06:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a0c:	1c5a      	adds	r2, r3, #1
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a16:	3b01      	subs	r3, #1
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	3b01      	subs	r3, #1
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	f003 0304 	and.w	r3, r3, #4
 8001a36:	2b04      	cmp	r3, #4
 8001a38:	d124      	bne.n	8001a84 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a3e:	2b03      	cmp	r3, #3
 8001a40:	d107      	bne.n	8001a52 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a50:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	691a      	ldr	r2, [r3, #16]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a5c:	b2d2      	uxtb	r2, r2
 8001a5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a64:	1c5a      	adds	r2, r3, #1
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f47f ae88 	bne.w	800179e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2220      	movs	r2, #32
 8001a92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	e000      	b.n	8001aac <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8001aaa:	2302      	movs	r3, #2
  }
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3728      	adds	r7, #40	@ 0x28
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	00010004 	.word	0x00010004
 8001ab8:	20000004 	.word	0x20000004
 8001abc:	14f8b589 	.word	0x14f8b589

08001ac0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b088      	sub	sp, #32
 8001ac4:	af02      	add	r7, sp, #8
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	4608      	mov	r0, r1
 8001aca:	4611      	mov	r1, r2
 8001acc:	461a      	mov	r2, r3
 8001ace:	4603      	mov	r3, r0
 8001ad0:	817b      	strh	r3, [r7, #10]
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	813b      	strh	r3, [r7, #8]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ae8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	6a3b      	ldr	r3, [r7, #32]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001af6:	68f8      	ldr	r0, [r7, #12]
 8001af8:	f000 f960 	bl	8001dbc <I2C_WaitOnFlagUntilTimeout>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d00d      	beq.n	8001b1e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b10:	d103      	bne.n	8001b1a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b18:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e05f      	b.n	8001bde <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b1e:	897b      	ldrh	r3, [r7, #10]
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	461a      	mov	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001b2c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b30:	6a3a      	ldr	r2, [r7, #32]
 8001b32:	492d      	ldr	r1, [pc, #180]	@ (8001be8 <I2C_RequestMemoryWrite+0x128>)
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	f000 f9bb 	bl	8001eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e04c      	b.n	8001bde <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	617b      	str	r3, [r7, #20]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	617b      	str	r3, [r7, #20]
 8001b58:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b5c:	6a39      	ldr	r1, [r7, #32]
 8001b5e:	68f8      	ldr	r0, [r7, #12]
 8001b60:	f000 fa46 	bl	8001ff0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d00d      	beq.n	8001b86 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	d107      	bne.n	8001b82 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b80:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e02b      	b.n	8001bde <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b86:	88fb      	ldrh	r3, [r7, #6]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d105      	bne.n	8001b98 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001b8c:	893b      	ldrh	r3, [r7, #8]
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	611a      	str	r2, [r3, #16]
 8001b96:	e021      	b.n	8001bdc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001b98:	893b      	ldrh	r3, [r7, #8]
 8001b9a:	0a1b      	lsrs	r3, r3, #8
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ba6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ba8:	6a39      	ldr	r1, [r7, #32]
 8001baa:	68f8      	ldr	r0, [r7, #12]
 8001bac:	f000 fa20 	bl	8001ff0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00d      	beq.n	8001bd2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	d107      	bne.n	8001bce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bcc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e005      	b.n	8001bde <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001bd2:	893b      	ldrh	r3, [r7, #8]
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3718      	adds	r7, #24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	00010002 	.word	0x00010002

08001bec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b088      	sub	sp, #32
 8001bf0:	af02      	add	r7, sp, #8
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	4608      	mov	r0, r1
 8001bf6:	4611      	mov	r1, r2
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	817b      	strh	r3, [r7, #10]
 8001bfe:	460b      	mov	r3, r1
 8001c00:	813b      	strh	r3, [r7, #8]
 8001c02:	4613      	mov	r3, r2
 8001c04:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001c14:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c24:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c28:	9300      	str	r3, [sp, #0]
 8001c2a:	6a3b      	ldr	r3, [r7, #32]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f000 f8c2 	bl	8001dbc <I2C_WaitOnFlagUntilTimeout>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00d      	beq.n	8001c5a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c4c:	d103      	bne.n	8001c56 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c54:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e0aa      	b.n	8001db0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c5a:	897b      	ldrh	r3, [r7, #10]
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	461a      	mov	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001c68:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c6c:	6a3a      	ldr	r2, [r7, #32]
 8001c6e:	4952      	ldr	r1, [pc, #328]	@ (8001db8 <I2C_RequestMemoryRead+0x1cc>)
 8001c70:	68f8      	ldr	r0, [r7, #12]
 8001c72:	f000 f91d 	bl	8001eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e097      	b.n	8001db0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	617b      	str	r3, [r7, #20]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	617b      	str	r3, [r7, #20]
 8001c94:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c98:	6a39      	ldr	r1, [r7, #32]
 8001c9a:	68f8      	ldr	r0, [r7, #12]
 8001c9c:	f000 f9a8 	bl	8001ff0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d00d      	beq.n	8001cc2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	d107      	bne.n	8001cbe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cbc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e076      	b.n	8001db0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001cc2:	88fb      	ldrh	r3, [r7, #6]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d105      	bne.n	8001cd4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001cc8:	893b      	ldrh	r3, [r7, #8]
 8001cca:	b2da      	uxtb	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	611a      	str	r2, [r3, #16]
 8001cd2:	e021      	b.n	8001d18 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001cd4:	893b      	ldrh	r3, [r7, #8]
 8001cd6:	0a1b      	lsrs	r3, r3, #8
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	b2da      	uxtb	r2, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ce2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ce4:	6a39      	ldr	r1, [r7, #32]
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	f000 f982 	bl	8001ff0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d00d      	beq.n	8001d0e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	d107      	bne.n	8001d0a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d08:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e050      	b.n	8001db0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d0e:	893b      	ldrh	r3, [r7, #8]
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d1a:	6a39      	ldr	r1, [r7, #32]
 8001d1c:	68f8      	ldr	r0, [r7, #12]
 8001d1e:	f000 f967 	bl	8001ff0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d00d      	beq.n	8001d44 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2c:	2b04      	cmp	r3, #4
 8001d2e:	d107      	bne.n	8001d40 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d3e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e035      	b.n	8001db0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d52:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	6a3b      	ldr	r3, [r7, #32]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001d60:	68f8      	ldr	r0, [r7, #12]
 8001d62:	f000 f82b 	bl	8001dbc <I2C_WaitOnFlagUntilTimeout>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d00d      	beq.n	8001d88 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d7a:	d103      	bne.n	8001d84 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d82:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e013      	b.n	8001db0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001d88:	897b      	ldrh	r3, [r7, #10]
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d9a:	6a3a      	ldr	r2, [r7, #32]
 8001d9c:	4906      	ldr	r1, [pc, #24]	@ (8001db8 <I2C_RequestMemoryRead+0x1cc>)
 8001d9e:	68f8      	ldr	r0, [r7, #12]
 8001da0:	f000 f886 	bl	8001eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e000      	b.n	8001db0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	00010002 	.word	0x00010002

08001dbc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	603b      	str	r3, [r7, #0]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dcc:	e048      	b.n	8001e60 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dd4:	d044      	beq.n	8001e60 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dd6:	f7fe fdfd 	bl	80009d4 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d302      	bcc.n	8001dec <I2C_WaitOnFlagUntilTimeout+0x30>
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d139      	bne.n	8001e60 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	0c1b      	lsrs	r3, r3, #16
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d10d      	bne.n	8001e12 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	695b      	ldr	r3, [r3, #20]
 8001dfc:	43da      	mvns	r2, r3
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	4013      	ands	r3, r2
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	bf0c      	ite	eq
 8001e08:	2301      	moveq	r3, #1
 8001e0a:	2300      	movne	r3, #0
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	461a      	mov	r2, r3
 8001e10:	e00c      	b.n	8001e2c <I2C_WaitOnFlagUntilTimeout+0x70>
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	43da      	mvns	r2, r3
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	bf0c      	ite	eq
 8001e24:	2301      	moveq	r3, #1
 8001e26:	2300      	movne	r3, #0
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d116      	bne.n	8001e60 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2200      	movs	r2, #0
 8001e36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2220      	movs	r2, #32
 8001e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4c:	f043 0220 	orr.w	r2, r3, #32
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e023      	b.n	8001ea8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	0c1b      	lsrs	r3, r3, #16
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d10d      	bne.n	8001e86 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	695b      	ldr	r3, [r3, #20]
 8001e70:	43da      	mvns	r2, r3
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	4013      	ands	r3, r2
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	bf0c      	ite	eq
 8001e7c:	2301      	moveq	r3, #1
 8001e7e:	2300      	movne	r3, #0
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	461a      	mov	r2, r3
 8001e84:	e00c      	b.n	8001ea0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	43da      	mvns	r2, r3
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	4013      	ands	r3, r2
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	bf0c      	ite	eq
 8001e98:	2301      	moveq	r3, #1
 8001e9a:	2300      	movne	r3, #0
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d093      	beq.n	8001dce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
 8001ebc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ebe:	e071      	b.n	8001fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ece:	d123      	bne.n	8001f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ede:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001ee8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2200      	movs	r2, #0
 8001eee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2220      	movs	r2, #32
 8001ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f04:	f043 0204 	orr.w	r2, r3, #4
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e067      	b.n	8001fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f1e:	d041      	beq.n	8001fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f20:	f7fe fd58 	bl	80009d4 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d302      	bcc.n	8001f36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d136      	bne.n	8001fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	0c1b      	lsrs	r3, r3, #16
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d10c      	bne.n	8001f5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	43da      	mvns	r2, r3
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	bf14      	ite	ne
 8001f52:	2301      	movne	r3, #1
 8001f54:	2300      	moveq	r3, #0
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	e00b      	b.n	8001f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	43da      	mvns	r2, r3
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	4013      	ands	r3, r2
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	bf14      	ite	ne
 8001f6c:	2301      	movne	r3, #1
 8001f6e:	2300      	moveq	r3, #0
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d016      	beq.n	8001fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2220      	movs	r2, #32
 8001f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f90:	f043 0220 	orr.w	r2, r3, #32
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e021      	b.n	8001fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	0c1b      	lsrs	r3, r3, #16
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d10c      	bne.n	8001fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	695b      	ldr	r3, [r3, #20]
 8001fb4:	43da      	mvns	r2, r3
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	bf14      	ite	ne
 8001fc0:	2301      	movne	r3, #1
 8001fc2:	2300      	moveq	r3, #0
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	e00b      	b.n	8001fe0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	43da      	mvns	r2, r3
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	bf14      	ite	ne
 8001fda:	2301      	movne	r3, #1
 8001fdc:	2300      	moveq	r3, #0
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f47f af6d 	bne.w	8001ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3710      	adds	r7, #16
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ffc:	e034      	b.n	8002068 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ffe:	68f8      	ldr	r0, [r7, #12]
 8002000:	f000 f8e3 	bl	80021ca <I2C_IsAcknowledgeFailed>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e034      	b.n	8002078 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002014:	d028      	beq.n	8002068 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002016:	f7fe fcdd 	bl	80009d4 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	68ba      	ldr	r2, [r7, #8]
 8002022:	429a      	cmp	r2, r3
 8002024:	d302      	bcc.n	800202c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d11d      	bne.n	8002068 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002036:	2b80      	cmp	r3, #128	@ 0x80
 8002038:	d016      	beq.n	8002068 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2200      	movs	r2, #0
 800203e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2220      	movs	r2, #32
 8002044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002054:	f043 0220 	orr.w	r2, r3, #32
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e007      	b.n	8002078 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002072:	2b80      	cmp	r3, #128	@ 0x80
 8002074:	d1c3      	bne.n	8001ffe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3710      	adds	r7, #16
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800208c:	e034      	b.n	80020f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f000 f89b 	bl	80021ca <I2C_IsAcknowledgeFailed>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e034      	b.n	8002108 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a4:	d028      	beq.n	80020f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020a6:	f7fe fc95 	bl	80009d4 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	68ba      	ldr	r2, [r7, #8]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d302      	bcc.n	80020bc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d11d      	bne.n	80020f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	f003 0304 	and.w	r3, r3, #4
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	d016      	beq.n	80020f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2200      	movs	r2, #0
 80020ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2220      	movs	r2, #32
 80020d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e4:	f043 0220 	orr.w	r2, r3, #32
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e007      	b.n	8002108 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	f003 0304 	and.w	r3, r3, #4
 8002102:	2b04      	cmp	r3, #4
 8002104:	d1c3      	bne.n	800208e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800211c:	e049      	b.n	80021b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	695b      	ldr	r3, [r3, #20]
 8002124:	f003 0310 	and.w	r3, r3, #16
 8002128:	2b10      	cmp	r3, #16
 800212a:	d119      	bne.n	8002160 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f06f 0210 	mvn.w	r2, #16
 8002134:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2220      	movs	r2, #32
 8002140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e030      	b.n	80021c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002160:	f7fe fc38 	bl	80009d4 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	68ba      	ldr	r2, [r7, #8]
 800216c:	429a      	cmp	r2, r3
 800216e:	d302      	bcc.n	8002176 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d11d      	bne.n	80021b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002180:	2b40      	cmp	r3, #64	@ 0x40
 8002182:	d016      	beq.n	80021b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2220      	movs	r2, #32
 800218e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219e:	f043 0220 	orr.w	r2, r3, #32
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e007      	b.n	80021c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021bc:	2b40      	cmp	r3, #64	@ 0x40
 80021be:	d1ae      	bne.n	800211e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80021ca:	b480      	push	{r7}
 80021cc:	b083      	sub	sp, #12
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	695b      	ldr	r3, [r3, #20]
 80021d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021e0:	d11b      	bne.n	800221a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80021ea:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2220      	movs	r2, #32
 80021f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002206:	f043 0204 	orr.w	r2, r3, #4
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e000      	b.n	800221c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	bc80      	pop	{r7}
 8002224:	4770      	bx	lr

08002226 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b084      	sub	sp, #16
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d101      	bne.n	8002238 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e0e8      	b.n	800240a <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b00      	cmp	r3, #0
 8002242:	d106      	bne.n	8002252 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f006 faf1 	bl	8008834 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2203      	movs	r2, #3
 8002256:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4618      	mov	r0, r3
 8002266:	f002 fa14 	bl	8004692 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6818      	ldr	r0, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	3304      	adds	r3, #4
 8002272:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002274:	f002 f9ea 	bl	800464c <USB_CoreInit>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d005      	beq.n	800228a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2202      	movs	r2, #2
 8002282:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e0bf      	b.n	800240a <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2100      	movs	r1, #0
 8002290:	4618      	mov	r0, r3
 8002292:	f002 fa18 	bl	80046c6 <USB_SetCurrentMode>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d005      	beq.n	80022a8 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2202      	movs	r2, #2
 80022a0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e0b0      	b.n	800240a <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022a8:	2300      	movs	r3, #0
 80022aa:	73fb      	strb	r3, [r7, #15]
 80022ac:	e03e      	b.n	800232c <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022ae:	7bfa      	ldrb	r2, [r7, #15]
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	4613      	mov	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	440b      	add	r3, r1
 80022bc:	3311      	adds	r3, #17
 80022be:	2201      	movs	r2, #1
 80022c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022c2:	7bfa      	ldrb	r2, [r7, #15]
 80022c4:	6879      	ldr	r1, [r7, #4]
 80022c6:	4613      	mov	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4413      	add	r3, r2
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	440b      	add	r3, r1
 80022d0:	3310      	adds	r3, #16
 80022d2:	7bfa      	ldrb	r2, [r7, #15]
 80022d4:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022d6:	7bfa      	ldrb	r2, [r7, #15]
 80022d8:	6879      	ldr	r1, [r7, #4]
 80022da:	4613      	mov	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	440b      	add	r3, r1
 80022e4:	3313      	adds	r3, #19
 80022e6:	2200      	movs	r2, #0
 80022e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022ea:	7bfa      	ldrb	r2, [r7, #15]
 80022ec:	6879      	ldr	r1, [r7, #4]
 80022ee:	4613      	mov	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	4413      	add	r3, r2
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	440b      	add	r3, r1
 80022f8:	3320      	adds	r3, #32
 80022fa:	2200      	movs	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022fe:	7bfa      	ldrb	r2, [r7, #15]
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	4613      	mov	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4413      	add	r3, r2
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	440b      	add	r3, r1
 800230c:	3324      	adds	r3, #36	@ 0x24
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002312:	7bfb      	ldrb	r3, [r7, #15]
 8002314:	6879      	ldr	r1, [r7, #4]
 8002316:	1c5a      	adds	r2, r3, #1
 8002318:	4613      	mov	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	440b      	add	r3, r1
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002326:	7bfb      	ldrb	r3, [r7, #15]
 8002328:	3301      	adds	r3, #1
 800232a:	73fb      	strb	r3, [r7, #15]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	791b      	ldrb	r3, [r3, #4]
 8002330:	7bfa      	ldrb	r2, [r7, #15]
 8002332:	429a      	cmp	r2, r3
 8002334:	d3bb      	bcc.n	80022ae <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002336:	2300      	movs	r3, #0
 8002338:	73fb      	strb	r3, [r7, #15]
 800233a:	e044      	b.n	80023c6 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800233c:	7bfa      	ldrb	r2, [r7, #15]
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	4613      	mov	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	4413      	add	r3, r2
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	440b      	add	r3, r1
 800234a:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800234e:	2200      	movs	r2, #0
 8002350:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002352:	7bfa      	ldrb	r2, [r7, #15]
 8002354:	6879      	ldr	r1, [r7, #4]
 8002356:	4613      	mov	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	4413      	add	r3, r2
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	440b      	add	r3, r1
 8002360:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002364:	7bfa      	ldrb	r2, [r7, #15]
 8002366:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002368:	7bfa      	ldrb	r2, [r7, #15]
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	4613      	mov	r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	4413      	add	r3, r2
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	440b      	add	r3, r1
 8002376:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800237a:	2200      	movs	r2, #0
 800237c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800237e:	7bfa      	ldrb	r2, [r7, #15]
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	4613      	mov	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	440b      	add	r3, r1
 800238c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002394:	7bfa      	ldrb	r2, [r7, #15]
 8002396:	6879      	ldr	r1, [r7, #4]
 8002398:	4613      	mov	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	440b      	add	r3, r1
 80023a2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023aa:	7bfa      	ldrb	r2, [r7, #15]
 80023ac:	6879      	ldr	r1, [r7, #4]
 80023ae:	4613      	mov	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	440b      	add	r3, r1
 80023b8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023c0:	7bfb      	ldrb	r3, [r7, #15]
 80023c2:	3301      	adds	r3, #1
 80023c4:	73fb      	strb	r3, [r7, #15]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	791b      	ldrb	r3, [r3, #4]
 80023ca:	7bfa      	ldrb	r2, [r7, #15]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d3b5      	bcc.n	800233c <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6818      	ldr	r0, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3304      	adds	r3, #4
 80023d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023da:	f002 f980 	bl	80046de <USB_DevInit>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d005      	beq.n	80023f0 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2202      	movs	r2, #2
 80023e8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e00c      	b.n	800240a <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2201      	movs	r2, #1
 80023fa:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f004 fbff 	bl	8006c06 <USB_DevDisconnect>

  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b082      	sub	sp, #8
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002420:	2b01      	cmp	r3, #1
 8002422:	d101      	bne.n	8002428 <HAL_PCD_Start+0x16>
 8002424:	2302      	movs	r3, #2
 8002426:	e016      	b.n	8002456 <HAL_PCD_Start+0x44>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f002 f916 	bl	8004666 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800243a:	2101      	movs	r1, #1
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f006 fc6c 	bl	8008d1a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4618      	mov	r0, r3
 8002448:	f004 fbd3 	bl	8006bf2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b088      	sub	sp, #32
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f004 fbd5 	bl	8006c1a <USB_ReadInterrupts>
 8002470:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d003      	beq.n	8002484 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 fb1a 	bl	8002ab6 <PCD_EP_ISR_Handler>

    return;
 8002482:	e119      	b.n	80026b8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800248a:	2b00      	cmp	r3, #0
 800248c:	d013      	beq.n	80024b6 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002496:	b29a      	uxth	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024a0:	b292      	uxth	r2, r2
 80024a2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f006 fa3f 	bl	800892a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80024ac:	2100      	movs	r1, #0
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 f905 	bl	80026be <HAL_PCD_SetAddress>

    return;
 80024b4:	e100      	b.n	80026b8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00c      	beq.n	80024da <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80024d2:	b292      	uxth	r2, r2
 80024d4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80024d8:	e0ee      	b.n	80026b8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00c      	beq.n	80024fe <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80024f6:	b292      	uxth	r2, r2
 80024f8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80024fc:	e0dc      	b.n	80026b8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d027      	beq.n	8002558 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002510:	b29a      	uxth	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 0204 	bic.w	r2, r2, #4
 800251a:	b292      	uxth	r2, r2
 800251c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002528:	b29a      	uxth	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 0208 	bic.w	r2, r2, #8
 8002532:	b292      	uxth	r2, r2
 8002534:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f006 fa2f 	bl	800899c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002546:	b29a      	uxth	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002550:	b292      	uxth	r2, r2
 8002552:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002556:	e0af      	b.n	80026b8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800255e:	2b00      	cmp	r3, #0
 8002560:	f000 8083 	beq.w	800266a <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002564:	2300      	movs	r3, #0
 8002566:	77fb      	strb	r3, [r7, #31]
 8002568:	e010      	b.n	800258c <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	461a      	mov	r2, r3
 8002570:	7ffb      	ldrb	r3, [r7, #31]
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	441a      	add	r2, r3
 8002576:	7ffb      	ldrb	r3, [r7, #31]
 8002578:	8812      	ldrh	r2, [r2, #0]
 800257a:	b292      	uxth	r2, r2
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	3320      	adds	r3, #32
 8002580:	443b      	add	r3, r7
 8002582:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002586:	7ffb      	ldrb	r3, [r7, #31]
 8002588:	3301      	adds	r3, #1
 800258a:	77fb      	strb	r3, [r7, #31]
 800258c:	7ffb      	ldrb	r3, [r7, #31]
 800258e:	2b07      	cmp	r3, #7
 8002590:	d9eb      	bls.n	800256a <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800259a:	b29a      	uxth	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f042 0201 	orr.w	r2, r2, #1
 80025a4:	b292      	uxth	r2, r2
 80025a6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f022 0201 	bic.w	r2, r2, #1
 80025bc:	b292      	uxth	r2, r2
 80025be:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80025c2:	bf00      	nop
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d0f6      	beq.n	80025c4 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80025de:	b29a      	uxth	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025e8:	b292      	uxth	r2, r2
 80025ea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80025ee:	2300      	movs	r3, #0
 80025f0:	77fb      	strb	r3, [r7, #31]
 80025f2:	e00f      	b.n	8002614 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80025f4:	7ffb      	ldrb	r3, [r7, #31]
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	6812      	ldr	r2, [r2, #0]
 80025fa:	4611      	mov	r1, r2
 80025fc:	7ffa      	ldrb	r2, [r7, #31]
 80025fe:	0092      	lsls	r2, r2, #2
 8002600:	440a      	add	r2, r1
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	3320      	adds	r3, #32
 8002606:	443b      	add	r3, r7
 8002608:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800260c:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800260e:	7ffb      	ldrb	r3, [r7, #31]
 8002610:	3301      	adds	r3, #1
 8002612:	77fb      	strb	r3, [r7, #31]
 8002614:	7ffb      	ldrb	r3, [r7, #31]
 8002616:	2b07      	cmp	r3, #7
 8002618:	d9ec      	bls.n	80025f4 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002622:	b29a      	uxth	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f042 0208 	orr.w	r2, r2, #8
 800262c:	b292      	uxth	r2, r2
 800262e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800263a:	b29a      	uxth	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002644:	b292      	uxth	r2, r2
 8002646:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002652:	b29a      	uxth	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f042 0204 	orr.w	r2, r2, #4
 800265c:	b292      	uxth	r2, r2
 800265e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f006 f980 	bl	8008968 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002668:	e026      	b.n	80026b8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00f      	beq.n	8002694 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800267c:	b29a      	uxth	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002686:	b292      	uxth	r2, r2
 8002688:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f006 f93e 	bl	800890e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002692:	e011      	b.n	80026b8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00c      	beq.n	80026b8 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026b0:	b292      	uxth	r2, r2
 80026b2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80026b6:	bf00      	nop
  }
}
 80026b8:	3720      	adds	r7, #32
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b082      	sub	sp, #8
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
 80026c6:	460b      	mov	r3, r1
 80026c8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d101      	bne.n	80026d8 <HAL_PCD_SetAddress+0x1a>
 80026d4:	2302      	movs	r3, #2
 80026d6:	e012      	b.n	80026fe <HAL_PCD_SetAddress+0x40>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	78fa      	ldrb	r2, [r7, #3]
 80026e4:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	78fa      	ldrb	r2, [r7, #3]
 80026ec:	4611      	mov	r1, r2
 80026ee:	4618      	mov	r0, r3
 80026f0:	f004 fa6c 	bl	8006bcc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b084      	sub	sp, #16
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
 800270e:	4608      	mov	r0, r1
 8002710:	4611      	mov	r1, r2
 8002712:	461a      	mov	r2, r3
 8002714:	4603      	mov	r3, r0
 8002716:	70fb      	strb	r3, [r7, #3]
 8002718:	460b      	mov	r3, r1
 800271a:	803b      	strh	r3, [r7, #0]
 800271c:	4613      	mov	r3, r2
 800271e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002720:	2300      	movs	r3, #0
 8002722:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002724:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002728:	2b00      	cmp	r3, #0
 800272a:	da0e      	bge.n	800274a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800272c:	78fb      	ldrb	r3, [r7, #3]
 800272e:	f003 0207 	and.w	r2, r3, #7
 8002732:	4613      	mov	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	4413      	add	r3, r2
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	3310      	adds	r3, #16
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	4413      	add	r3, r2
 8002740:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2201      	movs	r2, #1
 8002746:	705a      	strb	r2, [r3, #1]
 8002748:	e00e      	b.n	8002768 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800274a:	78fb      	ldrb	r3, [r7, #3]
 800274c:	f003 0207 	and.w	r2, r3, #7
 8002750:	4613      	mov	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4413      	add	r3, r2
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	4413      	add	r3, r2
 8002760:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2200      	movs	r2, #0
 8002766:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002768:	78fb      	ldrb	r3, [r7, #3]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	b2da      	uxtb	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002774:	883a      	ldrh	r2, [r7, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	78ba      	ldrb	r2, [r7, #2]
 800277e:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002780:	78bb      	ldrb	r3, [r7, #2]
 8002782:	2b02      	cmp	r3, #2
 8002784:	d102      	bne.n	800278c <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002792:	2b01      	cmp	r3, #1
 8002794:	d101      	bne.n	800279a <HAL_PCD_EP_Open+0x94>
 8002796:	2302      	movs	r3, #2
 8002798:	e00e      	b.n	80027b8 <HAL_PCD_EP_Open+0xb2>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68f9      	ldr	r1, [r7, #12]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f001 ffb5 	bl	8004718 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80027b6:	7afb      	ldrb	r3, [r7, #11]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	460b      	mov	r3, r1
 80027ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	da0e      	bge.n	80027f2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027d4:	78fb      	ldrb	r3, [r7, #3]
 80027d6:	f003 0207 	and.w	r2, r3, #7
 80027da:	4613      	mov	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	4413      	add	r3, r2
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	3310      	adds	r3, #16
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	4413      	add	r3, r2
 80027e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2201      	movs	r2, #1
 80027ee:	705a      	strb	r2, [r3, #1]
 80027f0:	e00e      	b.n	8002810 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027f2:	78fb      	ldrb	r3, [r7, #3]
 80027f4:	f003 0207 	and.w	r2, r3, #7
 80027f8:	4613      	mov	r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	4413      	add	r3, r2
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	4413      	add	r3, r2
 8002808:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002810:	78fb      	ldrb	r3, [r7, #3]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	b2da      	uxtb	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002822:	2b01      	cmp	r3, #1
 8002824:	d101      	bne.n	800282a <HAL_PCD_EP_Close+0x6a>
 8002826:	2302      	movs	r3, #2
 8002828:	e00e      	b.n	8002848 <HAL_PCD_EP_Close+0x88>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2201      	movs	r2, #1
 800282e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68f9      	ldr	r1, [r7, #12]
 8002838:	4618      	mov	r0, r3
 800283a:	f002 fb2d 	bl	8004e98 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	607a      	str	r2, [r7, #4]
 800285a:	603b      	str	r3, [r7, #0]
 800285c:	460b      	mov	r3, r1
 800285e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002860:	7afb      	ldrb	r3, [r7, #11]
 8002862:	f003 0207 	and.w	r2, r3, #7
 8002866:	4613      	mov	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	4413      	add	r3, r2
 8002876:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	2200      	movs	r2, #0
 8002888:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	2200      	movs	r2, #0
 800288e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002890:	7afb      	ldrb	r3, [r7, #11]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	b2da      	uxtb	r2, r3
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6979      	ldr	r1, [r7, #20]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f002 fce4 	bl	8005270 <USB_EPStartXfer>

  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3718      	adds	r7, #24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
 80028ba:	460b      	mov	r3, r1
 80028bc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80028be:	78fb      	ldrb	r3, [r7, #3]
 80028c0:	f003 0207 	and.w	r2, r3, #7
 80028c4:	6879      	ldr	r1, [r7, #4]
 80028c6:	4613      	mov	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4413      	add	r3, r2
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	440b      	add	r3, r1
 80028d0:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80028d4:	681b      	ldr	r3, [r3, #0]
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr

080028e0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	607a      	str	r2, [r7, #4]
 80028ea:	603b      	str	r3, [r7, #0]
 80028ec:	460b      	mov	r3, r1
 80028ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028f0:	7afb      	ldrb	r3, [r7, #11]
 80028f2:	f003 0207 	and.w	r2, r3, #7
 80028f6:	4613      	mov	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4413      	add	r3, r2
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	3310      	adds	r3, #16
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	4413      	add	r3, r2
 8002904:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	2200      	movs	r2, #0
 8002924:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	2201      	movs	r2, #1
 800292a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800292c:	7afb      	ldrb	r3, [r7, #11]
 800292e:	f003 0307 	and.w	r3, r3, #7
 8002932:	b2da      	uxtb	r2, r3
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6979      	ldr	r1, [r7, #20]
 800293e:	4618      	mov	r0, r3
 8002940:	f002 fc96 	bl	8005270 <USB_EPStartXfer>

  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3718      	adds	r7, #24
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b084      	sub	sp, #16
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
 8002956:	460b      	mov	r3, r1
 8002958:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800295a:	78fb      	ldrb	r3, [r7, #3]
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	7912      	ldrb	r2, [r2, #4]
 8002964:	4293      	cmp	r3, r2
 8002966:	d901      	bls.n	800296c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e04c      	b.n	8002a06 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800296c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002970:	2b00      	cmp	r3, #0
 8002972:	da0e      	bge.n	8002992 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002974:	78fb      	ldrb	r3, [r7, #3]
 8002976:	f003 0207 	and.w	r2, r3, #7
 800297a:	4613      	mov	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	3310      	adds	r3, #16
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	4413      	add	r3, r2
 8002988:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2201      	movs	r2, #1
 800298e:	705a      	strb	r2, [r3, #1]
 8002990:	e00c      	b.n	80029ac <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002992:	78fa      	ldrb	r2, [r7, #3]
 8002994:	4613      	mov	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4413      	add	r3, r2
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	4413      	add	r3, r2
 80029a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2201      	movs	r2, #1
 80029b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029b2:	78fb      	ldrb	r3, [r7, #3]
 80029b4:	f003 0307 	and.w	r3, r3, #7
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d101      	bne.n	80029cc <HAL_PCD_EP_SetStall+0x7e>
 80029c8:	2302      	movs	r3, #2
 80029ca:	e01c      	b.n	8002a06 <HAL_PCD_EP_SetStall+0xb8>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68f9      	ldr	r1, [r7, #12]
 80029da:	4618      	mov	r0, r3
 80029dc:	f003 fff9 	bl	80069d2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029e0:	78fb      	ldrb	r3, [r7, #3]
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d108      	bne.n	80029fc <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80029f4:	4619      	mov	r1, r3
 80029f6:	4610      	mov	r0, r2
 80029f8:	f004 f91e 	bl	8006c38 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b084      	sub	sp, #16
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
 8002a16:	460b      	mov	r3, r1
 8002a18:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002a1a:	78fb      	ldrb	r3, [r7, #3]
 8002a1c:	f003 030f 	and.w	r3, r3, #15
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	7912      	ldrb	r2, [r2, #4]
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d901      	bls.n	8002a2c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e040      	b.n	8002aae <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	da0e      	bge.n	8002a52 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a34:	78fb      	ldrb	r3, [r7, #3]
 8002a36:	f003 0207 	and.w	r2, r3, #7
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4413      	add	r3, r2
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	3310      	adds	r3, #16
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	4413      	add	r3, r2
 8002a48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	705a      	strb	r2, [r3, #1]
 8002a50:	e00e      	b.n	8002a70 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a52:	78fb      	ldrb	r3, [r7, #3]
 8002a54:	f003 0207 	and.w	r2, r3, #7
 8002a58:	4613      	mov	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	4413      	add	r3, r2
 8002a68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a76:	78fb      	ldrb	r3, [r7, #3]
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	b2da      	uxtb	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d101      	bne.n	8002a90 <HAL_PCD_EP_ClrStall+0x82>
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	e00e      	b.n	8002aae <HAL_PCD_EP_ClrStall+0xa0>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68f9      	ldr	r1, [r7, #12]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f003 ffe7 	bl	8006a72 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b096      	sub	sp, #88	@ 0x58
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002abe:	e3bb      	b.n	8003238 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ac8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002acc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	f003 030f 	and.w	r3, r3, #15
 8002ad6:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8002ada:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f040 8175 	bne.w	8002dce <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002ae4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002ae8:	f003 0310 	and.w	r3, r3, #16
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d14e      	bne.n	8002b8e <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	881b      	ldrh	r3, [r3, #0]
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002afc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b00:	81fb      	strh	r3, [r7, #14]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	89fb      	ldrh	r3, [r7, #14]
 8002b08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	3310      	adds	r3, #16
 8002b18:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	461a      	mov	r2, r3
 8002b26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	3302      	adds	r3, #2
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6812      	ldr	r2, [r2, #0]
 8002b36:	4413      	add	r3, r2
 8002b38:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002b3c:	881b      	ldrh	r3, [r3, #0]
 8002b3e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b44:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002b46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b48:	695a      	ldr	r2, [r3, #20]
 8002b4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	441a      	add	r2, r3
 8002b50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b52:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002b54:	2100      	movs	r1, #0
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f005 febf 	bl	80088da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	7b5b      	ldrb	r3, [r3, #13]
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f000 8368 	beq.w	8003238 <PCD_EP_ISR_Handler+0x782>
 8002b68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f040 8363 	bne.w	8003238 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	7b5b      	ldrb	r3, [r3, #13]
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	735a      	strb	r2, [r3, #13]
 8002b8c:	e354      	b.n	8003238 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002b94:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	881b      	ldrh	r3, [r3, #0]
 8002b9c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002ba0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002ba4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d034      	beq.n	8002c16 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	4413      	add	r3, r2
 8002bc0:	3306      	adds	r3, #6
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	6812      	ldr	r2, [r2, #0]
 8002bc8:	4413      	add	r3, r2
 8002bca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002bce:	881b      	ldrh	r3, [r3, #0]
 8002bd0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002bd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bd6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6818      	ldr	r0, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8002be2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002be4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002be6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002be8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	f004 f875 	bl	8006cda <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	881b      	ldrh	r3, [r3, #0]
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	823b      	strh	r3, [r7, #16]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	8a3a      	ldrh	r2, [r7, #16]
 8002c06:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002c0a:	b292      	uxth	r2, r2
 8002c0c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f005 fe36 	bl	8008880 <HAL_PCD_SetupStageCallback>
 8002c14:	e310      	b.n	8003238 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002c16:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f280 830c 	bge.w	8003238 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	881b      	ldrh	r3, [r3, #0]
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	83fb      	strh	r3, [r7, #30]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	8bfa      	ldrh	r2, [r7, #30]
 8002c36:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002c3a:	b292      	uxth	r2, r2
 8002c3c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	461a      	mov	r2, r3
 8002c4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	4413      	add	r3, r2
 8002c52:	3306      	adds	r3, #6
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002c60:	881b      	ldrh	r3, [r3, #0]
 8002c62:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c68:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002c6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c6c:	69db      	ldr	r3, [r3, #28]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d019      	beq.n	8002ca6 <PCD_EP_ISR_Handler+0x1f0>
 8002c72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d015      	beq.n	8002ca6 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6818      	ldr	r0, [r3, #0]
 8002c7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c80:	6959      	ldr	r1, [r3, #20]
 8002c82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c84:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002c86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c88:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	f004 f825 	bl	8006cda <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002c90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c92:	695a      	ldr	r2, [r3, #20]
 8002c94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c96:	69db      	ldr	r3, [r3, #28]
 8002c98:	441a      	add	r2, r3
 8002c9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c9c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002c9e:	2100      	movs	r1, #0
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f005 fdff 	bl	80088a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	881b      	ldrh	r3, [r3, #0]
 8002cac:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002cb0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002cb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f040 82bd 	bne.w	8003238 <PCD_EP_ISR_Handler+0x782>
 8002cbe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002cc2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002cc6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002cca:	f000 82b5 	beq.w	8003238 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	61bb      	str	r3, [r7, #24]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	461a      	mov	r2, r3
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002cec:	617b      	str	r3, [r7, #20]
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	881b      	ldrh	r3, [r3, #0]
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	801a      	strh	r2, [r3, #0]
 8002cfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	2b3e      	cmp	r3, #62	@ 0x3e
 8002d04:	d91d      	bls.n	8002d42 <PCD_EP_ISR_Handler+0x28c>
 8002d06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	095b      	lsrs	r3, r3, #5
 8002d0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	f003 031f 	and.w	r3, r3, #31
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d102      	bne.n	8002d20 <PCD_EP_ISR_Handler+0x26a>
 8002d1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	881b      	ldrh	r3, [r3, #0]
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	029b      	lsls	r3, r3, #10
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	801a      	strh	r2, [r3, #0]
 8002d40:	e026      	b.n	8002d90 <PCD_EP_ISR_Handler+0x2da>
 8002d42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10a      	bne.n	8002d60 <PCD_EP_ISR_Handler+0x2aa>
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	881b      	ldrh	r3, [r3, #0]
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	801a      	strh	r2, [r3, #0]
 8002d5e:	e017      	b.n	8002d90 <PCD_EP_ISR_Handler+0x2da>
 8002d60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	085b      	lsrs	r3, r3, #1
 8002d66:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	f003 0301 	and.w	r3, r3, #1
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d002      	beq.n	8002d7a <PCD_EP_ISR_Handler+0x2c4>
 8002d74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d76:	3301      	adds	r3, #1
 8002d78:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	881b      	ldrh	r3, [r3, #0]
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	029b      	lsls	r3, r3, #10
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	881b      	ldrh	r3, [r3, #0]
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002da0:	827b      	strh	r3, [r7, #18]
 8002da2:	8a7b      	ldrh	r3, [r7, #18]
 8002da4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002da8:	827b      	strh	r3, [r7, #18]
 8002daa:	8a7b      	ldrh	r3, [r7, #18]
 8002dac:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002db0:	827b      	strh	r3, [r7, #18]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	8a7b      	ldrh	r3, [r7, #18]
 8002db8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002dbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002dc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002dc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	8013      	strh	r3, [r2, #0]
 8002dcc:	e234      	b.n	8003238 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	4413      	add	r3, r2
 8002ddc:	881b      	ldrh	r3, [r3, #0]
 8002dde:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002de2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f280 80fc 	bge.w	8002fe4 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	461a      	mov	r2, r3
 8002df2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	881b      	ldrh	r3, [r3, #0]
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002e02:	4013      	ands	r3, r2
 8002e04:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4413      	add	r3, r2
 8002e16:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8002e1a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002e1e:	b292      	uxth	r2, r2
 8002e20:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002e22:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002e26:	4613      	mov	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	4413      	add	r3, r2
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	4413      	add	r3, r2
 8002e36:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002e38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e3a:	7b1b      	ldrb	r3, [r3, #12]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d125      	bne.n	8002e8c <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	4413      	add	r3, r2
 8002e54:	3306      	adds	r3, #6
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	6812      	ldr	r2, [r2, #0]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002e62:	881b      	ldrh	r3, [r3, #0]
 8002e64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e68:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8002e6c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f000 8092 	beq.w	8002f9a <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6818      	ldr	r0, [r3, #0]
 8002e7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e7c:	6959      	ldr	r1, [r3, #20]
 8002e7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e80:	88da      	ldrh	r2, [r3, #6]
 8002e82:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002e86:	f003 ff28 	bl	8006cda <USB_ReadPMA>
 8002e8a:	e086      	b.n	8002f9a <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002e8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e8e:	78db      	ldrb	r3, [r3, #3]
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d10a      	bne.n	8002eaa <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002e94:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002e98:	461a      	mov	r2, r3
 8002e9a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 f9d9 	bl	8003254 <HAL_PCD_EP_DB_Receive>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8002ea8:	e077      	b.n	8002f9a <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	881b      	ldrh	r3, [r3, #0]
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002ec0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ec4:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	441a      	add	r2, r3
 8002ed6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002eda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002ede:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002ee2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ee6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	4413      	add	r3, r2
 8002efc:	881b      	ldrh	r3, [r3, #0]
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d024      	beq.n	8002f52 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	461a      	mov	r2, r3
 8002f14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	4413      	add	r3, r2
 8002f1c:	3302      	adds	r3, #2
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	6812      	ldr	r2, [r2, #0]
 8002f24:	4413      	add	r3, r2
 8002f26:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002f2a:	881b      	ldrh	r3, [r3, #0]
 8002f2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f30:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002f34:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d02e      	beq.n	8002f9a <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6818      	ldr	r0, [r3, #0]
 8002f40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f42:	6959      	ldr	r1, [r3, #20]
 8002f44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f46:	891a      	ldrh	r2, [r3, #8]
 8002f48:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002f4c:	f003 fec5 	bl	8006cda <USB_ReadPMA>
 8002f50:	e023      	b.n	8002f9a <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	4413      	add	r3, r2
 8002f66:	3306      	adds	r3, #6
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	6812      	ldr	r2, [r2, #0]
 8002f6e:	4413      	add	r3, r2
 8002f70:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002f74:	881b      	ldrh	r3, [r3, #0]
 8002f76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f7a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002f7e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d009      	beq.n	8002f9a <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6818      	ldr	r0, [r3, #0]
 8002f8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f8c:	6959      	ldr	r1, [r3, #20]
 8002f8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f90:	895a      	ldrh	r2, [r3, #10]
 8002f92:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002f96:	f003 fea0 	bl	8006cda <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002f9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f9c:	69da      	ldr	r2, [r3, #28]
 8002f9e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002fa2:	441a      	add	r2, r3
 8002fa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fa6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002fa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002faa:	695a      	ldr	r2, [r3, #20]
 8002fac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002fb0:	441a      	add	r2, r3
 8002fb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fb4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002fb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d005      	beq.n	8002fca <PCD_EP_ISR_Handler+0x514>
 8002fbe:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002fc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d206      	bcs.n	8002fd8 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002fca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	4619      	mov	r1, r3
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f005 fc67 	bl	80088a4 <HAL_PCD_DataOutStageCallback>
 8002fd6:	e005      	b.n	8002fe4 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f002 f946 	bl	8005270 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002fe4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002fe8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f000 8123 	beq.w	8003238 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8002ff2:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	3310      	adds	r3, #16
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	4413      	add	r3, r2
 8003004:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	461a      	mov	r2, r3
 800300c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	4413      	add	r3, r2
 8003014:	881b      	ldrh	r3, [r3, #0]
 8003016:	b29b      	uxth	r3, r3
 8003018:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800301c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003020:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	461a      	mov	r2, r3
 800302a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	441a      	add	r2, r3
 8003032:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003036:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800303a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800303e:	b29b      	uxth	r3, r3
 8003040:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003042:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003044:	78db      	ldrb	r3, [r3, #3]
 8003046:	2b01      	cmp	r3, #1
 8003048:	f040 80a2 	bne.w	8003190 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 800304c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800304e:	2200      	movs	r2, #0
 8003050:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003052:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003054:	7b1b      	ldrb	r3, [r3, #12]
 8003056:	2b00      	cmp	r3, #0
 8003058:	f000 8093 	beq.w	8003182 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800305c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003060:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003064:	2b00      	cmp	r3, #0
 8003066:	d046      	beq.n	80030f6 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003068:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800306a:	785b      	ldrb	r3, [r3, #1]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d126      	bne.n	80030be <PCD_EP_ISR_Handler+0x608>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	627b      	str	r3, [r7, #36]	@ 0x24
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800307e:	b29b      	uxth	r3, r3
 8003080:	461a      	mov	r2, r3
 8003082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003084:	4413      	add	r3, r2
 8003086:	627b      	str	r3, [r7, #36]	@ 0x24
 8003088:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	011a      	lsls	r2, r3, #4
 800308e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003090:	4413      	add	r3, r2
 8003092:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003096:	623b      	str	r3, [r7, #32]
 8003098:	6a3b      	ldr	r3, [r7, #32]
 800309a:	881b      	ldrh	r3, [r3, #0]
 800309c:	b29b      	uxth	r3, r3
 800309e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	6a3b      	ldr	r3, [r7, #32]
 80030a6:	801a      	strh	r2, [r3, #0]
 80030a8:	6a3b      	ldr	r3, [r7, #32]
 80030aa:	881b      	ldrh	r3, [r3, #0]
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	6a3b      	ldr	r3, [r7, #32]
 80030ba:	801a      	strh	r2, [r3, #0]
 80030bc:	e061      	b.n	8003182 <PCD_EP_ISR_Handler+0x6cc>
 80030be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030c0:	785b      	ldrb	r3, [r3, #1]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d15d      	bne.n	8003182 <PCD_EP_ISR_Handler+0x6cc>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	461a      	mov	r2, r3
 80030d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030da:	4413      	add	r3, r2
 80030dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	011a      	lsls	r2, r3, #4
 80030e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030e6:	4413      	add	r3, r2
 80030e8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80030ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030f0:	2200      	movs	r2, #0
 80030f2:	801a      	strh	r2, [r3, #0]
 80030f4:	e045      	b.n	8003182 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030fe:	785b      	ldrb	r3, [r3, #1]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d126      	bne.n	8003152 <PCD_EP_ISR_Handler+0x69c>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	637b      	str	r3, [r7, #52]	@ 0x34
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003112:	b29b      	uxth	r3, r3
 8003114:	461a      	mov	r2, r3
 8003116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003118:	4413      	add	r3, r2
 800311a:	637b      	str	r3, [r7, #52]	@ 0x34
 800311c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	011a      	lsls	r2, r3, #4
 8003122:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003124:	4413      	add	r3, r2
 8003126:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800312a:	633b      	str	r3, [r7, #48]	@ 0x30
 800312c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800312e:	881b      	ldrh	r3, [r3, #0]
 8003130:	b29b      	uxth	r3, r3
 8003132:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003136:	b29a      	uxth	r2, r3
 8003138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800313a:	801a      	strh	r2, [r3, #0]
 800313c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800313e:	881b      	ldrh	r3, [r3, #0]
 8003140:	b29b      	uxth	r3, r3
 8003142:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003146:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800314a:	b29a      	uxth	r2, r3
 800314c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800314e:	801a      	strh	r2, [r3, #0]
 8003150:	e017      	b.n	8003182 <PCD_EP_ISR_Handler+0x6cc>
 8003152:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003154:	785b      	ldrb	r3, [r3, #1]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d113      	bne.n	8003182 <PCD_EP_ISR_Handler+0x6cc>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003162:	b29b      	uxth	r3, r3
 8003164:	461a      	mov	r2, r3
 8003166:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003168:	4413      	add	r3, r2
 800316a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800316c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	011a      	lsls	r2, r3, #4
 8003172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003174:	4413      	add	r3, r2
 8003176:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800317a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800317c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800317e:	2200      	movs	r2, #0
 8003180:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003182:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	4619      	mov	r1, r3
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f005 fba6 	bl	80088da <HAL_PCD_DataInStageCallback>
 800318e:	e053      	b.n	8003238 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003190:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003194:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003198:	2b00      	cmp	r3, #0
 800319a:	d146      	bne.n	800322a <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	461a      	mov	r2, r3
 80031a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	00db      	lsls	r3, r3, #3
 80031ae:	4413      	add	r3, r2
 80031b0:	3302      	adds	r3, #2
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6812      	ldr	r2, [r2, #0]
 80031b8:	4413      	add	r3, r2
 80031ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80031be:	881b      	ldrh	r3, [r3, #0]
 80031c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031c4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80031c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031ca:	699a      	ldr	r2, [r3, #24]
 80031cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d907      	bls.n	80031e4 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 80031d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031d6:	699a      	ldr	r2, [r3, #24]
 80031d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80031dc:	1ad2      	subs	r2, r2, r3
 80031de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031e0:	619a      	str	r2, [r3, #24]
 80031e2:	e002      	b.n	80031ea <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 80031e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031e6:	2200      	movs	r2, #0
 80031e8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80031ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d106      	bne.n	8003200 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80031f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	4619      	mov	r1, r3
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f005 fb6e 	bl	80088da <HAL_PCD_DataInStageCallback>
 80031fe:	e01b      	b.n	8003238 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003200:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003202:	695a      	ldr	r2, [r3, #20]
 8003204:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003208:	441a      	add	r2, r3
 800320a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800320c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800320e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003210:	69da      	ldr	r2, [r3, #28]
 8003212:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003216:	441a      	add	r2, r3
 8003218:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800321a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003222:	4618      	mov	r0, r3
 8003224:	f002 f824 	bl	8005270 <USB_EPStartXfer>
 8003228:	e006      	b.n	8003238 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800322a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800322e:	461a      	mov	r2, r3
 8003230:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f91b 	bl	800346e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003240:	b29b      	uxth	r3, r3
 8003242:	b21b      	sxth	r3, r3
 8003244:	2b00      	cmp	r3, #0
 8003246:	f6ff ac3b 	blt.w	8002ac0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3758      	adds	r7, #88	@ 0x58
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b088      	sub	sp, #32
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	4613      	mov	r3, r2
 8003260:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003262:	88fb      	ldrh	r3, [r7, #6]
 8003264:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d07e      	beq.n	800336a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003274:	b29b      	uxth	r3, r3
 8003276:	461a      	mov	r2, r3
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	00db      	lsls	r3, r3, #3
 800327e:	4413      	add	r3, r2
 8003280:	3302      	adds	r3, #2
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	6812      	ldr	r2, [r2, #0]
 8003288:	4413      	add	r3, r2
 800328a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800328e:	881b      	ldrh	r3, [r3, #0]
 8003290:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003294:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	699a      	ldr	r2, [r3, #24]
 800329a:	8b7b      	ldrh	r3, [r7, #26]
 800329c:	429a      	cmp	r2, r3
 800329e:	d306      	bcc.n	80032ae <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	699a      	ldr	r2, [r3, #24]
 80032a4:	8b7b      	ldrh	r3, [r7, #26]
 80032a6:	1ad2      	subs	r2, r2, r3
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	619a      	str	r2, [r3, #24]
 80032ac:	e002      	b.n	80032b4 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	2200      	movs	r2, #0
 80032b2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d123      	bne.n	8003304 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	461a      	mov	r2, r3
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	881b      	ldrh	r3, [r3, #0]
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80032d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032d6:	833b      	strh	r3, [r7, #24]
 80032d8:	8b3b      	ldrh	r3, [r7, #24]
 80032da:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80032de:	833b      	strh	r3, [r7, #24]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	461a      	mov	r2, r3
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	441a      	add	r2, r3
 80032ee:	8b3b      	ldrh	r3, [r7, #24]
 80032f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80032f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80032f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003300:	b29b      	uxth	r3, r3
 8003302:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003304:	88fb      	ldrh	r3, [r7, #6]
 8003306:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800330a:	2b00      	cmp	r3, #0
 800330c:	d01f      	beq.n	800334e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	461a      	mov	r2, r3
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	881b      	ldrh	r3, [r3, #0]
 800331e:	b29b      	uxth	r3, r3
 8003320:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003324:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003328:	82fb      	strh	r3, [r7, #22]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	461a      	mov	r2, r3
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	441a      	add	r2, r3
 8003338:	8afb      	ldrh	r3, [r7, #22]
 800333a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800333e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003342:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003346:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800334a:	b29b      	uxth	r3, r3
 800334c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800334e:	8b7b      	ldrh	r3, [r7, #26]
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 8087 	beq.w	8003464 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6818      	ldr	r0, [r3, #0]
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	6959      	ldr	r1, [r3, #20]
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	891a      	ldrh	r2, [r3, #8]
 8003362:	8b7b      	ldrh	r3, [r7, #26]
 8003364:	f003 fcb9 	bl	8006cda <USB_ReadPMA>
 8003368:	e07c      	b.n	8003464 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003372:	b29b      	uxth	r3, r3
 8003374:	461a      	mov	r2, r3
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	4413      	add	r3, r2
 800337e:	3306      	adds	r3, #6
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	6812      	ldr	r2, [r2, #0]
 8003386:	4413      	add	r3, r2
 8003388:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800338c:	881b      	ldrh	r3, [r3, #0]
 800338e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003392:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	699a      	ldr	r2, [r3, #24]
 8003398:	8b7b      	ldrh	r3, [r7, #26]
 800339a:	429a      	cmp	r2, r3
 800339c:	d306      	bcc.n	80033ac <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	699a      	ldr	r2, [r3, #24]
 80033a2:	8b7b      	ldrh	r3, [r7, #26]
 80033a4:	1ad2      	subs	r2, r2, r3
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	619a      	str	r2, [r3, #24]
 80033aa:	e002      	b.n	80033b2 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	2200      	movs	r2, #0
 80033b0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d123      	bne.n	8003402 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	461a      	mov	r2, r3
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4413      	add	r3, r2
 80033c8:	881b      	ldrh	r3, [r3, #0]
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80033d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033d4:	83fb      	strh	r3, [r7, #30]
 80033d6:	8bfb      	ldrh	r3, [r7, #30]
 80033d8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80033dc:	83fb      	strh	r3, [r7, #30]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	461a      	mov	r2, r3
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	441a      	add	r2, r3
 80033ec:	8bfb      	ldrh	r3, [r7, #30]
 80033ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80033f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80033f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033fe:	b29b      	uxth	r3, r3
 8003400:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003402:	88fb      	ldrh	r3, [r7, #6]
 8003404:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003408:	2b00      	cmp	r3, #0
 800340a:	d11f      	bne.n	800344c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	461a      	mov	r2, r3
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4413      	add	r3, r2
 800341a:	881b      	ldrh	r3, [r3, #0]
 800341c:	b29b      	uxth	r3, r3
 800341e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003422:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003426:	83bb      	strh	r3, [r7, #28]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	461a      	mov	r2, r3
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	441a      	add	r2, r3
 8003436:	8bbb      	ldrh	r3, [r7, #28]
 8003438:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800343c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003440:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003444:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003448:	b29b      	uxth	r3, r3
 800344a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800344c:	8b7b      	ldrh	r3, [r7, #26]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d008      	beq.n	8003464 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6818      	ldr	r0, [r3, #0]
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	6959      	ldr	r1, [r3, #20]
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	895a      	ldrh	r2, [r3, #10]
 800345e:	8b7b      	ldrh	r3, [r7, #26]
 8003460:	f003 fc3b 	bl	8006cda <USB_ReadPMA>
    }
  }

  return count;
 8003464:	8b7b      	ldrh	r3, [r7, #26]
}
 8003466:	4618      	mov	r0, r3
 8003468:	3720      	adds	r7, #32
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b0a4      	sub	sp, #144	@ 0x90
 8003472:	af00      	add	r7, sp, #0
 8003474:	60f8      	str	r0, [r7, #12]
 8003476:	60b9      	str	r1, [r7, #8]
 8003478:	4613      	mov	r3, r2
 800347a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800347c:	88fb      	ldrh	r3, [r7, #6]
 800347e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003482:	2b00      	cmp	r3, #0
 8003484:	f000 81dd 	beq.w	8003842 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003490:	b29b      	uxth	r3, r3
 8003492:	461a      	mov	r2, r3
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	4413      	add	r3, r2
 800349c:	3302      	adds	r3, #2
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	6812      	ldr	r2, [r2, #0]
 80034a4:	4413      	add	r3, r2
 80034a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80034aa:	881b      	ldrh	r3, [r3, #0]
 80034ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034b0:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	699a      	ldr	r2, [r3, #24]
 80034b8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80034bc:	429a      	cmp	r2, r3
 80034be:	d907      	bls.n	80034d0 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	699a      	ldr	r2, [r3, #24]
 80034c4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80034c8:	1ad2      	subs	r2, r2, r3
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	619a      	str	r2, [r3, #24]
 80034ce:	e002      	b.n	80034d6 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	2200      	movs	r2, #0
 80034d4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f040 80b9 	bne.w	8003652 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	785b      	ldrb	r3, [r3, #1]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d126      	bne.n	8003536 <HAL_PCD_EP_DB_Transmit+0xc8>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	461a      	mov	r2, r3
 80034fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034fc:	4413      	add	r3, r2
 80034fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	011a      	lsls	r2, r3, #4
 8003506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003508:	4413      	add	r3, r2
 800350a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800350e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003512:	881b      	ldrh	r3, [r3, #0]
 8003514:	b29b      	uxth	r3, r3
 8003516:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800351a:	b29a      	uxth	r2, r3
 800351c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800351e:	801a      	strh	r2, [r3, #0]
 8003520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003522:	881b      	ldrh	r3, [r3, #0]
 8003524:	b29b      	uxth	r3, r3
 8003526:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800352a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800352e:	b29a      	uxth	r2, r3
 8003530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003532:	801a      	strh	r2, [r3, #0]
 8003534:	e01a      	b.n	800356c <HAL_PCD_EP_DB_Transmit+0xfe>
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	785b      	ldrb	r3, [r3, #1]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d116      	bne.n	800356c <HAL_PCD_EP_DB_Transmit+0xfe>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	637b      	str	r3, [r7, #52]	@ 0x34
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800354c:	b29b      	uxth	r3, r3
 800354e:	461a      	mov	r2, r3
 8003550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003552:	4413      	add	r3, r2
 8003554:	637b      	str	r3, [r7, #52]	@ 0x34
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	011a      	lsls	r2, r3, #4
 800355c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800355e:	4413      	add	r3, r2
 8003560:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003564:	633b      	str	r3, [r7, #48]	@ 0x30
 8003566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003568:	2200      	movs	r2, #0
 800356a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	627b      	str	r3, [r7, #36]	@ 0x24
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	785b      	ldrb	r3, [r3, #1]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d126      	bne.n	80035c8 <HAL_PCD_EP_DB_Transmit+0x15a>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	61fb      	str	r3, [r7, #28]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003588:	b29b      	uxth	r3, r3
 800358a:	461a      	mov	r2, r3
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	4413      	add	r3, r2
 8003590:	61fb      	str	r3, [r7, #28]
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	011a      	lsls	r2, r3, #4
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	4413      	add	r3, r2
 800359c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80035a0:	61bb      	str	r3, [r7, #24]
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	881b      	ldrh	r3, [r3, #0]
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035ac:	b29a      	uxth	r2, r3
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	801a      	strh	r2, [r3, #0]
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	881b      	ldrh	r3, [r3, #0]
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	801a      	strh	r2, [r3, #0]
 80035c6:	e017      	b.n	80035f8 <HAL_PCD_EP_DB_Transmit+0x18a>
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	785b      	ldrb	r3, [r3, #1]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d113      	bne.n	80035f8 <HAL_PCD_EP_DB_Transmit+0x18a>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035d8:	b29b      	uxth	r3, r3
 80035da:	461a      	mov	r2, r3
 80035dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035de:	4413      	add	r3, r2
 80035e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	011a      	lsls	r2, r3, #4
 80035e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ea:	4413      	add	r3, r2
 80035ec:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80035f0:	623b      	str	r3, [r7, #32]
 80035f2:	6a3b      	ldr	r3, [r7, #32]
 80035f4:	2200      	movs	r2, #0
 80035f6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	4619      	mov	r1, r3
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f005 f96b 	bl	80088da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003604:	88fb      	ldrh	r3, [r7, #6]
 8003606:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 82fc 	beq.w	8003c08 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	461a      	mov	r2, r3
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	4413      	add	r3, r2
 800361e:	881b      	ldrh	r3, [r3, #0]
 8003620:	b29b      	uxth	r3, r3
 8003622:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003626:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800362a:	82fb      	strh	r3, [r7, #22]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	461a      	mov	r2, r3
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	441a      	add	r2, r3
 800363a:	8afb      	ldrh	r3, [r7, #22]
 800363c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003640:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003644:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003648:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800364c:	b29b      	uxth	r3, r3
 800364e:	8013      	strh	r3, [r2, #0]
 8003650:	e2da      	b.n	8003c08 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003652:	88fb      	ldrh	r3, [r7, #6]
 8003654:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d021      	beq.n	80036a0 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	461a      	mov	r2, r3
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4413      	add	r3, r2
 800366a:	881b      	ldrh	r3, [r3, #0]
 800366c:	b29b      	uxth	r3, r3
 800366e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003672:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003676:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	461a      	mov	r2, r3
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	441a      	add	r2, r3
 8003688:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800368c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003690:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003694:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003698:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800369c:	b29b      	uxth	r3, r3
 800369e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	f040 82ae 	bne.w	8003c08 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	695a      	ldr	r2, [r3, #20]
 80036b0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80036b4:	441a      	add	r2, r3
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	69da      	ldr	r2, [r3, #28]
 80036be:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80036c2:	441a      	add	r2, r3
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	6a1a      	ldr	r2, [r3, #32]
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d30b      	bcc.n	80036ec <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	6a1a      	ldr	r2, [r3, #32]
 80036e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036e4:	1ad2      	subs	r2, r2, r3
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	621a      	str	r2, [r3, #32]
 80036ea:	e017      	b.n	800371c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d108      	bne.n	8003706 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80036f4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80036f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003704:	e00a      	b.n	800371c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	2200      	movs	r2, #0
 800371a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	785b      	ldrb	r3, [r3, #1]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d165      	bne.n	80037f0 <HAL_PCD_EP_DB_Transmit+0x382>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003732:	b29b      	uxth	r3, r3
 8003734:	461a      	mov	r2, r3
 8003736:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003738:	4413      	add	r3, r2
 800373a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	011a      	lsls	r2, r3, #4
 8003742:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003744:	4413      	add	r3, r2
 8003746:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800374a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800374c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800374e:	881b      	ldrh	r3, [r3, #0]
 8003750:	b29b      	uxth	r3, r3
 8003752:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003756:	b29a      	uxth	r2, r3
 8003758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800375a:	801a      	strh	r2, [r3, #0]
 800375c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003760:	2b3e      	cmp	r3, #62	@ 0x3e
 8003762:	d91d      	bls.n	80037a0 <HAL_PCD_EP_DB_Transmit+0x332>
 8003764:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003768:	095b      	lsrs	r3, r3, #5
 800376a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800376c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003770:	f003 031f 	and.w	r3, r3, #31
 8003774:	2b00      	cmp	r3, #0
 8003776:	d102      	bne.n	800377e <HAL_PCD_EP_DB_Transmit+0x310>
 8003778:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800377a:	3b01      	subs	r3, #1
 800377c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800377e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003780:	881b      	ldrh	r3, [r3, #0]
 8003782:	b29a      	uxth	r2, r3
 8003784:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003786:	b29b      	uxth	r3, r3
 8003788:	029b      	lsls	r3, r3, #10
 800378a:	b29b      	uxth	r3, r3
 800378c:	4313      	orrs	r3, r2
 800378e:	b29b      	uxth	r3, r3
 8003790:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003794:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003798:	b29a      	uxth	r2, r3
 800379a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800379c:	801a      	strh	r2, [r3, #0]
 800379e:	e044      	b.n	800382a <HAL_PCD_EP_DB_Transmit+0x3bc>
 80037a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d10a      	bne.n	80037be <HAL_PCD_EP_DB_Transmit+0x350>
 80037a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037aa:	881b      	ldrh	r3, [r3, #0]
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037ba:	801a      	strh	r2, [r3, #0]
 80037bc:	e035      	b.n	800382a <HAL_PCD_EP_DB_Transmit+0x3bc>
 80037be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037c2:	085b      	lsrs	r3, r3, #1
 80037c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d002      	beq.n	80037d8 <HAL_PCD_EP_DB_Transmit+0x36a>
 80037d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037d4:	3301      	adds	r3, #1
 80037d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037da:	881b      	ldrh	r3, [r3, #0]
 80037dc:	b29a      	uxth	r2, r3
 80037de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	029b      	lsls	r3, r3, #10
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	4313      	orrs	r3, r2
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037ec:	801a      	strh	r2, [r3, #0]
 80037ee:	e01c      	b.n	800382a <HAL_PCD_EP_DB_Transmit+0x3bc>
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	785b      	ldrb	r3, [r3, #1]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d118      	bne.n	800382a <HAL_PCD_EP_DB_Transmit+0x3bc>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003806:	b29b      	uxth	r3, r3
 8003808:	461a      	mov	r2, r3
 800380a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800380c:	4413      	add	r3, r2
 800380e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	011a      	lsls	r2, r3, #4
 8003816:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003818:	4413      	add	r3, r2
 800381a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800381e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003820:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003824:	b29a      	uxth	r2, r3
 8003826:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003828:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6818      	ldr	r0, [r3, #0]
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	6959      	ldr	r1, [r3, #20]
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	891a      	ldrh	r2, [r3, #8]
 8003836:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800383a:	b29b      	uxth	r3, r3
 800383c:	f003 fa07 	bl	8006c4e <USB_WritePMA>
 8003840:	e1e2      	b.n	8003c08 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800384a:	b29b      	uxth	r3, r3
 800384c:	461a      	mov	r2, r3
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	4413      	add	r3, r2
 8003856:	3306      	adds	r3, #6
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	6812      	ldr	r2, [r2, #0]
 800385e:	4413      	add	r3, r2
 8003860:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003864:	881b      	ldrh	r3, [r3, #0]
 8003866:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800386a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	699a      	ldr	r2, [r3, #24]
 8003872:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003876:	429a      	cmp	r2, r3
 8003878:	d307      	bcc.n	800388a <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	699a      	ldr	r2, [r3, #24]
 800387e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003882:	1ad2      	subs	r2, r2, r3
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	619a      	str	r2, [r3, #24]
 8003888:	e002      	b.n	8003890 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	2200      	movs	r2, #0
 800388e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	2b00      	cmp	r3, #0
 8003896:	f040 80c0 	bne.w	8003a1a <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	785b      	ldrb	r3, [r3, #1]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d126      	bne.n	80038f0 <HAL_PCD_EP_DB_Transmit+0x482>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	461a      	mov	r2, r3
 80038b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80038b6:	4413      	add	r3, r2
 80038b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	011a      	lsls	r2, r3, #4
 80038c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80038c2:	4413      	add	r3, r2
 80038c4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80038c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80038ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038cc:	881b      	ldrh	r3, [r3, #0]
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038d8:	801a      	strh	r2, [r3, #0]
 80038da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038dc:	881b      	ldrh	r3, [r3, #0]
 80038de:	b29b      	uxth	r3, r3
 80038e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038ec:	801a      	strh	r2, [r3, #0]
 80038ee:	e01a      	b.n	8003926 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	785b      	ldrb	r3, [r3, #1]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d116      	bne.n	8003926 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003906:	b29b      	uxth	r3, r3
 8003908:	461a      	mov	r2, r3
 800390a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800390c:	4413      	add	r3, r2
 800390e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	011a      	lsls	r2, r3, #4
 8003916:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003918:	4413      	add	r3, r2
 800391a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800391e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003920:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003922:	2200      	movs	r2, #0
 8003924:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	677b      	str	r3, [r7, #116]	@ 0x74
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	785b      	ldrb	r3, [r3, #1]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d12b      	bne.n	800398c <HAL_PCD_EP_DB_Transmit+0x51e>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003942:	b29b      	uxth	r3, r3
 8003944:	461a      	mov	r2, r3
 8003946:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003948:	4413      	add	r3, r2
 800394a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	011a      	lsls	r2, r3, #4
 8003952:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003954:	4413      	add	r3, r2
 8003956:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800395a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800395e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003962:	881b      	ldrh	r3, [r3, #0]
 8003964:	b29b      	uxth	r3, r3
 8003966:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800396a:	b29a      	uxth	r2, r3
 800396c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003970:	801a      	strh	r2, [r3, #0]
 8003972:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003976:	881b      	ldrh	r3, [r3, #0]
 8003978:	b29b      	uxth	r3, r3
 800397a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800397e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003982:	b29a      	uxth	r2, r3
 8003984:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003988:	801a      	strh	r2, [r3, #0]
 800398a:	e017      	b.n	80039bc <HAL_PCD_EP_DB_Transmit+0x54e>
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	785b      	ldrb	r3, [r3, #1]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d113      	bne.n	80039bc <HAL_PCD_EP_DB_Transmit+0x54e>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800399c:	b29b      	uxth	r3, r3
 800399e:	461a      	mov	r2, r3
 80039a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039a2:	4413      	add	r3, r2
 80039a4:	677b      	str	r3, [r7, #116]	@ 0x74
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	011a      	lsls	r2, r3, #4
 80039ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039ae:	4413      	add	r3, r2
 80039b0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80039b4:	673b      	str	r3, [r7, #112]	@ 0x70
 80039b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039b8:	2200      	movs	r2, #0
 80039ba:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	4619      	mov	r1, r3
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f004 ff89 	bl	80088da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80039c8:	88fb      	ldrh	r3, [r7, #6]
 80039ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f040 811a 	bne.w	8003c08 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	461a      	mov	r2, r3
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	4413      	add	r3, r2
 80039e2:	881b      	ldrh	r3, [r3, #0]
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039ee:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	461a      	mov	r2, r3
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	441a      	add	r2, r3
 8003a00:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003a04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a0c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	8013      	strh	r3, [r2, #0]
 8003a18:	e0f6      	b.n	8003c08 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003a1a:	88fb      	ldrh	r3, [r7, #6]
 8003a1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d121      	bne.n	8003a68 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	461a      	mov	r2, r3
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4413      	add	r3, r2
 8003a32:	881b      	ldrh	r3, [r3, #0]
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a3e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	461a      	mov	r2, r3
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	441a      	add	r2, r3
 8003a50:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003a54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a5c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	f040 80ca 	bne.w	8003c08 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	695a      	ldr	r2, [r3, #20]
 8003a78:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003a7c:	441a      	add	r2, r3
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	69da      	ldr	r2, [r3, #28]
 8003a86:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003a8a:	441a      	add	r2, r3
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	6a1a      	ldr	r2, [r3, #32]
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d30b      	bcc.n	8003ab4 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	6a1a      	ldr	r2, [r3, #32]
 8003aa8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003aac:	1ad2      	subs	r2, r2, r3
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	621a      	str	r2, [r3, #32]
 8003ab2:	e017      	b.n	8003ae4 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d108      	bne.n	8003ace <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003abc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003ac0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003acc:	e00a      	b.n	8003ae4 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	657b      	str	r3, [r7, #84]	@ 0x54
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	785b      	ldrb	r3, [r3, #1]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d165      	bne.n	8003bbe <HAL_PCD_EP_DB_Transmit+0x750>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	461a      	mov	r2, r3
 8003b04:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b06:	4413      	add	r3, r2
 8003b08:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	011a      	lsls	r2, r3, #4
 8003b10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b12:	4413      	add	r3, r2
 8003b14:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003b18:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b1c:	881b      	ldrh	r3, [r3, #0]
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b28:	801a      	strh	r2, [r3, #0]
 8003b2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b2e:	2b3e      	cmp	r3, #62	@ 0x3e
 8003b30:	d91d      	bls.n	8003b6e <HAL_PCD_EP_DB_Transmit+0x700>
 8003b32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b36:	095b      	lsrs	r3, r3, #5
 8003b38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b3e:	f003 031f 	and.w	r3, r3, #31
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d102      	bne.n	8003b4c <HAL_PCD_EP_DB_Transmit+0x6de>
 8003b46:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b4c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b4e:	881b      	ldrh	r3, [r3, #0]
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	029b      	lsls	r3, r3, #10
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b6a:	801a      	strh	r2, [r3, #0]
 8003b6c:	e041      	b.n	8003bf2 <HAL_PCD_EP_DB_Transmit+0x784>
 8003b6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10a      	bne.n	8003b8c <HAL_PCD_EP_DB_Transmit+0x71e>
 8003b76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b78:	881b      	ldrh	r3, [r3, #0]
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b84:	b29a      	uxth	r2, r3
 8003b86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b88:	801a      	strh	r2, [r3, #0]
 8003b8a:	e032      	b.n	8003bf2 <HAL_PCD_EP_DB_Transmit+0x784>
 8003b8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b90:	085b      	lsrs	r3, r3, #1
 8003b92:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d002      	beq.n	8003ba6 <HAL_PCD_EP_DB_Transmit+0x738>
 8003ba0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ba6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ba8:	881b      	ldrh	r3, [r3, #0]
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	029b      	lsls	r3, r3, #10
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bba:	801a      	strh	r2, [r3, #0]
 8003bbc:	e019      	b.n	8003bf2 <HAL_PCD_EP_DB_Transmit+0x784>
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	785b      	ldrb	r3, [r3, #1]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d115      	bne.n	8003bf2 <HAL_PCD_EP_DB_Transmit+0x784>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bd4:	4413      	add	r3, r2
 8003bd6:	657b      	str	r3, [r7, #84]	@ 0x54
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	011a      	lsls	r2, r3, #4
 8003bde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003be0:	4413      	add	r3, r2
 8003be2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003be6:	653b      	str	r3, [r7, #80]	@ 0x50
 8003be8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bf0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6818      	ldr	r0, [r3, #0]
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	6959      	ldr	r1, [r3, #20]
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	895a      	ldrh	r2, [r3, #10]
 8003bfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	f003 f823 	bl	8006c4e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4413      	add	r3, r2
 8003c16:	881b      	ldrh	r3, [r3, #0]
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c22:	82bb      	strh	r3, [r7, #20]
 8003c24:	8abb      	ldrh	r3, [r7, #20]
 8003c26:	f083 0310 	eor.w	r3, r3, #16
 8003c2a:	82bb      	strh	r3, [r7, #20]
 8003c2c:	8abb      	ldrh	r3, [r7, #20]
 8003c2e:	f083 0320 	eor.w	r3, r3, #32
 8003c32:	82bb      	strh	r3, [r7, #20]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	461a      	mov	r2, r3
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	441a      	add	r2, r3
 8003c42:	8abb      	ldrh	r3, [r7, #20]
 8003c44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3790      	adds	r7, #144	@ 0x90
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b087      	sub	sp, #28
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	60f8      	str	r0, [r7, #12]
 8003c6a:	607b      	str	r3, [r7, #4]
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	817b      	strh	r3, [r7, #10]
 8003c70:	4613      	mov	r3, r2
 8003c72:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003c74:	897b      	ldrh	r3, [r7, #10]
 8003c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00b      	beq.n	8003c98 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c80:	897b      	ldrh	r3, [r7, #10]
 8003c82:	f003 0207 	and.w	r2, r3, #7
 8003c86:	4613      	mov	r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	4413      	add	r3, r2
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	3310      	adds	r3, #16
 8003c90:	68fa      	ldr	r2, [r7, #12]
 8003c92:	4413      	add	r3, r2
 8003c94:	617b      	str	r3, [r7, #20]
 8003c96:	e009      	b.n	8003cac <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c98:	897a      	ldrh	r2, [r7, #10]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	4413      	add	r3, r2
 8003ca0:	00db      	lsls	r3, r3, #3
 8003ca2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	4413      	add	r3, r2
 8003caa:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003cac:	893b      	ldrh	r3, [r7, #8]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d107      	bne.n	8003cc2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	80da      	strh	r2, [r3, #6]
 8003cc0:	e00b      	b.n	8003cda <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	0c1b      	lsrs	r3, r3, #16
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	371c      	adds	r7, #28
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bc80      	pop	{r7}
 8003ce4:	4770      	bx	lr
	...

08003ce8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e272      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f000 8087 	beq.w	8003e16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d08:	4b92      	ldr	r3, [pc, #584]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f003 030c 	and.w	r3, r3, #12
 8003d10:	2b04      	cmp	r3, #4
 8003d12:	d00c      	beq.n	8003d2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d14:	4b8f      	ldr	r3, [pc, #572]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f003 030c 	and.w	r3, r3, #12
 8003d1c:	2b08      	cmp	r3, #8
 8003d1e:	d112      	bne.n	8003d46 <HAL_RCC_OscConfig+0x5e>
 8003d20:	4b8c      	ldr	r3, [pc, #560]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d2c:	d10b      	bne.n	8003d46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d2e:	4b89      	ldr	r3, [pc, #548]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d06c      	beq.n	8003e14 <HAL_RCC_OscConfig+0x12c>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d168      	bne.n	8003e14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e24c      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d4e:	d106      	bne.n	8003d5e <HAL_RCC_OscConfig+0x76>
 8003d50:	4b80      	ldr	r3, [pc, #512]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a7f      	ldr	r2, [pc, #508]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d5a:	6013      	str	r3, [r2, #0]
 8003d5c:	e02e      	b.n	8003dbc <HAL_RCC_OscConfig+0xd4>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10c      	bne.n	8003d80 <HAL_RCC_OscConfig+0x98>
 8003d66:	4b7b      	ldr	r3, [pc, #492]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a7a      	ldr	r2, [pc, #488]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d70:	6013      	str	r3, [r2, #0]
 8003d72:	4b78      	ldr	r3, [pc, #480]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a77      	ldr	r2, [pc, #476]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d78:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d7c:	6013      	str	r3, [r2, #0]
 8003d7e:	e01d      	b.n	8003dbc <HAL_RCC_OscConfig+0xd4>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d88:	d10c      	bne.n	8003da4 <HAL_RCC_OscConfig+0xbc>
 8003d8a:	4b72      	ldr	r3, [pc, #456]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a71      	ldr	r2, [pc, #452]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d94:	6013      	str	r3, [r2, #0]
 8003d96:	4b6f      	ldr	r3, [pc, #444]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a6e      	ldr	r2, [pc, #440]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003d9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003da0:	6013      	str	r3, [r2, #0]
 8003da2:	e00b      	b.n	8003dbc <HAL_RCC_OscConfig+0xd4>
 8003da4:	4b6b      	ldr	r3, [pc, #428]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a6a      	ldr	r2, [pc, #424]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003daa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dae:	6013      	str	r3, [r2, #0]
 8003db0:	4b68      	ldr	r3, [pc, #416]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a67      	ldr	r2, [pc, #412]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003db6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d013      	beq.n	8003dec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc4:	f7fc fe06 	bl	80009d4 <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dcc:	f7fc fe02 	bl	80009d4 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b64      	cmp	r3, #100	@ 0x64
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e200      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dde:	4b5d      	ldr	r3, [pc, #372]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d0f0      	beq.n	8003dcc <HAL_RCC_OscConfig+0xe4>
 8003dea:	e014      	b.n	8003e16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dec:	f7fc fdf2 	bl	80009d4 <HAL_GetTick>
 8003df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003df2:	e008      	b.n	8003e06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003df4:	f7fc fdee 	bl	80009d4 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b64      	cmp	r3, #100	@ 0x64
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e1ec      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e06:	4b53      	ldr	r3, [pc, #332]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1f0      	bne.n	8003df4 <HAL_RCC_OscConfig+0x10c>
 8003e12:	e000      	b.n	8003e16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d063      	beq.n	8003eea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e22:	4b4c      	ldr	r3, [pc, #304]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f003 030c 	and.w	r3, r3, #12
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00b      	beq.n	8003e46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e2e:	4b49      	ldr	r3, [pc, #292]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f003 030c 	and.w	r3, r3, #12
 8003e36:	2b08      	cmp	r3, #8
 8003e38:	d11c      	bne.n	8003e74 <HAL_RCC_OscConfig+0x18c>
 8003e3a:	4b46      	ldr	r3, [pc, #280]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d116      	bne.n	8003e74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e46:	4b43      	ldr	r3, [pc, #268]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d005      	beq.n	8003e5e <HAL_RCC_OscConfig+0x176>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d001      	beq.n	8003e5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e1c0      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e5e:	4b3d      	ldr	r3, [pc, #244]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	4939      	ldr	r1, [pc, #228]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e72:	e03a      	b.n	8003eea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d020      	beq.n	8003ebe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e7c:	4b36      	ldr	r3, [pc, #216]	@ (8003f58 <HAL_RCC_OscConfig+0x270>)
 8003e7e:	2201      	movs	r2, #1
 8003e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e82:	f7fc fda7 	bl	80009d4 <HAL_GetTick>
 8003e86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e88:	e008      	b.n	8003e9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e8a:	f7fc fda3 	bl	80009d4 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d901      	bls.n	8003e9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e1a1      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e9c:	4b2d      	ldr	r3, [pc, #180]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d0f0      	beq.n	8003e8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea8:	4b2a      	ldr	r3, [pc, #168]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	4927      	ldr	r1, [pc, #156]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	600b      	str	r3, [r1, #0]
 8003ebc:	e015      	b.n	8003eea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ebe:	4b26      	ldr	r3, [pc, #152]	@ (8003f58 <HAL_RCC_OscConfig+0x270>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec4:	f7fc fd86 	bl	80009d4 <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ecc:	f7fc fd82 	bl	80009d4 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e180      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ede:	4b1d      	ldr	r3, [pc, #116]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1f0      	bne.n	8003ecc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0308 	and.w	r3, r3, #8
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d03a      	beq.n	8003f6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d019      	beq.n	8003f32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003efe:	4b17      	ldr	r3, [pc, #92]	@ (8003f5c <HAL_RCC_OscConfig+0x274>)
 8003f00:	2201      	movs	r2, #1
 8003f02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f04:	f7fc fd66 	bl	80009d4 <HAL_GetTick>
 8003f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f0a:	e008      	b.n	8003f1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f0c:	f7fc fd62 	bl	80009d4 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e160      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f54 <HAL_RCC_OscConfig+0x26c>)
 8003f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d0f0      	beq.n	8003f0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003f2a:	2001      	movs	r0, #1
 8003f2c:	f000 faba 	bl	80044a4 <RCC_Delay>
 8003f30:	e01c      	b.n	8003f6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f32:	4b0a      	ldr	r3, [pc, #40]	@ (8003f5c <HAL_RCC_OscConfig+0x274>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f38:	f7fc fd4c 	bl	80009d4 <HAL_GetTick>
 8003f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f3e:	e00f      	b.n	8003f60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f40:	f7fc fd48 	bl	80009d4 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d908      	bls.n	8003f60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e146      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
 8003f52:	bf00      	nop
 8003f54:	40021000 	.word	0x40021000
 8003f58:	42420000 	.word	0x42420000
 8003f5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f60:	4b92      	ldr	r3, [pc, #584]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8003f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1e9      	bne.n	8003f40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0304 	and.w	r3, r3, #4
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 80a6 	beq.w	80040c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f7e:	4b8b      	ldr	r3, [pc, #556]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8003f80:	69db      	ldr	r3, [r3, #28]
 8003f82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10d      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f8a:	4b88      	ldr	r3, [pc, #544]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8003f8c:	69db      	ldr	r3, [r3, #28]
 8003f8e:	4a87      	ldr	r2, [pc, #540]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8003f90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f94:	61d3      	str	r3, [r2, #28]
 8003f96:	4b85      	ldr	r3, [pc, #532]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f9e:	60bb      	str	r3, [r7, #8]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa6:	4b82      	ldr	r3, [pc, #520]	@ (80041b0 <HAL_RCC_OscConfig+0x4c8>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d118      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fb2:	4b7f      	ldr	r3, [pc, #508]	@ (80041b0 <HAL_RCC_OscConfig+0x4c8>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a7e      	ldr	r2, [pc, #504]	@ (80041b0 <HAL_RCC_OscConfig+0x4c8>)
 8003fb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fbe:	f7fc fd09 	bl	80009d4 <HAL_GetTick>
 8003fc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc4:	e008      	b.n	8003fd8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fc6:	f7fc fd05 	bl	80009d4 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	2b64      	cmp	r3, #100	@ 0x64
 8003fd2:	d901      	bls.n	8003fd8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e103      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd8:	4b75      	ldr	r3, [pc, #468]	@ (80041b0 <HAL_RCC_OscConfig+0x4c8>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d0f0      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d106      	bne.n	8003ffa <HAL_RCC_OscConfig+0x312>
 8003fec:	4b6f      	ldr	r3, [pc, #444]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	4a6e      	ldr	r2, [pc, #440]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8003ff2:	f043 0301 	orr.w	r3, r3, #1
 8003ff6:	6213      	str	r3, [r2, #32]
 8003ff8:	e02d      	b.n	8004056 <HAL_RCC_OscConfig+0x36e>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10c      	bne.n	800401c <HAL_RCC_OscConfig+0x334>
 8004002:	4b6a      	ldr	r3, [pc, #424]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	4a69      	ldr	r2, [pc, #420]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004008:	f023 0301 	bic.w	r3, r3, #1
 800400c:	6213      	str	r3, [r2, #32]
 800400e:	4b67      	ldr	r3, [pc, #412]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	4a66      	ldr	r2, [pc, #408]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004014:	f023 0304 	bic.w	r3, r3, #4
 8004018:	6213      	str	r3, [r2, #32]
 800401a:	e01c      	b.n	8004056 <HAL_RCC_OscConfig+0x36e>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	2b05      	cmp	r3, #5
 8004022:	d10c      	bne.n	800403e <HAL_RCC_OscConfig+0x356>
 8004024:	4b61      	ldr	r3, [pc, #388]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004026:	6a1b      	ldr	r3, [r3, #32]
 8004028:	4a60      	ldr	r2, [pc, #384]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 800402a:	f043 0304 	orr.w	r3, r3, #4
 800402e:	6213      	str	r3, [r2, #32]
 8004030:	4b5e      	ldr	r3, [pc, #376]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004032:	6a1b      	ldr	r3, [r3, #32]
 8004034:	4a5d      	ldr	r2, [pc, #372]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004036:	f043 0301 	orr.w	r3, r3, #1
 800403a:	6213      	str	r3, [r2, #32]
 800403c:	e00b      	b.n	8004056 <HAL_RCC_OscConfig+0x36e>
 800403e:	4b5b      	ldr	r3, [pc, #364]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	4a5a      	ldr	r2, [pc, #360]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004044:	f023 0301 	bic.w	r3, r3, #1
 8004048:	6213      	str	r3, [r2, #32]
 800404a:	4b58      	ldr	r3, [pc, #352]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	4a57      	ldr	r2, [pc, #348]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004050:	f023 0304 	bic.w	r3, r3, #4
 8004054:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d015      	beq.n	800408a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800405e:	f7fc fcb9 	bl	80009d4 <HAL_GetTick>
 8004062:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004064:	e00a      	b.n	800407c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004066:	f7fc fcb5 	bl	80009d4 <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004074:	4293      	cmp	r3, r2
 8004076:	d901      	bls.n	800407c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e0b1      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800407c:	4b4b      	ldr	r3, [pc, #300]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d0ee      	beq.n	8004066 <HAL_RCC_OscConfig+0x37e>
 8004088:	e014      	b.n	80040b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800408a:	f7fc fca3 	bl	80009d4 <HAL_GetTick>
 800408e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004090:	e00a      	b.n	80040a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004092:	f7fc fc9f 	bl	80009d4 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d901      	bls.n	80040a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e09b      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040a8:	4b40      	ldr	r3, [pc, #256]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 80040aa:	6a1b      	ldr	r3, [r3, #32]
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1ee      	bne.n	8004092 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80040b4:	7dfb      	ldrb	r3, [r7, #23]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d105      	bne.n	80040c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040ba:	4b3c      	ldr	r3, [pc, #240]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	4a3b      	ldr	r2, [pc, #236]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 80040c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f000 8087 	beq.w	80041de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040d0:	4b36      	ldr	r3, [pc, #216]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f003 030c 	and.w	r3, r3, #12
 80040d8:	2b08      	cmp	r3, #8
 80040da:	d061      	beq.n	80041a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	69db      	ldr	r3, [r3, #28]
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d146      	bne.n	8004172 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040e4:	4b33      	ldr	r3, [pc, #204]	@ (80041b4 <HAL_RCC_OscConfig+0x4cc>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ea:	f7fc fc73 	bl	80009d4 <HAL_GetTick>
 80040ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040f0:	e008      	b.n	8004104 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040f2:	f7fc fc6f 	bl	80009d4 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d901      	bls.n	8004104 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e06d      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004104:	4b29      	ldr	r3, [pc, #164]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1f0      	bne.n	80040f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a1b      	ldr	r3, [r3, #32]
 8004114:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004118:	d108      	bne.n	800412c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800411a:	4b24      	ldr	r3, [pc, #144]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	4921      	ldr	r1, [pc, #132]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004128:	4313      	orrs	r3, r2
 800412a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800412c:	4b1f      	ldr	r3, [pc, #124]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a19      	ldr	r1, [r3, #32]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800413c:	430b      	orrs	r3, r1
 800413e:	491b      	ldr	r1, [pc, #108]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004140:	4313      	orrs	r3, r2
 8004142:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004144:	4b1b      	ldr	r3, [pc, #108]	@ (80041b4 <HAL_RCC_OscConfig+0x4cc>)
 8004146:	2201      	movs	r2, #1
 8004148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800414a:	f7fc fc43 	bl	80009d4 <HAL_GetTick>
 800414e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004150:	e008      	b.n	8004164 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004152:	f7fc fc3f 	bl	80009d4 <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b02      	cmp	r3, #2
 800415e:	d901      	bls.n	8004164 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e03d      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004164:	4b11      	ldr	r3, [pc, #68]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d0f0      	beq.n	8004152 <HAL_RCC_OscConfig+0x46a>
 8004170:	e035      	b.n	80041de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004172:	4b10      	ldr	r3, [pc, #64]	@ (80041b4 <HAL_RCC_OscConfig+0x4cc>)
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004178:	f7fc fc2c 	bl	80009d4 <HAL_GetTick>
 800417c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800417e:	e008      	b.n	8004192 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004180:	f7fc fc28 	bl	80009d4 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e026      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004192:	4b06      	ldr	r3, [pc, #24]	@ (80041ac <HAL_RCC_OscConfig+0x4c4>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1f0      	bne.n	8004180 <HAL_RCC_OscConfig+0x498>
 800419e:	e01e      	b.n	80041de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	69db      	ldr	r3, [r3, #28]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d107      	bne.n	80041b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e019      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
 80041ac:	40021000 	.word	0x40021000
 80041b0:	40007000 	.word	0x40007000
 80041b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80041b8:	4b0b      	ldr	r3, [pc, #44]	@ (80041e8 <HAL_RCC_OscConfig+0x500>)
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a1b      	ldr	r3, [r3, #32]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d106      	bne.n	80041da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d001      	beq.n	80041de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e000      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3718      	adds	r7, #24
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	40021000 	.word	0x40021000

080041ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d101      	bne.n	8004200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e0d0      	b.n	80043a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004200:	4b6a      	ldr	r3, [pc, #424]	@ (80043ac <HAL_RCC_ClockConfig+0x1c0>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0307 	and.w	r3, r3, #7
 8004208:	683a      	ldr	r2, [r7, #0]
 800420a:	429a      	cmp	r2, r3
 800420c:	d910      	bls.n	8004230 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800420e:	4b67      	ldr	r3, [pc, #412]	@ (80043ac <HAL_RCC_ClockConfig+0x1c0>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f023 0207 	bic.w	r2, r3, #7
 8004216:	4965      	ldr	r1, [pc, #404]	@ (80043ac <HAL_RCC_ClockConfig+0x1c0>)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	4313      	orrs	r3, r2
 800421c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800421e:	4b63      	ldr	r3, [pc, #396]	@ (80043ac <HAL_RCC_ClockConfig+0x1c0>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0307 	and.w	r3, r3, #7
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	429a      	cmp	r2, r3
 800422a:	d001      	beq.n	8004230 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e0b8      	b.n	80043a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d020      	beq.n	800427e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	2b00      	cmp	r3, #0
 8004246:	d005      	beq.n	8004254 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004248:	4b59      	ldr	r3, [pc, #356]	@ (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	4a58      	ldr	r2, [pc, #352]	@ (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 800424e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004252:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0308 	and.w	r3, r3, #8
 800425c:	2b00      	cmp	r3, #0
 800425e:	d005      	beq.n	800426c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004260:	4b53      	ldr	r3, [pc, #332]	@ (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	4a52      	ldr	r2, [pc, #328]	@ (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004266:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800426a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800426c:	4b50      	ldr	r3, [pc, #320]	@ (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	494d      	ldr	r1, [pc, #308]	@ (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 800427a:	4313      	orrs	r3, r2
 800427c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	d040      	beq.n	800430c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d107      	bne.n	80042a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004292:	4b47      	ldr	r3, [pc, #284]	@ (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d115      	bne.n	80042ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e07f      	b.n	80043a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d107      	bne.n	80042ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042aa:	4b41      	ldr	r3, [pc, #260]	@ (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d109      	bne.n	80042ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e073      	b.n	80043a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ba:	4b3d      	ldr	r3, [pc, #244]	@ (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e06b      	b.n	80043a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042ca:	4b39      	ldr	r3, [pc, #228]	@ (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f023 0203 	bic.w	r2, r3, #3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	4936      	ldr	r1, [pc, #216]	@ (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042dc:	f7fc fb7a 	bl	80009d4 <HAL_GetTick>
 80042e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042e2:	e00a      	b.n	80042fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042e4:	f7fc fb76 	bl	80009d4 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e053      	b.n	80043a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042fa:	4b2d      	ldr	r3, [pc, #180]	@ (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f003 020c 	and.w	r2, r3, #12
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	429a      	cmp	r2, r3
 800430a:	d1eb      	bne.n	80042e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800430c:	4b27      	ldr	r3, [pc, #156]	@ (80043ac <HAL_RCC_ClockConfig+0x1c0>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0307 	and.w	r3, r3, #7
 8004314:	683a      	ldr	r2, [r7, #0]
 8004316:	429a      	cmp	r2, r3
 8004318:	d210      	bcs.n	800433c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800431a:	4b24      	ldr	r3, [pc, #144]	@ (80043ac <HAL_RCC_ClockConfig+0x1c0>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f023 0207 	bic.w	r2, r3, #7
 8004322:	4922      	ldr	r1, [pc, #136]	@ (80043ac <HAL_RCC_ClockConfig+0x1c0>)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	4313      	orrs	r3, r2
 8004328:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800432a:	4b20      	ldr	r3, [pc, #128]	@ (80043ac <HAL_RCC_ClockConfig+0x1c0>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0307 	and.w	r3, r3, #7
 8004332:	683a      	ldr	r2, [r7, #0]
 8004334:	429a      	cmp	r2, r3
 8004336:	d001      	beq.n	800433c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e032      	b.n	80043a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0304 	and.w	r3, r3, #4
 8004344:	2b00      	cmp	r3, #0
 8004346:	d008      	beq.n	800435a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004348:	4b19      	ldr	r3, [pc, #100]	@ (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	4916      	ldr	r1, [pc, #88]	@ (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004356:	4313      	orrs	r3, r2
 8004358:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0308 	and.w	r3, r3, #8
 8004362:	2b00      	cmp	r3, #0
 8004364:	d009      	beq.n	800437a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004366:	4b12      	ldr	r3, [pc, #72]	@ (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	00db      	lsls	r3, r3, #3
 8004374:	490e      	ldr	r1, [pc, #56]	@ (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004376:	4313      	orrs	r3, r2
 8004378:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800437a:	f000 f821 	bl	80043c0 <HAL_RCC_GetSysClockFreq>
 800437e:	4602      	mov	r2, r0
 8004380:	4b0b      	ldr	r3, [pc, #44]	@ (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	091b      	lsrs	r3, r3, #4
 8004386:	f003 030f 	and.w	r3, r3, #15
 800438a:	490a      	ldr	r1, [pc, #40]	@ (80043b4 <HAL_RCC_ClockConfig+0x1c8>)
 800438c:	5ccb      	ldrb	r3, [r1, r3]
 800438e:	fa22 f303 	lsr.w	r3, r2, r3
 8004392:	4a09      	ldr	r2, [pc, #36]	@ (80043b8 <HAL_RCC_ClockConfig+0x1cc>)
 8004394:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004396:	4b09      	ldr	r3, [pc, #36]	@ (80043bc <HAL_RCC_ClockConfig+0x1d0>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4618      	mov	r0, r3
 800439c:	f7fc fad8 	bl	8000950 <HAL_InitTick>

  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	40022000 	.word	0x40022000
 80043b0:	40021000 	.word	0x40021000
 80043b4:	08009824 	.word	0x08009824
 80043b8:	20000004 	.word	0x20000004
 80043bc:	20000008 	.word	0x20000008

080043c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b087      	sub	sp, #28
 80043c4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043c6:	2300      	movs	r3, #0
 80043c8:	60fb      	str	r3, [r7, #12]
 80043ca:	2300      	movs	r3, #0
 80043cc:	60bb      	str	r3, [r7, #8]
 80043ce:	2300      	movs	r3, #0
 80043d0:	617b      	str	r3, [r7, #20]
 80043d2:	2300      	movs	r3, #0
 80043d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80043d6:	2300      	movs	r3, #0
 80043d8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80043da:	4b1e      	ldr	r3, [pc, #120]	@ (8004454 <HAL_RCC_GetSysClockFreq+0x94>)
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f003 030c 	and.w	r3, r3, #12
 80043e6:	2b04      	cmp	r3, #4
 80043e8:	d002      	beq.n	80043f0 <HAL_RCC_GetSysClockFreq+0x30>
 80043ea:	2b08      	cmp	r3, #8
 80043ec:	d003      	beq.n	80043f6 <HAL_RCC_GetSysClockFreq+0x36>
 80043ee:	e027      	b.n	8004440 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043f0:	4b19      	ldr	r3, [pc, #100]	@ (8004458 <HAL_RCC_GetSysClockFreq+0x98>)
 80043f2:	613b      	str	r3, [r7, #16]
      break;
 80043f4:	e027      	b.n	8004446 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	0c9b      	lsrs	r3, r3, #18
 80043fa:	f003 030f 	and.w	r3, r3, #15
 80043fe:	4a17      	ldr	r2, [pc, #92]	@ (800445c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004400:	5cd3      	ldrb	r3, [r2, r3]
 8004402:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d010      	beq.n	8004430 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800440e:	4b11      	ldr	r3, [pc, #68]	@ (8004454 <HAL_RCC_GetSysClockFreq+0x94>)
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	0c5b      	lsrs	r3, r3, #17
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	4a11      	ldr	r2, [pc, #68]	@ (8004460 <HAL_RCC_GetSysClockFreq+0xa0>)
 800441a:	5cd3      	ldrb	r3, [r2, r3]
 800441c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a0d      	ldr	r2, [pc, #52]	@ (8004458 <HAL_RCC_GetSysClockFreq+0x98>)
 8004422:	fb03 f202 	mul.w	r2, r3, r2
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	fbb2 f3f3 	udiv	r3, r2, r3
 800442c:	617b      	str	r3, [r7, #20]
 800442e:	e004      	b.n	800443a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a0c      	ldr	r2, [pc, #48]	@ (8004464 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004434:	fb02 f303 	mul.w	r3, r2, r3
 8004438:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	613b      	str	r3, [r7, #16]
      break;
 800443e:	e002      	b.n	8004446 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004440:	4b05      	ldr	r3, [pc, #20]	@ (8004458 <HAL_RCC_GetSysClockFreq+0x98>)
 8004442:	613b      	str	r3, [r7, #16]
      break;
 8004444:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004446:	693b      	ldr	r3, [r7, #16]
}
 8004448:	4618      	mov	r0, r3
 800444a:	371c      	adds	r7, #28
 800444c:	46bd      	mov	sp, r7
 800444e:	bc80      	pop	{r7}
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	40021000 	.word	0x40021000
 8004458:	007a1200 	.word	0x007a1200
 800445c:	0800983c 	.word	0x0800983c
 8004460:	0800984c 	.word	0x0800984c
 8004464:	003d0900 	.word	0x003d0900

08004468 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004468:	b480      	push	{r7}
 800446a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800446c:	4b02      	ldr	r3, [pc, #8]	@ (8004478 <HAL_RCC_GetHCLKFreq+0x10>)
 800446e:	681b      	ldr	r3, [r3, #0]
}
 8004470:	4618      	mov	r0, r3
 8004472:	46bd      	mov	sp, r7
 8004474:	bc80      	pop	{r7}
 8004476:	4770      	bx	lr
 8004478:	20000004 	.word	0x20000004

0800447c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004480:	f7ff fff2 	bl	8004468 <HAL_RCC_GetHCLKFreq>
 8004484:	4602      	mov	r2, r0
 8004486:	4b05      	ldr	r3, [pc, #20]	@ (800449c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	0a1b      	lsrs	r3, r3, #8
 800448c:	f003 0307 	and.w	r3, r3, #7
 8004490:	4903      	ldr	r1, [pc, #12]	@ (80044a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004492:	5ccb      	ldrb	r3, [r1, r3]
 8004494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004498:	4618      	mov	r0, r3
 800449a:	bd80      	pop	{r7, pc}
 800449c:	40021000 	.word	0x40021000
 80044a0:	08009834 	.word	0x08009834

080044a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80044ac:	4b0a      	ldr	r3, [pc, #40]	@ (80044d8 <RCC_Delay+0x34>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a0a      	ldr	r2, [pc, #40]	@ (80044dc <RCC_Delay+0x38>)
 80044b2:	fba2 2303 	umull	r2, r3, r2, r3
 80044b6:	0a5b      	lsrs	r3, r3, #9
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	fb02 f303 	mul.w	r3, r2, r3
 80044be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80044c0:	bf00      	nop
  }
  while (Delay --);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	1e5a      	subs	r2, r3, #1
 80044c6:	60fa      	str	r2, [r7, #12]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1f9      	bne.n	80044c0 <RCC_Delay+0x1c>
}
 80044cc:	bf00      	nop
 80044ce:	bf00      	nop
 80044d0:	3714      	adds	r7, #20
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bc80      	pop	{r7}
 80044d6:	4770      	bx	lr
 80044d8:	20000004 	.word	0x20000004
 80044dc:	10624dd3 	.word	0x10624dd3

080044e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80044e8:	2300      	movs	r3, #0
 80044ea:	613b      	str	r3, [r7, #16]
 80044ec:	2300      	movs	r3, #0
 80044ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d07d      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80044fc:	2300      	movs	r3, #0
 80044fe:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004500:	4b4f      	ldr	r3, [pc, #316]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004502:	69db      	ldr	r3, [r3, #28]
 8004504:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d10d      	bne.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800450c:	4b4c      	ldr	r3, [pc, #304]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800450e:	69db      	ldr	r3, [r3, #28]
 8004510:	4a4b      	ldr	r2, [pc, #300]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004512:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004516:	61d3      	str	r3, [r2, #28]
 8004518:	4b49      	ldr	r3, [pc, #292]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800451a:	69db      	ldr	r3, [r3, #28]
 800451c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004520:	60bb      	str	r3, [r7, #8]
 8004522:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004524:	2301      	movs	r3, #1
 8004526:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004528:	4b46      	ldr	r3, [pc, #280]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004530:	2b00      	cmp	r3, #0
 8004532:	d118      	bne.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004534:	4b43      	ldr	r3, [pc, #268]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a42      	ldr	r2, [pc, #264]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800453a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800453e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004540:	f7fc fa48 	bl	80009d4 <HAL_GetTick>
 8004544:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004546:	e008      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004548:	f7fc fa44 	bl	80009d4 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b64      	cmp	r3, #100	@ 0x64
 8004554:	d901      	bls.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e06d      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800455a:	4b3a      	ldr	r3, [pc, #232]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004562:	2b00      	cmp	r3, #0
 8004564:	d0f0      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004566:	4b36      	ldr	r3, [pc, #216]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800456e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d02e      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	429a      	cmp	r2, r3
 8004582:	d027      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004584:	4b2e      	ldr	r3, [pc, #184]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800458c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800458e:	4b2e      	ldr	r3, [pc, #184]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004590:	2201      	movs	r2, #1
 8004592:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004594:	4b2c      	ldr	r3, [pc, #176]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004596:	2200      	movs	r2, #0
 8004598:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800459a:	4a29      	ldr	r2, [pc, #164]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d014      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045aa:	f7fc fa13 	bl	80009d4 <HAL_GetTick>
 80045ae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045b0:	e00a      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045b2:	f7fc fa0f 	bl	80009d4 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d901      	bls.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e036      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045c8:	4b1d      	ldr	r3, [pc, #116]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	f003 0302 	and.w	r3, r3, #2
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d0ee      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045d4:	4b1a      	ldr	r3, [pc, #104]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045d6:	6a1b      	ldr	r3, [r3, #32]
 80045d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	4917      	ldr	r1, [pc, #92]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80045e6:	7dfb      	ldrb	r3, [r7, #23]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d105      	bne.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045ec:	4b14      	ldr	r3, [pc, #80]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ee:	69db      	ldr	r3, [r3, #28]
 80045f0:	4a13      	ldr	r2, [pc, #76]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045f6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d008      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004604:	4b0e      	ldr	r3, [pc, #56]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	490b      	ldr	r1, [pc, #44]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004612:	4313      	orrs	r3, r2
 8004614:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0310 	and.w	r3, r3, #16
 800461e:	2b00      	cmp	r3, #0
 8004620:	d008      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004622:	4b07      	ldr	r3, [pc, #28]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	4904      	ldr	r1, [pc, #16]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004630:	4313      	orrs	r3, r2
 8004632:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3718      	adds	r7, #24
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	40021000 	.word	0x40021000
 8004644:	40007000 	.word	0x40007000
 8004648:	42420440 	.word	0x42420440

0800464c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	4638      	mov	r0, r7
 8004656:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3714      	adds	r7, #20
 8004660:	46bd      	mov	sp, r7
 8004662:	bc80      	pop	{r7}
 8004664:	4770      	bx	lr

08004666 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004666:	b480      	push	{r7}
 8004668:	b085      	sub	sp, #20
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004676:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800467a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	b29a      	uxth	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3714      	adds	r7, #20
 800468c:	46bd      	mov	sp, r7
 800468e:	bc80      	pop	{r7}
 8004690:	4770      	bx	lr

08004692 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004692:	b480      	push	{r7}
 8004694:	b085      	sub	sp, #20
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800469a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800469e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	43db      	mvns	r3, r3
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	4013      	ands	r3, r2
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3714      	adds	r7, #20
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bc80      	pop	{r7}
 80046c4:	4770      	bx	lr

080046c6 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80046c6:	b480      	push	{r7}
 80046c8:	b083      	sub	sp, #12
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
 80046ce:	460b      	mov	r3, r1
 80046d0:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	bc80      	pop	{r7}
 80046dc:	4770      	bx	lr

080046de <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80046de:	b480      	push	{r7}
 80046e0:	b085      	sub	sp, #20
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	60f8      	str	r0, [r7, #12]
 80046e6:	4638      	mov	r0, r7
 80046e8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3714      	adds	r7, #20
 8004712:	46bd      	mov	sp, r7
 8004714:	bc80      	pop	{r7}
 8004716:	4770      	bx	lr

08004718 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004718:	b480      	push	{r7}
 800471a:	b09d      	sub	sp, #116	@ 0x74
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004722:	2300      	movs	r3, #0
 8004724:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	4413      	add	r3, r2
 8004732:	881b      	ldrh	r3, [r3, #0]
 8004734:	b29b      	uxth	r3, r3
 8004736:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800473a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800473e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	78db      	ldrb	r3, [r3, #3]
 8004746:	2b03      	cmp	r3, #3
 8004748:	d81f      	bhi.n	800478a <USB_ActivateEndpoint+0x72>
 800474a:	a201      	add	r2, pc, #4	@ (adr r2, 8004750 <USB_ActivateEndpoint+0x38>)
 800474c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004750:	08004761 	.word	0x08004761
 8004754:	0800477d 	.word	0x0800477d
 8004758:	08004793 	.word	0x08004793
 800475c:	0800476f 	.word	0x0800476f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004760:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004764:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004768:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800476c:	e012      	b.n	8004794 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800476e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004772:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8004776:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800477a:	e00b      	b.n	8004794 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800477c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004780:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004784:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004788:	e004      	b.n	8004794 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8004790:	e000      	b.n	8004794 <USB_ActivateEndpoint+0x7c>
      break;
 8004792:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	441a      	add	r2, r3
 800479e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80047a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	4413      	add	r3, r2
 80047c0:	881b      	ldrh	r3, [r3, #0]
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	683a      	ldr	r2, [r7, #0]
 80047d0:	7812      	ldrb	r2, [r2, #0]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	441a      	add	r2, r3
 80047e2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80047e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	7b1b      	ldrb	r3, [r3, #12]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	f040 8178 	bne.w	8004af4 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	785b      	ldrb	r3, [r3, #1]
 8004808:	2b00      	cmp	r3, #0
 800480a:	f000 8084 	beq.w	8004916 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	61bb      	str	r3, [r7, #24]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004818:	b29b      	uxth	r3, r3
 800481a:	461a      	mov	r2, r3
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	4413      	add	r3, r2
 8004820:	61bb      	str	r3, [r7, #24]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	011a      	lsls	r2, r3, #4
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	4413      	add	r3, r2
 800482c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004830:	617b      	str	r3, [r7, #20]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	88db      	ldrh	r3, [r3, #6]
 8004836:	085b      	lsrs	r3, r3, #1
 8004838:	b29b      	uxth	r3, r3
 800483a:	005b      	lsls	r3, r3, #1
 800483c:	b29a      	uxth	r2, r3
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	4413      	add	r3, r2
 800484c:	881b      	ldrh	r3, [r3, #0]
 800484e:	827b      	strh	r3, [r7, #18]
 8004850:	8a7b      	ldrh	r3, [r7, #18]
 8004852:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004856:	2b00      	cmp	r3, #0
 8004858:	d01b      	beq.n	8004892 <USB_ActivateEndpoint+0x17a>
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	4413      	add	r3, r2
 8004864:	881b      	ldrh	r3, [r3, #0]
 8004866:	b29b      	uxth	r3, r3
 8004868:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800486c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004870:	823b      	strh	r3, [r7, #16]
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	441a      	add	r2, r3
 800487c:	8a3b      	ldrh	r3, [r7, #16]
 800487e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004882:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004886:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800488a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800488e:	b29b      	uxth	r3, r3
 8004890:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	78db      	ldrb	r3, [r3, #3]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d020      	beq.n	80048dc <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	4413      	add	r3, r2
 80048a4:	881b      	ldrh	r3, [r3, #0]
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048b0:	81bb      	strh	r3, [r7, #12]
 80048b2:	89bb      	ldrh	r3, [r7, #12]
 80048b4:	f083 0320 	eor.w	r3, r3, #32
 80048b8:	81bb      	strh	r3, [r7, #12]
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	441a      	add	r2, r3
 80048c4:	89bb      	ldrh	r3, [r7, #12]
 80048c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	8013      	strh	r3, [r2, #0]
 80048da:	e2d5      	b.n	8004e88 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	4413      	add	r3, r2
 80048e6:	881b      	ldrh	r3, [r3, #0]
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048f2:	81fb      	strh	r3, [r7, #14]
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	441a      	add	r2, r3
 80048fe:	89fb      	ldrh	r3, [r7, #14]
 8004900:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004904:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004908:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800490c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004910:	b29b      	uxth	r3, r3
 8004912:	8013      	strh	r3, [r2, #0]
 8004914:	e2b8      	b.n	8004e88 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	633b      	str	r3, [r7, #48]	@ 0x30
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004920:	b29b      	uxth	r3, r3
 8004922:	461a      	mov	r2, r3
 8004924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004926:	4413      	add	r3, r2
 8004928:	633b      	str	r3, [r7, #48]	@ 0x30
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	011a      	lsls	r2, r3, #4
 8004930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004932:	4413      	add	r3, r2
 8004934:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004938:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	88db      	ldrh	r3, [r3, #6]
 800493e:	085b      	lsrs	r3, r3, #1
 8004940:	b29b      	uxth	r3, r3
 8004942:	005b      	lsls	r3, r3, #1
 8004944:	b29a      	uxth	r2, r3
 8004946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004948:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004954:	b29b      	uxth	r3, r3
 8004956:	461a      	mov	r2, r3
 8004958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800495a:	4413      	add	r3, r2
 800495c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	011a      	lsls	r2, r3, #4
 8004964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004966:	4413      	add	r3, r2
 8004968:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800496c:	627b      	str	r3, [r7, #36]	@ 0x24
 800496e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004970:	881b      	ldrh	r3, [r3, #0]
 8004972:	b29b      	uxth	r3, r3
 8004974:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004978:	b29a      	uxth	r2, r3
 800497a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800497c:	801a      	strh	r2, [r3, #0]
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	2b3e      	cmp	r3, #62	@ 0x3e
 8004984:	d91d      	bls.n	80049c2 <USB_ActivateEndpoint+0x2aa>
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	095b      	lsrs	r3, r3, #5
 800498c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	f003 031f 	and.w	r3, r3, #31
 8004996:	2b00      	cmp	r3, #0
 8004998:	d102      	bne.n	80049a0 <USB_ActivateEndpoint+0x288>
 800499a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800499c:	3b01      	subs	r3, #1
 800499e:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a2:	881b      	ldrh	r3, [r3, #0]
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	029b      	lsls	r3, r3, #10
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	4313      	orrs	r3, r2
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049be:	801a      	strh	r2, [r3, #0]
 80049c0:	e026      	b.n	8004a10 <USB_ActivateEndpoint+0x2f8>
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10a      	bne.n	80049e0 <USB_ActivateEndpoint+0x2c8>
 80049ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049cc:	881b      	ldrh	r3, [r3, #0]
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049d8:	b29a      	uxth	r2, r3
 80049da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049dc:	801a      	strh	r2, [r3, #0]
 80049de:	e017      	b.n	8004a10 <USB_ActivateEndpoint+0x2f8>
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	085b      	lsrs	r3, r3, #1
 80049e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	f003 0301 	and.w	r3, r3, #1
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d002      	beq.n	80049fa <USB_ActivateEndpoint+0x2e2>
 80049f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80049f6:	3301      	adds	r3, #1
 80049f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049fc:	881b      	ldrh	r3, [r3, #0]
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	029b      	lsls	r3, r3, #10
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	b29a      	uxth	r2, r3
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a0e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4413      	add	r3, r2
 8004a1a:	881b      	ldrh	r3, [r3, #0]
 8004a1c:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004a1e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004a20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d01b      	beq.n	8004a60 <USB_ActivateEndpoint+0x348>
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4413      	add	r3, r2
 8004a32:	881b      	ldrh	r3, [r3, #0]
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a3e:	843b      	strh	r3, [r7, #32]
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	441a      	add	r2, r3
 8004a4a:	8c3b      	ldrh	r3, [r7, #32]
 8004a4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a54:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d124      	bne.n	8004ab2 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4413      	add	r3, r2
 8004a72:	881b      	ldrh	r3, [r3, #0]
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a7e:	83bb      	strh	r3, [r7, #28]
 8004a80:	8bbb      	ldrh	r3, [r7, #28]
 8004a82:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004a86:	83bb      	strh	r3, [r7, #28]
 8004a88:	8bbb      	ldrh	r3, [r7, #28]
 8004a8a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004a8e:	83bb      	strh	r3, [r7, #28]
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	441a      	add	r2, r3
 8004a9a:	8bbb      	ldrh	r3, [r7, #28]
 8004a9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004aa0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004aa4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004aa8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	8013      	strh	r3, [r2, #0]
 8004ab0:	e1ea      	b.n	8004e88 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	4413      	add	r3, r2
 8004abc:	881b      	ldrh	r3, [r3, #0]
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ac4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ac8:	83fb      	strh	r3, [r7, #30]
 8004aca:	8bfb      	ldrh	r3, [r7, #30]
 8004acc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004ad0:	83fb      	strh	r3, [r7, #30]
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	441a      	add	r2, r3
 8004adc:	8bfb      	ldrh	r3, [r7, #30]
 8004ade:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ae2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ae6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004aea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	8013      	strh	r3, [r2, #0]
 8004af2:	e1c9      	b.n	8004e88 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	78db      	ldrb	r3, [r3, #3]
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d11e      	bne.n	8004b3a <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4413      	add	r3, r2
 8004b06:	881b      	ldrh	r3, [r3, #0]
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b12:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	441a      	add	r2, r3
 8004b20:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004b24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b2c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004b30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	8013      	strh	r3, [r2, #0]
 8004b38:	e01d      	b.n	8004b76 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	4413      	add	r3, r2
 8004b44:	881b      	ldrh	r3, [r3, #0]
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004b4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b50:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	441a      	add	r2, r3
 8004b5e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8004b62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	461a      	mov	r2, r3
 8004b84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b86:	4413      	add	r3, r2
 8004b88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	011a      	lsls	r2, r3, #4
 8004b90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b92:	4413      	add	r3, r2
 8004b94:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004b98:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	891b      	ldrh	r3, [r3, #8]
 8004b9e:	085b      	lsrs	r3, r3, #1
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	005b      	lsls	r3, r3, #1
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ba8:	801a      	strh	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	657b      	str	r3, [r7, #84]	@ 0x54
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bba:	4413      	add	r3, r2
 8004bbc:	657b      	str	r3, [r7, #84]	@ 0x54
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	011a      	lsls	r2, r3, #4
 8004bc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bc6:	4413      	add	r3, r2
 8004bc8:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004bcc:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	895b      	ldrh	r3, [r3, #10]
 8004bd2:	085b      	lsrs	r3, r3, #1
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	005b      	lsls	r3, r3, #1
 8004bd8:	b29a      	uxth	r2, r3
 8004bda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bdc:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	785b      	ldrb	r3, [r3, #1]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f040 8093 	bne.w	8004d0e <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	4413      	add	r3, r2
 8004bf2:	881b      	ldrh	r3, [r3, #0]
 8004bf4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8004bf8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004bfc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d01b      	beq.n	8004c3c <USB_ActivateEndpoint+0x524>
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	4413      	add	r3, r2
 8004c0e:	881b      	ldrh	r3, [r3, #0]
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c1a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	441a      	add	r2, r3
 8004c26:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004c28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c30:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	4413      	add	r3, r2
 8004c46:	881b      	ldrh	r3, [r3, #0]
 8004c48:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8004c4a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004c4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d01b      	beq.n	8004c8c <USB_ActivateEndpoint+0x574>
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4413      	add	r3, r2
 8004c5e:	881b      	ldrh	r3, [r3, #0]
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c6a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	441a      	add	r2, r3
 8004c76:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004c78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c84:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	4413      	add	r3, r2
 8004c96:	881b      	ldrh	r3, [r3, #0]
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ca2:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004ca4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004ca6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004caa:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004cac:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004cae:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004cb2:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	441a      	add	r2, r3
 8004cbe:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004cc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ccc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	4413      	add	r3, r2
 8004cde:	881b      	ldrh	r3, [r3, #0]
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ce6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cea:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	441a      	add	r2, r3
 8004cf6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004cf8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cfc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	8013      	strh	r3, [r2, #0]
 8004d0c:	e0bc      	b.n	8004e88 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4413      	add	r3, r2
 8004d18:	881b      	ldrh	r3, [r3, #0]
 8004d1a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004d1e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004d22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d01d      	beq.n	8004d66 <USB_ActivateEndpoint+0x64e>
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	4413      	add	r3, r2
 8004d34:	881b      	ldrh	r3, [r3, #0]
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d40:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	441a      	add	r2, r3
 8004d4e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004d52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d5a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	4413      	add	r3, r2
 8004d70:	881b      	ldrh	r3, [r3, #0]
 8004d72:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004d76:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004d7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d01d      	beq.n	8004dbe <USB_ActivateEndpoint+0x6a6>
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4413      	add	r3, r2
 8004d8c:	881b      	ldrh	r3, [r3, #0]
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d98:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	441a      	add	r2, r3
 8004da6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004daa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004dae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004db2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004db6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	78db      	ldrb	r3, [r3, #3]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d024      	beq.n	8004e10 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	4413      	add	r3, r2
 8004dd0:	881b      	ldrh	r3, [r3, #0]
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ddc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004de0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004de4:	f083 0320 	eor.w	r3, r3, #32
 8004de8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	441a      	add	r2, r3
 8004df6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004dfa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004dfe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	8013      	strh	r3, [r2, #0]
 8004e0e:	e01d      	b.n	8004e4c <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	4413      	add	r3, r2
 8004e1a:	881b      	ldrh	r3, [r3, #0]
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e26:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	441a      	add	r2, r3
 8004e34:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004e38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	4413      	add	r3, r2
 8004e56:	881b      	ldrh	r3, [r3, #0]
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e62:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	441a      	add	r2, r3
 8004e70:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004e74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004e88:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3774      	adds	r7, #116	@ 0x74
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bc80      	pop	{r7}
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop

08004e98 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b08d      	sub	sp, #52	@ 0x34
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	7b1b      	ldrb	r3, [r3, #12]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	f040 808e 	bne.w	8004fc8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	785b      	ldrb	r3, [r3, #1]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d044      	beq.n	8004f3e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	4413      	add	r3, r2
 8004ebe:	881b      	ldrh	r3, [r3, #0]
 8004ec0:	81bb      	strh	r3, [r7, #12]
 8004ec2:	89bb      	ldrh	r3, [r7, #12]
 8004ec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d01b      	beq.n	8004f04 <USB_DeactivateEndpoint+0x6c>
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	4413      	add	r3, r2
 8004ed6:	881b      	ldrh	r3, [r3, #0]
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ede:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ee2:	817b      	strh	r3, [r7, #10]
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	441a      	add	r2, r3
 8004eee:	897b      	ldrh	r3, [r7, #10]
 8004ef0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ef4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ef8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004efc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	4413      	add	r3, r2
 8004f0e:	881b      	ldrh	r3, [r3, #0]
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f1a:	813b      	strh	r3, [r7, #8]
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	441a      	add	r2, r3
 8004f26:	893b      	ldrh	r3, [r7, #8]
 8004f28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	8013      	strh	r3, [r2, #0]
 8004f3c:	e192      	b.n	8005264 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	4413      	add	r3, r2
 8004f48:	881b      	ldrh	r3, [r3, #0]
 8004f4a:	827b      	strh	r3, [r7, #18]
 8004f4c:	8a7b      	ldrh	r3, [r7, #18]
 8004f4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d01b      	beq.n	8004f8e <USB_DeactivateEndpoint+0xf6>
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	4413      	add	r3, r2
 8004f60:	881b      	ldrh	r3, [r3, #0]
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f6c:	823b      	strh	r3, [r7, #16]
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	441a      	add	r2, r3
 8004f78:	8a3b      	ldrh	r3, [r7, #16]
 8004f7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f82:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004f86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	4413      	add	r3, r2
 8004f98:	881b      	ldrh	r3, [r3, #0]
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004fa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fa4:	81fb      	strh	r3, [r7, #14]
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	441a      	add	r2, r3
 8004fb0:	89fb      	ldrh	r3, [r7, #14]
 8004fb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	8013      	strh	r3, [r2, #0]
 8004fc6:	e14d      	b.n	8005264 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	785b      	ldrb	r3, [r3, #1]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f040 80a5 	bne.w	800511c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	4413      	add	r3, r2
 8004fdc:	881b      	ldrh	r3, [r3, #0]
 8004fde:	843b      	strh	r3, [r7, #32]
 8004fe0:	8c3b      	ldrh	r3, [r7, #32]
 8004fe2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d01b      	beq.n	8005022 <USB_DeactivateEndpoint+0x18a>
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	4413      	add	r3, r2
 8004ff4:	881b      	ldrh	r3, [r3, #0]
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ffc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005000:	83fb      	strh	r3, [r7, #30]
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	441a      	add	r2, r3
 800500c:	8bfb      	ldrh	r3, [r7, #30]
 800500e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005012:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005016:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800501a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800501e:	b29b      	uxth	r3, r3
 8005020:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	4413      	add	r3, r2
 800502c:	881b      	ldrh	r3, [r3, #0]
 800502e:	83bb      	strh	r3, [r7, #28]
 8005030:	8bbb      	ldrh	r3, [r7, #28]
 8005032:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005036:	2b00      	cmp	r3, #0
 8005038:	d01b      	beq.n	8005072 <USB_DeactivateEndpoint+0x1da>
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	4413      	add	r3, r2
 8005044:	881b      	ldrh	r3, [r3, #0]
 8005046:	b29b      	uxth	r3, r3
 8005048:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800504c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005050:	837b      	strh	r3, [r7, #26]
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	441a      	add	r2, r3
 800505c:	8b7b      	ldrh	r3, [r7, #26]
 800505e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005062:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005066:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800506a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800506e:	b29b      	uxth	r3, r3
 8005070:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	4413      	add	r3, r2
 800507c:	881b      	ldrh	r3, [r3, #0]
 800507e:	b29b      	uxth	r3, r3
 8005080:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005084:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005088:	833b      	strh	r3, [r7, #24]
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	441a      	add	r2, r3
 8005094:	8b3b      	ldrh	r3, [r7, #24]
 8005096:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800509a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800509e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050a2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	4413      	add	r3, r2
 80050b4:	881b      	ldrh	r3, [r3, #0]
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80050bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050c0:	82fb      	strh	r3, [r7, #22]
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	441a      	add	r2, r3
 80050cc:	8afb      	ldrh	r3, [r7, #22]
 80050ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050de:	b29b      	uxth	r3, r3
 80050e0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	4413      	add	r3, r2
 80050ec:	881b      	ldrh	r3, [r3, #0]
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050f8:	82bb      	strh	r3, [r7, #20]
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	441a      	add	r2, r3
 8005104:	8abb      	ldrh	r3, [r7, #20]
 8005106:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800510a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800510e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005112:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005116:	b29b      	uxth	r3, r3
 8005118:	8013      	strh	r3, [r2, #0]
 800511a:	e0a3      	b.n	8005264 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	4413      	add	r3, r2
 8005126:	881b      	ldrh	r3, [r3, #0]
 8005128:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800512a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800512c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d01b      	beq.n	800516c <USB_DeactivateEndpoint+0x2d4>
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	4413      	add	r3, r2
 800513e:	881b      	ldrh	r3, [r3, #0]
 8005140:	b29b      	uxth	r3, r3
 8005142:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005146:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800514a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	441a      	add	r2, r3
 8005156:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005158:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800515c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005160:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005164:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005168:	b29b      	uxth	r3, r3
 800516a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	4413      	add	r3, r2
 8005176:	881b      	ldrh	r3, [r3, #0]
 8005178:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800517a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800517c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005180:	2b00      	cmp	r3, #0
 8005182:	d01b      	beq.n	80051bc <USB_DeactivateEndpoint+0x324>
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	4413      	add	r3, r2
 800518e:	881b      	ldrh	r3, [r3, #0]
 8005190:	b29b      	uxth	r3, r3
 8005192:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005196:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800519a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	441a      	add	r2, r3
 80051a6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80051a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051b4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	4413      	add	r3, r2
 80051c6:	881b      	ldrh	r3, [r3, #0]
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051d2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	441a      	add	r2, r3
 80051de:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80051e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80051ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4413      	add	r3, r2
 80051fe:	881b      	ldrh	r3, [r3, #0]
 8005200:	b29b      	uxth	r3, r3
 8005202:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005206:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800520a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	441a      	add	r2, r3
 8005216:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005218:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800521c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005220:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005224:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005228:	b29b      	uxth	r3, r3
 800522a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4413      	add	r3, r2
 8005236:	881b      	ldrh	r3, [r3, #0]
 8005238:	b29b      	uxth	r3, r3
 800523a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800523e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005242:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	441a      	add	r2, r3
 800524e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005250:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005254:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005258:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800525c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005260:	b29b      	uxth	r3, r3
 8005262:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3734      	adds	r7, #52	@ 0x34
 800526a:	46bd      	mov	sp, r7
 800526c:	bc80      	pop	{r7}
 800526e:	4770      	bx	lr

08005270 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b0c2      	sub	sp, #264	@ 0x108
 8005274:	af00      	add	r7, sp, #0
 8005276:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800527a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800527e:	6018      	str	r0, [r3, #0]
 8005280:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005284:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005288:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800528a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800528e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	785b      	ldrb	r3, [r3, #1]
 8005296:	2b01      	cmp	r3, #1
 8005298:	f040 86b7 	bne.w	800600a <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800529c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	699a      	ldr	r2, [r3, #24]
 80052a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d908      	bls.n	80052ca <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80052b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80052c8:	e007      	b.n	80052da <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80052ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80052da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	7b1b      	ldrb	r3, [r3, #12]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d13a      	bne.n	8005360 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80052ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	6959      	ldr	r1, [r3, #20]
 80052f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	88da      	ldrh	r2, [r3, #6]
 8005302:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005306:	b29b      	uxth	r3, r3
 8005308:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800530c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005310:	6800      	ldr	r0, [r0, #0]
 8005312:	f001 fc9c 	bl	8006c4e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005316:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800531a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	613b      	str	r3, [r7, #16]
 8005322:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005326:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005330:	b29b      	uxth	r3, r3
 8005332:	461a      	mov	r2, r3
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	4413      	add	r3, r2
 8005338:	613b      	str	r3, [r7, #16]
 800533a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800533e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	011a      	lsls	r2, r3, #4
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	4413      	add	r3, r2
 800534c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005350:	60fb      	str	r3, [r7, #12]
 8005352:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005356:	b29a      	uxth	r2, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	801a      	strh	r2, [r3, #0]
 800535c:	f000 be1f 	b.w	8005f9e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005360:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005364:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	78db      	ldrb	r3, [r3, #3]
 800536c:	2b02      	cmp	r3, #2
 800536e:	f040 8462 	bne.w	8005c36 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005372:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005376:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	6a1a      	ldr	r2, [r3, #32]
 800537e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005382:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	429a      	cmp	r2, r3
 800538c:	f240 83df 	bls.w	8005b4e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005390:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005394:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800539e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4413      	add	r3, r2
 80053aa:	881b      	ldrh	r3, [r3, #0]
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053b6:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80053ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	441a      	add	r2, r3
 80053d4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80053d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053e0:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80053e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80053ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	6a1a      	ldr	r2, [r3, #32]
 80053f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053fc:	1ad2      	subs	r2, r2, r3
 80053fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005402:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800540a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800540e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005418:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	4413      	add	r3, r2
 8005424:	881b      	ldrh	r3, [r3, #0]
 8005426:	b29b      	uxth	r3, r3
 8005428:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800542c:	2b00      	cmp	r3, #0
 800542e:	f000 81c7 	beq.w	80057c0 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005432:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005436:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	633b      	str	r3, [r7, #48]	@ 0x30
 800543e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005442:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	785b      	ldrb	r3, [r3, #1]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d177      	bne.n	800553e <USB_EPStartXfer+0x2ce>
 800544e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005452:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	62bb      	str	r3, [r7, #40]	@ 0x28
 800545a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800545e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005468:	b29b      	uxth	r3, r3
 800546a:	461a      	mov	r2, r3
 800546c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800546e:	4413      	add	r3, r2
 8005470:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005472:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005476:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	011a      	lsls	r2, r3, #4
 8005480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005482:	4413      	add	r3, r2
 8005484:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005488:	627b      	str	r3, [r7, #36]	@ 0x24
 800548a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800548c:	881b      	ldrh	r3, [r3, #0]
 800548e:	b29b      	uxth	r3, r3
 8005490:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005494:	b29a      	uxth	r2, r3
 8005496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005498:	801a      	strh	r2, [r3, #0]
 800549a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800549e:	2b3e      	cmp	r3, #62	@ 0x3e
 80054a0:	d921      	bls.n	80054e6 <USB_EPStartXfer+0x276>
 80054a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054a6:	095b      	lsrs	r3, r3, #5
 80054a8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80054ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054b0:	f003 031f 	and.w	r3, r3, #31
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d104      	bne.n	80054c2 <USB_EPStartXfer+0x252>
 80054b8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80054bc:	3b01      	subs	r3, #1
 80054be:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80054c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c4:	881b      	ldrh	r3, [r3, #0]
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	029b      	lsls	r3, r3, #10
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	4313      	orrs	r3, r2
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054de:	b29a      	uxth	r2, r3
 80054e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e2:	801a      	strh	r2, [r3, #0]
 80054e4:	e050      	b.n	8005588 <USB_EPStartXfer+0x318>
 80054e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10a      	bne.n	8005504 <USB_EPStartXfer+0x294>
 80054ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f0:	881b      	ldrh	r3, [r3, #0]
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054fc:	b29a      	uxth	r2, r3
 80054fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005500:	801a      	strh	r2, [r3, #0]
 8005502:	e041      	b.n	8005588 <USB_EPStartXfer+0x318>
 8005504:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005508:	085b      	lsrs	r3, r3, #1
 800550a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800550e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005512:	f003 0301 	and.w	r3, r3, #1
 8005516:	2b00      	cmp	r3, #0
 8005518:	d004      	beq.n	8005524 <USB_EPStartXfer+0x2b4>
 800551a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800551e:	3301      	adds	r3, #1
 8005520:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005526:	881b      	ldrh	r3, [r3, #0]
 8005528:	b29a      	uxth	r2, r3
 800552a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800552e:	b29b      	uxth	r3, r3
 8005530:	029b      	lsls	r3, r3, #10
 8005532:	b29b      	uxth	r3, r3
 8005534:	4313      	orrs	r3, r2
 8005536:	b29a      	uxth	r2, r3
 8005538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800553a:	801a      	strh	r2, [r3, #0]
 800553c:	e024      	b.n	8005588 <USB_EPStartXfer+0x318>
 800553e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005542:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	785b      	ldrb	r3, [r3, #1]
 800554a:	2b01      	cmp	r3, #1
 800554c:	d11c      	bne.n	8005588 <USB_EPStartXfer+0x318>
 800554e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005552:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800555c:	b29b      	uxth	r3, r3
 800555e:	461a      	mov	r2, r3
 8005560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005562:	4413      	add	r3, r2
 8005564:	633b      	str	r3, [r7, #48]	@ 0x30
 8005566:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800556a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	011a      	lsls	r2, r3, #4
 8005574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005576:	4413      	add	r3, r2
 8005578:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800557c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800557e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005582:	b29a      	uxth	r2, r3
 8005584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005586:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005588:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800558c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	895b      	ldrh	r3, [r3, #10]
 8005594:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005598:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800559c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	6959      	ldr	r1, [r3, #20]
 80055a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80055ae:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80055b2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80055b6:	6800      	ldr	r0, [r0, #0]
 80055b8:	f001 fb49 	bl	8006c4e <USB_WritePMA>
            ep->xfer_buff += len;
 80055bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	695a      	ldr	r2, [r3, #20]
 80055c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055cc:	441a      	add	r2, r3
 80055ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80055da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6a1a      	ldr	r2, [r3, #32]
 80055e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d90f      	bls.n	8005616 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80055f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	6a1a      	ldr	r2, [r3, #32]
 8005602:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005606:	1ad2      	subs	r2, r2, r3
 8005608:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800560c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	621a      	str	r2, [r3, #32]
 8005614:	e00e      	b.n	8005634 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005616:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800561a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6a1b      	ldr	r3, [r3, #32]
 8005622:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005626:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800562a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2200      	movs	r2, #0
 8005632:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005634:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005638:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	785b      	ldrb	r3, [r3, #1]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d177      	bne.n	8005734 <USB_EPStartXfer+0x4c4>
 8005644:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005648:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	61bb      	str	r3, [r7, #24]
 8005650:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005654:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800565e:	b29b      	uxth	r3, r3
 8005660:	461a      	mov	r2, r3
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	4413      	add	r3, r2
 8005666:	61bb      	str	r3, [r7, #24]
 8005668:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800566c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	011a      	lsls	r2, r3, #4
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	4413      	add	r3, r2
 800567a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800567e:	617b      	str	r3, [r7, #20]
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	881b      	ldrh	r3, [r3, #0]
 8005684:	b29b      	uxth	r3, r3
 8005686:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800568a:	b29a      	uxth	r2, r3
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	801a      	strh	r2, [r3, #0]
 8005690:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005694:	2b3e      	cmp	r3, #62	@ 0x3e
 8005696:	d921      	bls.n	80056dc <USB_EPStartXfer+0x46c>
 8005698:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800569c:	095b      	lsrs	r3, r3, #5
 800569e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80056a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056a6:	f003 031f 	and.w	r3, r3, #31
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d104      	bne.n	80056b8 <USB_EPStartXfer+0x448>
 80056ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056b2:	3b01      	subs	r3, #1
 80056b4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	881b      	ldrh	r3, [r3, #0]
 80056bc:	b29a      	uxth	r2, r3
 80056be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	029b      	lsls	r3, r3, #10
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	4313      	orrs	r3, r2
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056d4:	b29a      	uxth	r2, r3
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	801a      	strh	r2, [r3, #0]
 80056da:	e056      	b.n	800578a <USB_EPStartXfer+0x51a>
 80056dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d10a      	bne.n	80056fa <USB_EPStartXfer+0x48a>
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	881b      	ldrh	r3, [r3, #0]
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	801a      	strh	r2, [r3, #0]
 80056f8:	e047      	b.n	800578a <USB_EPStartXfer+0x51a>
 80056fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056fe:	085b      	lsrs	r3, r3, #1
 8005700:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005704:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005708:	f003 0301 	and.w	r3, r3, #1
 800570c:	2b00      	cmp	r3, #0
 800570e:	d004      	beq.n	800571a <USB_EPStartXfer+0x4aa>
 8005710:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005714:	3301      	adds	r3, #1
 8005716:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	881b      	ldrh	r3, [r3, #0]
 800571e:	b29a      	uxth	r2, r3
 8005720:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005724:	b29b      	uxth	r3, r3
 8005726:	029b      	lsls	r3, r3, #10
 8005728:	b29b      	uxth	r3, r3
 800572a:	4313      	orrs	r3, r2
 800572c:	b29a      	uxth	r2, r3
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	801a      	strh	r2, [r3, #0]
 8005732:	e02a      	b.n	800578a <USB_EPStartXfer+0x51a>
 8005734:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005738:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	785b      	ldrb	r3, [r3, #1]
 8005740:	2b01      	cmp	r3, #1
 8005742:	d122      	bne.n	800578a <USB_EPStartXfer+0x51a>
 8005744:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005748:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	623b      	str	r3, [r7, #32]
 8005750:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005754:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800575e:	b29b      	uxth	r3, r3
 8005760:	461a      	mov	r2, r3
 8005762:	6a3b      	ldr	r3, [r7, #32]
 8005764:	4413      	add	r3, r2
 8005766:	623b      	str	r3, [r7, #32]
 8005768:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800576c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	011a      	lsls	r2, r3, #4
 8005776:	6a3b      	ldr	r3, [r7, #32]
 8005778:	4413      	add	r3, r2
 800577a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800577e:	61fb      	str	r3, [r7, #28]
 8005780:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005784:	b29a      	uxth	r2, r3
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800578a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800578e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	891b      	ldrh	r3, [r3, #8]
 8005796:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800579a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800579e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	6959      	ldr	r1, [r3, #20]
 80057a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80057b0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80057b4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80057b8:	6800      	ldr	r0, [r0, #0]
 80057ba:	f001 fa48 	bl	8006c4e <USB_WritePMA>
 80057be:	e3ee      	b.n	8005f9e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80057c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	785b      	ldrb	r3, [r3, #1]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d177      	bne.n	80058c0 <USB_EPStartXfer+0x650>
 80057d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	461a      	mov	r2, r3
 80057ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057f0:	4413      	add	r3, r2
 80057f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	011a      	lsls	r2, r3, #4
 8005802:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005804:	4413      	add	r3, r2
 8005806:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800580a:	647b      	str	r3, [r7, #68]	@ 0x44
 800580c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800580e:	881b      	ldrh	r3, [r3, #0]
 8005810:	b29b      	uxth	r3, r3
 8005812:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005816:	b29a      	uxth	r2, r3
 8005818:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800581a:	801a      	strh	r2, [r3, #0]
 800581c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005820:	2b3e      	cmp	r3, #62	@ 0x3e
 8005822:	d921      	bls.n	8005868 <USB_EPStartXfer+0x5f8>
 8005824:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005828:	095b      	lsrs	r3, r3, #5
 800582a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800582e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005832:	f003 031f 	and.w	r3, r3, #31
 8005836:	2b00      	cmp	r3, #0
 8005838:	d104      	bne.n	8005844 <USB_EPStartXfer+0x5d4>
 800583a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800583e:	3b01      	subs	r3, #1
 8005840:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005844:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005846:	881b      	ldrh	r3, [r3, #0]
 8005848:	b29a      	uxth	r2, r3
 800584a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800584e:	b29b      	uxth	r3, r3
 8005850:	029b      	lsls	r3, r3, #10
 8005852:	b29b      	uxth	r3, r3
 8005854:	4313      	orrs	r3, r2
 8005856:	b29b      	uxth	r3, r3
 8005858:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800585c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005860:	b29a      	uxth	r2, r3
 8005862:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005864:	801a      	strh	r2, [r3, #0]
 8005866:	e056      	b.n	8005916 <USB_EPStartXfer+0x6a6>
 8005868:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800586c:	2b00      	cmp	r3, #0
 800586e:	d10a      	bne.n	8005886 <USB_EPStartXfer+0x616>
 8005870:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005872:	881b      	ldrh	r3, [r3, #0]
 8005874:	b29b      	uxth	r3, r3
 8005876:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800587a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800587e:	b29a      	uxth	r2, r3
 8005880:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005882:	801a      	strh	r2, [r3, #0]
 8005884:	e047      	b.n	8005916 <USB_EPStartXfer+0x6a6>
 8005886:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800588a:	085b      	lsrs	r3, r3, #1
 800588c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005890:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005894:	f003 0301 	and.w	r3, r3, #1
 8005898:	2b00      	cmp	r3, #0
 800589a:	d004      	beq.n	80058a6 <USB_EPStartXfer+0x636>
 800589c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80058a0:	3301      	adds	r3, #1
 80058a2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80058a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058a8:	881b      	ldrh	r3, [r3, #0]
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	029b      	lsls	r3, r3, #10
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	4313      	orrs	r3, r2
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058bc:	801a      	strh	r2, [r3, #0]
 80058be:	e02a      	b.n	8005916 <USB_EPStartXfer+0x6a6>
 80058c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	785b      	ldrb	r3, [r3, #1]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d122      	bne.n	8005916 <USB_EPStartXfer+0x6a6>
 80058d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	653b      	str	r3, [r7, #80]	@ 0x50
 80058dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	461a      	mov	r2, r3
 80058ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058f0:	4413      	add	r3, r2
 80058f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80058f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	011a      	lsls	r2, r3, #4
 8005902:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005904:	4413      	add	r3, r2
 8005906:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800590a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800590c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005910:	b29a      	uxth	r2, r3
 8005912:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005914:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005916:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800591a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	891b      	ldrh	r3, [r3, #8]
 8005922:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005926:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800592a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	6959      	ldr	r1, [r3, #20]
 8005932:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005936:	b29b      	uxth	r3, r3
 8005938:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800593c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005940:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005944:	6800      	ldr	r0, [r0, #0]
 8005946:	f001 f982 	bl	8006c4e <USB_WritePMA>
            ep->xfer_buff += len;
 800594a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800594e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	695a      	ldr	r2, [r3, #20]
 8005956:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800595a:	441a      	add	r2, r3
 800595c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005960:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005968:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800596c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	6a1a      	ldr	r2, [r3, #32]
 8005974:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005978:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	429a      	cmp	r2, r3
 8005982:	d90f      	bls.n	80059a4 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005984:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005988:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	6a1a      	ldr	r2, [r3, #32]
 8005990:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005994:	1ad2      	subs	r2, r2, r3
 8005996:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800599a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	621a      	str	r2, [r3, #32]
 80059a2:	e00e      	b.n	80059c2 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80059a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	6a1b      	ldr	r3, [r3, #32]
 80059b0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80059b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2200      	movs	r2, #0
 80059c0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80059c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80059ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	785b      	ldrb	r3, [r3, #1]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d177      	bne.n	8005ace <USB_EPStartXfer+0x85e>
 80059de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80059ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	461a      	mov	r2, r3
 80059fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059fe:	4413      	add	r3, r2
 8005a00:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	011a      	lsls	r2, r3, #4
 8005a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a12:	4413      	add	r3, r2
 8005a14:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005a18:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a1c:	881b      	ldrh	r3, [r3, #0]
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a28:	801a      	strh	r2, [r3, #0]
 8005a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a2e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005a30:	d921      	bls.n	8005a76 <USB_EPStartXfer+0x806>
 8005a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a36:	095b      	lsrs	r3, r3, #5
 8005a38:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a40:	f003 031f 	and.w	r3, r3, #31
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d104      	bne.n	8005a52 <USB_EPStartXfer+0x7e2>
 8005a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005a52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a54:	881b      	ldrh	r3, [r3, #0]
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	029b      	lsls	r3, r3, #10
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	4313      	orrs	r3, r2
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a72:	801a      	strh	r2, [r3, #0]
 8005a74:	e050      	b.n	8005b18 <USB_EPStartXfer+0x8a8>
 8005a76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d10a      	bne.n	8005a94 <USB_EPStartXfer+0x824>
 8005a7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a80:	881b      	ldrh	r3, [r3, #0]
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a90:	801a      	strh	r2, [r3, #0]
 8005a92:	e041      	b.n	8005b18 <USB_EPStartXfer+0x8a8>
 8005a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a98:	085b      	lsrs	r3, r3, #1
 8005a9a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d004      	beq.n	8005ab4 <USB_EPStartXfer+0x844>
 8005aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aae:	3301      	adds	r3, #1
 8005ab0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ab6:	881b      	ldrh	r3, [r3, #0]
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	029b      	lsls	r3, r3, #10
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	b29a      	uxth	r2, r3
 8005ac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aca:	801a      	strh	r2, [r3, #0]
 8005acc:	e024      	b.n	8005b18 <USB_EPStartXfer+0x8a8>
 8005ace:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ad2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	785b      	ldrb	r3, [r3, #1]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d11c      	bne.n	8005b18 <USB_EPStartXfer+0x8a8>
 8005ade:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ae2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	461a      	mov	r2, r3
 8005af0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005af2:	4413      	add	r3, r2
 8005af4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005af6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005afa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	011a      	lsls	r2, r3, #4
 8005b04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b06:	4413      	add	r3, r2
 8005b08:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b16:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005b18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	895b      	ldrh	r3, [r3, #10]
 8005b24:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	6959      	ldr	r1, [r3, #20]
 8005b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005b3e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005b42:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005b46:	6800      	ldr	r0, [r0, #0]
 8005b48:	f001 f881 	bl	8006c4e <USB_WritePMA>
 8005b4c:	e227      	b.n	8005f9e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005b4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005b5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	4413      	add	r3, r2
 8005b78:	881b      	ldrh	r3, [r3, #0]
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005b80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b84:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005b88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	441a      	add	r2, r3
 8005ba2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005ba6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005baa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005bba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005bc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005bda:	4413      	add	r3, r2
 8005bdc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005bde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005be2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	011a      	lsls	r2, r3, #4
 8005bec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005bee:	4413      	add	r3, r2
 8005bf0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005bf4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005bfe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005c00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	891b      	ldrh	r3, [r3, #8]
 8005c0c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	6959      	ldr	r1, [r3, #20]
 8005c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005c26:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005c2a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005c2e:	6800      	ldr	r0, [r0, #0]
 8005c30:	f001 f80d 	bl	8006c4e <USB_WritePMA>
 8005c34:	e1b3      	b.n	8005f9e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005c36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	6a1a      	ldr	r2, [r3, #32]
 8005c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c46:	1ad2      	subs	r2, r2, r3
 8005c48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005c54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	4413      	add	r3, r2
 8005c6e:	881b      	ldrh	r3, [r3, #0]
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	f000 80c6 	beq.w	8005e08 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005c7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	785b      	ldrb	r3, [r3, #1]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d177      	bne.n	8005d88 <USB_EPStartXfer+0xb18>
 8005c98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ca4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ca8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005cb8:	4413      	add	r3, r2
 8005cba:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005cbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	011a      	lsls	r2, r3, #4
 8005cca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ccc:	4413      	add	r3, r2
 8005cce:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005cd2:	667b      	str	r3, [r7, #100]	@ 0x64
 8005cd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005cd6:	881b      	ldrh	r3, [r3, #0]
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ce2:	801a      	strh	r2, [r3, #0]
 8005ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ce8:	2b3e      	cmp	r3, #62	@ 0x3e
 8005cea:	d921      	bls.n	8005d30 <USB_EPStartXfer+0xac0>
 8005cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cf0:	095b      	lsrs	r3, r3, #5
 8005cf2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cfa:	f003 031f 	and.w	r3, r3, #31
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d104      	bne.n	8005d0c <USB_EPStartXfer+0xa9c>
 8005d02:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005d06:	3b01      	subs	r3, #1
 8005d08:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005d0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d0e:	881b      	ldrh	r3, [r3, #0]
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	029b      	lsls	r3, r3, #10
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d28:	b29a      	uxth	r2, r3
 8005d2a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d2c:	801a      	strh	r2, [r3, #0]
 8005d2e:	e050      	b.n	8005dd2 <USB_EPStartXfer+0xb62>
 8005d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d10a      	bne.n	8005d4e <USB_EPStartXfer+0xade>
 8005d38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d3a:	881b      	ldrh	r3, [r3, #0]
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d46:	b29a      	uxth	r2, r3
 8005d48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d4a:	801a      	strh	r2, [r3, #0]
 8005d4c:	e041      	b.n	8005dd2 <USB_EPStartXfer+0xb62>
 8005d4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d52:	085b      	lsrs	r3, r3, #1
 8005d54:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d5c:	f003 0301 	and.w	r3, r3, #1
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d004      	beq.n	8005d6e <USB_EPStartXfer+0xafe>
 8005d64:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005d68:	3301      	adds	r3, #1
 8005d6a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005d6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d70:	881b      	ldrh	r3, [r3, #0]
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	029b      	lsls	r3, r3, #10
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	b29a      	uxth	r2, r3
 8005d82:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d84:	801a      	strh	r2, [r3, #0]
 8005d86:	e024      	b.n	8005dd2 <USB_EPStartXfer+0xb62>
 8005d88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	785b      	ldrb	r3, [r3, #1]
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d11c      	bne.n	8005dd2 <USB_EPStartXfer+0xb62>
 8005d98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	461a      	mov	r2, r3
 8005daa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005dac:	4413      	add	r3, r2
 8005dae:	673b      	str	r3, [r7, #112]	@ 0x70
 8005db0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005db4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	011a      	lsls	r2, r3, #4
 8005dbe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005dc6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005dc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dcc:	b29a      	uxth	r2, r3
 8005dce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005dd0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005dd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	895b      	ldrh	r3, [r3, #10]
 8005dde:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005de2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005de6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	6959      	ldr	r1, [r3, #20]
 8005dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005df8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005dfc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005e00:	6800      	ldr	r0, [r0, #0]
 8005e02:	f000 ff24 	bl	8006c4e <USB_WritePMA>
 8005e06:	e0ca      	b.n	8005f9e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005e08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	785b      	ldrb	r3, [r3, #1]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d177      	bne.n	8005f08 <USB_EPStartXfer+0xc98>
 8005e18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005e24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	461a      	mov	r2, r3
 8005e36:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005e38:	4413      	add	r3, r2
 8005e3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005e3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	011a      	lsls	r2, r3, #4
 8005e4a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005e52:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005e54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e56:	881b      	ldrh	r3, [r3, #0]
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e5e:	b29a      	uxth	r2, r3
 8005e60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e62:	801a      	strh	r2, [r3, #0]
 8005e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e68:	2b3e      	cmp	r3, #62	@ 0x3e
 8005e6a:	d921      	bls.n	8005eb0 <USB_EPStartXfer+0xc40>
 8005e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e70:	095b      	lsrs	r3, r3, #5
 8005e72:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e7a:	f003 031f 	and.w	r3, r3, #31
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d104      	bne.n	8005e8c <USB_EPStartXfer+0xc1c>
 8005e82:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005e86:	3b01      	subs	r3, #1
 8005e88:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005e8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e8e:	881b      	ldrh	r3, [r3, #0]
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	029b      	lsls	r3, r3, #10
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ea4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ea8:	b29a      	uxth	r2, r3
 8005eaa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005eac:	801a      	strh	r2, [r3, #0]
 8005eae:	e05c      	b.n	8005f6a <USB_EPStartXfer+0xcfa>
 8005eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d10a      	bne.n	8005ece <USB_EPStartXfer+0xc5e>
 8005eb8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005eba:	881b      	ldrh	r3, [r3, #0]
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ec2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005eca:	801a      	strh	r2, [r3, #0]
 8005ecc:	e04d      	b.n	8005f6a <USB_EPStartXfer+0xcfa>
 8005ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ed2:	085b      	lsrs	r3, r3, #1
 8005ed4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005edc:	f003 0301 	and.w	r3, r3, #1
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d004      	beq.n	8005eee <USB_EPStartXfer+0xc7e>
 8005ee4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005ee8:	3301      	adds	r3, #1
 8005eea:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005eee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ef0:	881b      	ldrh	r3, [r3, #0]
 8005ef2:	b29a      	uxth	r2, r3
 8005ef4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	029b      	lsls	r3, r3, #10
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	4313      	orrs	r3, r2
 8005f00:	b29a      	uxth	r2, r3
 8005f02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f04:	801a      	strh	r2, [r3, #0]
 8005f06:	e030      	b.n	8005f6a <USB_EPStartXfer+0xcfa>
 8005f08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	785b      	ldrb	r3, [r3, #1]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d128      	bne.n	8005f6a <USB_EPStartXfer+0xcfa>
 8005f18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	461a      	mov	r2, r3
 8005f38:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	011a      	lsls	r2, r3, #4
 8005f50:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005f54:	4413      	add	r3, r2
 8005f56:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005f5a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005f68:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005f6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	891b      	ldrh	r3, [r3, #8]
 8005f76:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	6959      	ldr	r1, [r3, #20]
 8005f86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005f90:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005f94:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005f98:	6800      	ldr	r0, [r0, #0]
 8005f9a:	f000 fe58 	bl	8006c4e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005f9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fa2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	4413      	add	r3, r2
 8005fb8:	881b      	ldrh	r3, [r3, #0]
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fc4:	817b      	strh	r3, [r7, #10]
 8005fc6:	897b      	ldrh	r3, [r7, #10]
 8005fc8:	f083 0310 	eor.w	r3, r3, #16
 8005fcc:	817b      	strh	r3, [r7, #10]
 8005fce:	897b      	ldrh	r3, [r7, #10]
 8005fd0:	f083 0320 	eor.w	r3, r3, #32
 8005fd4:	817b      	strh	r3, [r7, #10]
 8005fd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fe4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	441a      	add	r2, r3
 8005ff0:	897b      	ldrh	r3, [r7, #10]
 8005ff2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ff6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ffa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ffe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006002:	b29b      	uxth	r3, r3
 8006004:	8013      	strh	r3, [r2, #0]
 8006006:	f000 bcde 	b.w	80069c6 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800600a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800600e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	7b1b      	ldrb	r3, [r3, #12]
 8006016:	2b00      	cmp	r3, #0
 8006018:	f040 80bb 	bne.w	8006192 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800601c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006020:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	699a      	ldr	r2, [r3, #24]
 8006028:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800602c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	429a      	cmp	r2, r3
 8006036:	d917      	bls.n	8006068 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006038:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800603c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8006048:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800604c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	699a      	ldr	r2, [r3, #24]
 8006054:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006058:	1ad2      	subs	r2, r2, r3
 800605a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800605e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	619a      	str	r2, [r3, #24]
 8006066:	e00e      	b.n	8006086 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006068:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800606c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	699b      	ldr	r3, [r3, #24]
 8006074:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8006078:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800607c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	2200      	movs	r2, #0
 8006084:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006086:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800608a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006094:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006098:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	461a      	mov	r2, r3
 80060a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80060aa:	4413      	add	r3, r2
 80060ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80060b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	011a      	lsls	r2, r3, #4
 80060be:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80060c2:	4413      	add	r3, r2
 80060c4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80060c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80060cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060d0:	881b      	ldrh	r3, [r3, #0]
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060d8:	b29a      	uxth	r2, r3
 80060da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060de:	801a      	strh	r2, [r3, #0]
 80060e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060e4:	2b3e      	cmp	r3, #62	@ 0x3e
 80060e6:	d924      	bls.n	8006132 <USB_EPStartXfer+0xec2>
 80060e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060ec:	095b      	lsrs	r3, r3, #5
 80060ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80060f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060f6:	f003 031f 	and.w	r3, r3, #31
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d104      	bne.n	8006108 <USB_EPStartXfer+0xe98>
 80060fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006102:	3b01      	subs	r3, #1
 8006104:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006108:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800610c:	881b      	ldrh	r3, [r3, #0]
 800610e:	b29a      	uxth	r2, r3
 8006110:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006114:	b29b      	uxth	r3, r3
 8006116:	029b      	lsls	r3, r3, #10
 8006118:	b29b      	uxth	r3, r3
 800611a:	4313      	orrs	r3, r2
 800611c:	b29b      	uxth	r3, r3
 800611e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006122:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006126:	b29a      	uxth	r2, r3
 8006128:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800612c:	801a      	strh	r2, [r3, #0]
 800612e:	f000 bc10 	b.w	8006952 <USB_EPStartXfer+0x16e2>
 8006132:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006136:	2b00      	cmp	r3, #0
 8006138:	d10c      	bne.n	8006154 <USB_EPStartXfer+0xee4>
 800613a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800613e:	881b      	ldrh	r3, [r3, #0]
 8006140:	b29b      	uxth	r3, r3
 8006142:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006146:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800614a:	b29a      	uxth	r2, r3
 800614c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006150:	801a      	strh	r2, [r3, #0]
 8006152:	e3fe      	b.n	8006952 <USB_EPStartXfer+0x16e2>
 8006154:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006158:	085b      	lsrs	r3, r3, #1
 800615a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800615e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006162:	f003 0301 	and.w	r3, r3, #1
 8006166:	2b00      	cmp	r3, #0
 8006168:	d004      	beq.n	8006174 <USB_EPStartXfer+0xf04>
 800616a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800616e:	3301      	adds	r3, #1
 8006170:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006174:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006178:	881b      	ldrh	r3, [r3, #0]
 800617a:	b29a      	uxth	r2, r3
 800617c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006180:	b29b      	uxth	r3, r3
 8006182:	029b      	lsls	r3, r3, #10
 8006184:	b29b      	uxth	r3, r3
 8006186:	4313      	orrs	r3, r2
 8006188:	b29a      	uxth	r2, r3
 800618a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800618e:	801a      	strh	r2, [r3, #0]
 8006190:	e3df      	b.n	8006952 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006192:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006196:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	78db      	ldrb	r3, [r3, #3]
 800619e:	2b02      	cmp	r3, #2
 80061a0:	f040 8218 	bne.w	80065d4 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80061a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	785b      	ldrb	r3, [r3, #1]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f040 809d 	bne.w	80062f0 <USB_EPStartXfer+0x1080>
 80061b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80061c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	461a      	mov	r2, r3
 80061d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80061da:	4413      	add	r3, r2
 80061dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80061e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	011a      	lsls	r2, r3, #4
 80061ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80061f2:	4413      	add	r3, r2
 80061f4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80061f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80061fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006200:	881b      	ldrh	r3, [r3, #0]
 8006202:	b29b      	uxth	r3, r3
 8006204:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006208:	b29a      	uxth	r2, r3
 800620a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800620e:	801a      	strh	r2, [r3, #0]
 8006210:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006214:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	2b3e      	cmp	r3, #62	@ 0x3e
 800621e:	d92b      	bls.n	8006278 <USB_EPStartXfer+0x1008>
 8006220:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006224:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	095b      	lsrs	r3, r3, #5
 800622e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006232:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006236:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	f003 031f 	and.w	r3, r3, #31
 8006242:	2b00      	cmp	r3, #0
 8006244:	d104      	bne.n	8006250 <USB_EPStartXfer+0xfe0>
 8006246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800624a:	3b01      	subs	r3, #1
 800624c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006250:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006254:	881b      	ldrh	r3, [r3, #0]
 8006256:	b29a      	uxth	r2, r3
 8006258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800625c:	b29b      	uxth	r3, r3
 800625e:	029b      	lsls	r3, r3, #10
 8006260:	b29b      	uxth	r3, r3
 8006262:	4313      	orrs	r3, r2
 8006264:	b29b      	uxth	r3, r3
 8006266:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800626a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800626e:	b29a      	uxth	r2, r3
 8006270:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006274:	801a      	strh	r2, [r3, #0]
 8006276:	e070      	b.n	800635a <USB_EPStartXfer+0x10ea>
 8006278:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800627c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d10c      	bne.n	80062a2 <USB_EPStartXfer+0x1032>
 8006288:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800628c:	881b      	ldrh	r3, [r3, #0]
 800628e:	b29b      	uxth	r3, r3
 8006290:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006294:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006298:	b29a      	uxth	r2, r3
 800629a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800629e:	801a      	strh	r2, [r3, #0]
 80062a0:	e05b      	b.n	800635a <USB_EPStartXfer+0x10ea>
 80062a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	085b      	lsrs	r3, r3, #1
 80062b0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80062b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	f003 0301 	and.w	r3, r3, #1
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d004      	beq.n	80062d2 <USB_EPStartXfer+0x1062>
 80062c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062cc:	3301      	adds	r3, #1
 80062ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80062d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80062d6:	881b      	ldrh	r3, [r3, #0]
 80062d8:	b29a      	uxth	r2, r3
 80062da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062de:	b29b      	uxth	r3, r3
 80062e0:	029b      	lsls	r3, r3, #10
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	4313      	orrs	r3, r2
 80062e6:	b29a      	uxth	r2, r3
 80062e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80062ec:	801a      	strh	r2, [r3, #0]
 80062ee:	e034      	b.n	800635a <USB_EPStartXfer+0x10ea>
 80062f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	785b      	ldrb	r3, [r3, #1]
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d12c      	bne.n	800635a <USB_EPStartXfer+0x10ea>
 8006300:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006304:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800630e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006312:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800631c:	b29b      	uxth	r3, r3
 800631e:	461a      	mov	r2, r3
 8006320:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006324:	4413      	add	r3, r2
 8006326:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800632a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800632e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	011a      	lsls	r2, r3, #4
 8006338:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800633c:	4413      	add	r3, r2
 800633e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006342:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006346:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800634a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	b29a      	uxth	r2, r3
 8006354:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006358:	801a      	strh	r2, [r3, #0]
 800635a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800635e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006368:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800636c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	785b      	ldrb	r3, [r3, #1]
 8006374:	2b00      	cmp	r3, #0
 8006376:	f040 809d 	bne.w	80064b4 <USB_EPStartXfer+0x1244>
 800637a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800637e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006388:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800638c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006396:	b29b      	uxth	r3, r3
 8006398:	461a      	mov	r2, r3
 800639a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800639e:	4413      	add	r3, r2
 80063a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80063a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	011a      	lsls	r2, r3, #4
 80063b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80063b6:	4413      	add	r3, r2
 80063b8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80063bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80063c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063c4:	881b      	ldrh	r3, [r3, #0]
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063cc:	b29a      	uxth	r2, r3
 80063ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063d2:	801a      	strh	r2, [r3, #0]
 80063d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	2b3e      	cmp	r3, #62	@ 0x3e
 80063e2:	d92b      	bls.n	800643c <USB_EPStartXfer+0x11cc>
 80063e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	095b      	lsrs	r3, r3, #5
 80063f2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80063f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	f003 031f 	and.w	r3, r3, #31
 8006406:	2b00      	cmp	r3, #0
 8006408:	d104      	bne.n	8006414 <USB_EPStartXfer+0x11a4>
 800640a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800640e:	3b01      	subs	r3, #1
 8006410:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006414:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006418:	881b      	ldrh	r3, [r3, #0]
 800641a:	b29a      	uxth	r2, r3
 800641c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006420:	b29b      	uxth	r3, r3
 8006422:	029b      	lsls	r3, r3, #10
 8006424:	b29b      	uxth	r3, r3
 8006426:	4313      	orrs	r3, r2
 8006428:	b29b      	uxth	r3, r3
 800642a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800642e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006432:	b29a      	uxth	r2, r3
 8006434:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006438:	801a      	strh	r2, [r3, #0]
 800643a:	e069      	b.n	8006510 <USB_EPStartXfer+0x12a0>
 800643c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006440:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d10c      	bne.n	8006466 <USB_EPStartXfer+0x11f6>
 800644c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006450:	881b      	ldrh	r3, [r3, #0]
 8006452:	b29b      	uxth	r3, r3
 8006454:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006458:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800645c:	b29a      	uxth	r2, r3
 800645e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006462:	801a      	strh	r2, [r3, #0]
 8006464:	e054      	b.n	8006510 <USB_EPStartXfer+0x12a0>
 8006466:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800646a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	085b      	lsrs	r3, r3, #1
 8006474:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006478:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800647c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	f003 0301 	and.w	r3, r3, #1
 8006488:	2b00      	cmp	r3, #0
 800648a:	d004      	beq.n	8006496 <USB_EPStartXfer+0x1226>
 800648c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006490:	3301      	adds	r3, #1
 8006492:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006496:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800649a:	881b      	ldrh	r3, [r3, #0]
 800649c:	b29a      	uxth	r2, r3
 800649e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	029b      	lsls	r3, r3, #10
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	4313      	orrs	r3, r2
 80064aa:	b29a      	uxth	r2, r3
 80064ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80064b0:	801a      	strh	r2, [r3, #0]
 80064b2:	e02d      	b.n	8006510 <USB_EPStartXfer+0x12a0>
 80064b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	785b      	ldrb	r3, [r3, #1]
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d125      	bne.n	8006510 <USB_EPStartXfer+0x12a0>
 80064c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	461a      	mov	r2, r3
 80064d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80064da:	4413      	add	r3, r2
 80064dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80064e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	011a      	lsls	r2, r3, #4
 80064ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80064f2:	4413      	add	r3, r2
 80064f4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80064f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80064fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006500:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	b29a      	uxth	r2, r3
 800650a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800650e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006510:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006514:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	69db      	ldr	r3, [r3, #28]
 800651c:	2b00      	cmp	r3, #0
 800651e:	f000 8218 	beq.w	8006952 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006522:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006526:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006530:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	4413      	add	r3, r2
 800653c:	881b      	ldrh	r3, [r3, #0]
 800653e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006542:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006546:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800654a:	2b00      	cmp	r3, #0
 800654c:	d005      	beq.n	800655a <USB_EPStartXfer+0x12ea>
 800654e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006552:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006556:	2b00      	cmp	r3, #0
 8006558:	d10d      	bne.n	8006576 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800655a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800655e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006562:	2b00      	cmp	r3, #0
 8006564:	f040 81f5 	bne.w	8006952 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006568:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800656c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006570:	2b00      	cmp	r3, #0
 8006572:	f040 81ee 	bne.w	8006952 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006576:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800657a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006584:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	4413      	add	r3, r2
 8006590:	881b      	ldrh	r3, [r3, #0]
 8006592:	b29b      	uxth	r3, r3
 8006594:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006598:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800659c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80065a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	441a      	add	r2, r3
 80065ba:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80065be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065ca:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	8013      	strh	r3, [r2, #0]
 80065d2:	e1be      	b.n	8006952 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80065d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	78db      	ldrb	r3, [r3, #3]
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	f040 81b4 	bne.w	800694e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80065e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	699a      	ldr	r2, [r3, #24]
 80065f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	429a      	cmp	r2, r3
 8006600:	d917      	bls.n	8006632 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006602:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006606:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8006612:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006616:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	699a      	ldr	r2, [r3, #24]
 800661e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006622:	1ad2      	subs	r2, r2, r3
 8006624:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006628:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	619a      	str	r2, [r3, #24]
 8006630:	e00e      	b.n	8006650 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006632:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006636:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	699b      	ldr	r3, [r3, #24]
 800663e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8006642:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006646:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2200      	movs	r2, #0
 800664e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006650:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006654:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	785b      	ldrb	r3, [r3, #1]
 800665c:	2b00      	cmp	r3, #0
 800665e:	f040 8085 	bne.w	800676c <USB_EPStartXfer+0x14fc>
 8006662:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006666:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006670:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006674:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800667e:	b29b      	uxth	r3, r3
 8006680:	461a      	mov	r2, r3
 8006682:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006686:	4413      	add	r3, r2
 8006688:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800668c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006690:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	011a      	lsls	r2, r3, #4
 800669a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800669e:	4413      	add	r3, r2
 80066a0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80066a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80066a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80066ac:	881b      	ldrh	r3, [r3, #0]
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066b4:	b29a      	uxth	r2, r3
 80066b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80066ba:	801a      	strh	r2, [r3, #0]
 80066bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066c0:	2b3e      	cmp	r3, #62	@ 0x3e
 80066c2:	d923      	bls.n	800670c <USB_EPStartXfer+0x149c>
 80066c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066c8:	095b      	lsrs	r3, r3, #5
 80066ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80066ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066d2:	f003 031f 	and.w	r3, r3, #31
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d104      	bne.n	80066e4 <USB_EPStartXfer+0x1474>
 80066da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066de:	3b01      	subs	r3, #1
 80066e0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80066e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80066e8:	881b      	ldrh	r3, [r3, #0]
 80066ea:	b29a      	uxth	r2, r3
 80066ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	029b      	lsls	r3, r3, #10
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	4313      	orrs	r3, r2
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006702:	b29a      	uxth	r2, r3
 8006704:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006708:	801a      	strh	r2, [r3, #0]
 800670a:	e060      	b.n	80067ce <USB_EPStartXfer+0x155e>
 800670c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006710:	2b00      	cmp	r3, #0
 8006712:	d10c      	bne.n	800672e <USB_EPStartXfer+0x14be>
 8006714:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006718:	881b      	ldrh	r3, [r3, #0]
 800671a:	b29b      	uxth	r3, r3
 800671c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006720:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006724:	b29a      	uxth	r2, r3
 8006726:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800672a:	801a      	strh	r2, [r3, #0]
 800672c:	e04f      	b.n	80067ce <USB_EPStartXfer+0x155e>
 800672e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006732:	085b      	lsrs	r3, r3, #1
 8006734:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800673c:	f003 0301 	and.w	r3, r3, #1
 8006740:	2b00      	cmp	r3, #0
 8006742:	d004      	beq.n	800674e <USB_EPStartXfer+0x14de>
 8006744:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006748:	3301      	adds	r3, #1
 800674a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800674e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006752:	881b      	ldrh	r3, [r3, #0]
 8006754:	b29a      	uxth	r2, r3
 8006756:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800675a:	b29b      	uxth	r3, r3
 800675c:	029b      	lsls	r3, r3, #10
 800675e:	b29b      	uxth	r3, r3
 8006760:	4313      	orrs	r3, r2
 8006762:	b29a      	uxth	r2, r3
 8006764:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006768:	801a      	strh	r2, [r3, #0]
 800676a:	e030      	b.n	80067ce <USB_EPStartXfer+0x155e>
 800676c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006770:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	785b      	ldrb	r3, [r3, #1]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d128      	bne.n	80067ce <USB_EPStartXfer+0x155e>
 800677c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006780:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800678a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800678e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006798:	b29b      	uxth	r3, r3
 800679a:	461a      	mov	r2, r3
 800679c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80067a0:	4413      	add	r3, r2
 80067a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80067a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	011a      	lsls	r2, r3, #4
 80067b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80067b8:	4413      	add	r3, r2
 80067ba:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80067be:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80067c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80067cc:	801a      	strh	r2, [r3, #0]
 80067ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80067dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	785b      	ldrb	r3, [r3, #1]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	f040 8085 	bne.w	80068f8 <USB_EPStartXfer+0x1688>
 80067ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80067fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006800:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800680a:	b29b      	uxth	r3, r3
 800680c:	461a      	mov	r2, r3
 800680e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006812:	4413      	add	r3, r2
 8006814:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006818:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800681c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	011a      	lsls	r2, r3, #4
 8006826:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800682a:	4413      	add	r3, r2
 800682c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006830:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006834:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006838:	881b      	ldrh	r3, [r3, #0]
 800683a:	b29b      	uxth	r3, r3
 800683c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006840:	b29a      	uxth	r2, r3
 8006842:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006846:	801a      	strh	r2, [r3, #0]
 8006848:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800684c:	2b3e      	cmp	r3, #62	@ 0x3e
 800684e:	d923      	bls.n	8006898 <USB_EPStartXfer+0x1628>
 8006850:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006854:	095b      	lsrs	r3, r3, #5
 8006856:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800685a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800685e:	f003 031f 	and.w	r3, r3, #31
 8006862:	2b00      	cmp	r3, #0
 8006864:	d104      	bne.n	8006870 <USB_EPStartXfer+0x1600>
 8006866:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800686a:	3b01      	subs	r3, #1
 800686c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006870:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006874:	881b      	ldrh	r3, [r3, #0]
 8006876:	b29a      	uxth	r2, r3
 8006878:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800687c:	b29b      	uxth	r3, r3
 800687e:	029b      	lsls	r3, r3, #10
 8006880:	b29b      	uxth	r3, r3
 8006882:	4313      	orrs	r3, r2
 8006884:	b29b      	uxth	r3, r3
 8006886:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800688a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800688e:	b29a      	uxth	r2, r3
 8006890:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006894:	801a      	strh	r2, [r3, #0]
 8006896:	e05c      	b.n	8006952 <USB_EPStartXfer+0x16e2>
 8006898:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800689c:	2b00      	cmp	r3, #0
 800689e:	d10c      	bne.n	80068ba <USB_EPStartXfer+0x164a>
 80068a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80068a4:	881b      	ldrh	r3, [r3, #0]
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068b0:	b29a      	uxth	r2, r3
 80068b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80068b6:	801a      	strh	r2, [r3, #0]
 80068b8:	e04b      	b.n	8006952 <USB_EPStartXfer+0x16e2>
 80068ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068be:	085b      	lsrs	r3, r3, #1
 80068c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80068c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068c8:	f003 0301 	and.w	r3, r3, #1
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d004      	beq.n	80068da <USB_EPStartXfer+0x166a>
 80068d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80068d4:	3301      	adds	r3, #1
 80068d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80068da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80068de:	881b      	ldrh	r3, [r3, #0]
 80068e0:	b29a      	uxth	r2, r3
 80068e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	029b      	lsls	r3, r3, #10
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	4313      	orrs	r3, r2
 80068ee:	b29a      	uxth	r2, r3
 80068f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80068f4:	801a      	strh	r2, [r3, #0]
 80068f6:	e02c      	b.n	8006952 <USB_EPStartXfer+0x16e2>
 80068f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	785b      	ldrb	r3, [r3, #1]
 8006904:	2b01      	cmp	r3, #1
 8006906:	d124      	bne.n	8006952 <USB_EPStartXfer+0x16e2>
 8006908:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800690c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006916:	b29b      	uxth	r3, r3
 8006918:	461a      	mov	r2, r3
 800691a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800691e:	4413      	add	r3, r2
 8006920:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006924:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006928:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	011a      	lsls	r2, r3, #4
 8006932:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006936:	4413      	add	r3, r2
 8006938:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800693c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006940:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006944:	b29a      	uxth	r2, r3
 8006946:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800694a:	801a      	strh	r2, [r3, #0]
 800694c:	e001      	b.n	8006952 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e03a      	b.n	80069c8 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006952:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006956:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006960:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	4413      	add	r3, r2
 800696c:	881b      	ldrh	r3, [r3, #0]
 800696e:	b29b      	uxth	r3, r3
 8006970:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006974:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006978:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800697c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006980:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006984:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006988:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800698c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006990:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006994:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006998:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	441a      	add	r2, r3
 80069ae:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80069b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80069c6:	2300      	movs	r3, #0
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}

080069d2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80069d2:	b480      	push	{r7}
 80069d4:	b085      	sub	sp, #20
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
 80069da:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	785b      	ldrb	r3, [r3, #1]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d020      	beq.n	8006a26 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	4413      	add	r3, r2
 80069ee:	881b      	ldrh	r3, [r3, #0]
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069fa:	81bb      	strh	r3, [r7, #12]
 80069fc:	89bb      	ldrh	r3, [r7, #12]
 80069fe:	f083 0310 	eor.w	r3, r3, #16
 8006a02:	81bb      	strh	r3, [r7, #12]
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	441a      	add	r2, r3
 8006a0e:	89bb      	ldrh	r3, [r7, #12]
 8006a10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	8013      	strh	r3, [r2, #0]
 8006a24:	e01f      	b.n	8006a66 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	4413      	add	r3, r2
 8006a30:	881b      	ldrh	r3, [r3, #0]
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a3c:	81fb      	strh	r3, [r7, #14]
 8006a3e:	89fb      	ldrh	r3, [r7, #14]
 8006a40:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006a44:	81fb      	strh	r3, [r7, #14]
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	441a      	add	r2, r3
 8006a50:	89fb      	ldrh	r3, [r7, #14]
 8006a52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3714      	adds	r7, #20
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bc80      	pop	{r7}
 8006a70:	4770      	bx	lr

08006a72 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a72:	b480      	push	{r7}
 8006a74:	b087      	sub	sp, #28
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
 8006a7a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	7b1b      	ldrb	r3, [r3, #12]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	f040 809d 	bne.w	8006bc0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	785b      	ldrb	r3, [r3, #1]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d04c      	beq.n	8006b28 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	4413      	add	r3, r2
 8006a98:	881b      	ldrh	r3, [r3, #0]
 8006a9a:	823b      	strh	r3, [r7, #16]
 8006a9c:	8a3b      	ldrh	r3, [r7, #16]
 8006a9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d01b      	beq.n	8006ade <USB_EPClearStall+0x6c>
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	4413      	add	r3, r2
 8006ab0:	881b      	ldrh	r3, [r3, #0]
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ab8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006abc:	81fb      	strh	r3, [r7, #14]
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	441a      	add	r2, r3
 8006ac8:	89fb      	ldrh	r3, [r7, #14]
 8006aca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ace:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ad2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ad6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	78db      	ldrb	r3, [r3, #3]
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d06c      	beq.n	8006bc0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	4413      	add	r3, r2
 8006af0:	881b      	ldrh	r3, [r3, #0]
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006af8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006afc:	81bb      	strh	r3, [r7, #12]
 8006afe:	89bb      	ldrh	r3, [r7, #12]
 8006b00:	f083 0320 	eor.w	r3, r3, #32
 8006b04:	81bb      	strh	r3, [r7, #12]
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	441a      	add	r2, r3
 8006b10:	89bb      	ldrh	r3, [r7, #12]
 8006b12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	8013      	strh	r3, [r2, #0]
 8006b26:	e04b      	b.n	8006bc0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	4413      	add	r3, r2
 8006b32:	881b      	ldrh	r3, [r3, #0]
 8006b34:	82fb      	strh	r3, [r7, #22]
 8006b36:	8afb      	ldrh	r3, [r7, #22]
 8006b38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d01b      	beq.n	8006b78 <USB_EPClearStall+0x106>
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	4413      	add	r3, r2
 8006b4a:	881b      	ldrh	r3, [r3, #0]
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b56:	82bb      	strh	r3, [r7, #20]
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	441a      	add	r2, r3
 8006b62:	8abb      	ldrh	r3, [r7, #20]
 8006b64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b6c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	4413      	add	r3, r2
 8006b82:	881b      	ldrh	r3, [r3, #0]
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b8e:	827b      	strh	r3, [r7, #18]
 8006b90:	8a7b      	ldrh	r3, [r7, #18]
 8006b92:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006b96:	827b      	strh	r3, [r7, #18]
 8006b98:	8a7b      	ldrh	r3, [r7, #18]
 8006b9a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006b9e:	827b      	strh	r3, [r7, #18]
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	441a      	add	r2, r3
 8006baa:	8a7b      	ldrh	r3, [r7, #18]
 8006bac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bb0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bb4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	371c      	adds	r7, #28
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bc80      	pop	{r7}
 8006bca:	4770      	bx	lr

08006bcc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006bd8:	78fb      	ldrb	r3, [r7, #3]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d103      	bne.n	8006be6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2280      	movs	r2, #128	@ 0x80
 8006be2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006be6:	2300      	movs	r3, #0
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bc80      	pop	{r7}
 8006bf0:	4770      	bx	lr

08006bf2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	b083      	sub	sp, #12
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	370c      	adds	r7, #12
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bc80      	pop	{r7}
 8006c04:	4770      	bx	lr

08006c06 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006c06:	b480      	push	{r7}
 8006c08:	b083      	sub	sp, #12
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006c0e:	2300      	movs	r3, #0
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bc80      	pop	{r7}
 8006c18:	4770      	bx	lr

08006c1a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006c1a:	b480      	push	{r7}
 8006c1c:	b085      	sub	sp, #20
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3714      	adds	r7, #20
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bc80      	pop	{r7}
 8006c36:	4770      	bx	lr

08006c38 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006c42:	2300      	movs	r3, #0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bc80      	pop	{r7}
 8006c4c:	4770      	bx	lr

08006c4e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006c4e:	b480      	push	{r7}
 8006c50:	b08b      	sub	sp, #44	@ 0x2c
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	60f8      	str	r0, [r7, #12]
 8006c56:	60b9      	str	r1, [r7, #8]
 8006c58:	4611      	mov	r1, r2
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	80fb      	strh	r3, [r7, #6]
 8006c60:	4613      	mov	r3, r2
 8006c62:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006c64:	88bb      	ldrh	r3, [r7, #4]
 8006c66:	3301      	adds	r3, #1
 8006c68:	085b      	lsrs	r3, r3, #1
 8006c6a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006c74:	88fb      	ldrh	r3, [r7, #6]
 8006c76:	005a      	lsls	r2, r3, #1
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c80:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c86:	e01f      	b.n	8006cc8 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	3301      	adds	r3, #1
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	b21b      	sxth	r3, r3
 8006c96:	021b      	lsls	r3, r3, #8
 8006c98:	b21a      	sxth	r2, r3
 8006c9a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	b21b      	sxth	r3, r3
 8006ca2:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006ca4:	6a3b      	ldr	r3, [r7, #32]
 8006ca6:	8a7a      	ldrh	r2, [r7, #18]
 8006ca8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006caa:	6a3b      	ldr	r3, [r7, #32]
 8006cac:	3302      	adds	r3, #2
 8006cae:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006cb0:	6a3b      	ldr	r3, [r7, #32]
 8006cb2:	3302      	adds	r3, #2
 8006cb4:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	3301      	adds	r3, #1
 8006cba:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc4:	3b01      	subs	r3, #1
 8006cc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d1dc      	bne.n	8006c88 <USB_WritePMA+0x3a>
  }
}
 8006cce:	bf00      	nop
 8006cd0:	bf00      	nop
 8006cd2:	372c      	adds	r7, #44	@ 0x2c
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bc80      	pop	{r7}
 8006cd8:	4770      	bx	lr

08006cda <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006cda:	b480      	push	{r7}
 8006cdc:	b08b      	sub	sp, #44	@ 0x2c
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	60f8      	str	r0, [r7, #12]
 8006ce2:	60b9      	str	r1, [r7, #8]
 8006ce4:	4611      	mov	r1, r2
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	460b      	mov	r3, r1
 8006cea:	80fb      	strh	r3, [r7, #6]
 8006cec:	4613      	mov	r3, r2
 8006cee:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006cf0:	88bb      	ldrh	r3, [r7, #4]
 8006cf2:	085b      	lsrs	r3, r3, #1
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006d00:	88fb      	ldrh	r3, [r7, #6]
 8006d02:	005a      	lsls	r2, r3, #1
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	4413      	add	r3, r2
 8006d08:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d0c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d12:	e01b      	b.n	8006d4c <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006d14:	6a3b      	ldr	r3, [r7, #32]
 8006d16:	881b      	ldrh	r3, [r3, #0]
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006d1c:	6a3b      	ldr	r3, [r7, #32]
 8006d1e:	3302      	adds	r3, #2
 8006d20:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	b2da      	uxtb	r2, r3
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	0a1b      	lsrs	r3, r3, #8
 8006d34:	b2da      	uxtb	r2, r3
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006d40:	6a3b      	ldr	r3, [r7, #32]
 8006d42:	3302      	adds	r3, #2
 8006d44:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d1e0      	bne.n	8006d14 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006d52:	88bb      	ldrh	r3, [r7, #4]
 8006d54:	f003 0301 	and.w	r3, r3, #1
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d007      	beq.n	8006d6e <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006d5e:	6a3b      	ldr	r3, [r7, #32]
 8006d60:	881b      	ldrh	r3, [r3, #0]
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	b2da      	uxtb	r2, r3
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	701a      	strb	r2, [r3, #0]
  }
}
 8006d6e:	bf00      	nop
 8006d70:	372c      	adds	r7, #44	@ 0x2c
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bc80      	pop	{r7}
 8006d76:	4770      	bx	lr

08006d78 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	460b      	mov	r3, r1
 8006d82:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006d84:	2300      	movs	r3, #0
 8006d86:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	7c1b      	ldrb	r3, [r3, #16]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d115      	bne.n	8006dbc <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006d90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006d94:	2202      	movs	r2, #2
 8006d96:	2181      	movs	r1, #129	@ 0x81
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f001 fe82 	bl	8008aa2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2201      	movs	r2, #1
 8006da2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006da4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006da8:	2202      	movs	r2, #2
 8006daa:	2101      	movs	r1, #1
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f001 fe78 	bl	8008aa2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2201      	movs	r2, #1
 8006db6:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8006dba:	e012      	b.n	8006de2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006dbc:	2340      	movs	r3, #64	@ 0x40
 8006dbe:	2202      	movs	r2, #2
 8006dc0:	2181      	movs	r1, #129	@ 0x81
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f001 fe6d 	bl	8008aa2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006dce:	2340      	movs	r3, #64	@ 0x40
 8006dd0:	2202      	movs	r2, #2
 8006dd2:	2101      	movs	r1, #1
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f001 fe64 	bl	8008aa2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006de2:	2308      	movs	r3, #8
 8006de4:	2203      	movs	r2, #3
 8006de6:	2182      	movs	r1, #130	@ 0x82
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f001 fe5a 	bl	8008aa2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2201      	movs	r2, #1
 8006df2:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006df4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006df8:	f001 ff7a 	bl	8008cf0 <USBD_static_malloc>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d102      	bne.n	8006e14 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	73fb      	strb	r3, [r7, #15]
 8006e12:	e026      	b.n	8006e62 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e1a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	7c1b      	ldrb	r3, [r3, #16]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d109      	bne.n	8006e52 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006e44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006e48:	2101      	movs	r1, #1
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f001 ff19 	bl	8008c82 <USBD_LL_PrepareReceive>
 8006e50:	e007      	b.n	8006e62 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006e58:	2340      	movs	r3, #64	@ 0x40
 8006e5a:	2101      	movs	r1, #1
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f001 ff10 	bl	8008c82 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	460b      	mov	r3, r1
 8006e76:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006e7c:	2181      	movs	r1, #129	@ 0x81
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f001 fe35 	bl	8008aee <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006e8a:	2101      	movs	r1, #1
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f001 fe2e 	bl	8008aee <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006e9a:	2182      	movs	r1, #130	@ 0x82
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f001 fe26 	bl	8008aee <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d00e      	beq.n	8006ed0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f001 ff20 	bl	8008d08 <USBD_static_free>
    pdev->pClassData = NULL;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8006ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3710      	adds	r7, #16
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b086      	sub	sp, #24
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
 8006ee2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006eea:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006eec:	2300      	movs	r3, #0
 8006eee:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d039      	beq.n	8006f78 <USBD_CDC_Setup+0x9e>
 8006f04:	2b20      	cmp	r3, #32
 8006f06:	d17f      	bne.n	8007008 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	88db      	ldrh	r3, [r3, #6]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d029      	beq.n	8006f64 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	b25b      	sxtb	r3, r3
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	da11      	bge.n	8006f3e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	683a      	ldr	r2, [r7, #0]
 8006f24:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006f26:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006f28:	683a      	ldr	r2, [r7, #0]
 8006f2a:	88d2      	ldrh	r2, [r2, #6]
 8006f2c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006f2e:	6939      	ldr	r1, [r7, #16]
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	88db      	ldrh	r3, [r3, #6]
 8006f34:	461a      	mov	r2, r3
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f001 fa06 	bl	8008348 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006f3c:	e06b      	b.n	8007016 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	785a      	ldrb	r2, [r3, #1]
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	88db      	ldrh	r3, [r3, #6]
 8006f4c:	b2da      	uxtb	r2, r3
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006f54:	6939      	ldr	r1, [r7, #16]
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	88db      	ldrh	r3, [r3, #6]
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f001 fa21 	bl	80083a4 <USBD_CtlPrepareRx>
      break;
 8006f62:	e058      	b.n	8007016 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	683a      	ldr	r2, [r7, #0]
 8006f6e:	7850      	ldrb	r0, [r2, #1]
 8006f70:	2200      	movs	r2, #0
 8006f72:	6839      	ldr	r1, [r7, #0]
 8006f74:	4798      	blx	r3
      break;
 8006f76:	e04e      	b.n	8007016 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	785b      	ldrb	r3, [r3, #1]
 8006f7c:	2b0b      	cmp	r3, #11
 8006f7e:	d02e      	beq.n	8006fde <USBD_CDC_Setup+0x104>
 8006f80:	2b0b      	cmp	r3, #11
 8006f82:	dc38      	bgt.n	8006ff6 <USBD_CDC_Setup+0x11c>
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d002      	beq.n	8006f8e <USBD_CDC_Setup+0xb4>
 8006f88:	2b0a      	cmp	r3, #10
 8006f8a:	d014      	beq.n	8006fb6 <USBD_CDC_Setup+0xdc>
 8006f8c:	e033      	b.n	8006ff6 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f94:	2b03      	cmp	r3, #3
 8006f96:	d107      	bne.n	8006fa8 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006f98:	f107 030c 	add.w	r3, r7, #12
 8006f9c:	2202      	movs	r2, #2
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f001 f9d1 	bl	8008348 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006fa6:	e02e      	b.n	8007006 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006fa8:	6839      	ldr	r1, [r7, #0]
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f001 f962 	bl	8008274 <USBD_CtlError>
            ret = USBD_FAIL;
 8006fb0:	2302      	movs	r3, #2
 8006fb2:	75fb      	strb	r3, [r7, #23]
          break;
 8006fb4:	e027      	b.n	8007006 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fbc:	2b03      	cmp	r3, #3
 8006fbe:	d107      	bne.n	8006fd0 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006fc0:	f107 030f 	add.w	r3, r7, #15
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f001 f9bd 	bl	8008348 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006fce:	e01a      	b.n	8007006 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006fd0:	6839      	ldr	r1, [r7, #0]
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f001 f94e 	bl	8008274 <USBD_CtlError>
            ret = USBD_FAIL;
 8006fd8:	2302      	movs	r3, #2
 8006fda:	75fb      	strb	r3, [r7, #23]
          break;
 8006fdc:	e013      	b.n	8007006 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fe4:	2b03      	cmp	r3, #3
 8006fe6:	d00d      	beq.n	8007004 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006fe8:	6839      	ldr	r1, [r7, #0]
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f001 f942 	bl	8008274 <USBD_CtlError>
            ret = USBD_FAIL;
 8006ff0:	2302      	movs	r3, #2
 8006ff2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006ff4:	e006      	b.n	8007004 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006ff6:	6839      	ldr	r1, [r7, #0]
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f001 f93b 	bl	8008274 <USBD_CtlError>
          ret = USBD_FAIL;
 8006ffe:	2302      	movs	r3, #2
 8007000:	75fb      	strb	r3, [r7, #23]
          break;
 8007002:	e000      	b.n	8007006 <USBD_CDC_Setup+0x12c>
          break;
 8007004:	bf00      	nop
      }
      break;
 8007006:	e006      	b.n	8007016 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007008:	6839      	ldr	r1, [r7, #0]
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f001 f932 	bl	8008274 <USBD_CtlError>
      ret = USBD_FAIL;
 8007010:	2302      	movs	r3, #2
 8007012:	75fb      	strb	r3, [r7, #23]
      break;
 8007014:	bf00      	nop
  }

  return ret;
 8007016:	7dfb      	ldrb	r3, [r7, #23]
}
 8007018:	4618      	mov	r0, r3
 800701a:	3718      	adds	r7, #24
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	460b      	mov	r3, r1
 800702a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007032:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800703a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007042:	2b00      	cmp	r3, #0
 8007044:	d03a      	beq.n	80070bc <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007046:	78fa      	ldrb	r2, [r7, #3]
 8007048:	6879      	ldr	r1, [r7, #4]
 800704a:	4613      	mov	r3, r2
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	4413      	add	r3, r2
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	440b      	add	r3, r1
 8007054:	331c      	adds	r3, #28
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d029      	beq.n	80070b0 <USBD_CDC_DataIn+0x90>
 800705c:	78fa      	ldrb	r2, [r7, #3]
 800705e:	6879      	ldr	r1, [r7, #4]
 8007060:	4613      	mov	r3, r2
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	4413      	add	r3, r2
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	440b      	add	r3, r1
 800706a:	331c      	adds	r3, #28
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	78f9      	ldrb	r1, [r7, #3]
 8007070:	68b8      	ldr	r0, [r7, #8]
 8007072:	460b      	mov	r3, r1
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	440b      	add	r3, r1
 8007078:	00db      	lsls	r3, r3, #3
 800707a:	4403      	add	r3, r0
 800707c:	3320      	adds	r3, #32
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	fbb2 f1f3 	udiv	r1, r2, r3
 8007084:	fb01 f303 	mul.w	r3, r1, r3
 8007088:	1ad3      	subs	r3, r2, r3
 800708a:	2b00      	cmp	r3, #0
 800708c:	d110      	bne.n	80070b0 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800708e:	78fa      	ldrb	r2, [r7, #3]
 8007090:	6879      	ldr	r1, [r7, #4]
 8007092:	4613      	mov	r3, r2
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	4413      	add	r3, r2
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	440b      	add	r3, r1
 800709c:	331c      	adds	r3, #28
 800709e:	2200      	movs	r2, #0
 80070a0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80070a2:	78f9      	ldrb	r1, [r7, #3]
 80070a4:	2300      	movs	r3, #0
 80070a6:	2200      	movs	r2, #0
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f001 fdc7 	bl	8008c3c <USBD_LL_Transmit>
 80070ae:	e003      	b.n	80070b8 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 80070b8:	2300      	movs	r3, #0
 80070ba:	e000      	b.n	80070be <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80070bc:	2302      	movs	r3, #2
  }
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3710      	adds	r7, #16
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}

080070c6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80070c6:	b580      	push	{r7, lr}
 80070c8:	b084      	sub	sp, #16
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
 80070ce:	460b      	mov	r3, r1
 80070d0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070d8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80070da:	78fb      	ldrb	r3, [r7, #3]
 80070dc:	4619      	mov	r1, r3
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f001 fdf2 	bl	8008cc8 <USBD_LL_GetRxDataSize>
 80070e4:	4602      	mov	r2, r0
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00d      	beq.n	8007112 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80070fc:	68db      	ldr	r3, [r3, #12]
 80070fe:	68fa      	ldr	r2, [r7, #12]
 8007100:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800710a:	4611      	mov	r1, r2
 800710c:	4798      	blx	r3

    return USBD_OK;
 800710e:	2300      	movs	r3, #0
 8007110:	e000      	b.n	8007114 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007112:	2302      	movs	r3, #2
  }
}
 8007114:	4618      	mov	r0, r3
 8007116:	3710      	adds	r7, #16
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800712a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007132:	2b00      	cmp	r3, #0
 8007134:	d014      	beq.n	8007160 <USBD_CDC_EP0_RxReady+0x44>
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800713c:	2bff      	cmp	r3, #255	@ 0xff
 800713e:	d00f      	beq.n	8007160 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800714e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007156:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	22ff      	movs	r2, #255	@ 0xff
 800715c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
	...

0800716c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2243      	movs	r2, #67	@ 0x43
 8007178:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800717a:	4b03      	ldr	r3, [pc, #12]	@ (8007188 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800717c:	4618      	mov	r0, r3
 800717e:	370c      	adds	r7, #12
 8007180:	46bd      	mov	sp, r7
 8007182:	bc80      	pop	{r7}
 8007184:	4770      	bx	lr
 8007186:	bf00      	nop
 8007188:	20000098 	.word	0x20000098

0800718c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2243      	movs	r2, #67	@ 0x43
 8007198:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800719a:	4b03      	ldr	r3, [pc, #12]	@ (80071a8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800719c:	4618      	mov	r0, r3
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bc80      	pop	{r7}
 80071a4:	4770      	bx	lr
 80071a6:	bf00      	nop
 80071a8:	20000054 	.word	0x20000054

080071ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2243      	movs	r2, #67	@ 0x43
 80071b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80071ba:	4b03      	ldr	r3, [pc, #12]	@ (80071c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80071bc:	4618      	mov	r0, r3
 80071be:	370c      	adds	r7, #12
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bc80      	pop	{r7}
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	200000dc 	.word	0x200000dc

080071cc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	220a      	movs	r2, #10
 80071d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80071da:	4b03      	ldr	r3, [pc, #12]	@ (80071e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80071dc:	4618      	mov	r0, r3
 80071de:	370c      	adds	r7, #12
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bc80      	pop	{r7}
 80071e4:	4770      	bx	lr
 80071e6:	bf00      	nop
 80071e8:	20000010 	.word	0x20000010

080071ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b085      	sub	sp, #20
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80071f6:	2302      	movs	r3, #2
 80071f8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d005      	beq.n	800720c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	683a      	ldr	r2, [r7, #0]
 8007204:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8007208:	2300      	movs	r3, #0
 800720a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800720c:	7bfb      	ldrb	r3, [r7, #15]
}
 800720e:	4618      	mov	r0, r3
 8007210:	3714      	adds	r7, #20
 8007212:	46bd      	mov	sp, r7
 8007214:	bc80      	pop	{r7}
 8007216:	4770      	bx	lr

08007218 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007218:	b480      	push	{r7}
 800721a:	b087      	sub	sp, #28
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	4613      	mov	r3, r2
 8007224:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800722c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	68ba      	ldr	r2, [r7, #8]
 8007232:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007236:	88fa      	ldrh	r2, [r7, #6]
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800723e:	2300      	movs	r3, #0
}
 8007240:	4618      	mov	r0, r3
 8007242:	371c      	adds	r7, #28
 8007244:	46bd      	mov	sp, r7
 8007246:	bc80      	pop	{r7}
 8007248:	4770      	bx	lr

0800724a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800724a:	b480      	push	{r7}
 800724c:	b085      	sub	sp, #20
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
 8007252:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800725a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	683a      	ldr	r2, [r7, #0]
 8007260:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	3714      	adds	r7, #20
 800726a:	46bd      	mov	sp, r7
 800726c:	bc80      	pop	{r7}
 800726e:	4770      	bx	lr

08007270 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800727e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007286:	2b00      	cmp	r3, #0
 8007288:	d01c      	beq.n	80072c4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007290:	2b00      	cmp	r3, #0
 8007292:	d115      	bne.n	80072c0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2201      	movs	r2, #1
 8007298:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	2181      	movs	r1, #129	@ 0x81
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f001 fcc0 	bl	8008c3c <USBD_LL_Transmit>

      return USBD_OK;
 80072bc:	2300      	movs	r3, #0
 80072be:	e002      	b.n	80072c6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80072c0:	2301      	movs	r3, #1
 80072c2:	e000      	b.n	80072c6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80072c4:	2302      	movs	r3, #2
  }
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3710      	adds	r7, #16
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}

080072ce <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80072ce:	b580      	push	{r7, lr}
 80072d0:	b084      	sub	sp, #16
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072dc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d017      	beq.n	8007318 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	7c1b      	ldrb	r3, [r3, #16]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d109      	bne.n	8007304 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80072f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80072fa:	2101      	movs	r1, #1
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f001 fcc0 	bl	8008c82 <USBD_LL_PrepareReceive>
 8007302:	e007      	b.n	8007314 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800730a:	2340      	movs	r3, #64	@ 0x40
 800730c:	2101      	movs	r1, #1
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f001 fcb7 	bl	8008c82 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007314:	2300      	movs	r3, #0
 8007316:	e000      	b.n	800731a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007318:	2302      	movs	r3, #2
  }
}
 800731a:	4618      	mov	r0, r3
 800731c:	3710      	adds	r7, #16
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007322:	b580      	push	{r7, lr}
 8007324:	b084      	sub	sp, #16
 8007326:	af00      	add	r7, sp, #0
 8007328:	60f8      	str	r0, [r7, #12]
 800732a:	60b9      	str	r1, [r7, #8]
 800732c:	4613      	mov	r3, r2
 800732e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d101      	bne.n	800733a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007336:	2302      	movs	r3, #2
 8007338:	e01a      	b.n	8007370 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007340:	2b00      	cmp	r3, #0
 8007342:	d003      	beq.n	800734c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2200      	movs	r2, #0
 8007348:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d003      	beq.n	800735a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	68ba      	ldr	r2, [r7, #8]
 8007356:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2201      	movs	r2, #1
 800735e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	79fa      	ldrb	r2, [r7, #7]
 8007366:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007368:	68f8      	ldr	r0, [r7, #12]
 800736a:	f001 fb25 	bl	80089b8 <USBD_LL_Init>

  return USBD_OK;
 800736e:	2300      	movs	r3, #0
}
 8007370:	4618      	mov	r0, r3
 8007372:	3710      	adds	r7, #16
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007378:	b480      	push	{r7}
 800737a:	b085      	sub	sp, #20
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007382:	2300      	movs	r3, #0
 8007384:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d006      	beq.n	800739a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	683a      	ldr	r2, [r7, #0]
 8007390:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8007394:	2300      	movs	r3, #0
 8007396:	73fb      	strb	r3, [r7, #15]
 8007398:	e001      	b.n	800739e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800739a:	2302      	movs	r3, #2
 800739c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800739e:	7bfb      	ldrb	r3, [r7, #15]
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3714      	adds	r7, #20
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bc80      	pop	{r7}
 80073a8:	4770      	bx	lr

080073aa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b082      	sub	sp, #8
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f001 fb5a 	bl	8008a6c <USBD_LL_Start>

  return USBD_OK;
 80073b8:	2300      	movs	r3, #0
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3708      	adds	r7, #8
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80073c2:	b480      	push	{r7}
 80073c4:	b083      	sub	sp, #12
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80073ca:	2300      	movs	r3, #0
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	370c      	adds	r7, #12
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bc80      	pop	{r7}
 80073d4:	4770      	bx	lr

080073d6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b084      	sub	sp, #16
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
 80073de:	460b      	mov	r3, r1
 80073e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80073e2:	2302      	movs	r3, #2
 80073e4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d00c      	beq.n	800740a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	78fa      	ldrb	r2, [r7, #3]
 80073fa:	4611      	mov	r1, r2
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	4798      	blx	r3
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d101      	bne.n	800740a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007406:	2300      	movs	r3, #0
 8007408:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800740a:	7bfb      	ldrb	r3, [r7, #15]
}
 800740c:	4618      	mov	r0, r3
 800740e:	3710      	adds	r7, #16
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b082      	sub	sp, #8
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	460b      	mov	r3, r1
 800741e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	78fa      	ldrb	r2, [r7, #3]
 800742a:	4611      	mov	r1, r2
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	4798      	blx	r3

  return USBD_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	3708      	adds	r7, #8
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b082      	sub	sp, #8
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
 8007442:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800744a:	6839      	ldr	r1, [r7, #0]
 800744c:	4618      	mov	r0, r3
 800744e:	f000 fed8 	bl	8008202 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2201      	movs	r2, #1
 8007456:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007460:	461a      	mov	r2, r3
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800746e:	f003 031f 	and.w	r3, r3, #31
 8007472:	2b02      	cmp	r3, #2
 8007474:	d016      	beq.n	80074a4 <USBD_LL_SetupStage+0x6a>
 8007476:	2b02      	cmp	r3, #2
 8007478:	d81c      	bhi.n	80074b4 <USBD_LL_SetupStage+0x7a>
 800747a:	2b00      	cmp	r3, #0
 800747c:	d002      	beq.n	8007484 <USBD_LL_SetupStage+0x4a>
 800747e:	2b01      	cmp	r3, #1
 8007480:	d008      	beq.n	8007494 <USBD_LL_SetupStage+0x5a>
 8007482:	e017      	b.n	80074b4 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800748a:	4619      	mov	r1, r3
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 f9cb 	bl	8007828 <USBD_StdDevReq>
      break;
 8007492:	e01a      	b.n	80074ca <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800749a:	4619      	mov	r1, r3
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 fa2d 	bl	80078fc <USBD_StdItfReq>
      break;
 80074a2:	e012      	b.n	80074ca <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80074aa:	4619      	mov	r1, r3
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 fa6d 	bl	800798c <USBD_StdEPReq>
      break;
 80074b2:	e00a      	b.n	80074ca <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80074ba:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	4619      	mov	r1, r3
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f001 fb32 	bl	8008b2c <USBD_LL_StallEP>
      break;
 80074c8:	bf00      	nop
  }

  return USBD_OK;
 80074ca:	2300      	movs	r3, #0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3708      	adds	r7, #8
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b086      	sub	sp, #24
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	460b      	mov	r3, r1
 80074de:	607a      	str	r2, [r7, #4]
 80074e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80074e2:	7afb      	ldrb	r3, [r7, #11]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d14b      	bne.n	8007580 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80074ee:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80074f6:	2b03      	cmp	r3, #3
 80074f8:	d134      	bne.n	8007564 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	68da      	ldr	r2, [r3, #12]
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	429a      	cmp	r2, r3
 8007504:	d919      	bls.n	800753a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	68da      	ldr	r2, [r3, #12]
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	1ad2      	subs	r2, r2, r3
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	68da      	ldr	r2, [r3, #12]
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800751c:	429a      	cmp	r2, r3
 800751e:	d203      	bcs.n	8007528 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007524:	b29b      	uxth	r3, r3
 8007526:	e002      	b.n	800752e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800752c:	b29b      	uxth	r3, r3
 800752e:	461a      	mov	r2, r3
 8007530:	6879      	ldr	r1, [r7, #4]
 8007532:	68f8      	ldr	r0, [r7, #12]
 8007534:	f000 ff54 	bl	80083e0 <USBD_CtlContinueRx>
 8007538:	e038      	b.n	80075ac <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007540:	691b      	ldr	r3, [r3, #16]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00a      	beq.n	800755c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800754c:	2b03      	cmp	r3, #3
 800754e:	d105      	bne.n	800755c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	68f8      	ldr	r0, [r7, #12]
 800755a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800755c:	68f8      	ldr	r0, [r7, #12]
 800755e:	f000 ff51 	bl	8008404 <USBD_CtlSendStatus>
 8007562:	e023      	b.n	80075ac <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800756a:	2b05      	cmp	r3, #5
 800756c:	d11e      	bne.n	80075ac <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2200      	movs	r2, #0
 8007572:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007576:	2100      	movs	r1, #0
 8007578:	68f8      	ldr	r0, [r7, #12]
 800757a:	f001 fad7 	bl	8008b2c <USBD_LL_StallEP>
 800757e:	e015      	b.n	80075ac <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007586:	699b      	ldr	r3, [r3, #24]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d00d      	beq.n	80075a8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007592:	2b03      	cmp	r3, #3
 8007594:	d108      	bne.n	80075a8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800759c:	699b      	ldr	r3, [r3, #24]
 800759e:	7afa      	ldrb	r2, [r7, #11]
 80075a0:	4611      	mov	r1, r2
 80075a2:	68f8      	ldr	r0, [r7, #12]
 80075a4:	4798      	blx	r3
 80075a6:	e001      	b.n	80075ac <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80075a8:	2302      	movs	r3, #2
 80075aa:	e000      	b.n	80075ae <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3718      	adds	r7, #24
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}

080075b6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b086      	sub	sp, #24
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	60f8      	str	r0, [r7, #12]
 80075be:	460b      	mov	r3, r1
 80075c0:	607a      	str	r2, [r7, #4]
 80075c2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80075c4:	7afb      	ldrb	r3, [r7, #11]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d17f      	bne.n	80076ca <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	3314      	adds	r3, #20
 80075ce:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80075d6:	2b02      	cmp	r3, #2
 80075d8:	d15c      	bne.n	8007694 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	68da      	ldr	r2, [r3, #12]
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	691b      	ldr	r3, [r3, #16]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d915      	bls.n	8007612 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	68da      	ldr	r2, [r3, #12]
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	691b      	ldr	r3, [r3, #16]
 80075ee:	1ad2      	subs	r2, r2, r3
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	461a      	mov	r2, r3
 80075fc:	6879      	ldr	r1, [r7, #4]
 80075fe:	68f8      	ldr	r0, [r7, #12]
 8007600:	f000 febe 	bl	8008380 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007604:	2300      	movs	r3, #0
 8007606:	2200      	movs	r2, #0
 8007608:	2100      	movs	r1, #0
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	f001 fb39 	bl	8008c82 <USBD_LL_PrepareReceive>
 8007610:	e04e      	b.n	80076b0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	697a      	ldr	r2, [r7, #20]
 8007618:	6912      	ldr	r2, [r2, #16]
 800761a:	fbb3 f1f2 	udiv	r1, r3, r2
 800761e:	fb01 f202 	mul.w	r2, r1, r2
 8007622:	1a9b      	subs	r3, r3, r2
 8007624:	2b00      	cmp	r3, #0
 8007626:	d11c      	bne.n	8007662 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	689a      	ldr	r2, [r3, #8]
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007630:	429a      	cmp	r2, r3
 8007632:	d316      	bcc.n	8007662 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	689a      	ldr	r2, [r3, #8]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800763e:	429a      	cmp	r2, r3
 8007640:	d20f      	bcs.n	8007662 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007642:	2200      	movs	r2, #0
 8007644:	2100      	movs	r1, #0
 8007646:	68f8      	ldr	r0, [r7, #12]
 8007648:	f000 fe9a 	bl	8008380 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2200      	movs	r2, #0
 8007650:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007654:	2300      	movs	r3, #0
 8007656:	2200      	movs	r2, #0
 8007658:	2100      	movs	r1, #0
 800765a:	68f8      	ldr	r0, [r7, #12]
 800765c:	f001 fb11 	bl	8008c82 <USBD_LL_PrepareReceive>
 8007660:	e026      	b.n	80076b0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d00a      	beq.n	8007684 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007674:	2b03      	cmp	r3, #3
 8007676:	d105      	bne.n	8007684 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	68f8      	ldr	r0, [r7, #12]
 8007682:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007684:	2180      	movs	r1, #128	@ 0x80
 8007686:	68f8      	ldr	r0, [r7, #12]
 8007688:	f001 fa50 	bl	8008b2c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f000 fecc 	bl	800842a <USBD_CtlReceiveStatus>
 8007692:	e00d      	b.n	80076b0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800769a:	2b04      	cmp	r3, #4
 800769c:	d004      	beq.n	80076a8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d103      	bne.n	80076b0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80076a8:	2180      	movs	r1, #128	@ 0x80
 80076aa:	68f8      	ldr	r0, [r7, #12]
 80076ac:	f001 fa3e 	bl	8008b2c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d11d      	bne.n	80076f6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80076ba:	68f8      	ldr	r0, [r7, #12]
 80076bc:	f7ff fe81 	bl	80073c2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80076c8:	e015      	b.n	80076f6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076d0:	695b      	ldr	r3, [r3, #20]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d00d      	beq.n	80076f2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80076dc:	2b03      	cmp	r3, #3
 80076de:	d108      	bne.n	80076f2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076e6:	695b      	ldr	r3, [r3, #20]
 80076e8:	7afa      	ldrb	r2, [r7, #11]
 80076ea:	4611      	mov	r1, r2
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	4798      	blx	r3
 80076f0:	e001      	b.n	80076f6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80076f2:	2302      	movs	r3, #2
 80076f4:	e000      	b.n	80076f8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80076f6:	2300      	movs	r3, #0
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3718      	adds	r7, #24
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b082      	sub	sp, #8
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007708:	2340      	movs	r3, #64	@ 0x40
 800770a:	2200      	movs	r2, #0
 800770c:	2100      	movs	r1, #0
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f001 f9c7 	bl	8008aa2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2240      	movs	r2, #64	@ 0x40
 8007720:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007724:	2340      	movs	r3, #64	@ 0x40
 8007726:	2200      	movs	r2, #0
 8007728:	2180      	movs	r1, #128	@ 0x80
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f001 f9b9 	bl	8008aa2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2201      	movs	r2, #1
 8007734:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2240      	movs	r2, #64	@ 0x40
 800773a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2201      	movs	r2, #1
 8007740:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007760:	2b00      	cmp	r3, #0
 8007762:	d009      	beq.n	8007778 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	6852      	ldr	r2, [r2, #4]
 8007770:	b2d2      	uxtb	r2, r2
 8007772:	4611      	mov	r1, r2
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	4798      	blx	r3
  }

  return USBD_OK;
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3708      	adds	r7, #8
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007782:	b480      	push	{r7}
 8007784:	b083      	sub	sp, #12
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
 800778a:	460b      	mov	r3, r1
 800778c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	78fa      	ldrb	r2, [r7, #3]
 8007792:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007794:	2300      	movs	r3, #0
}
 8007796:	4618      	mov	r0, r3
 8007798:	370c      	adds	r7, #12
 800779a:	46bd      	mov	sp, r7
 800779c:	bc80      	pop	{r7}
 800779e:	4770      	bx	lr

080077a0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2204      	movs	r2, #4
 80077b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	370c      	adds	r7, #12
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bc80      	pop	{r7}
 80077c6:	4770      	bx	lr

080077c8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b083      	sub	sp, #12
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077d6:	2b04      	cmp	r3, #4
 80077d8:	d105      	bne.n	80077e6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80077e6:	2300      	movs	r3, #0
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	370c      	adds	r7, #12
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bc80      	pop	{r7}
 80077f0:	4770      	bx	lr

080077f2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b082      	sub	sp, #8
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007800:	2b03      	cmp	r3, #3
 8007802:	d10b      	bne.n	800781c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800780a:	69db      	ldr	r3, [r3, #28]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d005      	beq.n	800781c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007816:	69db      	ldr	r3, [r3, #28]
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800781c:	2300      	movs	r3, #0
}
 800781e:	4618      	mov	r0, r3
 8007820:	3708      	adds	r7, #8
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
	...

08007828 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007832:	2300      	movs	r3, #0
 8007834:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800783e:	2b40      	cmp	r3, #64	@ 0x40
 8007840:	d005      	beq.n	800784e <USBD_StdDevReq+0x26>
 8007842:	2b40      	cmp	r3, #64	@ 0x40
 8007844:	d84f      	bhi.n	80078e6 <USBD_StdDevReq+0xbe>
 8007846:	2b00      	cmp	r3, #0
 8007848:	d009      	beq.n	800785e <USBD_StdDevReq+0x36>
 800784a:	2b20      	cmp	r3, #32
 800784c:	d14b      	bne.n	80078e6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	6839      	ldr	r1, [r7, #0]
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	4798      	blx	r3
      break;
 800785c:	e048      	b.n	80078f0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	785b      	ldrb	r3, [r3, #1]
 8007862:	2b09      	cmp	r3, #9
 8007864:	d839      	bhi.n	80078da <USBD_StdDevReq+0xb2>
 8007866:	a201      	add	r2, pc, #4	@ (adr r2, 800786c <USBD_StdDevReq+0x44>)
 8007868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800786c:	080078bd 	.word	0x080078bd
 8007870:	080078d1 	.word	0x080078d1
 8007874:	080078db 	.word	0x080078db
 8007878:	080078c7 	.word	0x080078c7
 800787c:	080078db 	.word	0x080078db
 8007880:	0800789f 	.word	0x0800789f
 8007884:	08007895 	.word	0x08007895
 8007888:	080078db 	.word	0x080078db
 800788c:	080078b3 	.word	0x080078b3
 8007890:	080078a9 	.word	0x080078a9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007894:	6839      	ldr	r1, [r7, #0]
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 f9dc 	bl	8007c54 <USBD_GetDescriptor>
          break;
 800789c:	e022      	b.n	80078e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800789e:	6839      	ldr	r1, [r7, #0]
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 fb3f 	bl	8007f24 <USBD_SetAddress>
          break;
 80078a6:	e01d      	b.n	80078e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80078a8:	6839      	ldr	r1, [r7, #0]
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 fb7e 	bl	8007fac <USBD_SetConfig>
          break;
 80078b0:	e018      	b.n	80078e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80078b2:	6839      	ldr	r1, [r7, #0]
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 fc07 	bl	80080c8 <USBD_GetConfig>
          break;
 80078ba:	e013      	b.n	80078e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80078bc:	6839      	ldr	r1, [r7, #0]
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 fc37 	bl	8008132 <USBD_GetStatus>
          break;
 80078c4:	e00e      	b.n	80078e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80078c6:	6839      	ldr	r1, [r7, #0]
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 fc65 	bl	8008198 <USBD_SetFeature>
          break;
 80078ce:	e009      	b.n	80078e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80078d0:	6839      	ldr	r1, [r7, #0]
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 fc74 	bl	80081c0 <USBD_ClrFeature>
          break;
 80078d8:	e004      	b.n	80078e4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80078da:	6839      	ldr	r1, [r7, #0]
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 fcc9 	bl	8008274 <USBD_CtlError>
          break;
 80078e2:	bf00      	nop
      }
      break;
 80078e4:	e004      	b.n	80078f0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80078e6:	6839      	ldr	r1, [r7, #0]
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 fcc3 	bl	8008274 <USBD_CtlError>
      break;
 80078ee:	bf00      	nop
  }

  return ret;
 80078f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3710      	adds	r7, #16
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop

080078fc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007906:	2300      	movs	r3, #0
 8007908:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007912:	2b40      	cmp	r3, #64	@ 0x40
 8007914:	d005      	beq.n	8007922 <USBD_StdItfReq+0x26>
 8007916:	2b40      	cmp	r3, #64	@ 0x40
 8007918:	d82e      	bhi.n	8007978 <USBD_StdItfReq+0x7c>
 800791a:	2b00      	cmp	r3, #0
 800791c:	d001      	beq.n	8007922 <USBD_StdItfReq+0x26>
 800791e:	2b20      	cmp	r3, #32
 8007920:	d12a      	bne.n	8007978 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007928:	3b01      	subs	r3, #1
 800792a:	2b02      	cmp	r3, #2
 800792c:	d81d      	bhi.n	800796a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	889b      	ldrh	r3, [r3, #4]
 8007932:	b2db      	uxtb	r3, r3
 8007934:	2b01      	cmp	r3, #1
 8007936:	d813      	bhi.n	8007960 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	6839      	ldr	r1, [r7, #0]
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	4798      	blx	r3
 8007946:	4603      	mov	r3, r0
 8007948:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	88db      	ldrh	r3, [r3, #6]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d110      	bne.n	8007974 <USBD_StdItfReq+0x78>
 8007952:	7bfb      	ldrb	r3, [r7, #15]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d10d      	bne.n	8007974 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 fd53 	bl	8008404 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800795e:	e009      	b.n	8007974 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007960:	6839      	ldr	r1, [r7, #0]
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 fc86 	bl	8008274 <USBD_CtlError>
          break;
 8007968:	e004      	b.n	8007974 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800796a:	6839      	ldr	r1, [r7, #0]
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 fc81 	bl	8008274 <USBD_CtlError>
          break;
 8007972:	e000      	b.n	8007976 <USBD_StdItfReq+0x7a>
          break;
 8007974:	bf00      	nop
      }
      break;
 8007976:	e004      	b.n	8007982 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007978:	6839      	ldr	r1, [r7, #0]
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 fc7a 	bl	8008274 <USBD_CtlError>
      break;
 8007980:	bf00      	nop
  }

  return USBD_OK;
 8007982:	2300      	movs	r3, #0
}
 8007984:	4618      	mov	r0, r3
 8007986:	3710      	adds	r7, #16
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007996:	2300      	movs	r3, #0
 8007998:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	889b      	ldrh	r3, [r3, #4]
 800799e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80079a8:	2b40      	cmp	r3, #64	@ 0x40
 80079aa:	d007      	beq.n	80079bc <USBD_StdEPReq+0x30>
 80079ac:	2b40      	cmp	r3, #64	@ 0x40
 80079ae:	f200 8146 	bhi.w	8007c3e <USBD_StdEPReq+0x2b2>
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00a      	beq.n	80079cc <USBD_StdEPReq+0x40>
 80079b6:	2b20      	cmp	r3, #32
 80079b8:	f040 8141 	bne.w	8007c3e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	6839      	ldr	r1, [r7, #0]
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	4798      	blx	r3
      break;
 80079ca:	e13d      	b.n	8007c48 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80079d4:	2b20      	cmp	r3, #32
 80079d6:	d10a      	bne.n	80079ee <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	6839      	ldr	r1, [r7, #0]
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	4798      	blx	r3
 80079e6:	4603      	mov	r3, r0
 80079e8:	73fb      	strb	r3, [r7, #15]

        return ret;
 80079ea:	7bfb      	ldrb	r3, [r7, #15]
 80079ec:	e12d      	b.n	8007c4a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	785b      	ldrb	r3, [r3, #1]
 80079f2:	2b03      	cmp	r3, #3
 80079f4:	d007      	beq.n	8007a06 <USBD_StdEPReq+0x7a>
 80079f6:	2b03      	cmp	r3, #3
 80079f8:	f300 811b 	bgt.w	8007c32 <USBD_StdEPReq+0x2a6>
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d072      	beq.n	8007ae6 <USBD_StdEPReq+0x15a>
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d03a      	beq.n	8007a7a <USBD_StdEPReq+0xee>
 8007a04:	e115      	b.n	8007c32 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a0c:	2b02      	cmp	r3, #2
 8007a0e:	d002      	beq.n	8007a16 <USBD_StdEPReq+0x8a>
 8007a10:	2b03      	cmp	r3, #3
 8007a12:	d015      	beq.n	8007a40 <USBD_StdEPReq+0xb4>
 8007a14:	e02b      	b.n	8007a6e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a16:	7bbb      	ldrb	r3, [r7, #14]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d00c      	beq.n	8007a36 <USBD_StdEPReq+0xaa>
 8007a1c:	7bbb      	ldrb	r3, [r7, #14]
 8007a1e:	2b80      	cmp	r3, #128	@ 0x80
 8007a20:	d009      	beq.n	8007a36 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007a22:	7bbb      	ldrb	r3, [r7, #14]
 8007a24:	4619      	mov	r1, r3
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f001 f880 	bl	8008b2c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007a2c:	2180      	movs	r1, #128	@ 0x80
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f001 f87c 	bl	8008b2c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a34:	e020      	b.n	8007a78 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007a36:	6839      	ldr	r1, [r7, #0]
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 fc1b 	bl	8008274 <USBD_CtlError>
              break;
 8007a3e:	e01b      	b.n	8007a78 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	885b      	ldrh	r3, [r3, #2]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d10e      	bne.n	8007a66 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007a48:	7bbb      	ldrb	r3, [r7, #14]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d00b      	beq.n	8007a66 <USBD_StdEPReq+0xda>
 8007a4e:	7bbb      	ldrb	r3, [r7, #14]
 8007a50:	2b80      	cmp	r3, #128	@ 0x80
 8007a52:	d008      	beq.n	8007a66 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	88db      	ldrh	r3, [r3, #6]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d104      	bne.n	8007a66 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007a5c:	7bbb      	ldrb	r3, [r7, #14]
 8007a5e:	4619      	mov	r1, r3
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f001 f863 	bl	8008b2c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 fccc 	bl	8008404 <USBD_CtlSendStatus>

              break;
 8007a6c:	e004      	b.n	8007a78 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007a6e:	6839      	ldr	r1, [r7, #0]
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 fbff 	bl	8008274 <USBD_CtlError>
              break;
 8007a76:	bf00      	nop
          }
          break;
 8007a78:	e0e0      	b.n	8007c3c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a80:	2b02      	cmp	r3, #2
 8007a82:	d002      	beq.n	8007a8a <USBD_StdEPReq+0xfe>
 8007a84:	2b03      	cmp	r3, #3
 8007a86:	d015      	beq.n	8007ab4 <USBD_StdEPReq+0x128>
 8007a88:	e026      	b.n	8007ad8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a8a:	7bbb      	ldrb	r3, [r7, #14]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d00c      	beq.n	8007aaa <USBD_StdEPReq+0x11e>
 8007a90:	7bbb      	ldrb	r3, [r7, #14]
 8007a92:	2b80      	cmp	r3, #128	@ 0x80
 8007a94:	d009      	beq.n	8007aaa <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007a96:	7bbb      	ldrb	r3, [r7, #14]
 8007a98:	4619      	mov	r1, r3
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f001 f846 	bl	8008b2c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007aa0:	2180      	movs	r1, #128	@ 0x80
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f001 f842 	bl	8008b2c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007aa8:	e01c      	b.n	8007ae4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007aaa:	6839      	ldr	r1, [r7, #0]
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 fbe1 	bl	8008274 <USBD_CtlError>
              break;
 8007ab2:	e017      	b.n	8007ae4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	885b      	ldrh	r3, [r3, #2]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d112      	bne.n	8007ae2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007abc:	7bbb      	ldrb	r3, [r7, #14]
 8007abe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d004      	beq.n	8007ad0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007ac6:	7bbb      	ldrb	r3, [r7, #14]
 8007ac8:	4619      	mov	r1, r3
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f001 f84d 	bl	8008b6a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 fc97 	bl	8008404 <USBD_CtlSendStatus>
              }
              break;
 8007ad6:	e004      	b.n	8007ae2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007ad8:	6839      	ldr	r1, [r7, #0]
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 fbca 	bl	8008274 <USBD_CtlError>
              break;
 8007ae0:	e000      	b.n	8007ae4 <USBD_StdEPReq+0x158>
              break;
 8007ae2:	bf00      	nop
          }
          break;
 8007ae4:	e0aa      	b.n	8007c3c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007aec:	2b02      	cmp	r3, #2
 8007aee:	d002      	beq.n	8007af6 <USBD_StdEPReq+0x16a>
 8007af0:	2b03      	cmp	r3, #3
 8007af2:	d032      	beq.n	8007b5a <USBD_StdEPReq+0x1ce>
 8007af4:	e097      	b.n	8007c26 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007af6:	7bbb      	ldrb	r3, [r7, #14]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d007      	beq.n	8007b0c <USBD_StdEPReq+0x180>
 8007afc:	7bbb      	ldrb	r3, [r7, #14]
 8007afe:	2b80      	cmp	r3, #128	@ 0x80
 8007b00:	d004      	beq.n	8007b0c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007b02:	6839      	ldr	r1, [r7, #0]
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 fbb5 	bl	8008274 <USBD_CtlError>
                break;
 8007b0a:	e091      	b.n	8007c30 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	da0b      	bge.n	8007b2c <USBD_StdEPReq+0x1a0>
 8007b14:	7bbb      	ldrb	r3, [r7, #14]
 8007b16:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007b1a:	4613      	mov	r3, r2
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	4413      	add	r3, r2
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	3310      	adds	r3, #16
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	4413      	add	r3, r2
 8007b28:	3304      	adds	r3, #4
 8007b2a:	e00b      	b.n	8007b44 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b2c:	7bbb      	ldrb	r3, [r7, #14]
 8007b2e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b32:	4613      	mov	r3, r2
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	4413      	add	r3, r2
 8007b38:	009b      	lsls	r3, r3, #2
 8007b3a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	4413      	add	r3, r2
 8007b42:	3304      	adds	r3, #4
 8007b44:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	2202      	movs	r2, #2
 8007b50:	4619      	mov	r1, r3
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 fbf8 	bl	8008348 <USBD_CtlSendData>
              break;
 8007b58:	e06a      	b.n	8007c30 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007b5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	da11      	bge.n	8007b86 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007b62:	7bbb      	ldrb	r3, [r7, #14]
 8007b64:	f003 020f 	and.w	r2, r3, #15
 8007b68:	6879      	ldr	r1, [r7, #4]
 8007b6a:	4613      	mov	r3, r2
 8007b6c:	009b      	lsls	r3, r3, #2
 8007b6e:	4413      	add	r3, r2
 8007b70:	009b      	lsls	r3, r3, #2
 8007b72:	440b      	add	r3, r1
 8007b74:	3318      	adds	r3, #24
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d117      	bne.n	8007bac <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007b7c:	6839      	ldr	r1, [r7, #0]
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 fb78 	bl	8008274 <USBD_CtlError>
                  break;
 8007b84:	e054      	b.n	8007c30 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007b86:	7bbb      	ldrb	r3, [r7, #14]
 8007b88:	f003 020f 	and.w	r2, r3, #15
 8007b8c:	6879      	ldr	r1, [r7, #4]
 8007b8e:	4613      	mov	r3, r2
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	4413      	add	r3, r2
 8007b94:	009b      	lsls	r3, r3, #2
 8007b96:	440b      	add	r3, r1
 8007b98:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d104      	bne.n	8007bac <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007ba2:	6839      	ldr	r1, [r7, #0]
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 fb65 	bl	8008274 <USBD_CtlError>
                  break;
 8007baa:	e041      	b.n	8007c30 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	da0b      	bge.n	8007bcc <USBD_StdEPReq+0x240>
 8007bb4:	7bbb      	ldrb	r3, [r7, #14]
 8007bb6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007bba:	4613      	mov	r3, r2
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	4413      	add	r3, r2
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	3310      	adds	r3, #16
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	4413      	add	r3, r2
 8007bc8:	3304      	adds	r3, #4
 8007bca:	e00b      	b.n	8007be4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007bcc:	7bbb      	ldrb	r3, [r7, #14]
 8007bce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bd2:	4613      	mov	r3, r2
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	4413      	add	r3, r2
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	4413      	add	r3, r2
 8007be2:	3304      	adds	r3, #4
 8007be4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007be6:	7bbb      	ldrb	r3, [r7, #14]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d002      	beq.n	8007bf2 <USBD_StdEPReq+0x266>
 8007bec:	7bbb      	ldrb	r3, [r7, #14]
 8007bee:	2b80      	cmp	r3, #128	@ 0x80
 8007bf0:	d103      	bne.n	8007bfa <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	601a      	str	r2, [r3, #0]
 8007bf8:	e00e      	b.n	8007c18 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007bfa:	7bbb      	ldrb	r3, [r7, #14]
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 ffd2 	bl	8008ba8 <USBD_LL_IsStallEP>
 8007c04:	4603      	mov	r3, r0
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d003      	beq.n	8007c12 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	601a      	str	r2, [r3, #0]
 8007c10:	e002      	b.n	8007c18 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	2200      	movs	r2, #0
 8007c16:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	2202      	movs	r2, #2
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 fb92 	bl	8008348 <USBD_CtlSendData>
              break;
 8007c24:	e004      	b.n	8007c30 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007c26:	6839      	ldr	r1, [r7, #0]
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 fb23 	bl	8008274 <USBD_CtlError>
              break;
 8007c2e:	bf00      	nop
          }
          break;
 8007c30:	e004      	b.n	8007c3c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007c32:	6839      	ldr	r1, [r7, #0]
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 fb1d 	bl	8008274 <USBD_CtlError>
          break;
 8007c3a:	bf00      	nop
      }
      break;
 8007c3c:	e004      	b.n	8007c48 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007c3e:	6839      	ldr	r1, [r7, #0]
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 fb17 	bl	8008274 <USBD_CtlError>
      break;
 8007c46:	bf00      	nop
  }

  return ret;
 8007c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3710      	adds	r7, #16
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
	...

08007c54 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b084      	sub	sp, #16
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007c62:	2300      	movs	r3, #0
 8007c64:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007c66:	2300      	movs	r3, #0
 8007c68:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	885b      	ldrh	r3, [r3, #2]
 8007c6e:	0a1b      	lsrs	r3, r3, #8
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	3b01      	subs	r3, #1
 8007c74:	2b06      	cmp	r3, #6
 8007c76:	f200 8128 	bhi.w	8007eca <USBD_GetDescriptor+0x276>
 8007c7a:	a201      	add	r2, pc, #4	@ (adr r2, 8007c80 <USBD_GetDescriptor+0x2c>)
 8007c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c80:	08007c9d 	.word	0x08007c9d
 8007c84:	08007cb5 	.word	0x08007cb5
 8007c88:	08007cf5 	.word	0x08007cf5
 8007c8c:	08007ecb 	.word	0x08007ecb
 8007c90:	08007ecb 	.word	0x08007ecb
 8007c94:	08007e6b 	.word	0x08007e6b
 8007c98:	08007e97 	.word	0x08007e97
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	7c12      	ldrb	r2, [r2, #16]
 8007ca8:	f107 0108 	add.w	r1, r7, #8
 8007cac:	4610      	mov	r0, r2
 8007cae:	4798      	blx	r3
 8007cb0:	60f8      	str	r0, [r7, #12]
      break;
 8007cb2:	e112      	b.n	8007eda <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	7c1b      	ldrb	r3, [r3, #16]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d10d      	bne.n	8007cd8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cc4:	f107 0208 	add.w	r2, r7, #8
 8007cc8:	4610      	mov	r0, r2
 8007cca:	4798      	blx	r3
 8007ccc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	2202      	movs	r2, #2
 8007cd4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007cd6:	e100      	b.n	8007eda <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ce0:	f107 0208 	add.w	r2, r7, #8
 8007ce4:	4610      	mov	r0, r2
 8007ce6:	4798      	blx	r3
 8007ce8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	3301      	adds	r3, #1
 8007cee:	2202      	movs	r2, #2
 8007cf0:	701a      	strb	r2, [r3, #0]
      break;
 8007cf2:	e0f2      	b.n	8007eda <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	885b      	ldrh	r3, [r3, #2]
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	2b05      	cmp	r3, #5
 8007cfc:	f200 80ac 	bhi.w	8007e58 <USBD_GetDescriptor+0x204>
 8007d00:	a201      	add	r2, pc, #4	@ (adr r2, 8007d08 <USBD_GetDescriptor+0xb4>)
 8007d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d06:	bf00      	nop
 8007d08:	08007d21 	.word	0x08007d21
 8007d0c:	08007d55 	.word	0x08007d55
 8007d10:	08007d89 	.word	0x08007d89
 8007d14:	08007dbd 	.word	0x08007dbd
 8007d18:	08007df1 	.word	0x08007df1
 8007d1c:	08007e25 	.word	0x08007e25
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d00b      	beq.n	8007d44 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	7c12      	ldrb	r2, [r2, #16]
 8007d38:	f107 0108 	add.w	r1, r7, #8
 8007d3c:	4610      	mov	r0, r2
 8007d3e:	4798      	blx	r3
 8007d40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d42:	e091      	b.n	8007e68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d44:	6839      	ldr	r1, [r7, #0]
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 fa94 	bl	8008274 <USBD_CtlError>
            err++;
 8007d4c:	7afb      	ldrb	r3, [r7, #11]
 8007d4e:	3301      	adds	r3, #1
 8007d50:	72fb      	strb	r3, [r7, #11]
          break;
 8007d52:	e089      	b.n	8007e68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d00b      	beq.n	8007d78 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	7c12      	ldrb	r2, [r2, #16]
 8007d6c:	f107 0108 	add.w	r1, r7, #8
 8007d70:	4610      	mov	r0, r2
 8007d72:	4798      	blx	r3
 8007d74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d76:	e077      	b.n	8007e68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d78:	6839      	ldr	r1, [r7, #0]
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 fa7a 	bl	8008274 <USBD_CtlError>
            err++;
 8007d80:	7afb      	ldrb	r3, [r7, #11]
 8007d82:	3301      	adds	r3, #1
 8007d84:	72fb      	strb	r3, [r7, #11]
          break;
 8007d86:	e06f      	b.n	8007e68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d00b      	beq.n	8007dac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	7c12      	ldrb	r2, [r2, #16]
 8007da0:	f107 0108 	add.w	r1, r7, #8
 8007da4:	4610      	mov	r0, r2
 8007da6:	4798      	blx	r3
 8007da8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007daa:	e05d      	b.n	8007e68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007dac:	6839      	ldr	r1, [r7, #0]
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 fa60 	bl	8008274 <USBD_CtlError>
            err++;
 8007db4:	7afb      	ldrb	r3, [r7, #11]
 8007db6:	3301      	adds	r3, #1
 8007db8:	72fb      	strb	r3, [r7, #11]
          break;
 8007dba:	e055      	b.n	8007e68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007dc2:	691b      	ldr	r3, [r3, #16]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00b      	beq.n	8007de0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007dce:	691b      	ldr	r3, [r3, #16]
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	7c12      	ldrb	r2, [r2, #16]
 8007dd4:	f107 0108 	add.w	r1, r7, #8
 8007dd8:	4610      	mov	r0, r2
 8007dda:	4798      	blx	r3
 8007ddc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dde:	e043      	b.n	8007e68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007de0:	6839      	ldr	r1, [r7, #0]
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 fa46 	bl	8008274 <USBD_CtlError>
            err++;
 8007de8:	7afb      	ldrb	r3, [r7, #11]
 8007dea:	3301      	adds	r3, #1
 8007dec:	72fb      	strb	r3, [r7, #11]
          break;
 8007dee:	e03b      	b.n	8007e68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007df6:	695b      	ldr	r3, [r3, #20]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d00b      	beq.n	8007e14 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007e02:	695b      	ldr	r3, [r3, #20]
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	7c12      	ldrb	r2, [r2, #16]
 8007e08:	f107 0108 	add.w	r1, r7, #8
 8007e0c:	4610      	mov	r0, r2
 8007e0e:	4798      	blx	r3
 8007e10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e12:	e029      	b.n	8007e68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e14:	6839      	ldr	r1, [r7, #0]
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 fa2c 	bl	8008274 <USBD_CtlError>
            err++;
 8007e1c:	7afb      	ldrb	r3, [r7, #11]
 8007e1e:	3301      	adds	r3, #1
 8007e20:	72fb      	strb	r3, [r7, #11]
          break;
 8007e22:	e021      	b.n	8007e68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007e2a:	699b      	ldr	r3, [r3, #24]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d00b      	beq.n	8007e48 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007e36:	699b      	ldr	r3, [r3, #24]
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	7c12      	ldrb	r2, [r2, #16]
 8007e3c:	f107 0108 	add.w	r1, r7, #8
 8007e40:	4610      	mov	r0, r2
 8007e42:	4798      	blx	r3
 8007e44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e46:	e00f      	b.n	8007e68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e48:	6839      	ldr	r1, [r7, #0]
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 fa12 	bl	8008274 <USBD_CtlError>
            err++;
 8007e50:	7afb      	ldrb	r3, [r7, #11]
 8007e52:	3301      	adds	r3, #1
 8007e54:	72fb      	strb	r3, [r7, #11]
          break;
 8007e56:	e007      	b.n	8007e68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007e58:	6839      	ldr	r1, [r7, #0]
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 fa0a 	bl	8008274 <USBD_CtlError>
          err++;
 8007e60:	7afb      	ldrb	r3, [r7, #11]
 8007e62:	3301      	adds	r3, #1
 8007e64:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007e66:	e038      	b.n	8007eda <USBD_GetDescriptor+0x286>
 8007e68:	e037      	b.n	8007eda <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	7c1b      	ldrb	r3, [r3, #16]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d109      	bne.n	8007e86 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e7a:	f107 0208 	add.w	r2, r7, #8
 8007e7e:	4610      	mov	r0, r2
 8007e80:	4798      	blx	r3
 8007e82:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e84:	e029      	b.n	8007eda <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007e86:	6839      	ldr	r1, [r7, #0]
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 f9f3 	bl	8008274 <USBD_CtlError>
        err++;
 8007e8e:	7afb      	ldrb	r3, [r7, #11]
 8007e90:	3301      	adds	r3, #1
 8007e92:	72fb      	strb	r3, [r7, #11]
      break;
 8007e94:	e021      	b.n	8007eda <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	7c1b      	ldrb	r3, [r3, #16]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d10d      	bne.n	8007eba <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ea6:	f107 0208 	add.w	r2, r7, #8
 8007eaa:	4610      	mov	r0, r2
 8007eac:	4798      	blx	r3
 8007eae:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	2207      	movs	r2, #7
 8007eb6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007eb8:	e00f      	b.n	8007eda <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007eba:	6839      	ldr	r1, [r7, #0]
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 f9d9 	bl	8008274 <USBD_CtlError>
        err++;
 8007ec2:	7afb      	ldrb	r3, [r7, #11]
 8007ec4:	3301      	adds	r3, #1
 8007ec6:	72fb      	strb	r3, [r7, #11]
      break;
 8007ec8:	e007      	b.n	8007eda <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007eca:	6839      	ldr	r1, [r7, #0]
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 f9d1 	bl	8008274 <USBD_CtlError>
      err++;
 8007ed2:	7afb      	ldrb	r3, [r7, #11]
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	72fb      	strb	r3, [r7, #11]
      break;
 8007ed8:	bf00      	nop
  }

  if (err != 0U)
 8007eda:	7afb      	ldrb	r3, [r7, #11]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d11c      	bne.n	8007f1a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007ee0:	893b      	ldrh	r3, [r7, #8]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d011      	beq.n	8007f0a <USBD_GetDescriptor+0x2b6>
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	88db      	ldrh	r3, [r3, #6]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d00d      	beq.n	8007f0a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	88da      	ldrh	r2, [r3, #6]
 8007ef2:	893b      	ldrh	r3, [r7, #8]
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	bf28      	it	cs
 8007ef8:	4613      	movcs	r3, r2
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007efe:	893b      	ldrh	r3, [r7, #8]
 8007f00:	461a      	mov	r2, r3
 8007f02:	68f9      	ldr	r1, [r7, #12]
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 fa1f 	bl	8008348 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	88db      	ldrh	r3, [r3, #6]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d104      	bne.n	8007f1c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 fa76 	bl	8008404 <USBD_CtlSendStatus>
 8007f18:	e000      	b.n	8007f1c <USBD_GetDescriptor+0x2c8>
    return;
 8007f1a:	bf00      	nop
    }
  }
}
 8007f1c:	3710      	adds	r7, #16
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop

08007f24 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	889b      	ldrh	r3, [r3, #4]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d130      	bne.n	8007f98 <USBD_SetAddress+0x74>
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	88db      	ldrh	r3, [r3, #6]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d12c      	bne.n	8007f98 <USBD_SetAddress+0x74>
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	885b      	ldrh	r3, [r3, #2]
 8007f42:	2b7f      	cmp	r3, #127	@ 0x7f
 8007f44:	d828      	bhi.n	8007f98 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	885b      	ldrh	r3, [r3, #2]
 8007f4a:	b2db      	uxtb	r3, r3
 8007f4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f50:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f58:	2b03      	cmp	r3, #3
 8007f5a:	d104      	bne.n	8007f66 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007f5c:	6839      	ldr	r1, [r7, #0]
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 f988 	bl	8008274 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f64:	e01d      	b.n	8007fa2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	7bfa      	ldrb	r2, [r7, #15]
 8007f6a:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007f6e:	7bfb      	ldrb	r3, [r7, #15]
 8007f70:	4619      	mov	r1, r3
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 fe43 	bl	8008bfe <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 fa43 	bl	8008404 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007f7e:	7bfb      	ldrb	r3, [r7, #15]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d004      	beq.n	8007f8e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2202      	movs	r2, #2
 8007f88:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f8c:	e009      	b.n	8007fa2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2201      	movs	r2, #1
 8007f92:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f96:	e004      	b.n	8007fa2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007f98:	6839      	ldr	r1, [r7, #0]
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 f96a 	bl	8008274 <USBD_CtlError>
  }
}
 8007fa0:	bf00      	nop
 8007fa2:	bf00      	nop
 8007fa4:	3710      	adds	r7, #16
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
	...

08007fac <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	885b      	ldrh	r3, [r3, #2]
 8007fba:	b2da      	uxtb	r2, r3
 8007fbc:	4b41      	ldr	r3, [pc, #260]	@ (80080c4 <USBD_SetConfig+0x118>)
 8007fbe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007fc0:	4b40      	ldr	r3, [pc, #256]	@ (80080c4 <USBD_SetConfig+0x118>)
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d904      	bls.n	8007fd2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007fc8:	6839      	ldr	r1, [r7, #0]
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 f952 	bl	8008274 <USBD_CtlError>
 8007fd0:	e075      	b.n	80080be <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fd8:	2b02      	cmp	r3, #2
 8007fda:	d002      	beq.n	8007fe2 <USBD_SetConfig+0x36>
 8007fdc:	2b03      	cmp	r3, #3
 8007fde:	d023      	beq.n	8008028 <USBD_SetConfig+0x7c>
 8007fe0:	e062      	b.n	80080a8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007fe2:	4b38      	ldr	r3, [pc, #224]	@ (80080c4 <USBD_SetConfig+0x118>)
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d01a      	beq.n	8008020 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007fea:	4b36      	ldr	r3, [pc, #216]	@ (80080c4 <USBD_SetConfig+0x118>)
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	461a      	mov	r2, r3
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2203      	movs	r2, #3
 8007ff8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007ffc:	4b31      	ldr	r3, [pc, #196]	@ (80080c4 <USBD_SetConfig+0x118>)
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	4619      	mov	r1, r3
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f7ff f9e7 	bl	80073d6 <USBD_SetClassConfig>
 8008008:	4603      	mov	r3, r0
 800800a:	2b02      	cmp	r3, #2
 800800c:	d104      	bne.n	8008018 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800800e:	6839      	ldr	r1, [r7, #0]
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 f92f 	bl	8008274 <USBD_CtlError>
            return;
 8008016:	e052      	b.n	80080be <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 f9f3 	bl	8008404 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800801e:	e04e      	b.n	80080be <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 f9ef 	bl	8008404 <USBD_CtlSendStatus>
        break;
 8008026:	e04a      	b.n	80080be <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008028:	4b26      	ldr	r3, [pc, #152]	@ (80080c4 <USBD_SetConfig+0x118>)
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d112      	bne.n	8008056 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2202      	movs	r2, #2
 8008034:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8008038:	4b22      	ldr	r3, [pc, #136]	@ (80080c4 <USBD_SetConfig+0x118>)
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	461a      	mov	r2, r3
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008042:	4b20      	ldr	r3, [pc, #128]	@ (80080c4 <USBD_SetConfig+0x118>)
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	4619      	mov	r1, r3
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f7ff f9e3 	bl	8007414 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 f9d8 	bl	8008404 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008054:	e033      	b.n	80080be <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008056:	4b1b      	ldr	r3, [pc, #108]	@ (80080c4 <USBD_SetConfig+0x118>)
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	461a      	mov	r2, r3
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	429a      	cmp	r2, r3
 8008062:	d01d      	beq.n	80080a0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	b2db      	uxtb	r3, r3
 800806a:	4619      	mov	r1, r3
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f7ff f9d1 	bl	8007414 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008072:	4b14      	ldr	r3, [pc, #80]	@ (80080c4 <USBD_SetConfig+0x118>)
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	461a      	mov	r2, r3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800807c:	4b11      	ldr	r3, [pc, #68]	@ (80080c4 <USBD_SetConfig+0x118>)
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	4619      	mov	r1, r3
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f7ff f9a7 	bl	80073d6 <USBD_SetClassConfig>
 8008088:	4603      	mov	r3, r0
 800808a:	2b02      	cmp	r3, #2
 800808c:	d104      	bne.n	8008098 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800808e:	6839      	ldr	r1, [r7, #0]
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 f8ef 	bl	8008274 <USBD_CtlError>
            return;
 8008096:	e012      	b.n	80080be <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 f9b3 	bl	8008404 <USBD_CtlSendStatus>
        break;
 800809e:	e00e      	b.n	80080be <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 f9af 	bl	8008404 <USBD_CtlSendStatus>
        break;
 80080a6:	e00a      	b.n	80080be <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80080a8:	6839      	ldr	r1, [r7, #0]
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 f8e2 	bl	8008274 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80080b0:	4b04      	ldr	r3, [pc, #16]	@ (80080c4 <USBD_SetConfig+0x118>)
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	4619      	mov	r1, r3
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f7ff f9ac 	bl	8007414 <USBD_ClrClassConfig>
        break;
 80080bc:	bf00      	nop
    }
  }
}
 80080be:	3708      	adds	r7, #8
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}
 80080c4:	20000250 	.word	0x20000250

080080c8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	88db      	ldrh	r3, [r3, #6]
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d004      	beq.n	80080e4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80080da:	6839      	ldr	r1, [r7, #0]
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 f8c9 	bl	8008274 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80080e2:	e022      	b.n	800812a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080ea:	2b02      	cmp	r3, #2
 80080ec:	dc02      	bgt.n	80080f4 <USBD_GetConfig+0x2c>
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	dc03      	bgt.n	80080fa <USBD_GetConfig+0x32>
 80080f2:	e015      	b.n	8008120 <USBD_GetConfig+0x58>
 80080f4:	2b03      	cmp	r3, #3
 80080f6:	d00b      	beq.n	8008110 <USBD_GetConfig+0x48>
 80080f8:	e012      	b.n	8008120 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	3308      	adds	r3, #8
 8008104:	2201      	movs	r2, #1
 8008106:	4619      	mov	r1, r3
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 f91d 	bl	8008348 <USBD_CtlSendData>
        break;
 800810e:	e00c      	b.n	800812a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	3304      	adds	r3, #4
 8008114:	2201      	movs	r2, #1
 8008116:	4619      	mov	r1, r3
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 f915 	bl	8008348 <USBD_CtlSendData>
        break;
 800811e:	e004      	b.n	800812a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008120:	6839      	ldr	r1, [r7, #0]
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 f8a6 	bl	8008274 <USBD_CtlError>
        break;
 8008128:	bf00      	nop
}
 800812a:	bf00      	nop
 800812c:	3708      	adds	r7, #8
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}

08008132 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008132:	b580      	push	{r7, lr}
 8008134:	b082      	sub	sp, #8
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
 800813a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008142:	3b01      	subs	r3, #1
 8008144:	2b02      	cmp	r3, #2
 8008146:	d81e      	bhi.n	8008186 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	88db      	ldrh	r3, [r3, #6]
 800814c:	2b02      	cmp	r3, #2
 800814e:	d004      	beq.n	800815a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008150:	6839      	ldr	r1, [r7, #0]
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 f88e 	bl	8008274 <USBD_CtlError>
        break;
 8008158:	e01a      	b.n	8008190 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2201      	movs	r2, #1
 800815e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008166:	2b00      	cmp	r3, #0
 8008168:	d005      	beq.n	8008176 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	68db      	ldr	r3, [r3, #12]
 800816e:	f043 0202 	orr.w	r2, r3, #2
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	330c      	adds	r3, #12
 800817a:	2202      	movs	r2, #2
 800817c:	4619      	mov	r1, r3
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 f8e2 	bl	8008348 <USBD_CtlSendData>
      break;
 8008184:	e004      	b.n	8008190 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008186:	6839      	ldr	r1, [r7, #0]
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 f873 	bl	8008274 <USBD_CtlError>
      break;
 800818e:	bf00      	nop
  }
}
 8008190:	bf00      	nop
 8008192:	3708      	adds	r7, #8
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b082      	sub	sp, #8
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	885b      	ldrh	r3, [r3, #2]
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d106      	bne.n	80081b8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2201      	movs	r2, #1
 80081ae:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 f926 	bl	8008404 <USBD_CtlSendStatus>
  }
}
 80081b8:	bf00      	nop
 80081ba:	3708      	adds	r7, #8
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b082      	sub	sp, #8
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081d0:	3b01      	subs	r3, #1
 80081d2:	2b02      	cmp	r3, #2
 80081d4:	d80b      	bhi.n	80081ee <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	885b      	ldrh	r3, [r3, #2]
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d10c      	bne.n	80081f8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 f90c 	bl	8008404 <USBD_CtlSendStatus>
      }
      break;
 80081ec:	e004      	b.n	80081f8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80081ee:	6839      	ldr	r1, [r7, #0]
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 f83f 	bl	8008274 <USBD_CtlError>
      break;
 80081f6:	e000      	b.n	80081fa <USBD_ClrFeature+0x3a>
      break;
 80081f8:	bf00      	nop
  }
}
 80081fa:	bf00      	nop
 80081fc:	3708      	adds	r7, #8
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}

08008202 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008202:	b480      	push	{r7}
 8008204:	b083      	sub	sp, #12
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
 800820a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	781a      	ldrb	r2, [r3, #0]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	785a      	ldrb	r2, [r3, #1]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	3302      	adds	r3, #2
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	461a      	mov	r2, r3
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	3303      	adds	r3, #3
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	021b      	lsls	r3, r3, #8
 800822c:	b29b      	uxth	r3, r3
 800822e:	4413      	add	r3, r2
 8008230:	b29a      	uxth	r2, r3
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	3304      	adds	r3, #4
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	461a      	mov	r2, r3
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	3305      	adds	r3, #5
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	021b      	lsls	r3, r3, #8
 8008246:	b29b      	uxth	r3, r3
 8008248:	4413      	add	r3, r2
 800824a:	b29a      	uxth	r2, r3
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	3306      	adds	r3, #6
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	461a      	mov	r2, r3
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	3307      	adds	r3, #7
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	021b      	lsls	r3, r3, #8
 8008260:	b29b      	uxth	r3, r3
 8008262:	4413      	add	r3, r2
 8008264:	b29a      	uxth	r2, r3
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	80da      	strh	r2, [r3, #6]

}
 800826a:	bf00      	nop
 800826c:	370c      	adds	r7, #12
 800826e:	46bd      	mov	sp, r7
 8008270:	bc80      	pop	{r7}
 8008272:	4770      	bx	lr

08008274 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b082      	sub	sp, #8
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800827e:	2180      	movs	r1, #128	@ 0x80
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 fc53 	bl	8008b2c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008286:	2100      	movs	r1, #0
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 fc4f 	bl	8008b2c <USBD_LL_StallEP>
}
 800828e:	bf00      	nop
 8008290:	3708      	adds	r7, #8
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}

08008296 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008296:	b580      	push	{r7, lr}
 8008298:	b086      	sub	sp, #24
 800829a:	af00      	add	r7, sp, #0
 800829c:	60f8      	str	r0, [r7, #12]
 800829e:	60b9      	str	r1, [r7, #8]
 80082a0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80082a2:	2300      	movs	r3, #0
 80082a4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d032      	beq.n	8008312 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80082ac:	68f8      	ldr	r0, [r7, #12]
 80082ae:	f000 f834 	bl	800831a <USBD_GetLen>
 80082b2:	4603      	mov	r3, r0
 80082b4:	3301      	adds	r3, #1
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	005b      	lsls	r3, r3, #1
 80082ba:	b29a      	uxth	r2, r3
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80082c0:	7dfb      	ldrb	r3, [r7, #23]
 80082c2:	1c5a      	adds	r2, r3, #1
 80082c4:	75fa      	strb	r2, [r7, #23]
 80082c6:	461a      	mov	r2, r3
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	4413      	add	r3, r2
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	7812      	ldrb	r2, [r2, #0]
 80082d0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80082d2:	7dfb      	ldrb	r3, [r7, #23]
 80082d4:	1c5a      	adds	r2, r3, #1
 80082d6:	75fa      	strb	r2, [r7, #23]
 80082d8:	461a      	mov	r2, r3
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	4413      	add	r3, r2
 80082de:	2203      	movs	r2, #3
 80082e0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80082e2:	e012      	b.n	800830a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	1c5a      	adds	r2, r3, #1
 80082e8:	60fa      	str	r2, [r7, #12]
 80082ea:	7dfa      	ldrb	r2, [r7, #23]
 80082ec:	1c51      	adds	r1, r2, #1
 80082ee:	75f9      	strb	r1, [r7, #23]
 80082f0:	4611      	mov	r1, r2
 80082f2:	68ba      	ldr	r2, [r7, #8]
 80082f4:	440a      	add	r2, r1
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80082fa:	7dfb      	ldrb	r3, [r7, #23]
 80082fc:	1c5a      	adds	r2, r3, #1
 80082fe:	75fa      	strb	r2, [r7, #23]
 8008300:	461a      	mov	r2, r3
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	4413      	add	r3, r2
 8008306:	2200      	movs	r2, #0
 8008308:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d1e8      	bne.n	80082e4 <USBD_GetString+0x4e>
    }
  }
}
 8008312:	bf00      	nop
 8008314:	3718      	adds	r7, #24
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}

0800831a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800831a:	b480      	push	{r7}
 800831c:	b085      	sub	sp, #20
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008322:	2300      	movs	r3, #0
 8008324:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008326:	e005      	b.n	8008334 <USBD_GetLen+0x1a>
  {
    len++;
 8008328:	7bfb      	ldrb	r3, [r7, #15]
 800832a:	3301      	adds	r3, #1
 800832c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	3301      	adds	r3, #1
 8008332:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d1f5      	bne.n	8008328 <USBD_GetLen+0xe>
  }

  return len;
 800833c:	7bfb      	ldrb	r3, [r7, #15]
}
 800833e:	4618      	mov	r0, r3
 8008340:	3714      	adds	r7, #20
 8008342:	46bd      	mov	sp, r7
 8008344:	bc80      	pop	{r7}
 8008346:	4770      	bx	lr

08008348 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b084      	sub	sp, #16
 800834c:	af00      	add	r7, sp, #0
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	60b9      	str	r1, [r7, #8]
 8008352:	4613      	mov	r3, r2
 8008354:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2202      	movs	r2, #2
 800835a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800835e:	88fa      	ldrh	r2, [r7, #6]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008364:	88fa      	ldrh	r2, [r7, #6]
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800836a:	88fb      	ldrh	r3, [r7, #6]
 800836c:	68ba      	ldr	r2, [r7, #8]
 800836e:	2100      	movs	r1, #0
 8008370:	68f8      	ldr	r0, [r7, #12]
 8008372:	f000 fc63 	bl	8008c3c <USBD_LL_Transmit>

  return USBD_OK;
 8008376:	2300      	movs	r3, #0
}
 8008378:	4618      	mov	r0, r3
 800837a:	3710      	adds	r7, #16
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}

08008380 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b084      	sub	sp, #16
 8008384:	af00      	add	r7, sp, #0
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	60b9      	str	r1, [r7, #8]
 800838a:	4613      	mov	r3, r2
 800838c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800838e:	88fb      	ldrh	r3, [r7, #6]
 8008390:	68ba      	ldr	r2, [r7, #8]
 8008392:	2100      	movs	r1, #0
 8008394:	68f8      	ldr	r0, [r7, #12]
 8008396:	f000 fc51 	bl	8008c3c <USBD_LL_Transmit>

  return USBD_OK;
 800839a:	2300      	movs	r3, #0
}
 800839c:	4618      	mov	r0, r3
 800839e:	3710      	adds	r7, #16
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b084      	sub	sp, #16
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	60b9      	str	r1, [r7, #8]
 80083ae:	4613      	mov	r3, r2
 80083b0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2203      	movs	r2, #3
 80083b6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80083ba:	88fa      	ldrh	r2, [r7, #6]
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 80083c2:	88fa      	ldrh	r2, [r7, #6]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80083ca:	88fb      	ldrh	r3, [r7, #6]
 80083cc:	68ba      	ldr	r2, [r7, #8]
 80083ce:	2100      	movs	r1, #0
 80083d0:	68f8      	ldr	r0, [r7, #12]
 80083d2:	f000 fc56 	bl	8008c82 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083d6:	2300      	movs	r3, #0
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3710      	adds	r7, #16
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	60b9      	str	r1, [r7, #8]
 80083ea:	4613      	mov	r3, r2
 80083ec:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80083ee:	88fb      	ldrh	r3, [r7, #6]
 80083f0:	68ba      	ldr	r2, [r7, #8]
 80083f2:	2100      	movs	r1, #0
 80083f4:	68f8      	ldr	r0, [r7, #12]
 80083f6:	f000 fc44 	bl	8008c82 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083fa:	2300      	movs	r3, #0
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3710      	adds	r7, #16
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b082      	sub	sp, #8
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2204      	movs	r2, #4
 8008410:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008414:	2300      	movs	r3, #0
 8008416:	2200      	movs	r2, #0
 8008418:	2100      	movs	r1, #0
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 fc0e 	bl	8008c3c <USBD_LL_Transmit>

  return USBD_OK;
 8008420:	2300      	movs	r3, #0
}
 8008422:	4618      	mov	r0, r3
 8008424:	3708      	adds	r7, #8
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}

0800842a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800842a:	b580      	push	{r7, lr}
 800842c:	b082      	sub	sp, #8
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2205      	movs	r2, #5
 8008436:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800843a:	2300      	movs	r3, #0
 800843c:	2200      	movs	r2, #0
 800843e:	2100      	movs	r1, #0
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 fc1e 	bl	8008c82 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008446:	2300      	movs	r3, #0
}
 8008448:	4618      	mov	r0, r3
 800844a:	3708      	adds	r7, #8
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008454:	2200      	movs	r2, #0
 8008456:	4912      	ldr	r1, [pc, #72]	@ (80084a0 <MX_USB_DEVICE_Init+0x50>)
 8008458:	4812      	ldr	r0, [pc, #72]	@ (80084a4 <MX_USB_DEVICE_Init+0x54>)
 800845a:	f7fe ff62 	bl	8007322 <USBD_Init>
 800845e:	4603      	mov	r3, r0
 8008460:	2b00      	cmp	r3, #0
 8008462:	d001      	beq.n	8008468 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008464:	f7f8 f822 	bl	80004ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008468:	490f      	ldr	r1, [pc, #60]	@ (80084a8 <MX_USB_DEVICE_Init+0x58>)
 800846a:	480e      	ldr	r0, [pc, #56]	@ (80084a4 <MX_USB_DEVICE_Init+0x54>)
 800846c:	f7fe ff84 	bl	8007378 <USBD_RegisterClass>
 8008470:	4603      	mov	r3, r0
 8008472:	2b00      	cmp	r3, #0
 8008474:	d001      	beq.n	800847a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008476:	f7f8 f819 	bl	80004ac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800847a:	490c      	ldr	r1, [pc, #48]	@ (80084ac <MX_USB_DEVICE_Init+0x5c>)
 800847c:	4809      	ldr	r0, [pc, #36]	@ (80084a4 <MX_USB_DEVICE_Init+0x54>)
 800847e:	f7fe feb5 	bl	80071ec <USBD_CDC_RegisterInterface>
 8008482:	4603      	mov	r3, r0
 8008484:	2b00      	cmp	r3, #0
 8008486:	d001      	beq.n	800848c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008488:	f7f8 f810 	bl	80004ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800848c:	4805      	ldr	r0, [pc, #20]	@ (80084a4 <MX_USB_DEVICE_Init+0x54>)
 800848e:	f7fe ff8c 	bl	80073aa <USBD_Start>
 8008492:	4603      	mov	r3, r0
 8008494:	2b00      	cmp	r3, #0
 8008496:	d001      	beq.n	800849c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008498:	f7f8 f808 	bl	80004ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800849c:	bf00      	nop
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	20000130 	.word	0x20000130
 80084a4:	20000254 	.word	0x20000254
 80084a8:	2000001c 	.word	0x2000001c
 80084ac:	20000120 	.word	0x20000120

080084b0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80084b4:	2200      	movs	r2, #0
 80084b6:	4905      	ldr	r1, [pc, #20]	@ (80084cc <CDC_Init_FS+0x1c>)
 80084b8:	4805      	ldr	r0, [pc, #20]	@ (80084d0 <CDC_Init_FS+0x20>)
 80084ba:	f7fe fead 	bl	8007218 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80084be:	4905      	ldr	r1, [pc, #20]	@ (80084d4 <CDC_Init_FS+0x24>)
 80084c0:	4803      	ldr	r0, [pc, #12]	@ (80084d0 <CDC_Init_FS+0x20>)
 80084c2:	f7fe fec2 	bl	800724a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80084c6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	20000918 	.word	0x20000918
 80084d0:	20000254 	.word	0x20000254
 80084d4:	20000518 	.word	0x20000518

080084d8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80084d8:	b480      	push	{r7}
 80084da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80084dc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80084de:	4618      	mov	r0, r3
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bc80      	pop	{r7}
 80084e4:	4770      	bx	lr
	...

080084e8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b083      	sub	sp, #12
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	4603      	mov	r3, r0
 80084f0:	6039      	str	r1, [r7, #0]
 80084f2:	71fb      	strb	r3, [r7, #7]
 80084f4:	4613      	mov	r3, r2
 80084f6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80084f8:	79fb      	ldrb	r3, [r7, #7]
 80084fa:	2b23      	cmp	r3, #35	@ 0x23
 80084fc:	d84a      	bhi.n	8008594 <CDC_Control_FS+0xac>
 80084fe:	a201      	add	r2, pc, #4	@ (adr r2, 8008504 <CDC_Control_FS+0x1c>)
 8008500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008504:	08008595 	.word	0x08008595
 8008508:	08008595 	.word	0x08008595
 800850c:	08008595 	.word	0x08008595
 8008510:	08008595 	.word	0x08008595
 8008514:	08008595 	.word	0x08008595
 8008518:	08008595 	.word	0x08008595
 800851c:	08008595 	.word	0x08008595
 8008520:	08008595 	.word	0x08008595
 8008524:	08008595 	.word	0x08008595
 8008528:	08008595 	.word	0x08008595
 800852c:	08008595 	.word	0x08008595
 8008530:	08008595 	.word	0x08008595
 8008534:	08008595 	.word	0x08008595
 8008538:	08008595 	.word	0x08008595
 800853c:	08008595 	.word	0x08008595
 8008540:	08008595 	.word	0x08008595
 8008544:	08008595 	.word	0x08008595
 8008548:	08008595 	.word	0x08008595
 800854c:	08008595 	.word	0x08008595
 8008550:	08008595 	.word	0x08008595
 8008554:	08008595 	.word	0x08008595
 8008558:	08008595 	.word	0x08008595
 800855c:	08008595 	.word	0x08008595
 8008560:	08008595 	.word	0x08008595
 8008564:	08008595 	.word	0x08008595
 8008568:	08008595 	.word	0x08008595
 800856c:	08008595 	.word	0x08008595
 8008570:	08008595 	.word	0x08008595
 8008574:	08008595 	.word	0x08008595
 8008578:	08008595 	.word	0x08008595
 800857c:	08008595 	.word	0x08008595
 8008580:	08008595 	.word	0x08008595
 8008584:	08008595 	.word	0x08008595
 8008588:	08008595 	.word	0x08008595
 800858c:	08008595 	.word	0x08008595
 8008590:	08008595 	.word	0x08008595
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008594:	bf00      	nop
  }

  return (USBD_OK);
 8008596:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008598:	4618      	mov	r0, r3
 800859a:	370c      	adds	r7, #12
 800859c:	46bd      	mov	sp, r7
 800859e:	bc80      	pop	{r7}
 80085a0:	4770      	bx	lr
 80085a2:	bf00      	nop

080085a4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b082      	sub	sp, #8
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80085ae:	6879      	ldr	r1, [r7, #4]
 80085b0:	4805      	ldr	r0, [pc, #20]	@ (80085c8 <CDC_Receive_FS+0x24>)
 80085b2:	f7fe fe4a 	bl	800724a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80085b6:	4804      	ldr	r0, [pc, #16]	@ (80085c8 <CDC_Receive_FS+0x24>)
 80085b8:	f7fe fe89 	bl	80072ce <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80085bc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3708      	adds	r7, #8
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	bf00      	nop
 80085c8:	20000254 	.word	0x20000254

080085cc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b084      	sub	sp, #16
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	460b      	mov	r3, r1
 80085d6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80085d8:	2300      	movs	r3, #0
 80085da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80085dc:	4b0d      	ldr	r3, [pc, #52]	@ (8008614 <CDC_Transmit_FS+0x48>)
 80085de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085e2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d001      	beq.n	80085f2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80085ee:	2301      	movs	r3, #1
 80085f0:	e00b      	b.n	800860a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80085f2:	887b      	ldrh	r3, [r7, #2]
 80085f4:	461a      	mov	r2, r3
 80085f6:	6879      	ldr	r1, [r7, #4]
 80085f8:	4806      	ldr	r0, [pc, #24]	@ (8008614 <CDC_Transmit_FS+0x48>)
 80085fa:	f7fe fe0d 	bl	8007218 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80085fe:	4805      	ldr	r0, [pc, #20]	@ (8008614 <CDC_Transmit_FS+0x48>)
 8008600:	f7fe fe36 	bl	8007270 <USBD_CDC_TransmitPacket>
 8008604:	4603      	mov	r3, r0
 8008606:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008608:	7bfb      	ldrb	r3, [r7, #15]
}
 800860a:	4618      	mov	r0, r3
 800860c:	3710      	adds	r7, #16
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
 8008612:	bf00      	nop
 8008614:	20000254 	.word	0x20000254

08008618 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008618:	b480      	push	{r7}
 800861a:	b083      	sub	sp, #12
 800861c:	af00      	add	r7, sp, #0
 800861e:	4603      	mov	r3, r0
 8008620:	6039      	str	r1, [r7, #0]
 8008622:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	2212      	movs	r2, #18
 8008628:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800862a:	4b03      	ldr	r3, [pc, #12]	@ (8008638 <USBD_FS_DeviceDescriptor+0x20>)
}
 800862c:	4618      	mov	r0, r3
 800862e:	370c      	adds	r7, #12
 8008630:	46bd      	mov	sp, r7
 8008632:	bc80      	pop	{r7}
 8008634:	4770      	bx	lr
 8008636:	bf00      	nop
 8008638:	2000014c 	.word	0x2000014c

0800863c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	4603      	mov	r3, r0
 8008644:	6039      	str	r1, [r7, #0]
 8008646:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	2204      	movs	r2, #4
 800864c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800864e:	4b03      	ldr	r3, [pc, #12]	@ (800865c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008650:	4618      	mov	r0, r3
 8008652:	370c      	adds	r7, #12
 8008654:	46bd      	mov	sp, r7
 8008656:	bc80      	pop	{r7}
 8008658:	4770      	bx	lr
 800865a:	bf00      	nop
 800865c:	20000160 	.word	0x20000160

08008660 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b082      	sub	sp, #8
 8008664:	af00      	add	r7, sp, #0
 8008666:	4603      	mov	r3, r0
 8008668:	6039      	str	r1, [r7, #0]
 800866a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800866c:	79fb      	ldrb	r3, [r7, #7]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d105      	bne.n	800867e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008672:	683a      	ldr	r2, [r7, #0]
 8008674:	4907      	ldr	r1, [pc, #28]	@ (8008694 <USBD_FS_ProductStrDescriptor+0x34>)
 8008676:	4808      	ldr	r0, [pc, #32]	@ (8008698 <USBD_FS_ProductStrDescriptor+0x38>)
 8008678:	f7ff fe0d 	bl	8008296 <USBD_GetString>
 800867c:	e004      	b.n	8008688 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800867e:	683a      	ldr	r2, [r7, #0]
 8008680:	4904      	ldr	r1, [pc, #16]	@ (8008694 <USBD_FS_ProductStrDescriptor+0x34>)
 8008682:	4805      	ldr	r0, [pc, #20]	@ (8008698 <USBD_FS_ProductStrDescriptor+0x38>)
 8008684:	f7ff fe07 	bl	8008296 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008688:	4b02      	ldr	r3, [pc, #8]	@ (8008694 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800868a:	4618      	mov	r0, r3
 800868c:	3708      	adds	r7, #8
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}
 8008692:	bf00      	nop
 8008694:	20000d18 	.word	0x20000d18
 8008698:	080097dc 	.word	0x080097dc

0800869c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b082      	sub	sp, #8
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	4603      	mov	r3, r0
 80086a4:	6039      	str	r1, [r7, #0]
 80086a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80086a8:	683a      	ldr	r2, [r7, #0]
 80086aa:	4904      	ldr	r1, [pc, #16]	@ (80086bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80086ac:	4804      	ldr	r0, [pc, #16]	@ (80086c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80086ae:	f7ff fdf2 	bl	8008296 <USBD_GetString>
  return USBD_StrDesc;
 80086b2:	4b02      	ldr	r3, [pc, #8]	@ (80086bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3708      	adds	r7, #8
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	20000d18 	.word	0x20000d18
 80086c0:	080097f4 	.word	0x080097f4

080086c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b082      	sub	sp, #8
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	4603      	mov	r3, r0
 80086cc:	6039      	str	r1, [r7, #0]
 80086ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	221a      	movs	r2, #26
 80086d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80086d6:	f000 f843 	bl	8008760 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80086da:	4b02      	ldr	r3, [pc, #8]	@ (80086e4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3708      	adds	r7, #8
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}
 80086e4:	20000164 	.word	0x20000164

080086e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	4603      	mov	r3, r0
 80086f0:	6039      	str	r1, [r7, #0]
 80086f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80086f4:	79fb      	ldrb	r3, [r7, #7]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d105      	bne.n	8008706 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80086fa:	683a      	ldr	r2, [r7, #0]
 80086fc:	4907      	ldr	r1, [pc, #28]	@ (800871c <USBD_FS_ConfigStrDescriptor+0x34>)
 80086fe:	4808      	ldr	r0, [pc, #32]	@ (8008720 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008700:	f7ff fdc9 	bl	8008296 <USBD_GetString>
 8008704:	e004      	b.n	8008710 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008706:	683a      	ldr	r2, [r7, #0]
 8008708:	4904      	ldr	r1, [pc, #16]	@ (800871c <USBD_FS_ConfigStrDescriptor+0x34>)
 800870a:	4805      	ldr	r0, [pc, #20]	@ (8008720 <USBD_FS_ConfigStrDescriptor+0x38>)
 800870c:	f7ff fdc3 	bl	8008296 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008710:	4b02      	ldr	r3, [pc, #8]	@ (800871c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008712:	4618      	mov	r0, r3
 8008714:	3708      	adds	r7, #8
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
 800871a:	bf00      	nop
 800871c:	20000d18 	.word	0x20000d18
 8008720:	08009808 	.word	0x08009808

08008724 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	4603      	mov	r3, r0
 800872c:	6039      	str	r1, [r7, #0]
 800872e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008730:	79fb      	ldrb	r3, [r7, #7]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d105      	bne.n	8008742 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008736:	683a      	ldr	r2, [r7, #0]
 8008738:	4907      	ldr	r1, [pc, #28]	@ (8008758 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800873a:	4808      	ldr	r0, [pc, #32]	@ (800875c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800873c:	f7ff fdab 	bl	8008296 <USBD_GetString>
 8008740:	e004      	b.n	800874c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008742:	683a      	ldr	r2, [r7, #0]
 8008744:	4904      	ldr	r1, [pc, #16]	@ (8008758 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008746:	4805      	ldr	r0, [pc, #20]	@ (800875c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008748:	f7ff fda5 	bl	8008296 <USBD_GetString>
  }
  return USBD_StrDesc;
 800874c:	4b02      	ldr	r3, [pc, #8]	@ (8008758 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800874e:	4618      	mov	r0, r3
 8008750:	3708      	adds	r7, #8
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	20000d18 	.word	0x20000d18
 800875c:	08009814 	.word	0x08009814

08008760 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b084      	sub	sp, #16
 8008764:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008766:	4b0f      	ldr	r3, [pc, #60]	@ (80087a4 <Get_SerialNum+0x44>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800876c:	4b0e      	ldr	r3, [pc, #56]	@ (80087a8 <Get_SerialNum+0x48>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008772:	4b0e      	ldr	r3, [pc, #56]	@ (80087ac <Get_SerialNum+0x4c>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008778:	68fa      	ldr	r2, [r7, #12]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	4413      	add	r3, r2
 800877e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d009      	beq.n	800879a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008786:	2208      	movs	r2, #8
 8008788:	4909      	ldr	r1, [pc, #36]	@ (80087b0 <Get_SerialNum+0x50>)
 800878a:	68f8      	ldr	r0, [r7, #12]
 800878c:	f000 f814 	bl	80087b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008790:	2204      	movs	r2, #4
 8008792:	4908      	ldr	r1, [pc, #32]	@ (80087b4 <Get_SerialNum+0x54>)
 8008794:	68b8      	ldr	r0, [r7, #8]
 8008796:	f000 f80f 	bl	80087b8 <IntToUnicode>
  }
}
 800879a:	bf00      	nop
 800879c:	3710      	adds	r7, #16
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
 80087a2:	bf00      	nop
 80087a4:	1ffff7e8 	.word	0x1ffff7e8
 80087a8:	1ffff7ec 	.word	0x1ffff7ec
 80087ac:	1ffff7f0 	.word	0x1ffff7f0
 80087b0:	20000166 	.word	0x20000166
 80087b4:	20000176 	.word	0x20000176

080087b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b087      	sub	sp, #28
 80087bc:	af00      	add	r7, sp, #0
 80087be:	60f8      	str	r0, [r7, #12]
 80087c0:	60b9      	str	r1, [r7, #8]
 80087c2:	4613      	mov	r3, r2
 80087c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80087c6:	2300      	movs	r3, #0
 80087c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80087ca:	2300      	movs	r3, #0
 80087cc:	75fb      	strb	r3, [r7, #23]
 80087ce:	e027      	b.n	8008820 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	0f1b      	lsrs	r3, r3, #28
 80087d4:	2b09      	cmp	r3, #9
 80087d6:	d80b      	bhi.n	80087f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	0f1b      	lsrs	r3, r3, #28
 80087dc:	b2da      	uxtb	r2, r3
 80087de:	7dfb      	ldrb	r3, [r7, #23]
 80087e0:	005b      	lsls	r3, r3, #1
 80087e2:	4619      	mov	r1, r3
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	440b      	add	r3, r1
 80087e8:	3230      	adds	r2, #48	@ 0x30
 80087ea:	b2d2      	uxtb	r2, r2
 80087ec:	701a      	strb	r2, [r3, #0]
 80087ee:	e00a      	b.n	8008806 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	0f1b      	lsrs	r3, r3, #28
 80087f4:	b2da      	uxtb	r2, r3
 80087f6:	7dfb      	ldrb	r3, [r7, #23]
 80087f8:	005b      	lsls	r3, r3, #1
 80087fa:	4619      	mov	r1, r3
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	440b      	add	r3, r1
 8008800:	3237      	adds	r2, #55	@ 0x37
 8008802:	b2d2      	uxtb	r2, r2
 8008804:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	011b      	lsls	r3, r3, #4
 800880a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800880c:	7dfb      	ldrb	r3, [r7, #23]
 800880e:	005b      	lsls	r3, r3, #1
 8008810:	3301      	adds	r3, #1
 8008812:	68ba      	ldr	r2, [r7, #8]
 8008814:	4413      	add	r3, r2
 8008816:	2200      	movs	r2, #0
 8008818:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800881a:	7dfb      	ldrb	r3, [r7, #23]
 800881c:	3301      	adds	r3, #1
 800881e:	75fb      	strb	r3, [r7, #23]
 8008820:	7dfa      	ldrb	r2, [r7, #23]
 8008822:	79fb      	ldrb	r3, [r7, #7]
 8008824:	429a      	cmp	r2, r3
 8008826:	d3d3      	bcc.n	80087d0 <IntToUnicode+0x18>
  }
}
 8008828:	bf00      	nop
 800882a:	bf00      	nop
 800882c:	371c      	adds	r7, #28
 800882e:	46bd      	mov	sp, r7
 8008830:	bc80      	pop	{r7}
 8008832:	4770      	bx	lr

08008834 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a0d      	ldr	r2, [pc, #52]	@ (8008878 <HAL_PCD_MspInit+0x44>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d113      	bne.n	800886e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008846:	4b0d      	ldr	r3, [pc, #52]	@ (800887c <HAL_PCD_MspInit+0x48>)
 8008848:	69db      	ldr	r3, [r3, #28]
 800884a:	4a0c      	ldr	r2, [pc, #48]	@ (800887c <HAL_PCD_MspInit+0x48>)
 800884c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008850:	61d3      	str	r3, [r2, #28]
 8008852:	4b0a      	ldr	r3, [pc, #40]	@ (800887c <HAL_PCD_MspInit+0x48>)
 8008854:	69db      	ldr	r3, [r3, #28]
 8008856:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800885a:	60fb      	str	r3, [r7, #12]
 800885c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800885e:	2200      	movs	r2, #0
 8008860:	2100      	movs	r1, #0
 8008862:	2014      	movs	r0, #20
 8008864:	f7f8 f9bb 	bl	8000bde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008868:	2014      	movs	r0, #20
 800886a:	f7f8 f9d4 	bl	8000c16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800886e:	bf00      	nop
 8008870:	3710      	adds	r7, #16
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop
 8008878:	40005c00 	.word	0x40005c00
 800887c:	40021000 	.word	0x40021000

08008880 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b082      	sub	sp, #8
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8008894:	4619      	mov	r1, r3
 8008896:	4610      	mov	r0, r2
 8008898:	f7fe fdcf 	bl	800743a <USBD_LL_SetupStage>
}
 800889c:	bf00      	nop
 800889e:	3708      	adds	r7, #8
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	460b      	mov	r3, r1
 80088ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80088b6:	78fa      	ldrb	r2, [r7, #3]
 80088b8:	6879      	ldr	r1, [r7, #4]
 80088ba:	4613      	mov	r3, r2
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	4413      	add	r3, r2
 80088c0:	00db      	lsls	r3, r3, #3
 80088c2:	440b      	add	r3, r1
 80088c4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	78fb      	ldrb	r3, [r7, #3]
 80088cc:	4619      	mov	r1, r3
 80088ce:	f7fe fe01 	bl	80074d4 <USBD_LL_DataOutStage>
}
 80088d2:	bf00      	nop
 80088d4:	3708      	adds	r7, #8
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}

080088da <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088da:	b580      	push	{r7, lr}
 80088dc:	b082      	sub	sp, #8
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
 80088e2:	460b      	mov	r3, r1
 80088e4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80088ec:	78fa      	ldrb	r2, [r7, #3]
 80088ee:	6879      	ldr	r1, [r7, #4]
 80088f0:	4613      	mov	r3, r2
 80088f2:	009b      	lsls	r3, r3, #2
 80088f4:	4413      	add	r3, r2
 80088f6:	00db      	lsls	r3, r3, #3
 80088f8:	440b      	add	r3, r1
 80088fa:	3324      	adds	r3, #36	@ 0x24
 80088fc:	681a      	ldr	r2, [r3, #0]
 80088fe:	78fb      	ldrb	r3, [r7, #3]
 8008900:	4619      	mov	r1, r3
 8008902:	f7fe fe58 	bl	80075b6 <USBD_LL_DataInStage>
}
 8008906:	bf00      	nop
 8008908:	3708      	adds	r7, #8
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}

0800890e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800890e:	b580      	push	{r7, lr}
 8008910:	b082      	sub	sp, #8
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800891c:	4618      	mov	r0, r3
 800891e:	f7fe ff68 	bl	80077f2 <USBD_LL_SOF>
}
 8008922:	bf00      	nop
 8008924:	3708      	adds	r7, #8
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}

0800892a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800892a:	b580      	push	{r7, lr}
 800892c:	b084      	sub	sp, #16
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008932:	2301      	movs	r3, #1
 8008934:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	799b      	ldrb	r3, [r3, #6]
 800893a:	2b02      	cmp	r3, #2
 800893c:	d001      	beq.n	8008942 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800893e:	f7f7 fdb5 	bl	80004ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008948:	7bfa      	ldrb	r2, [r7, #15]
 800894a:	4611      	mov	r1, r2
 800894c:	4618      	mov	r0, r3
 800894e:	f7fe ff18 	bl	8007782 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008958:	4618      	mov	r0, r3
 800895a:	f7fe fed1 	bl	8007700 <USBD_LL_Reset>
}
 800895e:	bf00      	nop
 8008960:	3710      	adds	r7, #16
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
	...

08008968 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008976:	4618      	mov	r0, r3
 8008978:	f7fe ff12 	bl	80077a0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	7a9b      	ldrb	r3, [r3, #10]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d005      	beq.n	8008990 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008984:	4b04      	ldr	r3, [pc, #16]	@ (8008998 <HAL_PCD_SuspendCallback+0x30>)
 8008986:	691b      	ldr	r3, [r3, #16]
 8008988:	4a03      	ldr	r2, [pc, #12]	@ (8008998 <HAL_PCD_SuspendCallback+0x30>)
 800898a:	f043 0306 	orr.w	r3, r3, #6
 800898e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008990:	bf00      	nop
 8008992:	3708      	adds	r7, #8
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}
 8008998:	e000ed00 	.word	0xe000ed00

0800899c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b082      	sub	sp, #8
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80089aa:	4618      	mov	r0, r3
 80089ac:	f7fe ff0c 	bl	80077c8 <USBD_LL_Resume>
}
 80089b0:	bf00      	nop
 80089b2:	3708      	adds	r7, #8
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80089c0:	4a28      	ldr	r2, [pc, #160]	@ (8008a64 <USBD_LL_Init+0xac>)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	4a26      	ldr	r2, [pc, #152]	@ (8008a64 <USBD_LL_Init+0xac>)
 80089cc:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 80089d0:	4b24      	ldr	r3, [pc, #144]	@ (8008a64 <USBD_LL_Init+0xac>)
 80089d2:	4a25      	ldr	r2, [pc, #148]	@ (8008a68 <USBD_LL_Init+0xb0>)
 80089d4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80089d6:	4b23      	ldr	r3, [pc, #140]	@ (8008a64 <USBD_LL_Init+0xac>)
 80089d8:	2208      	movs	r2, #8
 80089da:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80089dc:	4b21      	ldr	r3, [pc, #132]	@ (8008a64 <USBD_LL_Init+0xac>)
 80089de:	2202      	movs	r2, #2
 80089e0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80089e2:	4b20      	ldr	r3, [pc, #128]	@ (8008a64 <USBD_LL_Init+0xac>)
 80089e4:	2200      	movs	r2, #0
 80089e6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80089e8:	4b1e      	ldr	r3, [pc, #120]	@ (8008a64 <USBD_LL_Init+0xac>)
 80089ea:	2200      	movs	r2, #0
 80089ec:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80089ee:	4b1d      	ldr	r3, [pc, #116]	@ (8008a64 <USBD_LL_Init+0xac>)
 80089f0:	2200      	movs	r2, #0
 80089f2:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80089f4:	481b      	ldr	r0, [pc, #108]	@ (8008a64 <USBD_LL_Init+0xac>)
 80089f6:	f7f9 fc16 	bl	8002226 <HAL_PCD_Init>
 80089fa:	4603      	mov	r3, r0
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d001      	beq.n	8008a04 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008a00:	f7f7 fd54 	bl	80004ac <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008a0a:	2318      	movs	r3, #24
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	2100      	movs	r1, #0
 8008a10:	f7fb f927 	bl	8003c62 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008a1a:	2358      	movs	r3, #88	@ 0x58
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	2180      	movs	r1, #128	@ 0x80
 8008a20:	f7fb f91f 	bl	8003c62 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008a2a:	23c0      	movs	r3, #192	@ 0xc0
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	2181      	movs	r1, #129	@ 0x81
 8008a30:	f7fb f917 	bl	8003c62 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008a3a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8008a3e:	2200      	movs	r2, #0
 8008a40:	2101      	movs	r1, #1
 8008a42:	f7fb f90e 	bl	8003c62 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008a4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008a50:	2200      	movs	r2, #0
 8008a52:	2182      	movs	r1, #130	@ 0x82
 8008a54:	f7fb f905 	bl	8003c62 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008a58:	2300      	movs	r3, #0
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3708      	adds	r7, #8
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
 8008a62:	bf00      	nop
 8008a64:	20000f18 	.word	0x20000f18
 8008a68:	40005c00 	.word	0x40005c00

08008a6c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b084      	sub	sp, #16
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a74:	2300      	movs	r3, #0
 8008a76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008a82:	4618      	mov	r0, r3
 8008a84:	f7f9 fcc5 	bl	8002412 <HAL_PCD_Start>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a8c:	7bfb      	ldrb	r3, [r7, #15]
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f000 f94e 	bl	8008d30 <USBD_Get_USB_Status>
 8008a94:	4603      	mov	r3, r0
 8008a96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a98:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3710      	adds	r7, #16
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}

08008aa2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008aa2:	b580      	push	{r7, lr}
 8008aa4:	b084      	sub	sp, #16
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
 8008aaa:	4608      	mov	r0, r1
 8008aac:	4611      	mov	r1, r2
 8008aae:	461a      	mov	r2, r3
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	70fb      	strb	r3, [r7, #3]
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	70bb      	strb	r3, [r7, #2]
 8008ab8:	4613      	mov	r3, r2
 8008aba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008abc:	2300      	movs	r3, #0
 8008abe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008aca:	78bb      	ldrb	r3, [r7, #2]
 8008acc:	883a      	ldrh	r2, [r7, #0]
 8008ace:	78f9      	ldrb	r1, [r7, #3]
 8008ad0:	f7f9 fe19 	bl	8002706 <HAL_PCD_EP_Open>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ad8:	7bfb      	ldrb	r3, [r7, #15]
 8008ada:	4618      	mov	r0, r3
 8008adc:	f000 f928 	bl	8008d30 <USBD_Get_USB_Status>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ae4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3710      	adds	r7, #16
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}

08008aee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008aee:	b580      	push	{r7, lr}
 8008af0:	b084      	sub	sp, #16
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	6078      	str	r0, [r7, #4]
 8008af6:	460b      	mov	r3, r1
 8008af8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008afa:	2300      	movs	r3, #0
 8008afc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008afe:	2300      	movs	r3, #0
 8008b00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008b08:	78fa      	ldrb	r2, [r7, #3]
 8008b0a:	4611      	mov	r1, r2
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f7f9 fe57 	bl	80027c0 <HAL_PCD_EP_Close>
 8008b12:	4603      	mov	r3, r0
 8008b14:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b16:	7bfb      	ldrb	r3, [r7, #15]
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f000 f909 	bl	8008d30 <USBD_Get_USB_Status>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b22:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3710      	adds	r7, #16
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	460b      	mov	r3, r1
 8008b36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008b46:	78fa      	ldrb	r2, [r7, #3]
 8008b48:	4611      	mov	r1, r2
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7f9 feff 	bl	800294e <HAL_PCD_EP_SetStall>
 8008b50:	4603      	mov	r3, r0
 8008b52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b54:	7bfb      	ldrb	r3, [r7, #15]
 8008b56:	4618      	mov	r0, r3
 8008b58:	f000 f8ea 	bl	8008d30 <USBD_Get_USB_Status>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b60:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3710      	adds	r7, #16
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}

08008b6a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b6a:	b580      	push	{r7, lr}
 8008b6c:	b084      	sub	sp, #16
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	6078      	str	r0, [r7, #4]
 8008b72:	460b      	mov	r3, r1
 8008b74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b76:	2300      	movs	r3, #0
 8008b78:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008b84:	78fa      	ldrb	r2, [r7, #3]
 8008b86:	4611      	mov	r1, r2
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f7f9 ff40 	bl	8002a0e <HAL_PCD_EP_ClrStall>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b92:	7bfb      	ldrb	r3, [r7, #15]
 8008b94:	4618      	mov	r0, r3
 8008b96:	f000 f8cb 	bl	8008d30 <USBD_Get_USB_Status>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b9e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3710      	adds	r7, #16
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b085      	sub	sp, #20
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	460b      	mov	r3, r1
 8008bb2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008bba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008bbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	da0b      	bge.n	8008bdc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008bc4:	78fb      	ldrb	r3, [r7, #3]
 8008bc6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008bca:	68f9      	ldr	r1, [r7, #12]
 8008bcc:	4613      	mov	r3, r2
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	4413      	add	r3, r2
 8008bd2:	00db      	lsls	r3, r3, #3
 8008bd4:	440b      	add	r3, r1
 8008bd6:	3312      	adds	r3, #18
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	e00b      	b.n	8008bf4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008bdc:	78fb      	ldrb	r3, [r7, #3]
 8008bde:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008be2:	68f9      	ldr	r1, [r7, #12]
 8008be4:	4613      	mov	r3, r2
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	4413      	add	r3, r2
 8008bea:	00db      	lsls	r3, r3, #3
 8008bec:	440b      	add	r3, r1
 8008bee:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8008bf2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3714      	adds	r7, #20
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bc80      	pop	{r7}
 8008bfc:	4770      	bx	lr

08008bfe <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008bfe:	b580      	push	{r7, lr}
 8008c00:	b084      	sub	sp, #16
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]
 8008c06:	460b      	mov	r3, r1
 8008c08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008c18:	78fa      	ldrb	r2, [r7, #3]
 8008c1a:	4611      	mov	r1, r2
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f7f9 fd4e 	bl	80026be <HAL_PCD_SetAddress>
 8008c22:	4603      	mov	r3, r0
 8008c24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c26:	7bfb      	ldrb	r3, [r7, #15]
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f000 f881 	bl	8008d30 <USBD_Get_USB_Status>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c32:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3710      	adds	r7, #16
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b086      	sub	sp, #24
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	60f8      	str	r0, [r7, #12]
 8008c44:	607a      	str	r2, [r7, #4]
 8008c46:	461a      	mov	r2, r3
 8008c48:	460b      	mov	r3, r1
 8008c4a:	72fb      	strb	r3, [r7, #11]
 8008c4c:	4613      	mov	r3, r2
 8008c4e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c50:	2300      	movs	r3, #0
 8008c52:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c54:	2300      	movs	r3, #0
 8008c56:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008c5e:	893b      	ldrh	r3, [r7, #8]
 8008c60:	7af9      	ldrb	r1, [r7, #11]
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	f7f9 fe3c 	bl	80028e0 <HAL_PCD_EP_Transmit>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c6c:	7dfb      	ldrb	r3, [r7, #23]
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f000 f85e 	bl	8008d30 <USBD_Get_USB_Status>
 8008c74:	4603      	mov	r3, r0
 8008c76:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008c78:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3718      	adds	r7, #24
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}

08008c82 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008c82:	b580      	push	{r7, lr}
 8008c84:	b086      	sub	sp, #24
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	60f8      	str	r0, [r7, #12]
 8008c8a:	607a      	str	r2, [r7, #4]
 8008c8c:	461a      	mov	r2, r3
 8008c8e:	460b      	mov	r3, r1
 8008c90:	72fb      	strb	r3, [r7, #11]
 8008c92:	4613      	mov	r3, r2
 8008c94:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c96:	2300      	movs	r3, #0
 8008c98:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008ca4:	893b      	ldrh	r3, [r7, #8]
 8008ca6:	7af9      	ldrb	r1, [r7, #11]
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	f7f9 fdd1 	bl	8002850 <HAL_PCD_EP_Receive>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cb2:	7dfb      	ldrb	r3, [r7, #23]
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f000 f83b 	bl	8008d30 <USBD_Get_USB_Status>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008cbe:	7dbb      	ldrb	r3, [r7, #22]
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3718      	adds	r7, #24
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008cda:	78fa      	ldrb	r2, [r7, #3]
 8008cdc:	4611      	mov	r1, r2
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f7f9 fde7 	bl	80028b2 <HAL_PCD_EP_GetRxCount>
 8008ce4:	4603      	mov	r3, r0
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3708      	adds	r7, #8
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
	...

08008cf0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b083      	sub	sp, #12
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008cf8:	4b02      	ldr	r3, [pc, #8]	@ (8008d04 <USBD_static_malloc+0x14>)
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	370c      	adds	r7, #12
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bc80      	pop	{r7}
 8008d02:	4770      	bx	lr
 8008d04:	200011f0 	.word	0x200011f0

08008d08 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b083      	sub	sp, #12
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]

}
 8008d10:	bf00      	nop
 8008d12:	370c      	adds	r7, #12
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bc80      	pop	{r7}
 8008d18:	4770      	bx	lr

08008d1a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d1a:	b480      	push	{r7}
 8008d1c:	b083      	sub	sp, #12
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
 8008d22:	460b      	mov	r3, r1
 8008d24:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008d26:	bf00      	nop
 8008d28:	370c      	adds	r7, #12
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bc80      	pop	{r7}
 8008d2e:	4770      	bx	lr

08008d30 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b085      	sub	sp, #20
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	4603      	mov	r3, r0
 8008d38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008d3e:	79fb      	ldrb	r3, [r7, #7]
 8008d40:	2b03      	cmp	r3, #3
 8008d42:	d817      	bhi.n	8008d74 <USBD_Get_USB_Status+0x44>
 8008d44:	a201      	add	r2, pc, #4	@ (adr r2, 8008d4c <USBD_Get_USB_Status+0x1c>)
 8008d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d4a:	bf00      	nop
 8008d4c:	08008d5d 	.word	0x08008d5d
 8008d50:	08008d63 	.word	0x08008d63
 8008d54:	08008d69 	.word	0x08008d69
 8008d58:	08008d6f 	.word	0x08008d6f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d60:	e00b      	b.n	8008d7a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d62:	2302      	movs	r3, #2
 8008d64:	73fb      	strb	r3, [r7, #15]
    break;
 8008d66:	e008      	b.n	8008d7a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	73fb      	strb	r3, [r7, #15]
    break;
 8008d6c:	e005      	b.n	8008d7a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d6e:	2302      	movs	r3, #2
 8008d70:	73fb      	strb	r3, [r7, #15]
    break;
 8008d72:	e002      	b.n	8008d7a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008d74:	2302      	movs	r3, #2
 8008d76:	73fb      	strb	r3, [r7, #15]
    break;
 8008d78:	bf00      	nop
  }
  return usb_status;
 8008d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3714      	adds	r7, #20
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bc80      	pop	{r7}
 8008d84:	4770      	bx	lr
 8008d86:	bf00      	nop

08008d88 <sniprintf>:
 8008d88:	b40c      	push	{r2, r3}
 8008d8a:	b530      	push	{r4, r5, lr}
 8008d8c:	4b18      	ldr	r3, [pc, #96]	@ (8008df0 <sniprintf+0x68>)
 8008d8e:	1e0c      	subs	r4, r1, #0
 8008d90:	681d      	ldr	r5, [r3, #0]
 8008d92:	b09d      	sub	sp, #116	@ 0x74
 8008d94:	da08      	bge.n	8008da8 <sniprintf+0x20>
 8008d96:	238b      	movs	r3, #139	@ 0x8b
 8008d98:	f04f 30ff 	mov.w	r0, #4294967295
 8008d9c:	602b      	str	r3, [r5, #0]
 8008d9e:	b01d      	add	sp, #116	@ 0x74
 8008da0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008da4:	b002      	add	sp, #8
 8008da6:	4770      	bx	lr
 8008da8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008dac:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008db0:	f04f 0300 	mov.w	r3, #0
 8008db4:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008db6:	bf0c      	ite	eq
 8008db8:	4623      	moveq	r3, r4
 8008dba:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008dbe:	9304      	str	r3, [sp, #16]
 8008dc0:	9307      	str	r3, [sp, #28]
 8008dc2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008dc6:	9002      	str	r0, [sp, #8]
 8008dc8:	9006      	str	r0, [sp, #24]
 8008dca:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008dce:	4628      	mov	r0, r5
 8008dd0:	ab21      	add	r3, sp, #132	@ 0x84
 8008dd2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008dd4:	a902      	add	r1, sp, #8
 8008dd6:	9301      	str	r3, [sp, #4]
 8008dd8:	f000 f9a0 	bl	800911c <_svfiprintf_r>
 8008ddc:	1c43      	adds	r3, r0, #1
 8008dde:	bfbc      	itt	lt
 8008de0:	238b      	movlt	r3, #139	@ 0x8b
 8008de2:	602b      	strlt	r3, [r5, #0]
 8008de4:	2c00      	cmp	r4, #0
 8008de6:	d0da      	beq.n	8008d9e <sniprintf+0x16>
 8008de8:	2200      	movs	r2, #0
 8008dea:	9b02      	ldr	r3, [sp, #8]
 8008dec:	701a      	strb	r2, [r3, #0]
 8008dee:	e7d6      	b.n	8008d9e <sniprintf+0x16>
 8008df0:	20000180 	.word	0x20000180

08008df4 <memset>:
 8008df4:	4603      	mov	r3, r0
 8008df6:	4402      	add	r2, r0
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d100      	bne.n	8008dfe <memset+0xa>
 8008dfc:	4770      	bx	lr
 8008dfe:	f803 1b01 	strb.w	r1, [r3], #1
 8008e02:	e7f9      	b.n	8008df8 <memset+0x4>

08008e04 <__errno>:
 8008e04:	4b01      	ldr	r3, [pc, #4]	@ (8008e0c <__errno+0x8>)
 8008e06:	6818      	ldr	r0, [r3, #0]
 8008e08:	4770      	bx	lr
 8008e0a:	bf00      	nop
 8008e0c:	20000180 	.word	0x20000180

08008e10 <__libc_init_array>:
 8008e10:	b570      	push	{r4, r5, r6, lr}
 8008e12:	2600      	movs	r6, #0
 8008e14:	4d0c      	ldr	r5, [pc, #48]	@ (8008e48 <__libc_init_array+0x38>)
 8008e16:	4c0d      	ldr	r4, [pc, #52]	@ (8008e4c <__libc_init_array+0x3c>)
 8008e18:	1b64      	subs	r4, r4, r5
 8008e1a:	10a4      	asrs	r4, r4, #2
 8008e1c:	42a6      	cmp	r6, r4
 8008e1e:	d109      	bne.n	8008e34 <__libc_init_array+0x24>
 8008e20:	f000 fc76 	bl	8009710 <_init>
 8008e24:	2600      	movs	r6, #0
 8008e26:	4d0a      	ldr	r5, [pc, #40]	@ (8008e50 <__libc_init_array+0x40>)
 8008e28:	4c0a      	ldr	r4, [pc, #40]	@ (8008e54 <__libc_init_array+0x44>)
 8008e2a:	1b64      	subs	r4, r4, r5
 8008e2c:	10a4      	asrs	r4, r4, #2
 8008e2e:	42a6      	cmp	r6, r4
 8008e30:	d105      	bne.n	8008e3e <__libc_init_array+0x2e>
 8008e32:	bd70      	pop	{r4, r5, r6, pc}
 8008e34:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e38:	4798      	blx	r3
 8008e3a:	3601      	adds	r6, #1
 8008e3c:	e7ee      	b.n	8008e1c <__libc_init_array+0xc>
 8008e3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e42:	4798      	blx	r3
 8008e44:	3601      	adds	r6, #1
 8008e46:	e7f2      	b.n	8008e2e <__libc_init_array+0x1e>
 8008e48:	0800988c 	.word	0x0800988c
 8008e4c:	0800988c 	.word	0x0800988c
 8008e50:	0800988c 	.word	0x0800988c
 8008e54:	08009890 	.word	0x08009890

08008e58 <__retarget_lock_acquire_recursive>:
 8008e58:	4770      	bx	lr

08008e5a <__retarget_lock_release_recursive>:
 8008e5a:	4770      	bx	lr

08008e5c <memcpy>:
 8008e5c:	440a      	add	r2, r1
 8008e5e:	4291      	cmp	r1, r2
 8008e60:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e64:	d100      	bne.n	8008e68 <memcpy+0xc>
 8008e66:	4770      	bx	lr
 8008e68:	b510      	push	{r4, lr}
 8008e6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e6e:	4291      	cmp	r1, r2
 8008e70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e74:	d1f9      	bne.n	8008e6a <memcpy+0xe>
 8008e76:	bd10      	pop	{r4, pc}

08008e78 <_free_r>:
 8008e78:	b538      	push	{r3, r4, r5, lr}
 8008e7a:	4605      	mov	r5, r0
 8008e7c:	2900      	cmp	r1, #0
 8008e7e:	d040      	beq.n	8008f02 <_free_r+0x8a>
 8008e80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e84:	1f0c      	subs	r4, r1, #4
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	bfb8      	it	lt
 8008e8a:	18e4      	addlt	r4, r4, r3
 8008e8c:	f000 f8de 	bl	800904c <__malloc_lock>
 8008e90:	4a1c      	ldr	r2, [pc, #112]	@ (8008f04 <_free_r+0x8c>)
 8008e92:	6813      	ldr	r3, [r2, #0]
 8008e94:	b933      	cbnz	r3, 8008ea4 <_free_r+0x2c>
 8008e96:	6063      	str	r3, [r4, #4]
 8008e98:	6014      	str	r4, [r2, #0]
 8008e9a:	4628      	mov	r0, r5
 8008e9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ea0:	f000 b8da 	b.w	8009058 <__malloc_unlock>
 8008ea4:	42a3      	cmp	r3, r4
 8008ea6:	d908      	bls.n	8008eba <_free_r+0x42>
 8008ea8:	6820      	ldr	r0, [r4, #0]
 8008eaa:	1821      	adds	r1, r4, r0
 8008eac:	428b      	cmp	r3, r1
 8008eae:	bf01      	itttt	eq
 8008eb0:	6819      	ldreq	r1, [r3, #0]
 8008eb2:	685b      	ldreq	r3, [r3, #4]
 8008eb4:	1809      	addeq	r1, r1, r0
 8008eb6:	6021      	streq	r1, [r4, #0]
 8008eb8:	e7ed      	b.n	8008e96 <_free_r+0x1e>
 8008eba:	461a      	mov	r2, r3
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	b10b      	cbz	r3, 8008ec4 <_free_r+0x4c>
 8008ec0:	42a3      	cmp	r3, r4
 8008ec2:	d9fa      	bls.n	8008eba <_free_r+0x42>
 8008ec4:	6811      	ldr	r1, [r2, #0]
 8008ec6:	1850      	adds	r0, r2, r1
 8008ec8:	42a0      	cmp	r0, r4
 8008eca:	d10b      	bne.n	8008ee4 <_free_r+0x6c>
 8008ecc:	6820      	ldr	r0, [r4, #0]
 8008ece:	4401      	add	r1, r0
 8008ed0:	1850      	adds	r0, r2, r1
 8008ed2:	4283      	cmp	r3, r0
 8008ed4:	6011      	str	r1, [r2, #0]
 8008ed6:	d1e0      	bne.n	8008e9a <_free_r+0x22>
 8008ed8:	6818      	ldr	r0, [r3, #0]
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	4408      	add	r0, r1
 8008ede:	6010      	str	r0, [r2, #0]
 8008ee0:	6053      	str	r3, [r2, #4]
 8008ee2:	e7da      	b.n	8008e9a <_free_r+0x22>
 8008ee4:	d902      	bls.n	8008eec <_free_r+0x74>
 8008ee6:	230c      	movs	r3, #12
 8008ee8:	602b      	str	r3, [r5, #0]
 8008eea:	e7d6      	b.n	8008e9a <_free_r+0x22>
 8008eec:	6820      	ldr	r0, [r4, #0]
 8008eee:	1821      	adds	r1, r4, r0
 8008ef0:	428b      	cmp	r3, r1
 8008ef2:	bf01      	itttt	eq
 8008ef4:	6819      	ldreq	r1, [r3, #0]
 8008ef6:	685b      	ldreq	r3, [r3, #4]
 8008ef8:	1809      	addeq	r1, r1, r0
 8008efa:	6021      	streq	r1, [r4, #0]
 8008efc:	6063      	str	r3, [r4, #4]
 8008efe:	6054      	str	r4, [r2, #4]
 8008f00:	e7cb      	b.n	8008e9a <_free_r+0x22>
 8008f02:	bd38      	pop	{r3, r4, r5, pc}
 8008f04:	20001554 	.word	0x20001554

08008f08 <sbrk_aligned>:
 8008f08:	b570      	push	{r4, r5, r6, lr}
 8008f0a:	4e0f      	ldr	r6, [pc, #60]	@ (8008f48 <sbrk_aligned+0x40>)
 8008f0c:	460c      	mov	r4, r1
 8008f0e:	6831      	ldr	r1, [r6, #0]
 8008f10:	4605      	mov	r5, r0
 8008f12:	b911      	cbnz	r1, 8008f1a <sbrk_aligned+0x12>
 8008f14:	f000 fba8 	bl	8009668 <_sbrk_r>
 8008f18:	6030      	str	r0, [r6, #0]
 8008f1a:	4621      	mov	r1, r4
 8008f1c:	4628      	mov	r0, r5
 8008f1e:	f000 fba3 	bl	8009668 <_sbrk_r>
 8008f22:	1c43      	adds	r3, r0, #1
 8008f24:	d103      	bne.n	8008f2e <sbrk_aligned+0x26>
 8008f26:	f04f 34ff 	mov.w	r4, #4294967295
 8008f2a:	4620      	mov	r0, r4
 8008f2c:	bd70      	pop	{r4, r5, r6, pc}
 8008f2e:	1cc4      	adds	r4, r0, #3
 8008f30:	f024 0403 	bic.w	r4, r4, #3
 8008f34:	42a0      	cmp	r0, r4
 8008f36:	d0f8      	beq.n	8008f2a <sbrk_aligned+0x22>
 8008f38:	1a21      	subs	r1, r4, r0
 8008f3a:	4628      	mov	r0, r5
 8008f3c:	f000 fb94 	bl	8009668 <_sbrk_r>
 8008f40:	3001      	adds	r0, #1
 8008f42:	d1f2      	bne.n	8008f2a <sbrk_aligned+0x22>
 8008f44:	e7ef      	b.n	8008f26 <sbrk_aligned+0x1e>
 8008f46:	bf00      	nop
 8008f48:	20001550 	.word	0x20001550

08008f4c <_malloc_r>:
 8008f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f50:	1ccd      	adds	r5, r1, #3
 8008f52:	f025 0503 	bic.w	r5, r5, #3
 8008f56:	3508      	adds	r5, #8
 8008f58:	2d0c      	cmp	r5, #12
 8008f5a:	bf38      	it	cc
 8008f5c:	250c      	movcc	r5, #12
 8008f5e:	2d00      	cmp	r5, #0
 8008f60:	4606      	mov	r6, r0
 8008f62:	db01      	blt.n	8008f68 <_malloc_r+0x1c>
 8008f64:	42a9      	cmp	r1, r5
 8008f66:	d904      	bls.n	8008f72 <_malloc_r+0x26>
 8008f68:	230c      	movs	r3, #12
 8008f6a:	6033      	str	r3, [r6, #0]
 8008f6c:	2000      	movs	r0, #0
 8008f6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009048 <_malloc_r+0xfc>
 8008f76:	f000 f869 	bl	800904c <__malloc_lock>
 8008f7a:	f8d8 3000 	ldr.w	r3, [r8]
 8008f7e:	461c      	mov	r4, r3
 8008f80:	bb44      	cbnz	r4, 8008fd4 <_malloc_r+0x88>
 8008f82:	4629      	mov	r1, r5
 8008f84:	4630      	mov	r0, r6
 8008f86:	f7ff ffbf 	bl	8008f08 <sbrk_aligned>
 8008f8a:	1c43      	adds	r3, r0, #1
 8008f8c:	4604      	mov	r4, r0
 8008f8e:	d158      	bne.n	8009042 <_malloc_r+0xf6>
 8008f90:	f8d8 4000 	ldr.w	r4, [r8]
 8008f94:	4627      	mov	r7, r4
 8008f96:	2f00      	cmp	r7, #0
 8008f98:	d143      	bne.n	8009022 <_malloc_r+0xd6>
 8008f9a:	2c00      	cmp	r4, #0
 8008f9c:	d04b      	beq.n	8009036 <_malloc_r+0xea>
 8008f9e:	6823      	ldr	r3, [r4, #0]
 8008fa0:	4639      	mov	r1, r7
 8008fa2:	4630      	mov	r0, r6
 8008fa4:	eb04 0903 	add.w	r9, r4, r3
 8008fa8:	f000 fb5e 	bl	8009668 <_sbrk_r>
 8008fac:	4581      	cmp	r9, r0
 8008fae:	d142      	bne.n	8009036 <_malloc_r+0xea>
 8008fb0:	6821      	ldr	r1, [r4, #0]
 8008fb2:	4630      	mov	r0, r6
 8008fb4:	1a6d      	subs	r5, r5, r1
 8008fb6:	4629      	mov	r1, r5
 8008fb8:	f7ff ffa6 	bl	8008f08 <sbrk_aligned>
 8008fbc:	3001      	adds	r0, #1
 8008fbe:	d03a      	beq.n	8009036 <_malloc_r+0xea>
 8008fc0:	6823      	ldr	r3, [r4, #0]
 8008fc2:	442b      	add	r3, r5
 8008fc4:	6023      	str	r3, [r4, #0]
 8008fc6:	f8d8 3000 	ldr.w	r3, [r8]
 8008fca:	685a      	ldr	r2, [r3, #4]
 8008fcc:	bb62      	cbnz	r2, 8009028 <_malloc_r+0xdc>
 8008fce:	f8c8 7000 	str.w	r7, [r8]
 8008fd2:	e00f      	b.n	8008ff4 <_malloc_r+0xa8>
 8008fd4:	6822      	ldr	r2, [r4, #0]
 8008fd6:	1b52      	subs	r2, r2, r5
 8008fd8:	d420      	bmi.n	800901c <_malloc_r+0xd0>
 8008fda:	2a0b      	cmp	r2, #11
 8008fdc:	d917      	bls.n	800900e <_malloc_r+0xc2>
 8008fde:	1961      	adds	r1, r4, r5
 8008fe0:	42a3      	cmp	r3, r4
 8008fe2:	6025      	str	r5, [r4, #0]
 8008fe4:	bf18      	it	ne
 8008fe6:	6059      	strne	r1, [r3, #4]
 8008fe8:	6863      	ldr	r3, [r4, #4]
 8008fea:	bf08      	it	eq
 8008fec:	f8c8 1000 	streq.w	r1, [r8]
 8008ff0:	5162      	str	r2, [r4, r5]
 8008ff2:	604b      	str	r3, [r1, #4]
 8008ff4:	4630      	mov	r0, r6
 8008ff6:	f000 f82f 	bl	8009058 <__malloc_unlock>
 8008ffa:	f104 000b 	add.w	r0, r4, #11
 8008ffe:	1d23      	adds	r3, r4, #4
 8009000:	f020 0007 	bic.w	r0, r0, #7
 8009004:	1ac2      	subs	r2, r0, r3
 8009006:	bf1c      	itt	ne
 8009008:	1a1b      	subne	r3, r3, r0
 800900a:	50a3      	strne	r3, [r4, r2]
 800900c:	e7af      	b.n	8008f6e <_malloc_r+0x22>
 800900e:	6862      	ldr	r2, [r4, #4]
 8009010:	42a3      	cmp	r3, r4
 8009012:	bf0c      	ite	eq
 8009014:	f8c8 2000 	streq.w	r2, [r8]
 8009018:	605a      	strne	r2, [r3, #4]
 800901a:	e7eb      	b.n	8008ff4 <_malloc_r+0xa8>
 800901c:	4623      	mov	r3, r4
 800901e:	6864      	ldr	r4, [r4, #4]
 8009020:	e7ae      	b.n	8008f80 <_malloc_r+0x34>
 8009022:	463c      	mov	r4, r7
 8009024:	687f      	ldr	r7, [r7, #4]
 8009026:	e7b6      	b.n	8008f96 <_malloc_r+0x4a>
 8009028:	461a      	mov	r2, r3
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	42a3      	cmp	r3, r4
 800902e:	d1fb      	bne.n	8009028 <_malloc_r+0xdc>
 8009030:	2300      	movs	r3, #0
 8009032:	6053      	str	r3, [r2, #4]
 8009034:	e7de      	b.n	8008ff4 <_malloc_r+0xa8>
 8009036:	230c      	movs	r3, #12
 8009038:	4630      	mov	r0, r6
 800903a:	6033      	str	r3, [r6, #0]
 800903c:	f000 f80c 	bl	8009058 <__malloc_unlock>
 8009040:	e794      	b.n	8008f6c <_malloc_r+0x20>
 8009042:	6005      	str	r5, [r0, #0]
 8009044:	e7d6      	b.n	8008ff4 <_malloc_r+0xa8>
 8009046:	bf00      	nop
 8009048:	20001554 	.word	0x20001554

0800904c <__malloc_lock>:
 800904c:	4801      	ldr	r0, [pc, #4]	@ (8009054 <__malloc_lock+0x8>)
 800904e:	f7ff bf03 	b.w	8008e58 <__retarget_lock_acquire_recursive>
 8009052:	bf00      	nop
 8009054:	2000154c 	.word	0x2000154c

08009058 <__malloc_unlock>:
 8009058:	4801      	ldr	r0, [pc, #4]	@ (8009060 <__malloc_unlock+0x8>)
 800905a:	f7ff befe 	b.w	8008e5a <__retarget_lock_release_recursive>
 800905e:	bf00      	nop
 8009060:	2000154c 	.word	0x2000154c

08009064 <__ssputs_r>:
 8009064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009068:	461f      	mov	r7, r3
 800906a:	688e      	ldr	r6, [r1, #8]
 800906c:	4682      	mov	sl, r0
 800906e:	42be      	cmp	r6, r7
 8009070:	460c      	mov	r4, r1
 8009072:	4690      	mov	r8, r2
 8009074:	680b      	ldr	r3, [r1, #0]
 8009076:	d82d      	bhi.n	80090d4 <__ssputs_r+0x70>
 8009078:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800907c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009080:	d026      	beq.n	80090d0 <__ssputs_r+0x6c>
 8009082:	6965      	ldr	r5, [r4, #20]
 8009084:	6909      	ldr	r1, [r1, #16]
 8009086:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800908a:	eba3 0901 	sub.w	r9, r3, r1
 800908e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009092:	1c7b      	adds	r3, r7, #1
 8009094:	444b      	add	r3, r9
 8009096:	106d      	asrs	r5, r5, #1
 8009098:	429d      	cmp	r5, r3
 800909a:	bf38      	it	cc
 800909c:	461d      	movcc	r5, r3
 800909e:	0553      	lsls	r3, r2, #21
 80090a0:	d527      	bpl.n	80090f2 <__ssputs_r+0x8e>
 80090a2:	4629      	mov	r1, r5
 80090a4:	f7ff ff52 	bl	8008f4c <_malloc_r>
 80090a8:	4606      	mov	r6, r0
 80090aa:	b360      	cbz	r0, 8009106 <__ssputs_r+0xa2>
 80090ac:	464a      	mov	r2, r9
 80090ae:	6921      	ldr	r1, [r4, #16]
 80090b0:	f7ff fed4 	bl	8008e5c <memcpy>
 80090b4:	89a3      	ldrh	r3, [r4, #12]
 80090b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80090ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090be:	81a3      	strh	r3, [r4, #12]
 80090c0:	6126      	str	r6, [r4, #16]
 80090c2:	444e      	add	r6, r9
 80090c4:	6026      	str	r6, [r4, #0]
 80090c6:	463e      	mov	r6, r7
 80090c8:	6165      	str	r5, [r4, #20]
 80090ca:	eba5 0509 	sub.w	r5, r5, r9
 80090ce:	60a5      	str	r5, [r4, #8]
 80090d0:	42be      	cmp	r6, r7
 80090d2:	d900      	bls.n	80090d6 <__ssputs_r+0x72>
 80090d4:	463e      	mov	r6, r7
 80090d6:	4632      	mov	r2, r6
 80090d8:	4641      	mov	r1, r8
 80090da:	6820      	ldr	r0, [r4, #0]
 80090dc:	f000 faaa 	bl	8009634 <memmove>
 80090e0:	2000      	movs	r0, #0
 80090e2:	68a3      	ldr	r3, [r4, #8]
 80090e4:	1b9b      	subs	r3, r3, r6
 80090e6:	60a3      	str	r3, [r4, #8]
 80090e8:	6823      	ldr	r3, [r4, #0]
 80090ea:	4433      	add	r3, r6
 80090ec:	6023      	str	r3, [r4, #0]
 80090ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090f2:	462a      	mov	r2, r5
 80090f4:	f000 fad6 	bl	80096a4 <_realloc_r>
 80090f8:	4606      	mov	r6, r0
 80090fa:	2800      	cmp	r0, #0
 80090fc:	d1e0      	bne.n	80090c0 <__ssputs_r+0x5c>
 80090fe:	4650      	mov	r0, sl
 8009100:	6921      	ldr	r1, [r4, #16]
 8009102:	f7ff feb9 	bl	8008e78 <_free_r>
 8009106:	230c      	movs	r3, #12
 8009108:	f8ca 3000 	str.w	r3, [sl]
 800910c:	89a3      	ldrh	r3, [r4, #12]
 800910e:	f04f 30ff 	mov.w	r0, #4294967295
 8009112:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009116:	81a3      	strh	r3, [r4, #12]
 8009118:	e7e9      	b.n	80090ee <__ssputs_r+0x8a>
	...

0800911c <_svfiprintf_r>:
 800911c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009120:	4698      	mov	r8, r3
 8009122:	898b      	ldrh	r3, [r1, #12]
 8009124:	4607      	mov	r7, r0
 8009126:	061b      	lsls	r3, r3, #24
 8009128:	460d      	mov	r5, r1
 800912a:	4614      	mov	r4, r2
 800912c:	b09d      	sub	sp, #116	@ 0x74
 800912e:	d510      	bpl.n	8009152 <_svfiprintf_r+0x36>
 8009130:	690b      	ldr	r3, [r1, #16]
 8009132:	b973      	cbnz	r3, 8009152 <_svfiprintf_r+0x36>
 8009134:	2140      	movs	r1, #64	@ 0x40
 8009136:	f7ff ff09 	bl	8008f4c <_malloc_r>
 800913a:	6028      	str	r0, [r5, #0]
 800913c:	6128      	str	r0, [r5, #16]
 800913e:	b930      	cbnz	r0, 800914e <_svfiprintf_r+0x32>
 8009140:	230c      	movs	r3, #12
 8009142:	603b      	str	r3, [r7, #0]
 8009144:	f04f 30ff 	mov.w	r0, #4294967295
 8009148:	b01d      	add	sp, #116	@ 0x74
 800914a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800914e:	2340      	movs	r3, #64	@ 0x40
 8009150:	616b      	str	r3, [r5, #20]
 8009152:	2300      	movs	r3, #0
 8009154:	9309      	str	r3, [sp, #36]	@ 0x24
 8009156:	2320      	movs	r3, #32
 8009158:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800915c:	2330      	movs	r3, #48	@ 0x30
 800915e:	f04f 0901 	mov.w	r9, #1
 8009162:	f8cd 800c 	str.w	r8, [sp, #12]
 8009166:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009300 <_svfiprintf_r+0x1e4>
 800916a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800916e:	4623      	mov	r3, r4
 8009170:	469a      	mov	sl, r3
 8009172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009176:	b10a      	cbz	r2, 800917c <_svfiprintf_r+0x60>
 8009178:	2a25      	cmp	r2, #37	@ 0x25
 800917a:	d1f9      	bne.n	8009170 <_svfiprintf_r+0x54>
 800917c:	ebba 0b04 	subs.w	fp, sl, r4
 8009180:	d00b      	beq.n	800919a <_svfiprintf_r+0x7e>
 8009182:	465b      	mov	r3, fp
 8009184:	4622      	mov	r2, r4
 8009186:	4629      	mov	r1, r5
 8009188:	4638      	mov	r0, r7
 800918a:	f7ff ff6b 	bl	8009064 <__ssputs_r>
 800918e:	3001      	adds	r0, #1
 8009190:	f000 80a7 	beq.w	80092e2 <_svfiprintf_r+0x1c6>
 8009194:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009196:	445a      	add	r2, fp
 8009198:	9209      	str	r2, [sp, #36]	@ 0x24
 800919a:	f89a 3000 	ldrb.w	r3, [sl]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	f000 809f 	beq.w	80092e2 <_svfiprintf_r+0x1c6>
 80091a4:	2300      	movs	r3, #0
 80091a6:	f04f 32ff 	mov.w	r2, #4294967295
 80091aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091ae:	f10a 0a01 	add.w	sl, sl, #1
 80091b2:	9304      	str	r3, [sp, #16]
 80091b4:	9307      	str	r3, [sp, #28]
 80091b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80091ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80091bc:	4654      	mov	r4, sl
 80091be:	2205      	movs	r2, #5
 80091c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091c4:	484e      	ldr	r0, [pc, #312]	@ (8009300 <_svfiprintf_r+0x1e4>)
 80091c6:	f000 fa5f 	bl	8009688 <memchr>
 80091ca:	9a04      	ldr	r2, [sp, #16]
 80091cc:	b9d8      	cbnz	r0, 8009206 <_svfiprintf_r+0xea>
 80091ce:	06d0      	lsls	r0, r2, #27
 80091d0:	bf44      	itt	mi
 80091d2:	2320      	movmi	r3, #32
 80091d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091d8:	0711      	lsls	r1, r2, #28
 80091da:	bf44      	itt	mi
 80091dc:	232b      	movmi	r3, #43	@ 0x2b
 80091de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091e2:	f89a 3000 	ldrb.w	r3, [sl]
 80091e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80091e8:	d015      	beq.n	8009216 <_svfiprintf_r+0xfa>
 80091ea:	4654      	mov	r4, sl
 80091ec:	2000      	movs	r0, #0
 80091ee:	f04f 0c0a 	mov.w	ip, #10
 80091f2:	9a07      	ldr	r2, [sp, #28]
 80091f4:	4621      	mov	r1, r4
 80091f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091fa:	3b30      	subs	r3, #48	@ 0x30
 80091fc:	2b09      	cmp	r3, #9
 80091fe:	d94b      	bls.n	8009298 <_svfiprintf_r+0x17c>
 8009200:	b1b0      	cbz	r0, 8009230 <_svfiprintf_r+0x114>
 8009202:	9207      	str	r2, [sp, #28]
 8009204:	e014      	b.n	8009230 <_svfiprintf_r+0x114>
 8009206:	eba0 0308 	sub.w	r3, r0, r8
 800920a:	fa09 f303 	lsl.w	r3, r9, r3
 800920e:	4313      	orrs	r3, r2
 8009210:	46a2      	mov	sl, r4
 8009212:	9304      	str	r3, [sp, #16]
 8009214:	e7d2      	b.n	80091bc <_svfiprintf_r+0xa0>
 8009216:	9b03      	ldr	r3, [sp, #12]
 8009218:	1d19      	adds	r1, r3, #4
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	9103      	str	r1, [sp, #12]
 800921e:	2b00      	cmp	r3, #0
 8009220:	bfbb      	ittet	lt
 8009222:	425b      	neglt	r3, r3
 8009224:	f042 0202 	orrlt.w	r2, r2, #2
 8009228:	9307      	strge	r3, [sp, #28]
 800922a:	9307      	strlt	r3, [sp, #28]
 800922c:	bfb8      	it	lt
 800922e:	9204      	strlt	r2, [sp, #16]
 8009230:	7823      	ldrb	r3, [r4, #0]
 8009232:	2b2e      	cmp	r3, #46	@ 0x2e
 8009234:	d10a      	bne.n	800924c <_svfiprintf_r+0x130>
 8009236:	7863      	ldrb	r3, [r4, #1]
 8009238:	2b2a      	cmp	r3, #42	@ 0x2a
 800923a:	d132      	bne.n	80092a2 <_svfiprintf_r+0x186>
 800923c:	9b03      	ldr	r3, [sp, #12]
 800923e:	3402      	adds	r4, #2
 8009240:	1d1a      	adds	r2, r3, #4
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	9203      	str	r2, [sp, #12]
 8009246:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800924a:	9305      	str	r3, [sp, #20]
 800924c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009304 <_svfiprintf_r+0x1e8>
 8009250:	2203      	movs	r2, #3
 8009252:	4650      	mov	r0, sl
 8009254:	7821      	ldrb	r1, [r4, #0]
 8009256:	f000 fa17 	bl	8009688 <memchr>
 800925a:	b138      	cbz	r0, 800926c <_svfiprintf_r+0x150>
 800925c:	2240      	movs	r2, #64	@ 0x40
 800925e:	9b04      	ldr	r3, [sp, #16]
 8009260:	eba0 000a 	sub.w	r0, r0, sl
 8009264:	4082      	lsls	r2, r0
 8009266:	4313      	orrs	r3, r2
 8009268:	3401      	adds	r4, #1
 800926a:	9304      	str	r3, [sp, #16]
 800926c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009270:	2206      	movs	r2, #6
 8009272:	4825      	ldr	r0, [pc, #148]	@ (8009308 <_svfiprintf_r+0x1ec>)
 8009274:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009278:	f000 fa06 	bl	8009688 <memchr>
 800927c:	2800      	cmp	r0, #0
 800927e:	d036      	beq.n	80092ee <_svfiprintf_r+0x1d2>
 8009280:	4b22      	ldr	r3, [pc, #136]	@ (800930c <_svfiprintf_r+0x1f0>)
 8009282:	bb1b      	cbnz	r3, 80092cc <_svfiprintf_r+0x1b0>
 8009284:	9b03      	ldr	r3, [sp, #12]
 8009286:	3307      	adds	r3, #7
 8009288:	f023 0307 	bic.w	r3, r3, #7
 800928c:	3308      	adds	r3, #8
 800928e:	9303      	str	r3, [sp, #12]
 8009290:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009292:	4433      	add	r3, r6
 8009294:	9309      	str	r3, [sp, #36]	@ 0x24
 8009296:	e76a      	b.n	800916e <_svfiprintf_r+0x52>
 8009298:	460c      	mov	r4, r1
 800929a:	2001      	movs	r0, #1
 800929c:	fb0c 3202 	mla	r2, ip, r2, r3
 80092a0:	e7a8      	b.n	80091f4 <_svfiprintf_r+0xd8>
 80092a2:	2300      	movs	r3, #0
 80092a4:	f04f 0c0a 	mov.w	ip, #10
 80092a8:	4619      	mov	r1, r3
 80092aa:	3401      	adds	r4, #1
 80092ac:	9305      	str	r3, [sp, #20]
 80092ae:	4620      	mov	r0, r4
 80092b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092b4:	3a30      	subs	r2, #48	@ 0x30
 80092b6:	2a09      	cmp	r2, #9
 80092b8:	d903      	bls.n	80092c2 <_svfiprintf_r+0x1a6>
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d0c6      	beq.n	800924c <_svfiprintf_r+0x130>
 80092be:	9105      	str	r1, [sp, #20]
 80092c0:	e7c4      	b.n	800924c <_svfiprintf_r+0x130>
 80092c2:	4604      	mov	r4, r0
 80092c4:	2301      	movs	r3, #1
 80092c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80092ca:	e7f0      	b.n	80092ae <_svfiprintf_r+0x192>
 80092cc:	ab03      	add	r3, sp, #12
 80092ce:	9300      	str	r3, [sp, #0]
 80092d0:	462a      	mov	r2, r5
 80092d2:	4638      	mov	r0, r7
 80092d4:	4b0e      	ldr	r3, [pc, #56]	@ (8009310 <_svfiprintf_r+0x1f4>)
 80092d6:	a904      	add	r1, sp, #16
 80092d8:	f3af 8000 	nop.w
 80092dc:	1c42      	adds	r2, r0, #1
 80092de:	4606      	mov	r6, r0
 80092e0:	d1d6      	bne.n	8009290 <_svfiprintf_r+0x174>
 80092e2:	89ab      	ldrh	r3, [r5, #12]
 80092e4:	065b      	lsls	r3, r3, #25
 80092e6:	f53f af2d 	bmi.w	8009144 <_svfiprintf_r+0x28>
 80092ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80092ec:	e72c      	b.n	8009148 <_svfiprintf_r+0x2c>
 80092ee:	ab03      	add	r3, sp, #12
 80092f0:	9300      	str	r3, [sp, #0]
 80092f2:	462a      	mov	r2, r5
 80092f4:	4638      	mov	r0, r7
 80092f6:	4b06      	ldr	r3, [pc, #24]	@ (8009310 <_svfiprintf_r+0x1f4>)
 80092f8:	a904      	add	r1, sp, #16
 80092fa:	f000 f87d 	bl	80093f8 <_printf_i>
 80092fe:	e7ed      	b.n	80092dc <_svfiprintf_r+0x1c0>
 8009300:	0800984e 	.word	0x0800984e
 8009304:	08009854 	.word	0x08009854
 8009308:	08009858 	.word	0x08009858
 800930c:	00000000 	.word	0x00000000
 8009310:	08009065 	.word	0x08009065

08009314 <_printf_common>:
 8009314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009318:	4616      	mov	r6, r2
 800931a:	4698      	mov	r8, r3
 800931c:	688a      	ldr	r2, [r1, #8]
 800931e:	690b      	ldr	r3, [r1, #16]
 8009320:	4607      	mov	r7, r0
 8009322:	4293      	cmp	r3, r2
 8009324:	bfb8      	it	lt
 8009326:	4613      	movlt	r3, r2
 8009328:	6033      	str	r3, [r6, #0]
 800932a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800932e:	460c      	mov	r4, r1
 8009330:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009334:	b10a      	cbz	r2, 800933a <_printf_common+0x26>
 8009336:	3301      	adds	r3, #1
 8009338:	6033      	str	r3, [r6, #0]
 800933a:	6823      	ldr	r3, [r4, #0]
 800933c:	0699      	lsls	r1, r3, #26
 800933e:	bf42      	ittt	mi
 8009340:	6833      	ldrmi	r3, [r6, #0]
 8009342:	3302      	addmi	r3, #2
 8009344:	6033      	strmi	r3, [r6, #0]
 8009346:	6825      	ldr	r5, [r4, #0]
 8009348:	f015 0506 	ands.w	r5, r5, #6
 800934c:	d106      	bne.n	800935c <_printf_common+0x48>
 800934e:	f104 0a19 	add.w	sl, r4, #25
 8009352:	68e3      	ldr	r3, [r4, #12]
 8009354:	6832      	ldr	r2, [r6, #0]
 8009356:	1a9b      	subs	r3, r3, r2
 8009358:	42ab      	cmp	r3, r5
 800935a:	dc2b      	bgt.n	80093b4 <_printf_common+0xa0>
 800935c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009360:	6822      	ldr	r2, [r4, #0]
 8009362:	3b00      	subs	r3, #0
 8009364:	bf18      	it	ne
 8009366:	2301      	movne	r3, #1
 8009368:	0692      	lsls	r2, r2, #26
 800936a:	d430      	bmi.n	80093ce <_printf_common+0xba>
 800936c:	4641      	mov	r1, r8
 800936e:	4638      	mov	r0, r7
 8009370:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009374:	47c8      	blx	r9
 8009376:	3001      	adds	r0, #1
 8009378:	d023      	beq.n	80093c2 <_printf_common+0xae>
 800937a:	6823      	ldr	r3, [r4, #0]
 800937c:	6922      	ldr	r2, [r4, #16]
 800937e:	f003 0306 	and.w	r3, r3, #6
 8009382:	2b04      	cmp	r3, #4
 8009384:	bf14      	ite	ne
 8009386:	2500      	movne	r5, #0
 8009388:	6833      	ldreq	r3, [r6, #0]
 800938a:	f04f 0600 	mov.w	r6, #0
 800938e:	bf08      	it	eq
 8009390:	68e5      	ldreq	r5, [r4, #12]
 8009392:	f104 041a 	add.w	r4, r4, #26
 8009396:	bf08      	it	eq
 8009398:	1aed      	subeq	r5, r5, r3
 800939a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800939e:	bf08      	it	eq
 80093a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80093a4:	4293      	cmp	r3, r2
 80093a6:	bfc4      	itt	gt
 80093a8:	1a9b      	subgt	r3, r3, r2
 80093aa:	18ed      	addgt	r5, r5, r3
 80093ac:	42b5      	cmp	r5, r6
 80093ae:	d11a      	bne.n	80093e6 <_printf_common+0xd2>
 80093b0:	2000      	movs	r0, #0
 80093b2:	e008      	b.n	80093c6 <_printf_common+0xb2>
 80093b4:	2301      	movs	r3, #1
 80093b6:	4652      	mov	r2, sl
 80093b8:	4641      	mov	r1, r8
 80093ba:	4638      	mov	r0, r7
 80093bc:	47c8      	blx	r9
 80093be:	3001      	adds	r0, #1
 80093c0:	d103      	bne.n	80093ca <_printf_common+0xb6>
 80093c2:	f04f 30ff 	mov.w	r0, #4294967295
 80093c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093ca:	3501      	adds	r5, #1
 80093cc:	e7c1      	b.n	8009352 <_printf_common+0x3e>
 80093ce:	2030      	movs	r0, #48	@ 0x30
 80093d0:	18e1      	adds	r1, r4, r3
 80093d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80093d6:	1c5a      	adds	r2, r3, #1
 80093d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80093dc:	4422      	add	r2, r4
 80093de:	3302      	adds	r3, #2
 80093e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80093e4:	e7c2      	b.n	800936c <_printf_common+0x58>
 80093e6:	2301      	movs	r3, #1
 80093e8:	4622      	mov	r2, r4
 80093ea:	4641      	mov	r1, r8
 80093ec:	4638      	mov	r0, r7
 80093ee:	47c8      	blx	r9
 80093f0:	3001      	adds	r0, #1
 80093f2:	d0e6      	beq.n	80093c2 <_printf_common+0xae>
 80093f4:	3601      	adds	r6, #1
 80093f6:	e7d9      	b.n	80093ac <_printf_common+0x98>

080093f8 <_printf_i>:
 80093f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093fc:	7e0f      	ldrb	r7, [r1, #24]
 80093fe:	4691      	mov	r9, r2
 8009400:	2f78      	cmp	r7, #120	@ 0x78
 8009402:	4680      	mov	r8, r0
 8009404:	460c      	mov	r4, r1
 8009406:	469a      	mov	sl, r3
 8009408:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800940a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800940e:	d807      	bhi.n	8009420 <_printf_i+0x28>
 8009410:	2f62      	cmp	r7, #98	@ 0x62
 8009412:	d80a      	bhi.n	800942a <_printf_i+0x32>
 8009414:	2f00      	cmp	r7, #0
 8009416:	f000 80d1 	beq.w	80095bc <_printf_i+0x1c4>
 800941a:	2f58      	cmp	r7, #88	@ 0x58
 800941c:	f000 80b8 	beq.w	8009590 <_printf_i+0x198>
 8009420:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009424:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009428:	e03a      	b.n	80094a0 <_printf_i+0xa8>
 800942a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800942e:	2b15      	cmp	r3, #21
 8009430:	d8f6      	bhi.n	8009420 <_printf_i+0x28>
 8009432:	a101      	add	r1, pc, #4	@ (adr r1, 8009438 <_printf_i+0x40>)
 8009434:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009438:	08009491 	.word	0x08009491
 800943c:	080094a5 	.word	0x080094a5
 8009440:	08009421 	.word	0x08009421
 8009444:	08009421 	.word	0x08009421
 8009448:	08009421 	.word	0x08009421
 800944c:	08009421 	.word	0x08009421
 8009450:	080094a5 	.word	0x080094a5
 8009454:	08009421 	.word	0x08009421
 8009458:	08009421 	.word	0x08009421
 800945c:	08009421 	.word	0x08009421
 8009460:	08009421 	.word	0x08009421
 8009464:	080095a3 	.word	0x080095a3
 8009468:	080094cf 	.word	0x080094cf
 800946c:	0800955d 	.word	0x0800955d
 8009470:	08009421 	.word	0x08009421
 8009474:	08009421 	.word	0x08009421
 8009478:	080095c5 	.word	0x080095c5
 800947c:	08009421 	.word	0x08009421
 8009480:	080094cf 	.word	0x080094cf
 8009484:	08009421 	.word	0x08009421
 8009488:	08009421 	.word	0x08009421
 800948c:	08009565 	.word	0x08009565
 8009490:	6833      	ldr	r3, [r6, #0]
 8009492:	1d1a      	adds	r2, r3, #4
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	6032      	str	r2, [r6, #0]
 8009498:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800949c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80094a0:	2301      	movs	r3, #1
 80094a2:	e09c      	b.n	80095de <_printf_i+0x1e6>
 80094a4:	6833      	ldr	r3, [r6, #0]
 80094a6:	6820      	ldr	r0, [r4, #0]
 80094a8:	1d19      	adds	r1, r3, #4
 80094aa:	6031      	str	r1, [r6, #0]
 80094ac:	0606      	lsls	r6, r0, #24
 80094ae:	d501      	bpl.n	80094b4 <_printf_i+0xbc>
 80094b0:	681d      	ldr	r5, [r3, #0]
 80094b2:	e003      	b.n	80094bc <_printf_i+0xc4>
 80094b4:	0645      	lsls	r5, r0, #25
 80094b6:	d5fb      	bpl.n	80094b0 <_printf_i+0xb8>
 80094b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80094bc:	2d00      	cmp	r5, #0
 80094be:	da03      	bge.n	80094c8 <_printf_i+0xd0>
 80094c0:	232d      	movs	r3, #45	@ 0x2d
 80094c2:	426d      	negs	r5, r5
 80094c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80094c8:	230a      	movs	r3, #10
 80094ca:	4858      	ldr	r0, [pc, #352]	@ (800962c <_printf_i+0x234>)
 80094cc:	e011      	b.n	80094f2 <_printf_i+0xfa>
 80094ce:	6821      	ldr	r1, [r4, #0]
 80094d0:	6833      	ldr	r3, [r6, #0]
 80094d2:	0608      	lsls	r0, r1, #24
 80094d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80094d8:	d402      	bmi.n	80094e0 <_printf_i+0xe8>
 80094da:	0649      	lsls	r1, r1, #25
 80094dc:	bf48      	it	mi
 80094de:	b2ad      	uxthmi	r5, r5
 80094e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80094e2:	6033      	str	r3, [r6, #0]
 80094e4:	bf14      	ite	ne
 80094e6:	230a      	movne	r3, #10
 80094e8:	2308      	moveq	r3, #8
 80094ea:	4850      	ldr	r0, [pc, #320]	@ (800962c <_printf_i+0x234>)
 80094ec:	2100      	movs	r1, #0
 80094ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80094f2:	6866      	ldr	r6, [r4, #4]
 80094f4:	2e00      	cmp	r6, #0
 80094f6:	60a6      	str	r6, [r4, #8]
 80094f8:	db05      	blt.n	8009506 <_printf_i+0x10e>
 80094fa:	6821      	ldr	r1, [r4, #0]
 80094fc:	432e      	orrs	r6, r5
 80094fe:	f021 0104 	bic.w	r1, r1, #4
 8009502:	6021      	str	r1, [r4, #0]
 8009504:	d04b      	beq.n	800959e <_printf_i+0x1a6>
 8009506:	4616      	mov	r6, r2
 8009508:	fbb5 f1f3 	udiv	r1, r5, r3
 800950c:	fb03 5711 	mls	r7, r3, r1, r5
 8009510:	5dc7      	ldrb	r7, [r0, r7]
 8009512:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009516:	462f      	mov	r7, r5
 8009518:	42bb      	cmp	r3, r7
 800951a:	460d      	mov	r5, r1
 800951c:	d9f4      	bls.n	8009508 <_printf_i+0x110>
 800951e:	2b08      	cmp	r3, #8
 8009520:	d10b      	bne.n	800953a <_printf_i+0x142>
 8009522:	6823      	ldr	r3, [r4, #0]
 8009524:	07df      	lsls	r7, r3, #31
 8009526:	d508      	bpl.n	800953a <_printf_i+0x142>
 8009528:	6923      	ldr	r3, [r4, #16]
 800952a:	6861      	ldr	r1, [r4, #4]
 800952c:	4299      	cmp	r1, r3
 800952e:	bfde      	ittt	le
 8009530:	2330      	movle	r3, #48	@ 0x30
 8009532:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009536:	f106 36ff 	addle.w	r6, r6, #4294967295
 800953a:	1b92      	subs	r2, r2, r6
 800953c:	6122      	str	r2, [r4, #16]
 800953e:	464b      	mov	r3, r9
 8009540:	4621      	mov	r1, r4
 8009542:	4640      	mov	r0, r8
 8009544:	f8cd a000 	str.w	sl, [sp]
 8009548:	aa03      	add	r2, sp, #12
 800954a:	f7ff fee3 	bl	8009314 <_printf_common>
 800954e:	3001      	adds	r0, #1
 8009550:	d14a      	bne.n	80095e8 <_printf_i+0x1f0>
 8009552:	f04f 30ff 	mov.w	r0, #4294967295
 8009556:	b004      	add	sp, #16
 8009558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800955c:	6823      	ldr	r3, [r4, #0]
 800955e:	f043 0320 	orr.w	r3, r3, #32
 8009562:	6023      	str	r3, [r4, #0]
 8009564:	2778      	movs	r7, #120	@ 0x78
 8009566:	4832      	ldr	r0, [pc, #200]	@ (8009630 <_printf_i+0x238>)
 8009568:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800956c:	6823      	ldr	r3, [r4, #0]
 800956e:	6831      	ldr	r1, [r6, #0]
 8009570:	061f      	lsls	r7, r3, #24
 8009572:	f851 5b04 	ldr.w	r5, [r1], #4
 8009576:	d402      	bmi.n	800957e <_printf_i+0x186>
 8009578:	065f      	lsls	r7, r3, #25
 800957a:	bf48      	it	mi
 800957c:	b2ad      	uxthmi	r5, r5
 800957e:	6031      	str	r1, [r6, #0]
 8009580:	07d9      	lsls	r1, r3, #31
 8009582:	bf44      	itt	mi
 8009584:	f043 0320 	orrmi.w	r3, r3, #32
 8009588:	6023      	strmi	r3, [r4, #0]
 800958a:	b11d      	cbz	r5, 8009594 <_printf_i+0x19c>
 800958c:	2310      	movs	r3, #16
 800958e:	e7ad      	b.n	80094ec <_printf_i+0xf4>
 8009590:	4826      	ldr	r0, [pc, #152]	@ (800962c <_printf_i+0x234>)
 8009592:	e7e9      	b.n	8009568 <_printf_i+0x170>
 8009594:	6823      	ldr	r3, [r4, #0]
 8009596:	f023 0320 	bic.w	r3, r3, #32
 800959a:	6023      	str	r3, [r4, #0]
 800959c:	e7f6      	b.n	800958c <_printf_i+0x194>
 800959e:	4616      	mov	r6, r2
 80095a0:	e7bd      	b.n	800951e <_printf_i+0x126>
 80095a2:	6833      	ldr	r3, [r6, #0]
 80095a4:	6825      	ldr	r5, [r4, #0]
 80095a6:	1d18      	adds	r0, r3, #4
 80095a8:	6961      	ldr	r1, [r4, #20]
 80095aa:	6030      	str	r0, [r6, #0]
 80095ac:	062e      	lsls	r6, r5, #24
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	d501      	bpl.n	80095b6 <_printf_i+0x1be>
 80095b2:	6019      	str	r1, [r3, #0]
 80095b4:	e002      	b.n	80095bc <_printf_i+0x1c4>
 80095b6:	0668      	lsls	r0, r5, #25
 80095b8:	d5fb      	bpl.n	80095b2 <_printf_i+0x1ba>
 80095ba:	8019      	strh	r1, [r3, #0]
 80095bc:	2300      	movs	r3, #0
 80095be:	4616      	mov	r6, r2
 80095c0:	6123      	str	r3, [r4, #16]
 80095c2:	e7bc      	b.n	800953e <_printf_i+0x146>
 80095c4:	6833      	ldr	r3, [r6, #0]
 80095c6:	2100      	movs	r1, #0
 80095c8:	1d1a      	adds	r2, r3, #4
 80095ca:	6032      	str	r2, [r6, #0]
 80095cc:	681e      	ldr	r6, [r3, #0]
 80095ce:	6862      	ldr	r2, [r4, #4]
 80095d0:	4630      	mov	r0, r6
 80095d2:	f000 f859 	bl	8009688 <memchr>
 80095d6:	b108      	cbz	r0, 80095dc <_printf_i+0x1e4>
 80095d8:	1b80      	subs	r0, r0, r6
 80095da:	6060      	str	r0, [r4, #4]
 80095dc:	6863      	ldr	r3, [r4, #4]
 80095de:	6123      	str	r3, [r4, #16]
 80095e0:	2300      	movs	r3, #0
 80095e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80095e6:	e7aa      	b.n	800953e <_printf_i+0x146>
 80095e8:	4632      	mov	r2, r6
 80095ea:	4649      	mov	r1, r9
 80095ec:	4640      	mov	r0, r8
 80095ee:	6923      	ldr	r3, [r4, #16]
 80095f0:	47d0      	blx	sl
 80095f2:	3001      	adds	r0, #1
 80095f4:	d0ad      	beq.n	8009552 <_printf_i+0x15a>
 80095f6:	6823      	ldr	r3, [r4, #0]
 80095f8:	079b      	lsls	r3, r3, #30
 80095fa:	d413      	bmi.n	8009624 <_printf_i+0x22c>
 80095fc:	68e0      	ldr	r0, [r4, #12]
 80095fe:	9b03      	ldr	r3, [sp, #12]
 8009600:	4298      	cmp	r0, r3
 8009602:	bfb8      	it	lt
 8009604:	4618      	movlt	r0, r3
 8009606:	e7a6      	b.n	8009556 <_printf_i+0x15e>
 8009608:	2301      	movs	r3, #1
 800960a:	4632      	mov	r2, r6
 800960c:	4649      	mov	r1, r9
 800960e:	4640      	mov	r0, r8
 8009610:	47d0      	blx	sl
 8009612:	3001      	adds	r0, #1
 8009614:	d09d      	beq.n	8009552 <_printf_i+0x15a>
 8009616:	3501      	adds	r5, #1
 8009618:	68e3      	ldr	r3, [r4, #12]
 800961a:	9903      	ldr	r1, [sp, #12]
 800961c:	1a5b      	subs	r3, r3, r1
 800961e:	42ab      	cmp	r3, r5
 8009620:	dcf2      	bgt.n	8009608 <_printf_i+0x210>
 8009622:	e7eb      	b.n	80095fc <_printf_i+0x204>
 8009624:	2500      	movs	r5, #0
 8009626:	f104 0619 	add.w	r6, r4, #25
 800962a:	e7f5      	b.n	8009618 <_printf_i+0x220>
 800962c:	0800985f 	.word	0x0800985f
 8009630:	08009870 	.word	0x08009870

08009634 <memmove>:
 8009634:	4288      	cmp	r0, r1
 8009636:	b510      	push	{r4, lr}
 8009638:	eb01 0402 	add.w	r4, r1, r2
 800963c:	d902      	bls.n	8009644 <memmove+0x10>
 800963e:	4284      	cmp	r4, r0
 8009640:	4623      	mov	r3, r4
 8009642:	d807      	bhi.n	8009654 <memmove+0x20>
 8009644:	1e43      	subs	r3, r0, #1
 8009646:	42a1      	cmp	r1, r4
 8009648:	d008      	beq.n	800965c <memmove+0x28>
 800964a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800964e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009652:	e7f8      	b.n	8009646 <memmove+0x12>
 8009654:	4601      	mov	r1, r0
 8009656:	4402      	add	r2, r0
 8009658:	428a      	cmp	r2, r1
 800965a:	d100      	bne.n	800965e <memmove+0x2a>
 800965c:	bd10      	pop	{r4, pc}
 800965e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009662:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009666:	e7f7      	b.n	8009658 <memmove+0x24>

08009668 <_sbrk_r>:
 8009668:	b538      	push	{r3, r4, r5, lr}
 800966a:	2300      	movs	r3, #0
 800966c:	4d05      	ldr	r5, [pc, #20]	@ (8009684 <_sbrk_r+0x1c>)
 800966e:	4604      	mov	r4, r0
 8009670:	4608      	mov	r0, r1
 8009672:	602b      	str	r3, [r5, #0]
 8009674:	f7f6 ffe8 	bl	8000648 <_sbrk>
 8009678:	1c43      	adds	r3, r0, #1
 800967a:	d102      	bne.n	8009682 <_sbrk_r+0x1a>
 800967c:	682b      	ldr	r3, [r5, #0]
 800967e:	b103      	cbz	r3, 8009682 <_sbrk_r+0x1a>
 8009680:	6023      	str	r3, [r4, #0]
 8009682:	bd38      	pop	{r3, r4, r5, pc}
 8009684:	20001548 	.word	0x20001548

08009688 <memchr>:
 8009688:	4603      	mov	r3, r0
 800968a:	b510      	push	{r4, lr}
 800968c:	b2c9      	uxtb	r1, r1
 800968e:	4402      	add	r2, r0
 8009690:	4293      	cmp	r3, r2
 8009692:	4618      	mov	r0, r3
 8009694:	d101      	bne.n	800969a <memchr+0x12>
 8009696:	2000      	movs	r0, #0
 8009698:	e003      	b.n	80096a2 <memchr+0x1a>
 800969a:	7804      	ldrb	r4, [r0, #0]
 800969c:	3301      	adds	r3, #1
 800969e:	428c      	cmp	r4, r1
 80096a0:	d1f6      	bne.n	8009690 <memchr+0x8>
 80096a2:	bd10      	pop	{r4, pc}

080096a4 <_realloc_r>:
 80096a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096a8:	4607      	mov	r7, r0
 80096aa:	4614      	mov	r4, r2
 80096ac:	460d      	mov	r5, r1
 80096ae:	b921      	cbnz	r1, 80096ba <_realloc_r+0x16>
 80096b0:	4611      	mov	r1, r2
 80096b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096b6:	f7ff bc49 	b.w	8008f4c <_malloc_r>
 80096ba:	b92a      	cbnz	r2, 80096c8 <_realloc_r+0x24>
 80096bc:	f7ff fbdc 	bl	8008e78 <_free_r>
 80096c0:	4625      	mov	r5, r4
 80096c2:	4628      	mov	r0, r5
 80096c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096c8:	f000 f81a 	bl	8009700 <_malloc_usable_size_r>
 80096cc:	4284      	cmp	r4, r0
 80096ce:	4606      	mov	r6, r0
 80096d0:	d802      	bhi.n	80096d8 <_realloc_r+0x34>
 80096d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80096d6:	d8f4      	bhi.n	80096c2 <_realloc_r+0x1e>
 80096d8:	4621      	mov	r1, r4
 80096da:	4638      	mov	r0, r7
 80096dc:	f7ff fc36 	bl	8008f4c <_malloc_r>
 80096e0:	4680      	mov	r8, r0
 80096e2:	b908      	cbnz	r0, 80096e8 <_realloc_r+0x44>
 80096e4:	4645      	mov	r5, r8
 80096e6:	e7ec      	b.n	80096c2 <_realloc_r+0x1e>
 80096e8:	42b4      	cmp	r4, r6
 80096ea:	4622      	mov	r2, r4
 80096ec:	4629      	mov	r1, r5
 80096ee:	bf28      	it	cs
 80096f0:	4632      	movcs	r2, r6
 80096f2:	f7ff fbb3 	bl	8008e5c <memcpy>
 80096f6:	4629      	mov	r1, r5
 80096f8:	4638      	mov	r0, r7
 80096fa:	f7ff fbbd 	bl	8008e78 <_free_r>
 80096fe:	e7f1      	b.n	80096e4 <_realloc_r+0x40>

08009700 <_malloc_usable_size_r>:
 8009700:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009704:	1f18      	subs	r0, r3, #4
 8009706:	2b00      	cmp	r3, #0
 8009708:	bfbc      	itt	lt
 800970a:	580b      	ldrlt	r3, [r1, r0]
 800970c:	18c0      	addlt	r0, r0, r3
 800970e:	4770      	bx	lr

08009710 <_init>:
 8009710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009712:	bf00      	nop
 8009714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009716:	bc08      	pop	{r3}
 8009718:	469e      	mov	lr, r3
 800971a:	4770      	bx	lr

0800971c <_fini>:
 800971c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800971e:	bf00      	nop
 8009720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009722:	bc08      	pop	{r3}
 8009724:	469e      	mov	lr, r3
 8009726:	4770      	bx	lr
