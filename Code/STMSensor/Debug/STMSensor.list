
STMSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004064  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08004170  08004170  00005170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004298  08004298  00006064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004298  08004298  00005298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042a0  080042a0  00006064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042a0  080042a0  000052a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080042a4  080042a4  000052a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080042a8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  20000064  0800430c  00006064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  0800430c  0000629c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd1c  00000000  00000000  0000608d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021ff  00000000  00000000  00012da9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b68  00000000  00000000  00014fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008d0  00000000  00000000  00015b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018036  00000000  00000000  000163e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ea07  00000000  00000000  0002e416  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000875f6  00000000  00000000  0003ce1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c4413  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033b4  00000000  00000000  000c4458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000c780c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	08004158 	.word	0x08004158

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	08004158 	.word	0x08004158

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <CANok>:
 * @return 1 if last operation succeeded, 0 if failed
 *
 * Use this to check if sends worked
 * Error state persists until next successful operation
 */
uint8_t CANok(void) {
 800015c:	b480      	push	{r7}
 800015e:	af00      	add	r7, sp, #0
    return canOK;
 8000160:	4b02      	ldr	r3, [pc, #8]	@ (800016c <CANok+0x10>)
 8000162:	781b      	ldrb	r3, [r3, #0]
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000000 	.word	0x20000000

08000170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000176:	f000 fd2f 	bl	8000bd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800017a:	f000 f8b5 	bl	80002e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800017e:	f000 f985 	bl	800048c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000182:	f000 f92b 	bl	80003dc <MX_I2C1_Init>
  MX_CAN_Init();
 8000186:	f000 f8f5 	bl	8000374 <MX_CAN_Init>
  MX_USART1_UART_Init();
 800018a:	f000 f955 	bl	8000438 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //CAN_ControllerInit(&hcan);

  /* Attempt to initialize the VL53L0X sensor on I2C bus 1
  * This checks if sensor is connected and responding with correct ID (0xEE) */
  if (VL53L0X_Init(&hi2c1) == HAL_OK) {
 800018e:	484a      	ldr	r0, [pc, #296]	@ (80002b8 <main+0x148>)
 8000190:	f000 fc7c 	bl	8000a8c <VL53L0X_Init>
 8000194:	4603      	mov	r3, r0
 8000196:	2b00      	cmp	r3, #0
 8000198:	d106      	bne.n	80001a8 <main+0x38>
	 /* Sensor found and initialized successfully */
	 SendMessage("VL53L0X Sensor Initialize Success...\n\0");
 800019a:	4848      	ldr	r0, [pc, #288]	@ (80002bc <main+0x14c>)
 800019c:	f000 f9d4 	bl	8000548 <SendMessage>
	 sensorOK = 1; // Sensor is detected online.
 80001a0:	4b47      	ldr	r3, [pc, #284]	@ (80002c0 <main+0x150>)
 80001a2:	2201      	movs	r2, #1
 80001a4:	701a      	strb	r2, [r3, #0]
 80001a6:	e005      	b.n	80001b4 <main+0x44>
  } else {
	 /* Sensor initialization failed - either not connected, wrong wiring,
	  * or not a VL53L0X sensor (wrong ID) */
	 SendMessage("VL53L0X Sensor Initialize Fail...\n\0");
 80001a8:	4846      	ldr	r0, [pc, #280]	@ (80002c4 <main+0x154>)
 80001aa:	f000 f9cd 	bl	8000548 <SendMessage>
	 initError = 1;  // Set error flag to track initialization failure
 80001ae:	4b46      	ldr	r3, [pc, #280]	@ (80002c8 <main+0x158>)
 80001b0:	2201      	movs	r2, #1
 80001b2:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* Check initial sensor state from initialization */
	  if (initError) {
 80001b4:	4b44      	ldr	r3, [pc, #272]	@ (80002c8 <main+0x158>)
 80001b6:	781b      	ldrb	r3, [r3, #0]
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d002      	beq.n	80001c2 <main+0x52>
	     sensorOK = 0;  // Sensor failed during init
 80001bc:	4b40      	ldr	r3, [pc, #256]	@ (80002c0 <main+0x150>)
 80001be:	2200      	movs	r2, #0
 80001c0:	701a      	strb	r2, [r3, #0]
	  }

	  /* Attempt sensor reconnection every ~1 second if it's not working */
	  if (!sensorOK) {
 80001c2:	4b3f      	ldr	r3, [pc, #252]	@ (80002c0 <main+0x150>)
 80001c4:	781b      	ldrb	r3, [r3, #0]
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d126      	bne.n	8000218 <main+0xa8>
	     reconnectTimer++;
 80001ca:	4b40      	ldr	r3, [pc, #256]	@ (80002cc <main+0x15c>)
 80001cc:	781b      	ldrb	r3, [r3, #0]
 80001ce:	3301      	adds	r3, #1
 80001d0:	b2da      	uxtb	r2, r3
 80001d2:	4b3e      	ldr	r3, [pc, #248]	@ (80002cc <main+0x15c>)
 80001d4:	701a      	strb	r2, [r3, #0]
	     if (reconnectTimer >= 50) {  // 50 loops * 20ms = 1 second
 80001d6:	4b3d      	ldr	r3, [pc, #244]	@ (80002cc <main+0x15c>)
 80001d8:	781b      	ldrb	r3, [r3, #0]
 80001da:	2b31      	cmp	r3, #49	@ 0x31
 80001dc:	d91c      	bls.n	8000218 <main+0xa8>
	         reconnectTimer = 0; // Reset reconnectTimer
 80001de:	4b3b      	ldr	r3, [pc, #236]	@ (80002cc <main+0x15c>)
 80001e0:	2200      	movs	r2, #0
 80001e2:	701a      	strb	r2, [r3, #0]

	         /* Reset I2C bus before trying to reconnect
	                  * This clears any stuck I2C conditions */
	                 HAL_I2C_DeInit(&hi2c1);
 80001e4:	4834      	ldr	r0, [pc, #208]	@ (80002b8 <main+0x148>)
 80001e6:	f001 fd4f 	bl	8001c88 <HAL_I2C_DeInit>
	                 HAL_Delay(10);
 80001ea:	200a      	movs	r0, #10
 80001ec:	f000 fd56 	bl	8000c9c <HAL_Delay>
	                 MX_I2C1_Init();  // Reinitialize I2C peripheral
 80001f0:	f000 f8f4 	bl	80003dc <MX_I2C1_Init>
	                 HAL_Delay(10);
 80001f4:	200a      	movs	r0, #10
 80001f6:	f000 fd51 	bl	8000c9c <HAL_Delay>

	         /* Try to initialize sensor again */
	         if (VL53L0X_Init(&hi2c1) == HAL_OK) {
 80001fa:	482f      	ldr	r0, [pc, #188]	@ (80002b8 <main+0x148>)
 80001fc:	f000 fc46 	bl	8000a8c <VL53L0X_Init>
 8000200:	4603      	mov	r3, r0
 8000202:	2b00      	cmp	r3, #0
 8000204:	d108      	bne.n	8000218 <main+0xa8>
	             sensorOK = 1;  // Sensor is back online
 8000206:	4b2e      	ldr	r3, [pc, #184]	@ (80002c0 <main+0x150>)
 8000208:	2201      	movs	r2, #1
 800020a:	701a      	strb	r2, [r3, #0]
	             initError = 0;
 800020c:	4b2e      	ldr	r3, [pc, #184]	@ (80002c8 <main+0x158>)
 800020e:	2200      	movs	r2, #0
 8000210:	701a      	strb	r2, [r3, #0]
	             SendMessage("Sensor reconnected\n\0");
 8000212:	482f      	ldr	r0, [pc, #188]	@ (80002d0 <main+0x160>)
 8000214:	f000 f998 	bl	8000548 <SendMessage>
	         }
	     }
	  }

	  /* Read and transmit sensor data if sensor is working */
	  if (sensorOK) {
 8000218:	4b29      	ldr	r3, [pc, #164]	@ (80002c0 <main+0x150>)
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d014      	beq.n	800024a <main+0xda>
	     uint16_t distance = VL53L0X_ReadDistance(&hi2c1);
 8000220:	4825      	ldr	r0, [pc, #148]	@ (80002b8 <main+0x148>)
 8000222:	f000 fc53 	bl	8000acc <VL53L0X_ReadDistance>
 8000226:	4603      	mov	r3, r0
 8000228:	80fb      	strh	r3, [r7, #6]

	     if (distance != DISTANCE_ERROR) {
 800022a:	88fb      	ldrh	r3, [r7, #6]
 800022c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000230:	4293      	cmp	r3, r2
 8000232:	d004      	beq.n	800023e <main+0xce>
	         /* Valid reading - try to send over USB */
	         SendSensor(distance);
 8000234:	88fb      	ldrh	r3, [r7, #6]
 8000236:	4618      	mov	r0, r3
 8000238:	f000 f994 	bl	8000564 <SendSensor>
 800023c:	e005      	b.n	800024a <main+0xda>
	     } else {
	         /* Sensor read failed - mark as not working */
	         sensorOK = 0;
 800023e:	4b20      	ldr	r3, [pc, #128]	@ (80002c0 <main+0x150>)
 8000240:	2200      	movs	r2, #0
 8000242:	701a      	strb	r2, [r3, #0]
	         SendMessage("Sensor read failed\n\0");
 8000244:	4823      	ldr	r0, [pc, #140]	@ (80002d4 <main+0x164>)
 8000246:	f000 f97f 	bl	8000548 <SendMessage>

	  /* LED Status Indicator (Pull-Up: LOW = ON, HIGH = OFF)
	  * Different patterns for different states:
	  * - All OK: LED ON (solid)
	  * - Any error: LED OFF */
	  if (sensorOK && UARTok() && CANok()) {
 800024a:	4b1d      	ldr	r3, [pc, #116]	@ (80002c0 <main+0x150>)
 800024c:	781b      	ldrb	r3, [r3, #0]
 800024e:	2b00      	cmp	r3, #0
 8000250:	d010      	beq.n	8000274 <main+0x104>
 8000252:	f000 fc11 	bl	8000a78 <UARTok>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d00b      	beq.n	8000274 <main+0x104>
 800025c:	f7ff ff7e 	bl	800015c <CANok>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d006      	beq.n	8000274 <main+0x104>
	     /* Everything working - LED ON */
	     HAL_GPIO_WritePin(LED_BUILTIN, GPIO_PIN_RESET);
 8000266:	2200      	movs	r2, #0
 8000268:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800026c:	481a      	ldr	r0, [pc, #104]	@ (80002d8 <main+0x168>)
 800026e:	f001 fbaf 	bl	80019d0 <HAL_GPIO_WritePin>
 8000272:	e01c      	b.n	80002ae <main+0x13e>
	  } else {
	     /* Something has failed - LED OFF
	      * Could expand this to blink patterns for specific errors */
	     HAL_GPIO_WritePin(LED_BUILTIN, GPIO_PIN_SET);
 8000274:	2201      	movs	r2, #1
 8000276:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800027a:	4817      	ldr	r0, [pc, #92]	@ (80002d8 <main+0x168>)
 800027c:	f001 fba8 	bl	80019d0 <HAL_GPIO_WritePin>

	     /* Print which system failed for debugging */
	     if (!sensorOK) SendMessage("ERROR: Sensor\n\0");
 8000280:	4b0f      	ldr	r3, [pc, #60]	@ (80002c0 <main+0x150>)
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d102      	bne.n	800028e <main+0x11e>
 8000288:	4814      	ldr	r0, [pc, #80]	@ (80002dc <main+0x16c>)
 800028a:	f000 f95d 	bl	8000548 <SendMessage>
	     if (!UARTok())    SendMessage("ERROR: Serial UART\n\0");
 800028e:	f000 fbf3 	bl	8000a78 <UARTok>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d102      	bne.n	800029e <main+0x12e>
 8000298:	4811      	ldr	r0, [pc, #68]	@ (80002e0 <main+0x170>)
 800029a:	f000 f955 	bl	8000548 <SendMessage>
	     if (!CANok())    SendMessage("ERROR: CAN\n\0");
 800029e:	f7ff ff5d 	bl	800015c <CANok>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d102      	bne.n	80002ae <main+0x13e>
 80002a8:	480e      	ldr	r0, [pc, #56]	@ (80002e4 <main+0x174>)
 80002aa:	f000 f94d 	bl	8000548 <SendMessage>
	  }

	  /* Wait 20ms before next loop iteration
	  * This matches FRC CAN bus update period (50Hz) */
	  HAL_Delay(20);
 80002ae:	2014      	movs	r0, #20
 80002b0:	f000 fcf4 	bl	8000c9c <HAL_Delay>
	  if (initError) {
 80002b4:	e77e      	b.n	80001b4 <main+0x44>
 80002b6:	bf00      	nop
 80002b8:	200000a8 	.word	0x200000a8
 80002bc:	08004170 	.word	0x08004170
 80002c0:	20000145 	.word	0x20000145
 80002c4:	08004198 	.word	0x08004198
 80002c8:	20000144 	.word	0x20000144
 80002cc:	20000146 	.word	0x20000146
 80002d0:	080041bc 	.word	0x080041bc
 80002d4:	080041d4 	.word	0x080041d4
 80002d8:	40011000 	.word	0x40011000
 80002dc:	080041ec 	.word	0x080041ec
 80002e0:	080041fc 	.word	0x080041fc
 80002e4:	08004214 	.word	0x08004214

080002e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b090      	sub	sp, #64	@ 0x40
 80002ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ee:	f107 0318 	add.w	r3, r7, #24
 80002f2:	2228      	movs	r2, #40	@ 0x28
 80002f4:	2100      	movs	r1, #0
 80002f6:	4618      	mov	r0, r3
 80002f8:	f003 faa0 	bl	800383c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002fc:	1d3b      	adds	r3, r7, #4
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
 8000302:	605a      	str	r2, [r3, #4]
 8000304:	609a      	str	r2, [r3, #8]
 8000306:	60da      	str	r2, [r3, #12]
 8000308:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800030a:	2301      	movs	r3, #1
 800030c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800030e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000312:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000314:	2300      	movs	r3, #0
 8000316:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000318:	2301      	movs	r3, #1
 800031a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800031c:	2302      	movs	r3, #2
 800031e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000320:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000324:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000326:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800032a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800032c:	f107 0318 	add.w	r3, r7, #24
 8000330:	4618      	mov	r0, r3
 8000332:	f002 fbfb 	bl	8002b2c <HAL_RCC_OscConfig>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800033c:	f000 f8fe 	bl	800053c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000340:	230f      	movs	r3, #15
 8000342:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000344:	2302      	movs	r3, #2
 8000346:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000348:	2300      	movs	r3, #0
 800034a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800034c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000350:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000352:	2300      	movs	r3, #0
 8000354:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	2101      	movs	r1, #1
 800035a:	4618      	mov	r0, r3
 800035c:	f002 fe68 	bl	8003030 <HAL_RCC_ClockConfig>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000366:	f000 f8e9 	bl	800053c <Error_Handler>
  }
}
 800036a:	bf00      	nop
 800036c:	3740      	adds	r7, #64	@ 0x40
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
	...

08000374 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000378:	4b16      	ldr	r3, [pc, #88]	@ (80003d4 <MX_CAN_Init+0x60>)
 800037a:	4a17      	ldr	r2, [pc, #92]	@ (80003d8 <MX_CAN_Init+0x64>)
 800037c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800037e:	4b15      	ldr	r3, [pc, #84]	@ (80003d4 <MX_CAN_Init+0x60>)
 8000380:	2210      	movs	r2, #16
 8000382:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000384:	4b13      	ldr	r3, [pc, #76]	@ (80003d4 <MX_CAN_Init+0x60>)
 8000386:	2200      	movs	r2, #0
 8000388:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800038a:	4b12      	ldr	r3, [pc, #72]	@ (80003d4 <MX_CAN_Init+0x60>)
 800038c:	2200      	movs	r2, #0
 800038e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000390:	4b10      	ldr	r3, [pc, #64]	@ (80003d4 <MX_CAN_Init+0x60>)
 8000392:	2200      	movs	r2, #0
 8000394:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000396:	4b0f      	ldr	r3, [pc, #60]	@ (80003d4 <MX_CAN_Init+0x60>)
 8000398:	2200      	movs	r2, #0
 800039a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800039c:	4b0d      	ldr	r3, [pc, #52]	@ (80003d4 <MX_CAN_Init+0x60>)
 800039e:	2200      	movs	r2, #0
 80003a0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80003a2:	4b0c      	ldr	r3, [pc, #48]	@ (80003d4 <MX_CAN_Init+0x60>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80003a8:	4b0a      	ldr	r3, [pc, #40]	@ (80003d4 <MX_CAN_Init+0x60>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80003ae:	4b09      	ldr	r3, [pc, #36]	@ (80003d4 <MX_CAN_Init+0x60>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80003b4:	4b07      	ldr	r3, [pc, #28]	@ (80003d4 <MX_CAN_Init+0x60>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80003ba:	4b06      	ldr	r3, [pc, #24]	@ (80003d4 <MX_CAN_Init+0x60>)
 80003bc:	2200      	movs	r2, #0
 80003be:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80003c0:	4804      	ldr	r0, [pc, #16]	@ (80003d4 <MX_CAN_Init+0x60>)
 80003c2:	f000 fc8f 	bl	8000ce4 <HAL_CAN_Init>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80003cc:	f000 f8b6 	bl	800053c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80003d0:	bf00      	nop
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	20000080 	.word	0x20000080
 80003d8:	40006400 	.word	0x40006400

080003dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003e0:	4b12      	ldr	r3, [pc, #72]	@ (800042c <MX_I2C1_Init+0x50>)
 80003e2:	4a13      	ldr	r2, [pc, #76]	@ (8000430 <MX_I2C1_Init+0x54>)
 80003e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80003e6:	4b11      	ldr	r3, [pc, #68]	@ (800042c <MX_I2C1_Init+0x50>)
 80003e8:	4a12      	ldr	r2, [pc, #72]	@ (8000434 <MX_I2C1_Init+0x58>)
 80003ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003ec:	4b0f      	ldr	r3, [pc, #60]	@ (800042c <MX_I2C1_Init+0x50>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80003f2:	4b0e      	ldr	r3, [pc, #56]	@ (800042c <MX_I2C1_Init+0x50>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003f8:	4b0c      	ldr	r3, [pc, #48]	@ (800042c <MX_I2C1_Init+0x50>)
 80003fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80003fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000400:	4b0a      	ldr	r3, [pc, #40]	@ (800042c <MX_I2C1_Init+0x50>)
 8000402:	2200      	movs	r2, #0
 8000404:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000406:	4b09      	ldr	r3, [pc, #36]	@ (800042c <MX_I2C1_Init+0x50>)
 8000408:	2200      	movs	r2, #0
 800040a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800040c:	4b07      	ldr	r3, [pc, #28]	@ (800042c <MX_I2C1_Init+0x50>)
 800040e:	2200      	movs	r2, #0
 8000410:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000412:	4b06      	ldr	r3, [pc, #24]	@ (800042c <MX_I2C1_Init+0x50>)
 8000414:	2200      	movs	r2, #0
 8000416:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000418:	4804      	ldr	r0, [pc, #16]	@ (800042c <MX_I2C1_Init+0x50>)
 800041a:	f001 faf1 	bl	8001a00 <HAL_I2C_Init>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000424:	f000 f88a 	bl	800053c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000428:	bf00      	nop
 800042a:	bd80      	pop	{r7, pc}
 800042c:	200000a8 	.word	0x200000a8
 8000430:	40005400 	.word	0x40005400
 8000434:	000186a0 	.word	0x000186a0

08000438 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800043c:	4b11      	ldr	r3, [pc, #68]	@ (8000484 <MX_USART1_UART_Init+0x4c>)
 800043e:	4a12      	ldr	r2, [pc, #72]	@ (8000488 <MX_USART1_UART_Init+0x50>)
 8000440:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000442:	4b10      	ldr	r3, [pc, #64]	@ (8000484 <MX_USART1_UART_Init+0x4c>)
 8000444:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000448:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800044a:	4b0e      	ldr	r3, [pc, #56]	@ (8000484 <MX_USART1_UART_Init+0x4c>)
 800044c:	2200      	movs	r2, #0
 800044e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000450:	4b0c      	ldr	r3, [pc, #48]	@ (8000484 <MX_USART1_UART_Init+0x4c>)
 8000452:	2200      	movs	r2, #0
 8000454:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000456:	4b0b      	ldr	r3, [pc, #44]	@ (8000484 <MX_USART1_UART_Init+0x4c>)
 8000458:	2200      	movs	r2, #0
 800045a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800045c:	4b09      	ldr	r3, [pc, #36]	@ (8000484 <MX_USART1_UART_Init+0x4c>)
 800045e:	220c      	movs	r2, #12
 8000460:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000462:	4b08      	ldr	r3, [pc, #32]	@ (8000484 <MX_USART1_UART_Init+0x4c>)
 8000464:	2200      	movs	r2, #0
 8000466:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000468:	4b06      	ldr	r3, [pc, #24]	@ (8000484 <MX_USART1_UART_Init+0x4c>)
 800046a:	2200      	movs	r2, #0
 800046c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800046e:	4805      	ldr	r0, [pc, #20]	@ (8000484 <MX_USART1_UART_Init+0x4c>)
 8000470:	f002 ff6c 	bl	800334c <HAL_UART_Init>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800047a:	f000 f85f 	bl	800053c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800047e:	bf00      	nop
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	200000fc 	.word	0x200000fc
 8000488:	40013800 	.word	0x40013800

0800048c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b088      	sub	sp, #32
 8000490:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000492:	f107 0310 	add.w	r3, r7, #16
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]
 800049a:	605a      	str	r2, [r3, #4]
 800049c:	609a      	str	r2, [r3, #8]
 800049e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004a0:	4b24      	ldr	r3, [pc, #144]	@ (8000534 <MX_GPIO_Init+0xa8>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	4a23      	ldr	r2, [pc, #140]	@ (8000534 <MX_GPIO_Init+0xa8>)
 80004a6:	f043 0310 	orr.w	r3, r3, #16
 80004aa:	6193      	str	r3, [r2, #24]
 80004ac:	4b21      	ldr	r3, [pc, #132]	@ (8000534 <MX_GPIO_Init+0xa8>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	f003 0310 	and.w	r3, r3, #16
 80004b4:	60fb      	str	r3, [r7, #12]
 80004b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000534 <MX_GPIO_Init+0xa8>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	4a1d      	ldr	r2, [pc, #116]	@ (8000534 <MX_GPIO_Init+0xa8>)
 80004be:	f043 0320 	orr.w	r3, r3, #32
 80004c2:	6193      	str	r3, [r2, #24]
 80004c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000534 <MX_GPIO_Init+0xa8>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	f003 0320 	and.w	r3, r3, #32
 80004cc:	60bb      	str	r3, [r7, #8]
 80004ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d0:	4b18      	ldr	r3, [pc, #96]	@ (8000534 <MX_GPIO_Init+0xa8>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	4a17      	ldr	r2, [pc, #92]	@ (8000534 <MX_GPIO_Init+0xa8>)
 80004d6:	f043 0304 	orr.w	r3, r3, #4
 80004da:	6193      	str	r3, [r2, #24]
 80004dc:	4b15      	ldr	r3, [pc, #84]	@ (8000534 <MX_GPIO_Init+0xa8>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	f003 0304 	and.w	r3, r3, #4
 80004e4:	607b      	str	r3, [r7, #4]
 80004e6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e8:	4b12      	ldr	r3, [pc, #72]	@ (8000534 <MX_GPIO_Init+0xa8>)
 80004ea:	699b      	ldr	r3, [r3, #24]
 80004ec:	4a11      	ldr	r2, [pc, #68]	@ (8000534 <MX_GPIO_Init+0xa8>)
 80004ee:	f043 0308 	orr.w	r3, r3, #8
 80004f2:	6193      	str	r3, [r2, #24]
 80004f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000534 <MX_GPIO_Init+0xa8>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	f003 0308 	and.w	r3, r3, #8
 80004fc:	603b      	str	r3, [r7, #0]
 80004fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Status_LED_GPIO_Port, Status_LED_Pin, GPIO_PIN_RESET);
 8000500:	2200      	movs	r2, #0
 8000502:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000506:	480c      	ldr	r0, [pc, #48]	@ (8000538 <MX_GPIO_Init+0xac>)
 8000508:	f001 fa62 	bl	80019d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Status_LED_Pin */
  GPIO_InitStruct.Pin = Status_LED_Pin;
 800050c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000510:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000512:	2301      	movs	r3, #1
 8000514:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000516:	2301      	movs	r3, #1
 8000518:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800051a:	2303      	movs	r3, #3
 800051c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Status_LED_GPIO_Port, &GPIO_InitStruct);
 800051e:	f107 0310 	add.w	r3, r7, #16
 8000522:	4619      	mov	r1, r3
 8000524:	4804      	ldr	r0, [pc, #16]	@ (8000538 <MX_GPIO_Init+0xac>)
 8000526:	f001 f813 	bl	8001550 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800052a:	bf00      	nop
 800052c:	3720      	adds	r7, #32
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	40021000 	.word	0x40021000
 8000538:	40011000 	.word	0x40011000

0800053c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000540:	b672      	cpsid	i
}
 8000542:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000544:	bf00      	nop
 8000546:	e7fd      	b.n	8000544 <Error_Handler+0x8>

08000548 <SendMessage>:
 * @param str: Null-terminated string to send
 *
 * Automatically splits long strings into multiple 8-byte frames
 * Sends until '\0' is reached
 */
void SendMessage(const char *msg) {
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
   //CANSendMessage(msg);
   UARTSendMessage(&huart1, msg);
 8000550:	6879      	ldr	r1, [r7, #4]
 8000552:	4803      	ldr	r0, [pc, #12]	@ (8000560 <SendMessage+0x18>)
 8000554:	f000 fa2a 	bl	80009ac <UARTSendMessage>
}
 8000558:	bf00      	nop
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	200000fc 	.word	0x200000fc

08000564 <SendSensor>:
 * @brief Send sensor distance reading over CAN and USB
 * @param mm: Distance in millimeters (0-65535)
 *
 * Formats and sends: "Distance: XXXmm\r\n"
 */
void SendSensor(uint16_t distance) {
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	80fb      	strh	r3, [r7, #6]
   //CANSendSensor(distance);
   UARTSendSensor(&huart1, distance);
 800056e:	88fb      	ldrh	r3, [r7, #6]
 8000570:	4619      	mov	r1, r3
 8000572:	4803      	ldr	r0, [pc, #12]	@ (8000580 <SendSensor+0x1c>)
 8000574:	f000 fa3e 	bl	80009f4 <UARTSendSensor>
}
 8000578:	bf00      	nop
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	200000fc 	.word	0x200000fc

08000584 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800058a:	4b15      	ldr	r3, [pc, #84]	@ (80005e0 <HAL_MspInit+0x5c>)
 800058c:	699b      	ldr	r3, [r3, #24]
 800058e:	4a14      	ldr	r2, [pc, #80]	@ (80005e0 <HAL_MspInit+0x5c>)
 8000590:	f043 0301 	orr.w	r3, r3, #1
 8000594:	6193      	str	r3, [r2, #24]
 8000596:	4b12      	ldr	r3, [pc, #72]	@ (80005e0 <HAL_MspInit+0x5c>)
 8000598:	699b      	ldr	r3, [r3, #24]
 800059a:	f003 0301 	and.w	r3, r3, #1
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a2:	4b0f      	ldr	r3, [pc, #60]	@ (80005e0 <HAL_MspInit+0x5c>)
 80005a4:	69db      	ldr	r3, [r3, #28]
 80005a6:	4a0e      	ldr	r2, [pc, #56]	@ (80005e0 <HAL_MspInit+0x5c>)
 80005a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ac:	61d3      	str	r3, [r2, #28]
 80005ae:	4b0c      	ldr	r3, [pc, #48]	@ (80005e0 <HAL_MspInit+0x5c>)
 80005b0:	69db      	ldr	r3, [r3, #28]
 80005b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80005ba:	4b0a      	ldr	r3, [pc, #40]	@ (80005e4 <HAL_MspInit+0x60>)
 80005bc:	685b      	ldr	r3, [r3, #4]
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	4a04      	ldr	r2, [pc, #16]	@ (80005e4 <HAL_MspInit+0x60>)
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005d6:	bf00      	nop
 80005d8:	3714      	adds	r7, #20
 80005da:	46bd      	mov	sp, r7
 80005dc:	bc80      	pop	{r7}
 80005de:	4770      	bx	lr
 80005e0:	40021000 	.word	0x40021000
 80005e4:	40010000 	.word	0x40010000

080005e8 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b08a      	sub	sp, #40	@ 0x28
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f0:	f107 0314 	add.w	r3, r7, #20
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a2d      	ldr	r2, [pc, #180]	@ (80006b8 <HAL_CAN_MspInit+0xd0>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d153      	bne.n	80006b0 <HAL_CAN_MspInit+0xc8>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000608:	4b2c      	ldr	r3, [pc, #176]	@ (80006bc <HAL_CAN_MspInit+0xd4>)
 800060a:	69db      	ldr	r3, [r3, #28]
 800060c:	4a2b      	ldr	r2, [pc, #172]	@ (80006bc <HAL_CAN_MspInit+0xd4>)
 800060e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000612:	61d3      	str	r3, [r2, #28]
 8000614:	4b29      	ldr	r3, [pc, #164]	@ (80006bc <HAL_CAN_MspInit+0xd4>)
 8000616:	69db      	ldr	r3, [r3, #28]
 8000618:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800061c:	613b      	str	r3, [r7, #16]
 800061e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000620:	4b26      	ldr	r3, [pc, #152]	@ (80006bc <HAL_CAN_MspInit+0xd4>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	4a25      	ldr	r2, [pc, #148]	@ (80006bc <HAL_CAN_MspInit+0xd4>)
 8000626:	f043 0308 	orr.w	r3, r3, #8
 800062a:	6193      	str	r3, [r2, #24]
 800062c:	4b23      	ldr	r3, [pc, #140]	@ (80006bc <HAL_CAN_MspInit+0xd4>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	f003 0308 	and.w	r3, r3, #8
 8000634:	60fb      	str	r3, [r7, #12]
 8000636:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000638:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800063c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800063e:	2300      	movs	r3, #0
 8000640:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	2300      	movs	r3, #0
 8000644:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	4619      	mov	r1, r3
 800064c:	481c      	ldr	r0, [pc, #112]	@ (80006c0 <HAL_CAN_MspInit+0xd8>)
 800064e:	f000 ff7f 	bl	8001550 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000652:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000656:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000658:	2302      	movs	r3, #2
 800065a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800065c:	2303      	movs	r3, #3
 800065e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	4619      	mov	r1, r3
 8000666:	4816      	ldr	r0, [pc, #88]	@ (80006c0 <HAL_CAN_MspInit+0xd8>)
 8000668:	f000 ff72 	bl	8001550 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 800066c:	4b15      	ldr	r3, [pc, #84]	@ (80006c4 <HAL_CAN_MspInit+0xdc>)
 800066e:	685b      	ldr	r3, [r3, #4]
 8000670:	627b      	str	r3, [r7, #36]	@ 0x24
 8000672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000674:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8000678:	627b      	str	r3, [r7, #36]	@ 0x24
 800067a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800067c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000680:	627b      	str	r3, [r7, #36]	@ 0x24
 8000682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000684:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000688:	627b      	str	r3, [r7, #36]	@ 0x24
 800068a:	4a0e      	ldr	r2, [pc, #56]	@ (80006c4 <HAL_CAN_MspInit+0xdc>)
 800068c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800068e:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8000690:	2200      	movs	r2, #0
 8000692:	2100      	movs	r1, #0
 8000694:	2013      	movs	r0, #19
 8000696:	f000 ff24 	bl	80014e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800069a:	2013      	movs	r0, #19
 800069c:	f000 ff3d 	bl	800151a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2100      	movs	r1, #0
 80006a4:	2014      	movs	r0, #20
 80006a6:	f000 ff1c 	bl	80014e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80006aa:	2014      	movs	r0, #20
 80006ac:	f000 ff35 	bl	800151a <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 80006b0:	bf00      	nop
 80006b2:	3728      	adds	r7, #40	@ 0x28
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40006400 	.word	0x40006400
 80006bc:	40021000 	.word	0x40021000
 80006c0:	40010c00 	.word	0x40010c00
 80006c4:	40010000 	.word	0x40010000

080006c8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b088      	sub	sp, #32
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d0:	f107 0310 	add.w	r3, r7, #16
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a15      	ldr	r2, [pc, #84]	@ (8000738 <HAL_I2C_MspInit+0x70>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d123      	bne.n	8000730 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e8:	4b14      	ldr	r3, [pc, #80]	@ (800073c <HAL_I2C_MspInit+0x74>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	4a13      	ldr	r2, [pc, #76]	@ (800073c <HAL_I2C_MspInit+0x74>)
 80006ee:	f043 0308 	orr.w	r3, r3, #8
 80006f2:	6193      	str	r3, [r2, #24]
 80006f4:	4b11      	ldr	r3, [pc, #68]	@ (800073c <HAL_I2C_MspInit+0x74>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	f003 0308 	and.w	r3, r3, #8
 80006fc:	60fb      	str	r3, [r7, #12]
 80006fe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000700:	23c0      	movs	r3, #192	@ 0xc0
 8000702:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000704:	2312      	movs	r3, #18
 8000706:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000708:	2303      	movs	r3, #3
 800070a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800070c:	f107 0310 	add.w	r3, r7, #16
 8000710:	4619      	mov	r1, r3
 8000712:	480b      	ldr	r0, [pc, #44]	@ (8000740 <HAL_I2C_MspInit+0x78>)
 8000714:	f000 ff1c 	bl	8001550 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000718:	4b08      	ldr	r3, [pc, #32]	@ (800073c <HAL_I2C_MspInit+0x74>)
 800071a:	69db      	ldr	r3, [r3, #28]
 800071c:	4a07      	ldr	r2, [pc, #28]	@ (800073c <HAL_I2C_MspInit+0x74>)
 800071e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000722:	61d3      	str	r3, [r2, #28]
 8000724:	4b05      	ldr	r3, [pc, #20]	@ (800073c <HAL_I2C_MspInit+0x74>)
 8000726:	69db      	ldr	r3, [r3, #28]
 8000728:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000730:	bf00      	nop
 8000732:	3720      	adds	r7, #32
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40005400 	.word	0x40005400
 800073c:	40021000 	.word	0x40021000
 8000740:	40010c00 	.word	0x40010c00

08000744 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a0a      	ldr	r2, [pc, #40]	@ (800077c <HAL_I2C_MspDeInit+0x38>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d10d      	bne.n	8000772 <HAL_I2C_MspDeInit+0x2e>
  {
    /* USER CODE BEGIN I2C1_MspDeInit 0 */

    /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000756:	4b0a      	ldr	r3, [pc, #40]	@ (8000780 <HAL_I2C_MspDeInit+0x3c>)
 8000758:	69db      	ldr	r3, [r3, #28]
 800075a:	4a09      	ldr	r2, [pc, #36]	@ (8000780 <HAL_I2C_MspDeInit+0x3c>)
 800075c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000760:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8000762:	2140      	movs	r1, #64	@ 0x40
 8000764:	4807      	ldr	r0, [pc, #28]	@ (8000784 <HAL_I2C_MspDeInit+0x40>)
 8000766:	f001 f877 	bl	8001858 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800076a:	2180      	movs	r1, #128	@ 0x80
 800076c:	4805      	ldr	r0, [pc, #20]	@ (8000784 <HAL_I2C_MspDeInit+0x40>)
 800076e:	f001 f873 	bl	8001858 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C1_MspDeInit 1 */

    /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40005400 	.word	0x40005400
 8000780:	40021000 	.word	0x40021000
 8000784:	40010c00 	.word	0x40010c00

08000788 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b088      	sub	sp, #32
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000790:	f107 0310 	add.w	r3, r7, #16
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a1c      	ldr	r2, [pc, #112]	@ (8000814 <HAL_UART_MspInit+0x8c>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d131      	bne.n	800080c <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000818 <HAL_UART_MspInit+0x90>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	4a1a      	ldr	r2, [pc, #104]	@ (8000818 <HAL_UART_MspInit+0x90>)
 80007ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007b2:	6193      	str	r3, [r2, #24]
 80007b4:	4b18      	ldr	r3, [pc, #96]	@ (8000818 <HAL_UART_MspInit+0x90>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c0:	4b15      	ldr	r3, [pc, #84]	@ (8000818 <HAL_UART_MspInit+0x90>)
 80007c2:	699b      	ldr	r3, [r3, #24]
 80007c4:	4a14      	ldr	r2, [pc, #80]	@ (8000818 <HAL_UART_MspInit+0x90>)
 80007c6:	f043 0304 	orr.w	r3, r3, #4
 80007ca:	6193      	str	r3, [r2, #24]
 80007cc:	4b12      	ldr	r3, [pc, #72]	@ (8000818 <HAL_UART_MspInit+0x90>)
 80007ce:	699b      	ldr	r3, [r3, #24]
 80007d0:	f003 0304 	and.w	r3, r3, #4
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80007dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007de:	2302      	movs	r3, #2
 80007e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007e2:	2303      	movs	r3, #3
 80007e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e6:	f107 0310 	add.w	r3, r7, #16
 80007ea:	4619      	mov	r1, r3
 80007ec:	480b      	ldr	r0, [pc, #44]	@ (800081c <HAL_UART_MspInit+0x94>)
 80007ee:	f000 feaf 	bl	8001550 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000800:	f107 0310 	add.w	r3, r7, #16
 8000804:	4619      	mov	r1, r3
 8000806:	4805      	ldr	r0, [pc, #20]	@ (800081c <HAL_UART_MspInit+0x94>)
 8000808:	f000 fea2 	bl	8001550 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800080c:	bf00      	nop
 800080e:	3720      	adds	r7, #32
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40013800 	.word	0x40013800
 8000818:	40021000 	.word	0x40021000
 800081c:	40010800 	.word	0x40010800

08000820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000824:	bf00      	nop
 8000826:	e7fd      	b.n	8000824 <NMI_Handler+0x4>

08000828 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800082c:	bf00      	nop
 800082e:	e7fd      	b.n	800082c <HardFault_Handler+0x4>

08000830 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000834:	bf00      	nop
 8000836:	e7fd      	b.n	8000834 <MemManage_Handler+0x4>

08000838 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800083c:	bf00      	nop
 800083e:	e7fd      	b.n	800083c <BusFault_Handler+0x4>

08000840 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000844:	bf00      	nop
 8000846:	e7fd      	b.n	8000844 <UsageFault_Handler+0x4>

08000848 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr

08000854 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr

08000860 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	bc80      	pop	{r7}
 800086a:	4770      	bx	lr

0800086c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000870:	f000 f9f8 	bl	8000c64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}

08000878 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800087c:	4802      	ldr	r0, [pc, #8]	@ (8000888 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 800087e:	f000 fb2c 	bl	8000eda <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000080 	.word	0x20000080

0800088c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000890:	4802      	ldr	r0, [pc, #8]	@ (800089c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000892:	f000 fb22 	bl	8000eda <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000080 	.word	0x20000080

080008a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008a8:	4a14      	ldr	r2, [pc, #80]	@ (80008fc <_sbrk+0x5c>)
 80008aa:	4b15      	ldr	r3, [pc, #84]	@ (8000900 <_sbrk+0x60>)
 80008ac:	1ad3      	subs	r3, r2, r3
 80008ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008b4:	4b13      	ldr	r3, [pc, #76]	@ (8000904 <_sbrk+0x64>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d102      	bne.n	80008c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008bc:	4b11      	ldr	r3, [pc, #68]	@ (8000904 <_sbrk+0x64>)
 80008be:	4a12      	ldr	r2, [pc, #72]	@ (8000908 <_sbrk+0x68>)
 80008c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008c2:	4b10      	ldr	r3, [pc, #64]	@ (8000904 <_sbrk+0x64>)
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4413      	add	r3, r2
 80008ca:	693a      	ldr	r2, [r7, #16]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d207      	bcs.n	80008e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008d0:	f002 ffbc 	bl	800384c <__errno>
 80008d4:	4603      	mov	r3, r0
 80008d6:	220c      	movs	r2, #12
 80008d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008da:	f04f 33ff 	mov.w	r3, #4294967295
 80008de:	e009      	b.n	80008f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008e0:	4b08      	ldr	r3, [pc, #32]	@ (8000904 <_sbrk+0x64>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008e6:	4b07      	ldr	r3, [pc, #28]	@ (8000904 <_sbrk+0x64>)
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4413      	add	r3, r2
 80008ee:	4a05      	ldr	r2, [pc, #20]	@ (8000904 <_sbrk+0x64>)
 80008f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008f2:	68fb      	ldr	r3, [r7, #12]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3718      	adds	r7, #24
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20005000 	.word	0x20005000
 8000900:	00000400 	.word	0x00000400
 8000904:	20000148 	.word	0x20000148
 8000908:	200002a0 	.word	0x200002a0

0800090c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr

08000918 <sendUARTFrame>:
 * @param msg: Pointer to message structure to send
 *
 * Waits for UART to be ready before sending (with timeout)
 * Sets uartOK to 0 if timeout or send fails
 */
static void sendUARTFrame(UART_HandleTypeDef* huart, UARTMessage_t* msg) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	6039      	str	r1, [r7, #0]
    uint32_t tickstart = HAL_GetTick();
 8000922:	f000 f9b1 	bl	8000c88 <HAL_GetTick>
 8000926:	60f8      	str	r0, [r7, #12]

    /* Validate parameters */
    if (huart == NULL || msg == NULL || msg->data == NULL) {
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d006      	beq.n	800093c <sendUARTFrame+0x24>
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d003      	beq.n	800093c <sendUARTFrame+0x24>
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d114      	bne.n	8000966 <sendUARTFrame+0x4e>
        uartOK = 0;
 800093c:	4b19      	ldr	r3, [pc, #100]	@ (80009a4 <sendUARTFrame+0x8c>)
 800093e:	2200      	movs	r2, #0
 8000940:	701a      	strb	r2, [r3, #0]
        lastStatus = HAL_ERROR;
 8000942:	4b19      	ldr	r3, [pc, #100]	@ (80009a8 <sendUARTFrame+0x90>)
 8000944:	2201      	movs	r2, #1
 8000946:	701a      	strb	r2, [r3, #0]
        return;
 8000948:	e029      	b.n	800099e <sendUARTFrame+0x86>
    }

    /* Wait for UART to be ready (with timeout) */
    while (!isUARTReady(huart)) {
        if ((HAL_GetTick() - tickstart) > UART_READY_TIMEOUT_MS) {
 800094a:	f000 f99d 	bl	8000c88 <HAL_GetTick>
 800094e:	4602      	mov	r2, r0
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	1ad3      	subs	r3, r2, r3
 8000954:	2b64      	cmp	r3, #100	@ 0x64
 8000956:	d906      	bls.n	8000966 <sendUARTFrame+0x4e>
            uartOK = 0;
 8000958:	4b12      	ldr	r3, [pc, #72]	@ (80009a4 <sendUARTFrame+0x8c>)
 800095a:	2200      	movs	r2, #0
 800095c:	701a      	strb	r2, [r3, #0]
            lastStatus = HAL_TIMEOUT;
 800095e:	4b12      	ldr	r3, [pc, #72]	@ (80009a8 <sendUARTFrame+0x90>)
 8000960:	2203      	movs	r2, #3
 8000962:	701a      	strb	r2, [r3, #0]
            return;
 8000964:	e01b      	b.n	800099e <sendUARTFrame+0x86>
    while (!isUARTReady(huart)) {
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f000 f85e 	bl	8000a28 <isUARTReady>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d0eb      	beq.n	800094a <sendUARTFrame+0x32>
        }
    }

    /* Send the message */
    lastStatus = HAL_UART_Transmit(huart, msg->data, msg->length, UART_TX_TIMEOUT_MS);
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	6819      	ldr	r1, [r3, #0]
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	889a      	ldrh	r2, [r3, #4]
 800097a:	2332      	movs	r3, #50	@ 0x32
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f002 fd35 	bl	80033ec <HAL_UART_Transmit>
 8000982:	4603      	mov	r3, r0
 8000984:	461a      	mov	r2, r3
 8000986:	4b08      	ldr	r3, [pc, #32]	@ (80009a8 <sendUARTFrame+0x90>)
 8000988:	701a      	strb	r2, [r3, #0]

    /* Update status flag based on result */
    uartOK = (lastStatus == HAL_OK) ? 1 : 0;
 800098a:	4b07      	ldr	r3, [pc, #28]	@ (80009a8 <sendUARTFrame+0x90>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b00      	cmp	r3, #0
 8000990:	bf0c      	ite	eq
 8000992:	2301      	moveq	r3, #1
 8000994:	2300      	movne	r3, #0
 8000996:	b2db      	uxtb	r3, r3
 8000998:	461a      	mov	r2, r3
 800099a:	4b02      	ldr	r3, [pc, #8]	@ (80009a4 <sendUARTFrame+0x8c>)
 800099c:	701a      	strb	r2, [r3, #0]
}
 800099e:	3710      	adds	r7, #16
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000008 	.word	0x20000008
 80009a8:	2000014c 	.word	0x2000014c

080009ac <UARTSendMessage>:
 * @param str: Null-terminated string to send
 *
 * Sends complete string in one transmission
 * Automatically handles length calculation
 */
void UARTSendMessage(UART_HandleTypeDef* huart, const char* str) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	6039      	str	r1, [r7, #0]
    UARTMessage_t msg;

    if (str == NULL) {
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d106      	bne.n	80009ca <UARTSendMessage+0x1e>
        uartOK = 0;
 80009bc:	4b0b      	ldr	r3, [pc, #44]	@ (80009ec <UARTSendMessage+0x40>)
 80009be:	2200      	movs	r2, #0
 80009c0:	701a      	strb	r2, [r3, #0]
        lastStatus = HAL_ERROR;
 80009c2:	4b0b      	ldr	r3, [pc, #44]	@ (80009f0 <UARTSendMessage+0x44>)
 80009c4:	2201      	movs	r2, #1
 80009c6:	701a      	strb	r2, [r3, #0]
 80009c8:	e00d      	b.n	80009e6 <UARTSendMessage+0x3a>
        return;
    }

    msg.data = (uint8_t*)str;
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	60bb      	str	r3, [r7, #8]
    msg.length = strlen(str);
 80009ce:	6838      	ldr	r0, [r7, #0]
 80009d0:	f7ff fbbc 	bl	800014c <strlen>
 80009d4:	4603      	mov	r3, r0
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	81bb      	strh	r3, [r7, #12]

    sendUARTFrame(huart, &msg);
 80009da:	f107 0308 	add.w	r3, r7, #8
 80009de:	4619      	mov	r1, r3
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f7ff ff99 	bl	8000918 <sendUARTFrame>
}
 80009e6:	3710      	adds	r7, #16
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20000008 	.word	0x20000008
 80009f0:	2000014c 	.word	0x2000014c

080009f4 <UARTSendSensor>:
 * @param mm: Distance in millimeters (0-65535)
 *
 * Formats and sends: "Distance: XXXmm\r\n"
 * Uses UARTSendMessage internally
 */
void UARTSendSensor(UART_HandleTypeDef* huart, uint16_t mm) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	@ 0x28
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	460b      	mov	r3, r1
 80009fe:	807b      	strh	r3, [r7, #2]
    char buffer[32];

    /* Format the distance message */
    snprintf(buffer, sizeof(buffer), "Distance: %umm\r\n", mm);
 8000a00:	887b      	ldrh	r3, [r7, #2]
 8000a02:	f107 0008 	add.w	r0, r7, #8
 8000a06:	4a07      	ldr	r2, [pc, #28]	@ (8000a24 <UARTSendSensor+0x30>)
 8000a08:	2120      	movs	r1, #32
 8000a0a:	f002 fee1 	bl	80037d0 <sniprintf>

    UARTSendMessage(huart, buffer);
 8000a0e:	f107 0308 	add.w	r3, r7, #8
 8000a12:	4619      	mov	r1, r3
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f7ff ffc9 	bl	80009ac <UARTSendMessage>
}
 8000a1a:	bf00      	nop
 8000a1c:	3728      	adds	r7, #40	@ 0x28
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	08004224 	.word	0x08004224

08000a28 <isUARTReady>:
 * @param huart: Pointer to UART handle
 * @return 1 if ready, 0 if not ready
 *
 * Also sets uartOK to 0 if not ready (for debugging)
 */
uint8_t isUARTReady(UART_HandleTypeDef* huart) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
    HAL_UART_StateTypeDef state;
    uint8_t ready;

    /* Check if handle is valid */
    if (huart == NULL) {
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d104      	bne.n	8000a40 <isUARTReady+0x18>
        uartOK = 0;
 8000a36:	4b0f      	ldr	r3, [pc, #60]	@ (8000a74 <isUARTReady+0x4c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	701a      	strb	r2, [r3, #0]
        return 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	e015      	b.n	8000a6c <isUARTReady+0x44>
    }

    /* Check UART state */
    state = HAL_UART_GetState(huart);
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f002 fd5e 	bl	8003502 <HAL_UART_GetState>
 8000a46:	4603      	mov	r3, r0
 8000a48:	73fb      	strb	r3, [r7, #15]

    /* UART is ready if in READY state or only RX is busy */
    ready = (state == HAL_UART_STATE_READY ||
             state == HAL_UART_STATE_BUSY_RX) ? 1 : 0;
 8000a4a:	7bfb      	ldrb	r3, [r7, #15]
 8000a4c:	2b20      	cmp	r3, #32
 8000a4e:	d002      	beq.n	8000a56 <isUARTReady+0x2e>
 8000a50:	7bfb      	ldrb	r3, [r7, #15]
 8000a52:	2b22      	cmp	r3, #34	@ 0x22
 8000a54:	d101      	bne.n	8000a5a <isUARTReady+0x32>
 8000a56:	2301      	movs	r3, #1
 8000a58:	e000      	b.n	8000a5c <isUARTReady+0x34>
 8000a5a:	2300      	movs	r3, #0
    ready = (state == HAL_UART_STATE_READY ||
 8000a5c:	73bb      	strb	r3, [r7, #14]

    /* Set debug flag if not ready */
    if (!ready) {
 8000a5e:	7bbb      	ldrb	r3, [r7, #14]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d102      	bne.n	8000a6a <isUARTReady+0x42>
        uartOK = 0;
 8000a64:	4b03      	ldr	r3, [pc, #12]	@ (8000a74 <isUARTReady+0x4c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	701a      	strb	r2, [r3, #0]
    }

    return ready;
 8000a6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3710      	adds	r7, #16
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20000008 	.word	0x20000008

08000a78 <UARTok>:
 * @return 1 if last operation succeeded, 0 if failed
 *
 * Use this to check if sends worked
 * Error state persists until next successful operation
 */
uint8_t UARTok(void) {
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
    return uartOK;
 8000a7c:	4b02      	ldr	r3, [pc, #8]	@ (8000a88 <UARTok+0x10>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr
 8000a88:	20000008 	.word	0x20000008

08000a8c <VL53L0X_Init>:
 * @return HAL_OK if sensor found, HAL_ERROR if something's wrong
 * 
 * We ask the sensor for its ID number to make sure it's really there
 * and that it's the right type of sensor (VL53L0X always returns 0xEE)
 */
HAL_StatusTypeDef VL53L0X_Init(I2C_HandleTypeDef *hi2c) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b088      	sub	sp, #32
 8000a90:	af04      	add	r7, sp, #16
 8000a92:	6078      	str	r0, [r7, #4]
    uint8_t sensor_id;  // Variable to store the ID we read from sensor
    
    /* Read the sensor's ID register at address 0xC0 */
    if (HAL_I2C_Mem_Read(hi2c,                    // Use this I2C bus
 8000a94:	2364      	movs	r3, #100	@ 0x64
 8000a96:	9302      	str	r3, [sp, #8]
 8000a98:	2301      	movs	r3, #1
 8000a9a:	9301      	str	r3, [sp, #4]
 8000a9c:	f107 030f 	add.w	r3, r7, #15
 8000aa0:	9300      	str	r3, [sp, #0]
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	22c0      	movs	r2, #192	@ 0xc0
 8000aa6:	2152      	movs	r1, #82	@ 0x52
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f001 fa17 	bl	8001edc <HAL_I2C_Mem_Read>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <VL53L0X_Init+0x2c>
                         &sensor_id,               // Store the ID here
                         1,                        // Read 1 byte
                         I2C_TIMEOUT_MS) != HAL_OK) {  // Wait max 100ms
        
        /* If we can't read the ID, sensor is probably not connected */
        return HAL_ERROR;  
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	e005      	b.n	8000ac4 <VL53L0X_Init+0x38>
    }
    
    /* Check if the ID matches what we expect (0xEE)
     * All genuine VL53L0X sensors have this same ID */
    if (sensor_id != VL53L0X_EXPECTED_ID) {
 8000ab8:	7bfb      	ldrb	r3, [r7, #15]
 8000aba:	2bee      	cmp	r3, #238	@ 0xee
 8000abc:	d001      	beq.n	8000ac2 <VL53L0X_Init+0x36>
        /* Wrong ID means it's not a VL53L0X sensor */
        return HAL_ERROR;  
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e000      	b.n	8000ac4 <VL53L0X_Init+0x38>
    }
    
    /* Sensor found and responding correctly */
    return HAL_OK;  
 8000ac2:	2300      	movs	r3, #0
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3710      	adds	r7, #16
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <VL53L0X_ReadDistance>:
 * The measurement process:
 * 1. Tell sensor to take a measurement
 * 2. Wait for it to finish (check status register)
 * 3. Read the 16-bit result from the distance register
 */
uint16_t VL53L0X_ReadDistance(I2C_HandleTypeDef *hi2c) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08a      	sub	sp, #40	@ 0x28
 8000ad0:	af04      	add	r7, sp, #16
 8000ad2:	6078      	str	r0, [r7, #4]
    uint8_t distance_bytes[2];  // Array to store the 2-byte distance value
    uint8_t command;            // Command byte to send to sensor
    uint8_t status;             // Sensor's status byte
    uint32_t wait_loops = 0;    // Counter to prevent waiting forever
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]
    
    /* Tell sensor to start a measurement by writing 0x01 to register 0x00 */
    command = START_SINGLE_MEASURE;  // 0x01 = take one measurement
 8000ad8:	2301      	movs	r3, #1
 8000ada:	73fb      	strb	r3, [r7, #15]
    
    if (HAL_I2C_Mem_Write(hi2c,                   // Use this I2C bus
 8000adc:	2364      	movs	r3, #100	@ 0x64
 8000ade:	9302      	str	r3, [sp, #8]
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	9301      	str	r3, [sp, #4]
 8000ae4:	f107 030f 	add.w	r3, r7, #15
 8000ae8:	9300      	str	r3, [sp, #0]
 8000aea:	2301      	movs	r3, #1
 8000aec:	2200      	movs	r2, #0
 8000aee:	2152      	movs	r1, #82	@ 0x52
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f001 f8f9 	bl	8001ce8 <HAL_I2C_Mem_Write>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d002      	beq.n	8000b02 <VL53L0X_ReadDistance+0x36>
                          &command,                // Send this command (0x01)
                          1,                       // Send 1 byte
                          I2C_TIMEOUT_MS) != HAL_OK) {  // Wait max 100ms
        
        /* Couldn't send command to sensor */
        return DISTANCE_ERROR;  // Return error value (0xFFFF)
 8000afc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b00:	e040      	b.n	8000b84 <VL53L0X_ReadDistance+0xb8>
    /* Wait for measurement to complete
     * The sensor sets bit 0 of the status register to 1 when done
     * We keep checking this bit until it becomes 1 */
    do {
        /* Read the status register at address 0x14 */
        if (HAL_I2C_Mem_Read(hi2c,                    // Use this I2C bus
 8000b02:	2364      	movs	r3, #100	@ 0x64
 8000b04:	9302      	str	r3, [sp, #8]
 8000b06:	2301      	movs	r3, #1
 8000b08:	9301      	str	r3, [sp, #4]
 8000b0a:	f107 030e 	add.w	r3, r7, #14
 8000b0e:	9300      	str	r3, [sp, #0]
 8000b10:	2301      	movs	r3, #1
 8000b12:	2214      	movs	r2, #20
 8000b14:	2152      	movs	r1, #82	@ 0x52
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f001 f9e0 	bl	8001edc <HAL_I2C_Mem_Read>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d002      	beq.n	8000b28 <VL53L0X_ReadDistance+0x5c>
                             &status,                  // Store status here
                             1,                        // Read 1 byte
                             I2C_TIMEOUT_MS) != HAL_OK) {  // Wait max 100ms
            
            /* Couldn't read status */
            return DISTANCE_ERROR;  
 8000b22:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b26:	e02d      	b.n	8000b84 <VL53L0X_ReadDistance+0xb8>
        }
        
        /* Check if we've been waiting too long (>100ms is unusual) */
        wait_loops++;
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	617b      	str	r3, [r7, #20]
        if (wait_loops > MEASUREMENT_TIMEOUT_MS) {
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	2b64      	cmp	r3, #100	@ 0x64
 8000b32:	d902      	bls.n	8000b3a <VL53L0X_ReadDistance+0x6e>
            /* Sensor is taking too long, something's wrong */
            return DISTANCE_ERROR;
 8000b34:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b38:	e024      	b.n	8000b84 <VL53L0X_ReadDistance+0xb8>
        }
        
        /* Wait 1 millisecond before checking again */
        HAL_Delay(1);
 8000b3a:	2001      	movs	r0, #1
 8000b3c:	f000 f8ae 	bl	8000c9c <HAL_Delay>
        
        /* Keep looping while bit 0 is still 0 (not ready) */
    } while ((status & MEASUREMENT_READY_BIT) == 0);
 8000b40:	7bbb      	ldrb	r3, [r7, #14]
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d0db      	beq.n	8000b02 <VL53L0X_ReadDistance+0x36>
    
    /* Measurement is ready! Read the distance value (2 bytes at address 0x1E) */
    if (HAL_I2C_Mem_Read(hi2c,                    // Use this I2C bus
 8000b4a:	2364      	movs	r3, #100	@ 0x64
 8000b4c:	9302      	str	r3, [sp, #8]
 8000b4e:	2302      	movs	r3, #2
 8000b50:	9301      	str	r3, [sp, #4]
 8000b52:	f107 0310 	add.w	r3, r7, #16
 8000b56:	9300      	str	r3, [sp, #0]
 8000b58:	2301      	movs	r3, #1
 8000b5a:	221e      	movs	r2, #30
 8000b5c:	2152      	movs	r1, #82	@ 0x52
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f001 f9bc 	bl	8001edc <HAL_I2C_Mem_Read>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d002      	beq.n	8000b70 <VL53L0X_ReadDistance+0xa4>
                         distance_bytes,           // Store 2 bytes here
                         2,                        // Read 2 bytes
                         I2C_TIMEOUT_MS) != HAL_OK) {  // Wait max 100ms
        
        /* Couldn't read the distance */
        return DISTANCE_ERROR;
 8000b6a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b6e:	e009      	b.n	8000b84 <VL53L0X_ReadDistance+0xb8>
    
    /* Combine the 2 bytes into one 16-bit number
     * First byte is the high byte (multiply by 256)
     * Second byte is the low byte
     * Example: if bytes are [0x01, 0x2C], distance = (1 * 256) + 44 = 300mm */
    uint16_t distance = (distance_bytes[0] << 8) | distance_bytes[1];
 8000b70:	7c3b      	ldrb	r3, [r7, #16]
 8000b72:	b21b      	sxth	r3, r3
 8000b74:	021b      	lsls	r3, r3, #8
 8000b76:	b21a      	sxth	r2, r3
 8000b78:	7c7b      	ldrb	r3, [r7, #17]
 8000b7a:	b21b      	sxth	r3, r3
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	b21b      	sxth	r3, r3
 8000b80:	827b      	strh	r3, [r7, #18]
    
    /* Return the distance in millimeters */
    return distance;
 8000b82:	8a7b      	ldrh	r3, [r7, #18]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3718      	adds	r7, #24
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b8c:	f7ff febe 	bl	800090c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b90:	480b      	ldr	r0, [pc, #44]	@ (8000bc0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b92:	490c      	ldr	r1, [pc, #48]	@ (8000bc4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b94:	4a0c      	ldr	r2, [pc, #48]	@ (8000bc8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b98:	e002      	b.n	8000ba0 <LoopCopyDataInit>

08000b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9e:	3304      	adds	r3, #4

08000ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba4:	d3f9      	bcc.n	8000b9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba6:	4a09      	ldr	r2, [pc, #36]	@ (8000bcc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ba8:	4c09      	ldr	r4, [pc, #36]	@ (8000bd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bac:	e001      	b.n	8000bb2 <LoopFillZerobss>

08000bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb0:	3204      	adds	r2, #4

08000bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb4:	d3fb      	bcc.n	8000bae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bb6:	f002 fe4f 	bl	8003858 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bba:	f7ff fad9 	bl	8000170 <main>
  bx lr
 8000bbe:	4770      	bx	lr
  ldr r0, =_sdata
 8000bc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000bc8:	080042a8 	.word	0x080042a8
  ldr r2, =_sbss
 8000bcc:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000bd0:	2000029c 	.word	0x2000029c

08000bd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bd4:	e7fe      	b.n	8000bd4 <ADC1_2_IRQHandler>
	...

08000bd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bdc:	4b08      	ldr	r3, [pc, #32]	@ (8000c00 <HAL_Init+0x28>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a07      	ldr	r2, [pc, #28]	@ (8000c00 <HAL_Init+0x28>)
 8000be2:	f043 0310 	orr.w	r3, r3, #16
 8000be6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be8:	2003      	movs	r0, #3
 8000bea:	f000 fc6f 	bl	80014cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bee:	200f      	movs	r0, #15
 8000bf0:	f000 f808 	bl	8000c04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf4:	f7ff fcc6 	bl	8000584 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40022000 	.word	0x40022000

08000c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c0c:	4b12      	ldr	r3, [pc, #72]	@ (8000c58 <HAL_InitTick+0x54>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	4b12      	ldr	r3, [pc, #72]	@ (8000c5c <HAL_InitTick+0x58>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	4619      	mov	r1, r3
 8000c16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 fc87 	bl	8001536 <HAL_SYSTICK_Config>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e00e      	b.n	8000c50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2b0f      	cmp	r3, #15
 8000c36:	d80a      	bhi.n	8000c4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	6879      	ldr	r1, [r7, #4]
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	f000 fc4f 	bl	80014e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c44:	4a06      	ldr	r2, [pc, #24]	@ (8000c60 <HAL_InitTick+0x5c>)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	e000      	b.n	8000c50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000004 	.word	0x20000004
 8000c5c:	20000010 	.word	0x20000010
 8000c60:	2000000c 	.word	0x2000000c

08000c64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c68:	4b05      	ldr	r3, [pc, #20]	@ (8000c80 <HAL_IncTick+0x1c>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	4b05      	ldr	r3, [pc, #20]	@ (8000c84 <HAL_IncTick+0x20>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4413      	add	r3, r2
 8000c74:	4a03      	ldr	r2, [pc, #12]	@ (8000c84 <HAL_IncTick+0x20>)
 8000c76:	6013      	str	r3, [r2, #0]
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr
 8000c80:	20000010 	.word	0x20000010
 8000c84:	20000150 	.word	0x20000150

08000c88 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c8c:	4b02      	ldr	r3, [pc, #8]	@ (8000c98 <HAL_GetTick+0x10>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr
 8000c98:	20000150 	.word	0x20000150

08000c9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ca4:	f7ff fff0 	bl	8000c88 <HAL_GetTick>
 8000ca8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cb4:	d005      	beq.n	8000cc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce0 <HAL_Delay+0x44>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	461a      	mov	r2, r3
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cc2:	bf00      	nop
 8000cc4:	f7ff ffe0 	bl	8000c88 <HAL_GetTick>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	68fa      	ldr	r2, [r7, #12]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d8f7      	bhi.n	8000cc4 <HAL_Delay+0x28>
  {
  }
}
 8000cd4:	bf00      	nop
 8000cd6:	bf00      	nop
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000010 	.word	0x20000010

08000ce4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d101      	bne.n	8000cf6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e0ed      	b.n	8000ed2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d102      	bne.n	8000d08 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f7ff fc70 	bl	80005e8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f042 0201 	orr.w	r2, r2, #1
 8000d16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d18:	f7ff ffb6 	bl	8000c88 <HAL_GetTick>
 8000d1c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d1e:	e012      	b.n	8000d46 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d20:	f7ff ffb2 	bl	8000c88 <HAL_GetTick>
 8000d24:	4602      	mov	r2, r0
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	2b0a      	cmp	r3, #10
 8000d2c:	d90b      	bls.n	8000d46 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d32:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2205      	movs	r2, #5
 8000d3e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e0c5      	b.n	8000ed2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f003 0301 	and.w	r3, r3, #1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d0e5      	beq.n	8000d20 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f022 0202 	bic.w	r2, r2, #2
 8000d62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d64:	f7ff ff90 	bl	8000c88 <HAL_GetTick>
 8000d68:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d6a:	e012      	b.n	8000d92 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d6c:	f7ff ff8c 	bl	8000c88 <HAL_GetTick>
 8000d70:	4602      	mov	r2, r0
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b0a      	cmp	r3, #10
 8000d78:	d90b      	bls.n	8000d92 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d7e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2205      	movs	r2, #5
 8000d8a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e09f      	b.n	8000ed2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f003 0302 	and.w	r3, r3, #2
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d1e5      	bne.n	8000d6c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	7e1b      	ldrb	r3, [r3, #24]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d108      	bne.n	8000dba <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	e007      	b.n	8000dca <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000dc8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	7e5b      	ldrb	r3, [r3, #25]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d108      	bne.n	8000de4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	e007      	b.n	8000df4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000df2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	7e9b      	ldrb	r3, [r3, #26]
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d108      	bne.n	8000e0e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f042 0220 	orr.w	r2, r2, #32
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	e007      	b.n	8000e1e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f022 0220 	bic.w	r2, r2, #32
 8000e1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	7edb      	ldrb	r3, [r3, #27]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d108      	bne.n	8000e38 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f022 0210 	bic.w	r2, r2, #16
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	e007      	b.n	8000e48 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f042 0210 	orr.w	r2, r2, #16
 8000e46:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	7f1b      	ldrb	r3, [r3, #28]
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d108      	bne.n	8000e62 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f042 0208 	orr.w	r2, r2, #8
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	e007      	b.n	8000e72 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f022 0208 	bic.w	r2, r2, #8
 8000e70:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	7f5b      	ldrb	r3, [r3, #29]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d108      	bne.n	8000e8c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f042 0204 	orr.w	r2, r2, #4
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	e007      	b.n	8000e9c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f022 0204 	bic.w	r2, r2, #4
 8000e9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	689a      	ldr	r2, [r3, #8]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	431a      	orrs	r2, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	691b      	ldr	r3, [r3, #16]
 8000eaa:	431a      	orrs	r2, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	695b      	ldr	r3, [r3, #20]
 8000eb0:	ea42 0103 	orr.w	r1, r2, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	1e5a      	subs	r2, r3, #1
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	430a      	orrs	r2, r1
 8000ec0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2201      	movs	r2, #1
 8000ecc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b08a      	sub	sp, #40	@ 0x28
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	695b      	ldr	r3, [r3, #20]
 8000eec:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	691b      	ldr	r3, [r3, #16]
 8000f0c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000f16:	6a3b      	ldr	r3, [r7, #32]
 8000f18:	f003 0301 	and.w	r3, r3, #1
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d07c      	beq.n	800101a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d023      	beq.n	8000f72 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2201      	movs	r2, #1
 8000f30:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	f003 0302 	and.w	r3, r3, #2
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d003      	beq.n	8000f44 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f000 f983 	bl	8001248 <HAL_CAN_TxMailbox0CompleteCallback>
 8000f42:	e016      	b.n	8000f72 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	f003 0304 	and.w	r3, r3, #4
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d004      	beq.n	8000f58 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f50:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f54:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f56:	e00c      	b.n	8000f72 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	f003 0308 	and.w	r3, r3, #8
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d004      	beq.n	8000f6c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f64:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f68:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f6a:	e002      	b.n	8000f72 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f000 f986 	bl	800127e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d024      	beq.n	8000fc6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f84:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d003      	beq.n	8000f98 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f000 f962 	bl	800125a <HAL_CAN_TxMailbox1CompleteCallback>
 8000f96:	e016      	b.n	8000fc6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d004      	beq.n	8000fac <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fa4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000fa8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000faa:	e00c      	b.n	8000fc6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d004      	beq.n	8000fc0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fbe:	e002      	b.n	8000fc6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f000 f965 	bl	8001290 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d024      	beq.n	800101a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000fd8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d003      	beq.n	8000fec <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f000 f941 	bl	800126c <HAL_CAN_TxMailbox2CompleteCallback>
 8000fea:	e016      	b.n	800101a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d004      	beq.n	8001000 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ff8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ffc:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ffe:	e00c      	b.n	800101a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d004      	beq.n	8001014 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800100a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800100c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001010:	627b      	str	r3, [r7, #36]	@ 0x24
 8001012:	e002      	b.n	800101a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f000 f944 	bl	80012a2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800101a:	6a3b      	ldr	r3, [r7, #32]
 800101c:	f003 0308 	and.w	r3, r3, #8
 8001020:	2b00      	cmp	r3, #0
 8001022:	d00c      	beq.n	800103e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	f003 0310 	and.w	r3, r3, #16
 800102a:	2b00      	cmp	r3, #0
 800102c:	d007      	beq.n	800103e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800102e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001030:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001034:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2210      	movs	r2, #16
 800103c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800103e:	6a3b      	ldr	r3, [r7, #32]
 8001040:	f003 0304 	and.w	r3, r3, #4
 8001044:	2b00      	cmp	r3, #0
 8001046:	d00b      	beq.n	8001060 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	f003 0308 	and.w	r3, r3, #8
 800104e:	2b00      	cmp	r3, #0
 8001050:	d006      	beq.n	8001060 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2208      	movs	r2, #8
 8001058:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f000 f933 	bl	80012c6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001060:	6a3b      	ldr	r3, [r7, #32]
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	2b00      	cmp	r3, #0
 8001068:	d009      	beq.n	800107e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	f003 0303 	and.w	r3, r3, #3
 8001074:	2b00      	cmp	r3, #0
 8001076:	d002      	beq.n	800107e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f000 f91b 	bl	80012b4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800107e:	6a3b      	ldr	r3, [r7, #32]
 8001080:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001084:	2b00      	cmp	r3, #0
 8001086:	d00c      	beq.n	80010a2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	f003 0310 	and.w	r3, r3, #16
 800108e:	2b00      	cmp	r3, #0
 8001090:	d007      	beq.n	80010a2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001094:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001098:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2210      	movs	r2, #16
 80010a0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80010a2:	6a3b      	ldr	r3, [r7, #32]
 80010a4:	f003 0320 	and.w	r3, r3, #32
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d00b      	beq.n	80010c4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	f003 0308 	and.w	r3, r3, #8
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d006      	beq.n	80010c4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2208      	movs	r2, #8
 80010bc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f000 f913 	bl	80012ea <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80010c4:	6a3b      	ldr	r3, [r7, #32]
 80010c6:	f003 0310 	and.w	r3, r3, #16
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d009      	beq.n	80010e2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	691b      	ldr	r3, [r3, #16]
 80010d4:	f003 0303 	and.w	r3, r3, #3
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d002      	beq.n	80010e2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f000 f8fb 	bl	80012d8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80010e2:	6a3b      	ldr	r3, [r7, #32]
 80010e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d00b      	beq.n	8001104 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	f003 0310 	and.w	r3, r3, #16
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d006      	beq.n	8001104 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2210      	movs	r2, #16
 80010fc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f000 f8fc 	bl	80012fc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001104:	6a3b      	ldr	r3, [r7, #32]
 8001106:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d00b      	beq.n	8001126 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	f003 0308 	and.w	r3, r3, #8
 8001114:	2b00      	cmp	r3, #0
 8001116:	d006      	beq.n	8001126 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2208      	movs	r2, #8
 800111e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f000 f8f4 	bl	800130e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001126:	6a3b      	ldr	r3, [r7, #32]
 8001128:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d07b      	beq.n	8001228 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	f003 0304 	and.w	r3, r3, #4
 8001136:	2b00      	cmp	r3, #0
 8001138:	d072      	beq.n	8001220 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800113a:	6a3b      	ldr	r3, [r7, #32]
 800113c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001140:	2b00      	cmp	r3, #0
 8001142:	d008      	beq.n	8001156 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800114e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001156:	6a3b      	ldr	r3, [r7, #32]
 8001158:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800115c:	2b00      	cmp	r3, #0
 800115e:	d008      	beq.n	8001172 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001166:	2b00      	cmp	r3, #0
 8001168:	d003      	beq.n	8001172 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800116a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800116c:	f043 0302 	orr.w	r3, r3, #2
 8001170:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001172:	6a3b      	ldr	r3, [r7, #32]
 8001174:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001178:	2b00      	cmp	r3, #0
 800117a:	d008      	beq.n	800118e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001182:	2b00      	cmp	r3, #0
 8001184:	d003      	beq.n	800118e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001188:	f043 0304 	orr.w	r3, r3, #4
 800118c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800118e:	6a3b      	ldr	r3, [r7, #32]
 8001190:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001194:	2b00      	cmp	r3, #0
 8001196:	d043      	beq.n	8001220 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d03e      	beq.n	8001220 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80011a8:	2b60      	cmp	r3, #96	@ 0x60
 80011aa:	d02b      	beq.n	8001204 <HAL_CAN_IRQHandler+0x32a>
 80011ac:	2b60      	cmp	r3, #96	@ 0x60
 80011ae:	d82e      	bhi.n	800120e <HAL_CAN_IRQHandler+0x334>
 80011b0:	2b50      	cmp	r3, #80	@ 0x50
 80011b2:	d022      	beq.n	80011fa <HAL_CAN_IRQHandler+0x320>
 80011b4:	2b50      	cmp	r3, #80	@ 0x50
 80011b6:	d82a      	bhi.n	800120e <HAL_CAN_IRQHandler+0x334>
 80011b8:	2b40      	cmp	r3, #64	@ 0x40
 80011ba:	d019      	beq.n	80011f0 <HAL_CAN_IRQHandler+0x316>
 80011bc:	2b40      	cmp	r3, #64	@ 0x40
 80011be:	d826      	bhi.n	800120e <HAL_CAN_IRQHandler+0x334>
 80011c0:	2b30      	cmp	r3, #48	@ 0x30
 80011c2:	d010      	beq.n	80011e6 <HAL_CAN_IRQHandler+0x30c>
 80011c4:	2b30      	cmp	r3, #48	@ 0x30
 80011c6:	d822      	bhi.n	800120e <HAL_CAN_IRQHandler+0x334>
 80011c8:	2b10      	cmp	r3, #16
 80011ca:	d002      	beq.n	80011d2 <HAL_CAN_IRQHandler+0x2f8>
 80011cc:	2b20      	cmp	r3, #32
 80011ce:	d005      	beq.n	80011dc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80011d0:	e01d      	b.n	800120e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80011d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d4:	f043 0308 	orr.w	r3, r3, #8
 80011d8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80011da:	e019      	b.n	8001210 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80011dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011de:	f043 0310 	orr.w	r3, r3, #16
 80011e2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80011e4:	e014      	b.n	8001210 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80011e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011e8:	f043 0320 	orr.w	r3, r3, #32
 80011ec:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80011ee:	e00f      	b.n	8001210 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80011f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011f6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80011f8:	e00a      	b.n	8001210 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80011fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001200:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001202:	e005      	b.n	8001210 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001206:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800120a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800120c:	e000      	b.n	8001210 <HAL_CAN_IRQHandler+0x336>
            break;
 800120e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	699a      	ldr	r2, [r3, #24]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800121e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2204      	movs	r2, #4
 8001226:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800122a:	2b00      	cmp	r3, #0
 800122c:	d008      	beq.n	8001240 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001234:	431a      	orrs	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f000 f870 	bl	8001320 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001240:	bf00      	nop
 8001242:	3728      	adds	r7, #40	@ 0x28
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr

0800125a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800125a:	b480      	push	{r7}
 800125c:	b083      	sub	sp, #12
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr

0800126c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	bc80      	pop	{r7}
 800127c:	4770      	bx	lr

0800127e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800127e:	b480      	push	{r7}
 8001280:	b083      	sub	sp, #12
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr

08001290 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	bc80      	pop	{r7}
 80012a0:	4770      	bx	lr

080012a2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80012a2:	b480      	push	{r7}
 80012a4:	b083      	sub	sp, #12
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr

080012b4 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr

080012c6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80012c6:	b480      	push	{r7}
 80012c8:	b083      	sub	sp, #12
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bc80      	pop	{r7}
 80012d6:	4770      	bx	lr

080012d8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bc80      	pop	{r7}
 80012e8:	4770      	bx	lr

080012ea <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80012ea:	b480      	push	{r7}
 80012ec:	b083      	sub	sp, #12
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr

080012fc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr

0800130e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800130e:	b480      	push	{r7}
 8001310:	b083      	sub	sp, #12
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr

08001320 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	bc80      	pop	{r7}
 8001330:	4770      	bx	lr
	...

08001334 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001344:	4b0c      	ldr	r3, [pc, #48]	@ (8001378 <__NVIC_SetPriorityGrouping+0x44>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800134a:	68ba      	ldr	r2, [r7, #8]
 800134c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001350:	4013      	ands	r3, r2
 8001352:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800135c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001360:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001364:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001366:	4a04      	ldr	r2, [pc, #16]	@ (8001378 <__NVIC_SetPriorityGrouping+0x44>)
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	60d3      	str	r3, [r2, #12]
}
 800136c:	bf00      	nop
 800136e:	3714      	adds	r7, #20
 8001370:	46bd      	mov	sp, r7
 8001372:	bc80      	pop	{r7}
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001380:	4b04      	ldr	r3, [pc, #16]	@ (8001394 <__NVIC_GetPriorityGrouping+0x18>)
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	0a1b      	lsrs	r3, r3, #8
 8001386:	f003 0307 	and.w	r3, r3, #7
}
 800138a:	4618      	mov	r0, r3
 800138c:	46bd      	mov	sp, r7
 800138e:	bc80      	pop	{r7}
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	db0b      	blt.n	80013c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	f003 021f 	and.w	r2, r3, #31
 80013b0:	4906      	ldr	r1, [pc, #24]	@ (80013cc <__NVIC_EnableIRQ+0x34>)
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	095b      	lsrs	r3, r3, #5
 80013b8:	2001      	movs	r0, #1
 80013ba:	fa00 f202 	lsl.w	r2, r0, r2
 80013be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr
 80013cc:	e000e100 	.word	0xe000e100

080013d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	6039      	str	r1, [r7, #0]
 80013da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	db0a      	blt.n	80013fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	490c      	ldr	r1, [pc, #48]	@ (800141c <__NVIC_SetPriority+0x4c>)
 80013ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ee:	0112      	lsls	r2, r2, #4
 80013f0:	b2d2      	uxtb	r2, r2
 80013f2:	440b      	add	r3, r1
 80013f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013f8:	e00a      	b.n	8001410 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	4908      	ldr	r1, [pc, #32]	@ (8001420 <__NVIC_SetPriority+0x50>)
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	f003 030f 	and.w	r3, r3, #15
 8001406:	3b04      	subs	r3, #4
 8001408:	0112      	lsls	r2, r2, #4
 800140a:	b2d2      	uxtb	r2, r2
 800140c:	440b      	add	r3, r1
 800140e:	761a      	strb	r2, [r3, #24]
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	e000e100 	.word	0xe000e100
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001424:	b480      	push	{r7}
 8001426:	b089      	sub	sp, #36	@ 0x24
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	f1c3 0307 	rsb	r3, r3, #7
 800143e:	2b04      	cmp	r3, #4
 8001440:	bf28      	it	cs
 8001442:	2304      	movcs	r3, #4
 8001444:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	3304      	adds	r3, #4
 800144a:	2b06      	cmp	r3, #6
 800144c:	d902      	bls.n	8001454 <NVIC_EncodePriority+0x30>
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	3b03      	subs	r3, #3
 8001452:	e000      	b.n	8001456 <NVIC_EncodePriority+0x32>
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001458:	f04f 32ff 	mov.w	r2, #4294967295
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	43da      	mvns	r2, r3
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	401a      	ands	r2, r3
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800146c:	f04f 31ff 	mov.w	r1, #4294967295
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	fa01 f303 	lsl.w	r3, r1, r3
 8001476:	43d9      	mvns	r1, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800147c:	4313      	orrs	r3, r2
         );
}
 800147e:	4618      	mov	r0, r3
 8001480:	3724      	adds	r7, #36	@ 0x24
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr

08001488 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3b01      	subs	r3, #1
 8001494:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001498:	d301      	bcc.n	800149e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800149a:	2301      	movs	r3, #1
 800149c:	e00f      	b.n	80014be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800149e:	4a0a      	ldr	r2, [pc, #40]	@ (80014c8 <SysTick_Config+0x40>)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014a6:	210f      	movs	r1, #15
 80014a8:	f04f 30ff 	mov.w	r0, #4294967295
 80014ac:	f7ff ff90 	bl	80013d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014b0:	4b05      	ldr	r3, [pc, #20]	@ (80014c8 <SysTick_Config+0x40>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014b6:	4b04      	ldr	r3, [pc, #16]	@ (80014c8 <SysTick_Config+0x40>)
 80014b8:	2207      	movs	r2, #7
 80014ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	e000e010 	.word	0xe000e010

080014cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7ff ff2d 	bl	8001334 <__NVIC_SetPriorityGrouping>
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b086      	sub	sp, #24
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	4603      	mov	r3, r0
 80014ea:	60b9      	str	r1, [r7, #8]
 80014ec:	607a      	str	r2, [r7, #4]
 80014ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014f4:	f7ff ff42 	bl	800137c <__NVIC_GetPriorityGrouping>
 80014f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	68b9      	ldr	r1, [r7, #8]
 80014fe:	6978      	ldr	r0, [r7, #20]
 8001500:	f7ff ff90 	bl	8001424 <NVIC_EncodePriority>
 8001504:	4602      	mov	r2, r0
 8001506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800150a:	4611      	mov	r1, r2
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff ff5f 	bl	80013d0 <__NVIC_SetPriority>
}
 8001512:	bf00      	nop
 8001514:	3718      	adds	r7, #24
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
 8001520:	4603      	mov	r3, r0
 8001522:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff ff35 	bl	8001398 <__NVIC_EnableIRQ>
}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b082      	sub	sp, #8
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff ffa2 	bl	8001488 <SysTick_Config>
 8001544:	4603      	mov	r3, r0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
	...

08001550 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001550:	b480      	push	{r7}
 8001552:	b08b      	sub	sp, #44	@ 0x2c
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800155a:	2300      	movs	r3, #0
 800155c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800155e:	2300      	movs	r3, #0
 8001560:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001562:	e169      	b.n	8001838 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001564:	2201      	movs	r2, #1
 8001566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	69fa      	ldr	r2, [r7, #28]
 8001574:	4013      	ands	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	429a      	cmp	r2, r3
 800157e:	f040 8158 	bne.w	8001832 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	4a9a      	ldr	r2, [pc, #616]	@ (80017f0 <HAL_GPIO_Init+0x2a0>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d05e      	beq.n	800164a <HAL_GPIO_Init+0xfa>
 800158c:	4a98      	ldr	r2, [pc, #608]	@ (80017f0 <HAL_GPIO_Init+0x2a0>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d875      	bhi.n	800167e <HAL_GPIO_Init+0x12e>
 8001592:	4a98      	ldr	r2, [pc, #608]	@ (80017f4 <HAL_GPIO_Init+0x2a4>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d058      	beq.n	800164a <HAL_GPIO_Init+0xfa>
 8001598:	4a96      	ldr	r2, [pc, #600]	@ (80017f4 <HAL_GPIO_Init+0x2a4>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d86f      	bhi.n	800167e <HAL_GPIO_Init+0x12e>
 800159e:	4a96      	ldr	r2, [pc, #600]	@ (80017f8 <HAL_GPIO_Init+0x2a8>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d052      	beq.n	800164a <HAL_GPIO_Init+0xfa>
 80015a4:	4a94      	ldr	r2, [pc, #592]	@ (80017f8 <HAL_GPIO_Init+0x2a8>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d869      	bhi.n	800167e <HAL_GPIO_Init+0x12e>
 80015aa:	4a94      	ldr	r2, [pc, #592]	@ (80017fc <HAL_GPIO_Init+0x2ac>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d04c      	beq.n	800164a <HAL_GPIO_Init+0xfa>
 80015b0:	4a92      	ldr	r2, [pc, #584]	@ (80017fc <HAL_GPIO_Init+0x2ac>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d863      	bhi.n	800167e <HAL_GPIO_Init+0x12e>
 80015b6:	4a92      	ldr	r2, [pc, #584]	@ (8001800 <HAL_GPIO_Init+0x2b0>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d046      	beq.n	800164a <HAL_GPIO_Init+0xfa>
 80015bc:	4a90      	ldr	r2, [pc, #576]	@ (8001800 <HAL_GPIO_Init+0x2b0>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d85d      	bhi.n	800167e <HAL_GPIO_Init+0x12e>
 80015c2:	2b12      	cmp	r3, #18
 80015c4:	d82a      	bhi.n	800161c <HAL_GPIO_Init+0xcc>
 80015c6:	2b12      	cmp	r3, #18
 80015c8:	d859      	bhi.n	800167e <HAL_GPIO_Init+0x12e>
 80015ca:	a201      	add	r2, pc, #4	@ (adr r2, 80015d0 <HAL_GPIO_Init+0x80>)
 80015cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d0:	0800164b 	.word	0x0800164b
 80015d4:	08001625 	.word	0x08001625
 80015d8:	08001637 	.word	0x08001637
 80015dc:	08001679 	.word	0x08001679
 80015e0:	0800167f 	.word	0x0800167f
 80015e4:	0800167f 	.word	0x0800167f
 80015e8:	0800167f 	.word	0x0800167f
 80015ec:	0800167f 	.word	0x0800167f
 80015f0:	0800167f 	.word	0x0800167f
 80015f4:	0800167f 	.word	0x0800167f
 80015f8:	0800167f 	.word	0x0800167f
 80015fc:	0800167f 	.word	0x0800167f
 8001600:	0800167f 	.word	0x0800167f
 8001604:	0800167f 	.word	0x0800167f
 8001608:	0800167f 	.word	0x0800167f
 800160c:	0800167f 	.word	0x0800167f
 8001610:	0800167f 	.word	0x0800167f
 8001614:	0800162d 	.word	0x0800162d
 8001618:	08001641 	.word	0x08001641
 800161c:	4a79      	ldr	r2, [pc, #484]	@ (8001804 <HAL_GPIO_Init+0x2b4>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d013      	beq.n	800164a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001622:	e02c      	b.n	800167e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	623b      	str	r3, [r7, #32]
          break;
 800162a:	e029      	b.n	8001680 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	3304      	adds	r3, #4
 8001632:	623b      	str	r3, [r7, #32]
          break;
 8001634:	e024      	b.n	8001680 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	3308      	adds	r3, #8
 800163c:	623b      	str	r3, [r7, #32]
          break;
 800163e:	e01f      	b.n	8001680 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	330c      	adds	r3, #12
 8001646:	623b      	str	r3, [r7, #32]
          break;
 8001648:	e01a      	b.n	8001680 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d102      	bne.n	8001658 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001652:	2304      	movs	r3, #4
 8001654:	623b      	str	r3, [r7, #32]
          break;
 8001656:	e013      	b.n	8001680 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d105      	bne.n	800166c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001660:	2308      	movs	r3, #8
 8001662:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	69fa      	ldr	r2, [r7, #28]
 8001668:	611a      	str	r2, [r3, #16]
          break;
 800166a:	e009      	b.n	8001680 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800166c:	2308      	movs	r3, #8
 800166e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	69fa      	ldr	r2, [r7, #28]
 8001674:	615a      	str	r2, [r3, #20]
          break;
 8001676:	e003      	b.n	8001680 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001678:	2300      	movs	r3, #0
 800167a:	623b      	str	r3, [r7, #32]
          break;
 800167c:	e000      	b.n	8001680 <HAL_GPIO_Init+0x130>
          break;
 800167e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	2bff      	cmp	r3, #255	@ 0xff
 8001684:	d801      	bhi.n	800168a <HAL_GPIO_Init+0x13a>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	e001      	b.n	800168e <HAL_GPIO_Init+0x13e>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	3304      	adds	r3, #4
 800168e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	2bff      	cmp	r3, #255	@ 0xff
 8001694:	d802      	bhi.n	800169c <HAL_GPIO_Init+0x14c>
 8001696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	e002      	b.n	80016a2 <HAL_GPIO_Init+0x152>
 800169c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800169e:	3b08      	subs	r3, #8
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	210f      	movs	r1, #15
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	fa01 f303 	lsl.w	r3, r1, r3
 80016b0:	43db      	mvns	r3, r3
 80016b2:	401a      	ands	r2, r3
 80016b4:	6a39      	ldr	r1, [r7, #32]
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	fa01 f303 	lsl.w	r3, r1, r3
 80016bc:	431a      	orrs	r2, r3
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f000 80b1 	beq.w	8001832 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016d0:	4b4d      	ldr	r3, [pc, #308]	@ (8001808 <HAL_GPIO_Init+0x2b8>)
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	4a4c      	ldr	r2, [pc, #304]	@ (8001808 <HAL_GPIO_Init+0x2b8>)
 80016d6:	f043 0301 	orr.w	r3, r3, #1
 80016da:	6193      	str	r3, [r2, #24]
 80016dc:	4b4a      	ldr	r3, [pc, #296]	@ (8001808 <HAL_GPIO_Init+0x2b8>)
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016e8:	4a48      	ldr	r2, [pc, #288]	@ (800180c <HAL_GPIO_Init+0x2bc>)
 80016ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ec:	089b      	lsrs	r3, r3, #2
 80016ee:	3302      	adds	r3, #2
 80016f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f8:	f003 0303 	and.w	r3, r3, #3
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	220f      	movs	r2, #15
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	43db      	mvns	r3, r3
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	4013      	ands	r3, r2
 800170a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4a40      	ldr	r2, [pc, #256]	@ (8001810 <HAL_GPIO_Init+0x2c0>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d013      	beq.n	800173c <HAL_GPIO_Init+0x1ec>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4a3f      	ldr	r2, [pc, #252]	@ (8001814 <HAL_GPIO_Init+0x2c4>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d00d      	beq.n	8001738 <HAL_GPIO_Init+0x1e8>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4a3e      	ldr	r2, [pc, #248]	@ (8001818 <HAL_GPIO_Init+0x2c8>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d007      	beq.n	8001734 <HAL_GPIO_Init+0x1e4>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4a3d      	ldr	r2, [pc, #244]	@ (800181c <HAL_GPIO_Init+0x2cc>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d101      	bne.n	8001730 <HAL_GPIO_Init+0x1e0>
 800172c:	2303      	movs	r3, #3
 800172e:	e006      	b.n	800173e <HAL_GPIO_Init+0x1ee>
 8001730:	2304      	movs	r3, #4
 8001732:	e004      	b.n	800173e <HAL_GPIO_Init+0x1ee>
 8001734:	2302      	movs	r3, #2
 8001736:	e002      	b.n	800173e <HAL_GPIO_Init+0x1ee>
 8001738:	2301      	movs	r3, #1
 800173a:	e000      	b.n	800173e <HAL_GPIO_Init+0x1ee>
 800173c:	2300      	movs	r3, #0
 800173e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001740:	f002 0203 	and.w	r2, r2, #3
 8001744:	0092      	lsls	r2, r2, #2
 8001746:	4093      	lsls	r3, r2
 8001748:	68fa      	ldr	r2, [r7, #12]
 800174a:	4313      	orrs	r3, r2
 800174c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800174e:	492f      	ldr	r1, [pc, #188]	@ (800180c <HAL_GPIO_Init+0x2bc>)
 8001750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001752:	089b      	lsrs	r3, r3, #2
 8001754:	3302      	adds	r3, #2
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d006      	beq.n	8001776 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001768:	4b2d      	ldr	r3, [pc, #180]	@ (8001820 <HAL_GPIO_Init+0x2d0>)
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	492c      	ldr	r1, [pc, #176]	@ (8001820 <HAL_GPIO_Init+0x2d0>)
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	4313      	orrs	r3, r2
 8001772:	608b      	str	r3, [r1, #8]
 8001774:	e006      	b.n	8001784 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001776:	4b2a      	ldr	r3, [pc, #168]	@ (8001820 <HAL_GPIO_Init+0x2d0>)
 8001778:	689a      	ldr	r2, [r3, #8]
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	43db      	mvns	r3, r3
 800177e:	4928      	ldr	r1, [pc, #160]	@ (8001820 <HAL_GPIO_Init+0x2d0>)
 8001780:	4013      	ands	r3, r2
 8001782:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d006      	beq.n	800179e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001790:	4b23      	ldr	r3, [pc, #140]	@ (8001820 <HAL_GPIO_Init+0x2d0>)
 8001792:	68da      	ldr	r2, [r3, #12]
 8001794:	4922      	ldr	r1, [pc, #136]	@ (8001820 <HAL_GPIO_Init+0x2d0>)
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	4313      	orrs	r3, r2
 800179a:	60cb      	str	r3, [r1, #12]
 800179c:	e006      	b.n	80017ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800179e:	4b20      	ldr	r3, [pc, #128]	@ (8001820 <HAL_GPIO_Init+0x2d0>)
 80017a0:	68da      	ldr	r2, [r3, #12]
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	43db      	mvns	r3, r3
 80017a6:	491e      	ldr	r1, [pc, #120]	@ (8001820 <HAL_GPIO_Init+0x2d0>)
 80017a8:	4013      	ands	r3, r2
 80017aa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d006      	beq.n	80017c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017b8:	4b19      	ldr	r3, [pc, #100]	@ (8001820 <HAL_GPIO_Init+0x2d0>)
 80017ba:	685a      	ldr	r2, [r3, #4]
 80017bc:	4918      	ldr	r1, [pc, #96]	@ (8001820 <HAL_GPIO_Init+0x2d0>)
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	604b      	str	r3, [r1, #4]
 80017c4:	e006      	b.n	80017d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017c6:	4b16      	ldr	r3, [pc, #88]	@ (8001820 <HAL_GPIO_Init+0x2d0>)
 80017c8:	685a      	ldr	r2, [r3, #4]
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	43db      	mvns	r3, r3
 80017ce:	4914      	ldr	r1, [pc, #80]	@ (8001820 <HAL_GPIO_Init+0x2d0>)
 80017d0:	4013      	ands	r3, r2
 80017d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d021      	beq.n	8001824 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001820 <HAL_GPIO_Init+0x2d0>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	490e      	ldr	r1, [pc, #56]	@ (8001820 <HAL_GPIO_Init+0x2d0>)
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	600b      	str	r3, [r1, #0]
 80017ec:	e021      	b.n	8001832 <HAL_GPIO_Init+0x2e2>
 80017ee:	bf00      	nop
 80017f0:	10320000 	.word	0x10320000
 80017f4:	10310000 	.word	0x10310000
 80017f8:	10220000 	.word	0x10220000
 80017fc:	10210000 	.word	0x10210000
 8001800:	10120000 	.word	0x10120000
 8001804:	10110000 	.word	0x10110000
 8001808:	40021000 	.word	0x40021000
 800180c:	40010000 	.word	0x40010000
 8001810:	40010800 	.word	0x40010800
 8001814:	40010c00 	.word	0x40010c00
 8001818:	40011000 	.word	0x40011000
 800181c:	40011400 	.word	0x40011400
 8001820:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001824:	4b0b      	ldr	r3, [pc, #44]	@ (8001854 <HAL_GPIO_Init+0x304>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	43db      	mvns	r3, r3
 800182c:	4909      	ldr	r1, [pc, #36]	@ (8001854 <HAL_GPIO_Init+0x304>)
 800182e:	4013      	ands	r3, r2
 8001830:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001834:	3301      	adds	r3, #1
 8001836:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800183e:	fa22 f303 	lsr.w	r3, r2, r3
 8001842:	2b00      	cmp	r3, #0
 8001844:	f47f ae8e 	bne.w	8001564 <HAL_GPIO_Init+0x14>
  }
}
 8001848:	bf00      	nop
 800184a:	bf00      	nop
 800184c:	372c      	adds	r7, #44	@ 0x2c
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr
 8001854:	40010400 	.word	0x40010400

08001858 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001858:	b480      	push	{r7}
 800185a:	b089      	sub	sp, #36	@ 0x24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001862:	2300      	movs	r3, #0
 8001864:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8001866:	e09a      	b.n	800199e <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001868:	2201      	movs	r2, #1
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	4013      	ands	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	2b00      	cmp	r3, #0
 800187a:	f000 808d 	beq.w	8001998 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800187e:	4a4e      	ldr	r2, [pc, #312]	@ (80019b8 <HAL_GPIO_DeInit+0x160>)
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	089b      	lsrs	r3, r3, #2
 8001884:	3302      	adds	r3, #2
 8001886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800188a:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	f003 0303 	and.w	r3, r3, #3
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	220f      	movs	r2, #15
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	697a      	ldr	r2, [r7, #20]
 800189c:	4013      	ands	r3, r2
 800189e:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a46      	ldr	r2, [pc, #280]	@ (80019bc <HAL_GPIO_DeInit+0x164>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d013      	beq.n	80018d0 <HAL_GPIO_DeInit+0x78>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a45      	ldr	r2, [pc, #276]	@ (80019c0 <HAL_GPIO_DeInit+0x168>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d00d      	beq.n	80018cc <HAL_GPIO_DeInit+0x74>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a44      	ldr	r2, [pc, #272]	@ (80019c4 <HAL_GPIO_DeInit+0x16c>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d007      	beq.n	80018c8 <HAL_GPIO_DeInit+0x70>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a43      	ldr	r2, [pc, #268]	@ (80019c8 <HAL_GPIO_DeInit+0x170>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d101      	bne.n	80018c4 <HAL_GPIO_DeInit+0x6c>
 80018c0:	2303      	movs	r3, #3
 80018c2:	e006      	b.n	80018d2 <HAL_GPIO_DeInit+0x7a>
 80018c4:	2304      	movs	r3, #4
 80018c6:	e004      	b.n	80018d2 <HAL_GPIO_DeInit+0x7a>
 80018c8:	2302      	movs	r3, #2
 80018ca:	e002      	b.n	80018d2 <HAL_GPIO_DeInit+0x7a>
 80018cc:	2301      	movs	r3, #1
 80018ce:	e000      	b.n	80018d2 <HAL_GPIO_DeInit+0x7a>
 80018d0:	2300      	movs	r3, #0
 80018d2:	69fa      	ldr	r2, [r7, #28]
 80018d4:	f002 0203 	and.w	r2, r2, #3
 80018d8:	0092      	lsls	r2, r2, #2
 80018da:	4093      	lsls	r3, r2
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d132      	bne.n	8001948 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80018e2:	4b3a      	ldr	r3, [pc, #232]	@ (80019cc <HAL_GPIO_DeInit+0x174>)
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	43db      	mvns	r3, r3
 80018ea:	4938      	ldr	r1, [pc, #224]	@ (80019cc <HAL_GPIO_DeInit+0x174>)
 80018ec:	4013      	ands	r3, r2
 80018ee:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80018f0:	4b36      	ldr	r3, [pc, #216]	@ (80019cc <HAL_GPIO_DeInit+0x174>)
 80018f2:	685a      	ldr	r2, [r3, #4]
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	43db      	mvns	r3, r3
 80018f8:	4934      	ldr	r1, [pc, #208]	@ (80019cc <HAL_GPIO_DeInit+0x174>)
 80018fa:	4013      	ands	r3, r2
 80018fc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80018fe:	4b33      	ldr	r3, [pc, #204]	@ (80019cc <HAL_GPIO_DeInit+0x174>)
 8001900:	68da      	ldr	r2, [r3, #12]
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	43db      	mvns	r3, r3
 8001906:	4931      	ldr	r1, [pc, #196]	@ (80019cc <HAL_GPIO_DeInit+0x174>)
 8001908:	4013      	ands	r3, r2
 800190a:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800190c:	4b2f      	ldr	r3, [pc, #188]	@ (80019cc <HAL_GPIO_DeInit+0x174>)
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	43db      	mvns	r3, r3
 8001914:	492d      	ldr	r1, [pc, #180]	@ (80019cc <HAL_GPIO_DeInit+0x174>)
 8001916:	4013      	ands	r3, r2
 8001918:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	f003 0303 	and.w	r3, r3, #3
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	220f      	movs	r2, #15
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800192a:	4a23      	ldr	r2, [pc, #140]	@ (80019b8 <HAL_GPIO_DeInit+0x160>)
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	089b      	lsrs	r3, r3, #2
 8001930:	3302      	adds	r3, #2
 8001932:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	43da      	mvns	r2, r3
 800193a:	481f      	ldr	r0, [pc, #124]	@ (80019b8 <HAL_GPIO_DeInit+0x160>)
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	089b      	lsrs	r3, r3, #2
 8001940:	400a      	ands	r2, r1
 8001942:	3302      	adds	r3, #2
 8001944:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	2bff      	cmp	r3, #255	@ 0xff
 800194c:	d801      	bhi.n	8001952 <HAL_GPIO_DeInit+0xfa>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	e001      	b.n	8001956 <HAL_GPIO_DeInit+0xfe>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	3304      	adds	r3, #4
 8001956:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	2bff      	cmp	r3, #255	@ 0xff
 800195c:	d802      	bhi.n	8001964 <HAL_GPIO_DeInit+0x10c>
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	e002      	b.n	800196a <HAL_GPIO_DeInit+0x112>
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	3b08      	subs	r3, #8
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	210f      	movs	r1, #15
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	fa01 f303 	lsl.w	r3, r1, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	401a      	ands	r2, r3
 800197c:	2104      	movs	r1, #4
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	fa01 f303 	lsl.w	r3, r1, r3
 8001984:	431a      	orrs	r2, r3
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	68da      	ldr	r2, [r3, #12]
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	43db      	mvns	r3, r3
 8001992:	401a      	ands	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	60da      	str	r2, [r3, #12]
    }

    position++;
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	3301      	adds	r3, #1
 800199c:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800199e:	683a      	ldr	r2, [r7, #0]
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	fa22 f303 	lsr.w	r3, r2, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f47f af5e 	bne.w	8001868 <HAL_GPIO_DeInit+0x10>
  }
}
 80019ac:	bf00      	nop
 80019ae:	bf00      	nop
 80019b0:	3724      	adds	r7, #36	@ 0x24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr
 80019b8:	40010000 	.word	0x40010000
 80019bc:	40010800 	.word	0x40010800
 80019c0:	40010c00 	.word	0x40010c00
 80019c4:	40011000 	.word	0x40011000
 80019c8:	40011400 	.word	0x40011400
 80019cc:	40010400 	.word	0x40010400

080019d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	460b      	mov	r3, r1
 80019da:	807b      	strh	r3, [r7, #2]
 80019dc:	4613      	mov	r3, r2
 80019de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019e0:	787b      	ldrb	r3, [r7, #1]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d003      	beq.n	80019ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019e6:	887a      	ldrh	r2, [r7, #2]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019ec:	e003      	b.n	80019f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019ee:	887b      	ldrh	r3, [r7, #2]
 80019f0:	041a      	lsls	r2, r3, #16
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	611a      	str	r2, [r3, #16]
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bc80      	pop	{r7}
 80019fe:	4770      	bx	lr

08001a00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e12b      	b.n	8001c6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d106      	bne.n	8001a2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7fe fe4e 	bl	80006c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2224      	movs	r2, #36	@ 0x24
 8001a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f022 0201 	bic.w	r2, r2, #1
 8001a42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001a52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a64:	f001 fc2c 	bl	80032c0 <HAL_RCC_GetPCLK1Freq>
 8001a68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	4a81      	ldr	r2, [pc, #516]	@ (8001c74 <HAL_I2C_Init+0x274>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d807      	bhi.n	8001a84 <HAL_I2C_Init+0x84>
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	4a80      	ldr	r2, [pc, #512]	@ (8001c78 <HAL_I2C_Init+0x278>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	bf94      	ite	ls
 8001a7c:	2301      	movls	r3, #1
 8001a7e:	2300      	movhi	r3, #0
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	e006      	b.n	8001a92 <HAL_I2C_Init+0x92>
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4a7d      	ldr	r2, [pc, #500]	@ (8001c7c <HAL_I2C_Init+0x27c>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	bf94      	ite	ls
 8001a8c:	2301      	movls	r3, #1
 8001a8e:	2300      	movhi	r3, #0
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e0e7      	b.n	8001c6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	4a78      	ldr	r2, [pc, #480]	@ (8001c80 <HAL_I2C_Init+0x280>)
 8001a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa2:	0c9b      	lsrs	r3, r3, #18
 8001aa4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	68ba      	ldr	r2, [r7, #8]
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	6a1b      	ldr	r3, [r3, #32]
 8001ac0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	4a6a      	ldr	r2, [pc, #424]	@ (8001c74 <HAL_I2C_Init+0x274>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d802      	bhi.n	8001ad4 <HAL_I2C_Init+0xd4>
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	e009      	b.n	8001ae8 <HAL_I2C_Init+0xe8>
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001ada:	fb02 f303 	mul.w	r3, r2, r3
 8001ade:	4a69      	ldr	r2, [pc, #420]	@ (8001c84 <HAL_I2C_Init+0x284>)
 8001ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae4:	099b      	lsrs	r3, r3, #6
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	6812      	ldr	r2, [r2, #0]
 8001aec:	430b      	orrs	r3, r1
 8001aee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	69db      	ldr	r3, [r3, #28]
 8001af6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001afa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	495c      	ldr	r1, [pc, #368]	@ (8001c74 <HAL_I2C_Init+0x274>)
 8001b04:	428b      	cmp	r3, r1
 8001b06:	d819      	bhi.n	8001b3c <HAL_I2C_Init+0x13c>
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	1e59      	subs	r1, r3, #1
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b16:	1c59      	adds	r1, r3, #1
 8001b18:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001b1c:	400b      	ands	r3, r1
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d00a      	beq.n	8001b38 <HAL_I2C_Init+0x138>
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	1e59      	subs	r1, r3, #1
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b30:	3301      	adds	r3, #1
 8001b32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b36:	e051      	b.n	8001bdc <HAL_I2C_Init+0x1dc>
 8001b38:	2304      	movs	r3, #4
 8001b3a:	e04f      	b.n	8001bdc <HAL_I2C_Init+0x1dc>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d111      	bne.n	8001b68 <HAL_I2C_Init+0x168>
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	1e58      	subs	r0, r3, #1
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6859      	ldr	r1, [r3, #4]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	440b      	add	r3, r1
 8001b52:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b56:	3301      	adds	r3, #1
 8001b58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	bf0c      	ite	eq
 8001b60:	2301      	moveq	r3, #1
 8001b62:	2300      	movne	r3, #0
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	e012      	b.n	8001b8e <HAL_I2C_Init+0x18e>
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	1e58      	subs	r0, r3, #1
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6859      	ldr	r1, [r3, #4]
 8001b70:	460b      	mov	r3, r1
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	440b      	add	r3, r1
 8001b76:	0099      	lsls	r1, r3, #2
 8001b78:	440b      	add	r3, r1
 8001b7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b7e:	3301      	adds	r3, #1
 8001b80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	bf0c      	ite	eq
 8001b88:	2301      	moveq	r3, #1
 8001b8a:	2300      	movne	r3, #0
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <HAL_I2C_Init+0x196>
 8001b92:	2301      	movs	r3, #1
 8001b94:	e022      	b.n	8001bdc <HAL_I2C_Init+0x1dc>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d10e      	bne.n	8001bbc <HAL_I2C_Init+0x1bc>
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	1e58      	subs	r0, r3, #1
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6859      	ldr	r1, [r3, #4]
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	440b      	add	r3, r1
 8001bac:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bba:	e00f      	b.n	8001bdc <HAL_I2C_Init+0x1dc>
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	1e58      	subs	r0, r3, #1
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6859      	ldr	r1, [r3, #4]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	440b      	add	r3, r1
 8001bca:	0099      	lsls	r1, r3, #2
 8001bcc:	440b      	add	r3, r1
 8001bce:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bd8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001bdc:	6879      	ldr	r1, [r7, #4]
 8001bde:	6809      	ldr	r1, [r1, #0]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69da      	ldr	r2, [r3, #28]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a1b      	ldr	r3, [r3, #32]
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001c0a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	6911      	ldr	r1, [r2, #16]
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	68d2      	ldr	r2, [r2, #12]
 8001c16:	4311      	orrs	r1, r2
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	6812      	ldr	r2, [r2, #0]
 8001c1c:	430b      	orrs	r3, r1
 8001c1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	695a      	ldr	r2, [r3, #20]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	431a      	orrs	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f042 0201 	orr.w	r2, r2, #1
 8001c4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2220      	movs	r2, #32
 8001c56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	000186a0 	.word	0x000186a0
 8001c78:	001e847f 	.word	0x001e847f
 8001c7c:	003d08ff 	.word	0x003d08ff
 8001c80:	431bde83 	.word	0x431bde83
 8001c84:	10624dd3 	.word	0x10624dd3

08001c88 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e021      	b.n	8001cde <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2224      	movs	r2, #36	@ 0x24
 8001c9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 0201 	bic.w	r2, r2, #1
 8001cb0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7fe fd46 	bl	8000744 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
	...

08001ce8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b088      	sub	sp, #32
 8001cec:	af02      	add	r7, sp, #8
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	4608      	mov	r0, r1
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	817b      	strh	r3, [r7, #10]
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	813b      	strh	r3, [r7, #8]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d02:	f7fe ffc1 	bl	8000c88 <HAL_GetTick>
 8001d06:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	2b20      	cmp	r3, #32
 8001d12:	f040 80d9 	bne.w	8001ec8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	9300      	str	r3, [sp, #0]
 8001d1a:	2319      	movs	r3, #25
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	496d      	ldr	r1, [pc, #436]	@ (8001ed4 <HAL_I2C_Mem_Write+0x1ec>)
 8001d20:	68f8      	ldr	r0, [r7, #12]
 8001d22:	f000 fccd 	bl	80026c0 <I2C_WaitOnFlagUntilTimeout>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	e0cc      	b.n	8001eca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d101      	bne.n	8001d3e <HAL_I2C_Mem_Write+0x56>
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	e0c5      	b.n	8001eca <HAL_I2C_Mem_Write+0x1e2>
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2201      	movs	r2, #1
 8001d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d007      	beq.n	8001d64 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f042 0201 	orr.w	r2, r2, #1
 8001d62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2221      	movs	r2, #33	@ 0x21
 8001d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2240      	movs	r2, #64	@ 0x40
 8001d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6a3a      	ldr	r2, [r7, #32]
 8001d8e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001d94:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4a4d      	ldr	r2, [pc, #308]	@ (8001ed8 <HAL_I2C_Mem_Write+0x1f0>)
 8001da4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001da6:	88f8      	ldrh	r0, [r7, #6]
 8001da8:	893a      	ldrh	r2, [r7, #8]
 8001daa:	8979      	ldrh	r1, [r7, #10]
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	9301      	str	r3, [sp, #4]
 8001db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	4603      	mov	r3, r0
 8001db6:	68f8      	ldr	r0, [r7, #12]
 8001db8:	f000 fb04 	bl	80023c4 <I2C_RequestMemoryWrite>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d052      	beq.n	8001e68 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e081      	b.n	8001eca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f000 fd92 	bl	80028f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d00d      	beq.n	8001df2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	d107      	bne.n	8001dee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001dec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e06b      	b.n	8001eca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df6:	781a      	ldrb	r2, [r3, #0]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e02:	1c5a      	adds	r2, r3, #1
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	695b      	ldr	r3, [r3, #20]
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	2b04      	cmp	r3, #4
 8001e2e:	d11b      	bne.n	8001e68 <HAL_I2C_Mem_Write+0x180>
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d017      	beq.n	8001e68 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e3c:	781a      	ldrb	r2, [r3, #0]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e48:	1c5a      	adds	r2, r3, #1
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e52:	3b01      	subs	r3, #1
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	3b01      	subs	r3, #1
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1aa      	bne.n	8001dc6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e70:	697a      	ldr	r2, [r7, #20]
 8001e72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001e74:	68f8      	ldr	r0, [r7, #12]
 8001e76:	f000 fd85 	bl	8002984 <I2C_WaitOnBTFFlagUntilTimeout>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d00d      	beq.n	8001e9c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e84:	2b04      	cmp	r3, #4
 8001e86:	d107      	bne.n	8001e98 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e96:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e016      	b.n	8001eca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001eaa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2220      	movs	r2, #32
 8001eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	e000      	b.n	8001eca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001ec8:	2302      	movs	r3, #2
  }
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3718      	adds	r7, #24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	00100002 	.word	0x00100002
 8001ed8:	ffff0000 	.word	0xffff0000

08001edc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b08c      	sub	sp, #48	@ 0x30
 8001ee0:	af02      	add	r7, sp, #8
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	4608      	mov	r0, r1
 8001ee6:	4611      	mov	r1, r2
 8001ee8:	461a      	mov	r2, r3
 8001eea:	4603      	mov	r3, r0
 8001eec:	817b      	strh	r3, [r7, #10]
 8001eee:	460b      	mov	r3, r1
 8001ef0:	813b      	strh	r3, [r7, #8]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001efa:	f7fe fec5 	bl	8000c88 <HAL_GetTick>
 8001efe:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	2b20      	cmp	r3, #32
 8001f0a:	f040 8250 	bne.w	80023ae <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f10:	9300      	str	r3, [sp, #0]
 8001f12:	2319      	movs	r3, #25
 8001f14:	2201      	movs	r2, #1
 8001f16:	4982      	ldr	r1, [pc, #520]	@ (8002120 <HAL_I2C_Mem_Read+0x244>)
 8001f18:	68f8      	ldr	r0, [r7, #12]
 8001f1a:	f000 fbd1 	bl	80026c0 <I2C_WaitOnFlagUntilTimeout>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001f24:	2302      	movs	r3, #2
 8001f26:	e243      	b.n	80023b0 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d101      	bne.n	8001f36 <HAL_I2C_Mem_Read+0x5a>
 8001f32:	2302      	movs	r3, #2
 8001f34:	e23c      	b.n	80023b0 <HAL_I2C_Mem_Read+0x4d4>
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d007      	beq.n	8001f5c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f042 0201 	orr.w	r2, r2, #1
 8001f5a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f6a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2222      	movs	r2, #34	@ 0x22
 8001f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2240      	movs	r2, #64	@ 0x40
 8001f78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f86:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001f8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4a62      	ldr	r2, [pc, #392]	@ (8002124 <HAL_I2C_Mem_Read+0x248>)
 8001f9c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f9e:	88f8      	ldrh	r0, [r7, #6]
 8001fa0:	893a      	ldrh	r2, [r7, #8]
 8001fa2:	8979      	ldrh	r1, [r7, #10]
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa6:	9301      	str	r3, [sp, #4]
 8001fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001faa:	9300      	str	r3, [sp, #0]
 8001fac:	4603      	mov	r3, r0
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f000 fa9e 	bl	80024f0 <I2C_RequestMemoryRead>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e1f8      	b.n	80023b0 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d113      	bne.n	8001fee <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61fb      	str	r3, [r7, #28]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	61fb      	str	r3, [r7, #28]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	61fb      	str	r3, [r7, #28]
 8001fda:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	e1cc      	b.n	8002388 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d11e      	bne.n	8002034 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002004:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002006:	b672      	cpsid	i
}
 8002008:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800200a:	2300      	movs	r3, #0
 800200c:	61bb      	str	r3, [r7, #24]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	695b      	ldr	r3, [r3, #20]
 8002014:	61bb      	str	r3, [r7, #24]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	61bb      	str	r3, [r7, #24]
 800201e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800202e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002030:	b662      	cpsie	i
}
 8002032:	e035      	b.n	80020a0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002038:	2b02      	cmp	r3, #2
 800203a:	d11e      	bne.n	800207a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800204a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800204c:	b672      	cpsid	i
}
 800204e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002050:	2300      	movs	r3, #0
 8002052:	617b      	str	r3, [r7, #20]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	617b      	str	r3, [r7, #20]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	617b      	str	r3, [r7, #20]
 8002064:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002074:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002076:	b662      	cpsie	i
}
 8002078:	e012      	b.n	80020a0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002088:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800208a:	2300      	movs	r3, #0
 800208c:	613b      	str	r3, [r7, #16]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	695b      	ldr	r3, [r3, #20]
 8002094:	613b      	str	r3, [r7, #16]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	613b      	str	r3, [r7, #16]
 800209e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80020a0:	e172      	b.n	8002388 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020a6:	2b03      	cmp	r3, #3
 80020a8:	f200 811f 	bhi.w	80022ea <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d123      	bne.n	80020fc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020b6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f000 fcab 	bl	8002a14 <I2C_WaitOnRXNEFlagUntilTimeout>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e173      	b.n	80023b0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	691a      	ldr	r2, [r3, #16]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d2:	b2d2      	uxtb	r2, r2
 80020d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020da:	1c5a      	adds	r2, r3, #1
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020e4:	3b01      	subs	r3, #1
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	3b01      	subs	r3, #1
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80020fa:	e145      	b.n	8002388 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002100:	2b02      	cmp	r3, #2
 8002102:	d152      	bne.n	80021aa <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800210a:	2200      	movs	r2, #0
 800210c:	4906      	ldr	r1, [pc, #24]	@ (8002128 <HAL_I2C_Mem_Read+0x24c>)
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f000 fad6 	bl	80026c0 <I2C_WaitOnFlagUntilTimeout>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d008      	beq.n	800212c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e148      	b.n	80023b0 <HAL_I2C_Mem_Read+0x4d4>
 800211e:	bf00      	nop
 8002120:	00100002 	.word	0x00100002
 8002124:	ffff0000 	.word	0xffff0000
 8002128:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800212c:	b672      	cpsid	i
}
 800212e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800213e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	691a      	ldr	r2, [r3, #16]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800214a:	b2d2      	uxtb	r2, r2
 800214c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002152:	1c5a      	adds	r2, r3, #1
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800215c:	3b01      	subs	r3, #1
 800215e:	b29a      	uxth	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002168:	b29b      	uxth	r3, r3
 800216a:	3b01      	subs	r3, #1
 800216c:	b29a      	uxth	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002172:	b662      	cpsie	i
}
 8002174:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	691a      	ldr	r2, [r3, #16]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002180:	b2d2      	uxtb	r2, r2
 8002182:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002188:	1c5a      	adds	r2, r3, #1
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002192:	3b01      	subs	r3, #1
 8002194:	b29a      	uxth	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800219e:	b29b      	uxth	r3, r3
 80021a0:	3b01      	subs	r3, #1
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80021a8:	e0ee      	b.n	8002388 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021b0:	2200      	movs	r2, #0
 80021b2:	4981      	ldr	r1, [pc, #516]	@ (80023b8 <HAL_I2C_Mem_Read+0x4dc>)
 80021b4:	68f8      	ldr	r0, [r7, #12]
 80021b6:	f000 fa83 	bl	80026c0 <I2C_WaitOnFlagUntilTimeout>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e0f5      	b.n	80023b0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80021d4:	b672      	cpsid	i
}
 80021d6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	691a      	ldr	r2, [r3, #16]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e2:	b2d2      	uxtb	r2, r2
 80021e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ea:	1c5a      	adds	r2, r3, #1
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021f4:	3b01      	subs	r3, #1
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002200:	b29b      	uxth	r3, r3
 8002202:	3b01      	subs	r3, #1
 8002204:	b29a      	uxth	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800220a:	4b6c      	ldr	r3, [pc, #432]	@ (80023bc <HAL_I2C_Mem_Read+0x4e0>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	08db      	lsrs	r3, r3, #3
 8002210:	4a6b      	ldr	r2, [pc, #428]	@ (80023c0 <HAL_I2C_Mem_Read+0x4e4>)
 8002212:	fba2 2303 	umull	r2, r3, r2, r3
 8002216:	0a1a      	lsrs	r2, r3, #8
 8002218:	4613      	mov	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	00da      	lsls	r2, r3, #3
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002224:	6a3b      	ldr	r3, [r7, #32]
 8002226:	3b01      	subs	r3, #1
 8002228:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800222a:	6a3b      	ldr	r3, [r7, #32]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d118      	bne.n	8002262 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2200      	movs	r2, #0
 8002234:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2220      	movs	r2, #32
 800223a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224a:	f043 0220 	orr.w	r2, r3, #32
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002252:	b662      	cpsie	i
}
 8002254:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e0a6      	b.n	80023b0 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	f003 0304 	and.w	r3, r3, #4
 800226c:	2b04      	cmp	r3, #4
 800226e:	d1d9      	bne.n	8002224 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800227e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	691a      	ldr	r2, [r3, #16]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800228a:	b2d2      	uxtb	r2, r2
 800228c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002292:	1c5a      	adds	r2, r3, #1
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800229c:	3b01      	subs	r3, #1
 800229e:	b29a      	uxth	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	3b01      	subs	r3, #1
 80022ac:	b29a      	uxth	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80022b2:	b662      	cpsie	i
}
 80022b4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	691a      	ldr	r2, [r3, #16]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c0:	b2d2      	uxtb	r2, r2
 80022c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c8:	1c5a      	adds	r2, r3, #1
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022d2:	3b01      	subs	r3, #1
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022de:	b29b      	uxth	r3, r3
 80022e0:	3b01      	subs	r3, #1
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80022e8:	e04e      	b.n	8002388 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022ec:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80022ee:	68f8      	ldr	r0, [r7, #12]
 80022f0:	f000 fb90 	bl	8002a14 <I2C_WaitOnRXNEFlagUntilTimeout>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e058      	b.n	80023b0 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	691a      	ldr	r2, [r3, #16]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002308:	b2d2      	uxtb	r2, r2
 800230a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002310:	1c5a      	adds	r2, r3, #1
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800231a:	3b01      	subs	r3, #1
 800231c:	b29a      	uxth	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002326:	b29b      	uxth	r3, r3
 8002328:	3b01      	subs	r3, #1
 800232a:	b29a      	uxth	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	f003 0304 	and.w	r3, r3, #4
 800233a:	2b04      	cmp	r3, #4
 800233c:	d124      	bne.n	8002388 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002342:	2b03      	cmp	r3, #3
 8002344:	d107      	bne.n	8002356 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002354:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	691a      	ldr	r2, [r3, #16]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002360:	b2d2      	uxtb	r2, r2
 8002362:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002368:	1c5a      	adds	r2, r3, #1
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002372:	3b01      	subs	r3, #1
 8002374:	b29a      	uxth	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800237e:	b29b      	uxth	r3, r3
 8002380:	3b01      	subs	r3, #1
 8002382:	b29a      	uxth	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800238c:	2b00      	cmp	r3, #0
 800238e:	f47f ae88 	bne.w	80020a2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2220      	movs	r2, #32
 8002396:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80023aa:	2300      	movs	r3, #0
 80023ac:	e000      	b.n	80023b0 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80023ae:	2302      	movs	r3, #2
  }
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3728      	adds	r7, #40	@ 0x28
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	00010004 	.word	0x00010004
 80023bc:	20000004 	.word	0x20000004
 80023c0:	14f8b589 	.word	0x14f8b589

080023c4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b088      	sub	sp, #32
 80023c8:	af02      	add	r7, sp, #8
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	4608      	mov	r0, r1
 80023ce:	4611      	mov	r1, r2
 80023d0:	461a      	mov	r2, r3
 80023d2:	4603      	mov	r3, r0
 80023d4:	817b      	strh	r3, [r7, #10]
 80023d6:	460b      	mov	r3, r1
 80023d8:	813b      	strh	r3, [r7, #8]
 80023da:	4613      	mov	r3, r2
 80023dc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80023ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	6a3b      	ldr	r3, [r7, #32]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f000 f960 	bl	80026c0 <I2C_WaitOnFlagUntilTimeout>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00d      	beq.n	8002422 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002410:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002414:	d103      	bne.n	800241e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800241c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e05f      	b.n	80024e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002422:	897b      	ldrh	r3, [r7, #10]
 8002424:	b2db      	uxtb	r3, r3
 8002426:	461a      	mov	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002430:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002434:	6a3a      	ldr	r2, [r7, #32]
 8002436:	492d      	ldr	r1, [pc, #180]	@ (80024ec <I2C_RequestMemoryWrite+0x128>)
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f000 f9bb 	bl	80027b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e04c      	b.n	80024e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002448:	2300      	movs	r3, #0
 800244a:	617b      	str	r3, [r7, #20]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	617b      	str	r3, [r7, #20]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	617b      	str	r3, [r7, #20]
 800245c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800245e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002460:	6a39      	ldr	r1, [r7, #32]
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	f000 fa46 	bl	80028f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00d      	beq.n	800248a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002472:	2b04      	cmp	r3, #4
 8002474:	d107      	bne.n	8002486 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002484:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e02b      	b.n	80024e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800248a:	88fb      	ldrh	r3, [r7, #6]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d105      	bne.n	800249c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002490:	893b      	ldrh	r3, [r7, #8]
 8002492:	b2da      	uxtb	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	611a      	str	r2, [r3, #16]
 800249a:	e021      	b.n	80024e0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800249c:	893b      	ldrh	r3, [r7, #8]
 800249e:	0a1b      	lsrs	r3, r3, #8
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	b2da      	uxtb	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024ac:	6a39      	ldr	r1, [r7, #32]
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f000 fa20 	bl	80028f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00d      	beq.n	80024d6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024be:	2b04      	cmp	r3, #4
 80024c0:	d107      	bne.n	80024d2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e005      	b.n	80024e2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80024d6:	893b      	ldrh	r3, [r7, #8]
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3718      	adds	r7, #24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	00010002 	.word	0x00010002

080024f0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b088      	sub	sp, #32
 80024f4:	af02      	add	r7, sp, #8
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	4608      	mov	r0, r1
 80024fa:	4611      	mov	r1, r2
 80024fc:	461a      	mov	r2, r3
 80024fe:	4603      	mov	r3, r0
 8002500:	817b      	strh	r3, [r7, #10]
 8002502:	460b      	mov	r3, r1
 8002504:	813b      	strh	r3, [r7, #8]
 8002506:	4613      	mov	r3, r2
 8002508:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002518:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002528:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800252a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	6a3b      	ldr	r3, [r7, #32]
 8002530:	2200      	movs	r2, #0
 8002532:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f000 f8c2 	bl	80026c0 <I2C_WaitOnFlagUntilTimeout>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00d      	beq.n	800255e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800254c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002550:	d103      	bne.n	800255a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002558:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e0aa      	b.n	80026b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800255e:	897b      	ldrh	r3, [r7, #10]
 8002560:	b2db      	uxtb	r3, r3
 8002562:	461a      	mov	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800256c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800256e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002570:	6a3a      	ldr	r2, [r7, #32]
 8002572:	4952      	ldr	r1, [pc, #328]	@ (80026bc <I2C_RequestMemoryRead+0x1cc>)
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f000 f91d 	bl	80027b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e097      	b.n	80026b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002584:	2300      	movs	r3, #0
 8002586:	617b      	str	r3, [r7, #20]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	617b      	str	r3, [r7, #20]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	617b      	str	r3, [r7, #20]
 8002598:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800259a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800259c:	6a39      	ldr	r1, [r7, #32]
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f000 f9a8 	bl	80028f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00d      	beq.n	80025c6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	d107      	bne.n	80025c2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e076      	b.n	80026b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025c6:	88fb      	ldrh	r3, [r7, #6]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d105      	bne.n	80025d8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025cc:	893b      	ldrh	r3, [r7, #8]
 80025ce:	b2da      	uxtb	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	611a      	str	r2, [r3, #16]
 80025d6:	e021      	b.n	800261c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80025d8:	893b      	ldrh	r3, [r7, #8]
 80025da:	0a1b      	lsrs	r3, r3, #8
 80025dc:	b29b      	uxth	r3, r3
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025e8:	6a39      	ldr	r1, [r7, #32]
 80025ea:	68f8      	ldr	r0, [r7, #12]
 80025ec:	f000 f982 	bl	80028f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00d      	beq.n	8002612 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fa:	2b04      	cmp	r3, #4
 80025fc:	d107      	bne.n	800260e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800260c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e050      	b.n	80026b4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002612:	893b      	ldrh	r3, [r7, #8]
 8002614:	b2da      	uxtb	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800261c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800261e:	6a39      	ldr	r1, [r7, #32]
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f000 f967 	bl	80028f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00d      	beq.n	8002648 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002630:	2b04      	cmp	r3, #4
 8002632:	d107      	bne.n	8002644 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002642:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e035      	b.n	80026b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002656:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	6a3b      	ldr	r3, [r7, #32]
 800265e:	2200      	movs	r2, #0
 8002660:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f000 f82b 	bl	80026c0 <I2C_WaitOnFlagUntilTimeout>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d00d      	beq.n	800268c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800267a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800267e:	d103      	bne.n	8002688 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002686:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e013      	b.n	80026b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800268c:	897b      	ldrh	r3, [r7, #10]
 800268e:	b2db      	uxtb	r3, r3
 8002690:	f043 0301 	orr.w	r3, r3, #1
 8002694:	b2da      	uxtb	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800269c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269e:	6a3a      	ldr	r2, [r7, #32]
 80026a0:	4906      	ldr	r1, [pc, #24]	@ (80026bc <I2C_RequestMemoryRead+0x1cc>)
 80026a2:	68f8      	ldr	r0, [r7, #12]
 80026a4:	f000 f886 	bl	80027b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e000      	b.n	80026b4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	00010002 	.word	0x00010002

080026c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	603b      	str	r3, [r7, #0]
 80026cc:	4613      	mov	r3, r2
 80026ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026d0:	e048      	b.n	8002764 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d8:	d044      	beq.n	8002764 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026da:	f7fe fad5 	bl	8000c88 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d302      	bcc.n	80026f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d139      	bne.n	8002764 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	0c1b      	lsrs	r3, r3, #16
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d10d      	bne.n	8002716 <I2C_WaitOnFlagUntilTimeout+0x56>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	43da      	mvns	r2, r3
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	4013      	ands	r3, r2
 8002706:	b29b      	uxth	r3, r3
 8002708:	2b00      	cmp	r3, #0
 800270a:	bf0c      	ite	eq
 800270c:	2301      	moveq	r3, #1
 800270e:	2300      	movne	r3, #0
 8002710:	b2db      	uxtb	r3, r3
 8002712:	461a      	mov	r2, r3
 8002714:	e00c      	b.n	8002730 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	43da      	mvns	r2, r3
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	4013      	ands	r3, r2
 8002722:	b29b      	uxth	r3, r3
 8002724:	2b00      	cmp	r3, #0
 8002726:	bf0c      	ite	eq
 8002728:	2301      	moveq	r3, #1
 800272a:	2300      	movne	r3, #0
 800272c:	b2db      	uxtb	r3, r3
 800272e:	461a      	mov	r2, r3
 8002730:	79fb      	ldrb	r3, [r7, #7]
 8002732:	429a      	cmp	r2, r3
 8002734:	d116      	bne.n	8002764 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2220      	movs	r2, #32
 8002740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002750:	f043 0220 	orr.w	r2, r3, #32
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e023      	b.n	80027ac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	0c1b      	lsrs	r3, r3, #16
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b01      	cmp	r3, #1
 800276c:	d10d      	bne.n	800278a <I2C_WaitOnFlagUntilTimeout+0xca>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	695b      	ldr	r3, [r3, #20]
 8002774:	43da      	mvns	r2, r3
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	4013      	ands	r3, r2
 800277a:	b29b      	uxth	r3, r3
 800277c:	2b00      	cmp	r3, #0
 800277e:	bf0c      	ite	eq
 8002780:	2301      	moveq	r3, #1
 8002782:	2300      	movne	r3, #0
 8002784:	b2db      	uxtb	r3, r3
 8002786:	461a      	mov	r2, r3
 8002788:	e00c      	b.n	80027a4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	43da      	mvns	r2, r3
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	4013      	ands	r3, r2
 8002796:	b29b      	uxth	r3, r3
 8002798:	2b00      	cmp	r3, #0
 800279a:	bf0c      	ite	eq
 800279c:	2301      	moveq	r3, #1
 800279e:	2300      	movne	r3, #0
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	461a      	mov	r2, r3
 80027a4:	79fb      	ldrb	r3, [r7, #7]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d093      	beq.n	80026d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3710      	adds	r7, #16
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
 80027c0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027c2:	e071      	b.n	80028a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027d2:	d123      	bne.n	800281c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027e2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80027ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2220      	movs	r2, #32
 80027f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002808:	f043 0204 	orr.w	r2, r3, #4
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e067      	b.n	80028ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002822:	d041      	beq.n	80028a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002824:	f7fe fa30 	bl	8000c88 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	429a      	cmp	r2, r3
 8002832:	d302      	bcc.n	800283a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d136      	bne.n	80028a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	0c1b      	lsrs	r3, r3, #16
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b01      	cmp	r3, #1
 8002842:	d10c      	bne.n	800285e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	43da      	mvns	r2, r3
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	4013      	ands	r3, r2
 8002850:	b29b      	uxth	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	bf14      	ite	ne
 8002856:	2301      	movne	r3, #1
 8002858:	2300      	moveq	r3, #0
 800285a:	b2db      	uxtb	r3, r3
 800285c:	e00b      	b.n	8002876 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	43da      	mvns	r2, r3
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	4013      	ands	r3, r2
 800286a:	b29b      	uxth	r3, r3
 800286c:	2b00      	cmp	r3, #0
 800286e:	bf14      	ite	ne
 8002870:	2301      	movne	r3, #1
 8002872:	2300      	moveq	r3, #0
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d016      	beq.n	80028a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2220      	movs	r2, #32
 8002884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002894:	f043 0220 	orr.w	r2, r3, #32
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e021      	b.n	80028ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	0c1b      	lsrs	r3, r3, #16
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d10c      	bne.n	80028cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	43da      	mvns	r2, r3
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	4013      	ands	r3, r2
 80028be:	b29b      	uxth	r3, r3
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	bf14      	ite	ne
 80028c4:	2301      	movne	r3, #1
 80028c6:	2300      	moveq	r3, #0
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	e00b      	b.n	80028e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	43da      	mvns	r2, r3
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	4013      	ands	r3, r2
 80028d8:	b29b      	uxth	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	bf14      	ite	ne
 80028de:	2301      	movne	r3, #1
 80028e0:	2300      	moveq	r3, #0
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f47f af6d 	bne.w	80027c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002900:	e034      	b.n	800296c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f000 f8e3 	bl	8002ace <I2C_IsAcknowledgeFailed>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e034      	b.n	800297c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002918:	d028      	beq.n	800296c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800291a:	f7fe f9b5 	bl	8000c88 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	68ba      	ldr	r2, [r7, #8]
 8002926:	429a      	cmp	r2, r3
 8002928:	d302      	bcc.n	8002930 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d11d      	bne.n	800296c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800293a:	2b80      	cmp	r3, #128	@ 0x80
 800293c:	d016      	beq.n	800296c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2220      	movs	r2, #32
 8002948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002958:	f043 0220 	orr.w	r2, r3, #32
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e007      	b.n	800297c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002976:	2b80      	cmp	r3, #128	@ 0x80
 8002978:	d1c3      	bne.n	8002902 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002990:	e034      	b.n	80029fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f000 f89b 	bl	8002ace <I2C_IsAcknowledgeFailed>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e034      	b.n	8002a0c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a8:	d028      	beq.n	80029fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029aa:	f7fe f96d 	bl	8000c88 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	68ba      	ldr	r2, [r7, #8]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d302      	bcc.n	80029c0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d11d      	bne.n	80029fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	f003 0304 	and.w	r3, r3, #4
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	d016      	beq.n	80029fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2220      	movs	r2, #32
 80029d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e8:	f043 0220 	orr.w	r2, r3, #32
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e007      	b.n	8002a0c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	f003 0304 	and.w	r3, r3, #4
 8002a06:	2b04      	cmp	r3, #4
 8002a08:	d1c3      	bne.n	8002992 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a20:	e049      	b.n	8002ab6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	695b      	ldr	r3, [r3, #20]
 8002a28:	f003 0310 	and.w	r3, r3, #16
 8002a2c:	2b10      	cmp	r3, #16
 8002a2e:	d119      	bne.n	8002a64 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f06f 0210 	mvn.w	r2, #16
 8002a38:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2220      	movs	r2, #32
 8002a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e030      	b.n	8002ac6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a64:	f7fe f910 	bl	8000c88 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	68ba      	ldr	r2, [r7, #8]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d302      	bcc.n	8002a7a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d11d      	bne.n	8002ab6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	695b      	ldr	r3, [r3, #20]
 8002a80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a84:	2b40      	cmp	r3, #64	@ 0x40
 8002a86:	d016      	beq.n	8002ab6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2220      	movs	r2, #32
 8002a92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa2:	f043 0220 	orr.w	r2, r3, #32
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e007      	b.n	8002ac6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	695b      	ldr	r3, [r3, #20]
 8002abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ac0:	2b40      	cmp	r3, #64	@ 0x40
 8002ac2:	d1ae      	bne.n	8002a22 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b083      	sub	sp, #12
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	695b      	ldr	r3, [r3, #20]
 8002adc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ae0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ae4:	d11b      	bne.n	8002b1e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002aee:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2220      	movs	r2, #32
 8002afa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0a:	f043 0204 	orr.w	r2, r3, #4
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e000      	b.n	8002b20 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bc80      	pop	{r7}
 8002b28:	4770      	bx	lr
	...

08002b2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e272      	b.n	8003024 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f000 8087 	beq.w	8002c5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b4c:	4b92      	ldr	r3, [pc, #584]	@ (8002d98 <HAL_RCC_OscConfig+0x26c>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 030c 	and.w	r3, r3, #12
 8002b54:	2b04      	cmp	r3, #4
 8002b56:	d00c      	beq.n	8002b72 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b58:	4b8f      	ldr	r3, [pc, #572]	@ (8002d98 <HAL_RCC_OscConfig+0x26c>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f003 030c 	and.w	r3, r3, #12
 8002b60:	2b08      	cmp	r3, #8
 8002b62:	d112      	bne.n	8002b8a <HAL_RCC_OscConfig+0x5e>
 8002b64:	4b8c      	ldr	r3, [pc, #560]	@ (8002d98 <HAL_RCC_OscConfig+0x26c>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b70:	d10b      	bne.n	8002b8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b72:	4b89      	ldr	r3, [pc, #548]	@ (8002d98 <HAL_RCC_OscConfig+0x26c>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d06c      	beq.n	8002c58 <HAL_RCC_OscConfig+0x12c>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d168      	bne.n	8002c58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e24c      	b.n	8003024 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b92:	d106      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x76>
 8002b94:	4b80      	ldr	r3, [pc, #512]	@ (8002d98 <HAL_RCC_OscConfig+0x26c>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a7f      	ldr	r2, [pc, #508]	@ (8002d98 <HAL_RCC_OscConfig+0x26c>)
 8002b9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b9e:	6013      	str	r3, [r2, #0]
 8002ba0:	e02e      	b.n	8002c00 <HAL_RCC_OscConfig+0xd4>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10c      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x98>
 8002baa:	4b7b      	ldr	r3, [pc, #492]	@ (8002d98 <HAL_RCC_OscConfig+0x26c>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a7a      	ldr	r2, [pc, #488]	@ (8002d98 <HAL_RCC_OscConfig+0x26c>)
 8002bb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bb4:	6013      	str	r3, [r2, #0]
 8002bb6:	4b78      	ldr	r3, [pc, #480]	@ (8002d98 <HAL_RCC_OscConfig+0x26c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a77      	ldr	r2, [pc, #476]	@ (8002d98 <HAL_RCC_OscConfig+0x26c>)
 8002bbc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bc0:	6013      	str	r3, [r2, #0]
 8002bc2:	e01d      	b.n	8002c00 <HAL_RCC_OscConfig+0xd4>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bcc:	d10c      	bne.n	8002be8 <HAL_RCC_OscConfig+0xbc>
 8002bce:	4b72      	ldr	r3, [pc, #456]	@ (8002d98 <HAL_RCC_OscConfig+0x26c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a71      	ldr	r2, [pc, #452]	@ (8002d98 <HAL_RCC_OscConfig+0x26c>)
 8002bd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bd8:	6013      	str	r3, [r2, #0]
 8002bda:	4b6f      	ldr	r3, [pc, #444]	@ (8002d98 <HAL_RCC_OscConfig+0x26c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a6e      	ldr	r2, [pc, #440]	@ (8002d98 <HAL_RCC_OscConfig+0x26c>)
 8002be0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	e00b      	b.n	8002c00 <HAL_RCC_OscConfig+0xd4>
 8002be8:	4b6b      	ldr	r3, [pc, #428]	@ (8002d98 <HAL_RCC_OscConfig+0x26c>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a6a      	ldr	r2, [pc, #424]	@ (8002d98 <HAL_RCC_OscConfig+0x26c>)
 8002bee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bf2:	6013      	str	r3, [r2, #0]
 8002bf4:	4b68      	ldr	r3, [pc, #416]	@ (8002d98 <HAL_RCC_OscConfig+0x26c>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a67      	ldr	r2, [pc, #412]	@ (8002d98 <HAL_RCC_OscConfig+0x26c>)
 8002bfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bfe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d013      	beq.n	8002c30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c08:	f7fe f83e 	bl	8000c88 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c10:	f7fe f83a 	bl	8000c88 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b64      	cmp	r3, #100	@ 0x64
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e200      	b.n	8003024 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c22:	4b5d      	ldr	r3, [pc, #372]	@ (8002d98 <HAL_RCC_OscConfig+0x26c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d0f0      	beq.n	8002c10 <HAL_RCC_OscConfig+0xe4>
 8002c2e:	e014      	b.n	8002c5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c30:	f7fe f82a 	bl	8000c88 <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c38:	f7fe f826 	bl	8000c88 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b64      	cmp	r3, #100	@ 0x64
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e1ec      	b.n	8003024 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c4a:	4b53      	ldr	r3, [pc, #332]	@ (8002d98 <HAL_RCC_OscConfig+0x26c>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1f0      	bne.n	8002c38 <HAL_RCC_OscConfig+0x10c>
 8002c56:	e000      	b.n	8002c5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d063      	beq.n	8002d2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c66:	4b4c      	ldr	r3, [pc, #304]	@ (8002d98 <HAL_RCC_OscConfig+0x26c>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f003 030c 	and.w	r3, r3, #12
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00b      	beq.n	8002c8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c72:	4b49      	ldr	r3, [pc, #292]	@ (8002d98 <HAL_RCC_OscConfig+0x26c>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f003 030c 	and.w	r3, r3, #12
 8002c7a:	2b08      	cmp	r3, #8
 8002c7c:	d11c      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x18c>
 8002c7e:	4b46      	ldr	r3, [pc, #280]	@ (8002d98 <HAL_RCC_OscConfig+0x26c>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d116      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c8a:	4b43      	ldr	r3, [pc, #268]	@ (8002d98 <HAL_RCC_OscConfig+0x26c>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d005      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x176>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d001      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e1c0      	b.n	8003024 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca2:	4b3d      	ldr	r3, [pc, #244]	@ (8002d98 <HAL_RCC_OscConfig+0x26c>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	4939      	ldr	r1, [pc, #228]	@ (8002d98 <HAL_RCC_OscConfig+0x26c>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cb6:	e03a      	b.n	8002d2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d020      	beq.n	8002d02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cc0:	4b36      	ldr	r3, [pc, #216]	@ (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc6:	f7fd ffdf 	bl	8000c88 <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ccc:	e008      	b.n	8002ce0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cce:	f7fd ffdb 	bl	8000c88 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d901      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e1a1      	b.n	8003024 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce0:	4b2d      	ldr	r3, [pc, #180]	@ (8002d98 <HAL_RCC_OscConfig+0x26c>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d0f0      	beq.n	8002cce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cec:	4b2a      	ldr	r3, [pc, #168]	@ (8002d98 <HAL_RCC_OscConfig+0x26c>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	00db      	lsls	r3, r3, #3
 8002cfa:	4927      	ldr	r1, [pc, #156]	@ (8002d98 <HAL_RCC_OscConfig+0x26c>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	600b      	str	r3, [r1, #0]
 8002d00:	e015      	b.n	8002d2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d02:	4b26      	ldr	r3, [pc, #152]	@ (8002d9c <HAL_RCC_OscConfig+0x270>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d08:	f7fd ffbe 	bl	8000c88 <HAL_GetTick>
 8002d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d10:	f7fd ffba 	bl	8000c88 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e180      	b.n	8003024 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d22:	4b1d      	ldr	r3, [pc, #116]	@ (8002d98 <HAL_RCC_OscConfig+0x26c>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1f0      	bne.n	8002d10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0308 	and.w	r3, r3, #8
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d03a      	beq.n	8002db0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d019      	beq.n	8002d76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d42:	4b17      	ldr	r3, [pc, #92]	@ (8002da0 <HAL_RCC_OscConfig+0x274>)
 8002d44:	2201      	movs	r2, #1
 8002d46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d48:	f7fd ff9e 	bl	8000c88 <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d50:	f7fd ff9a 	bl	8000c88 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e160      	b.n	8003024 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d62:	4b0d      	ldr	r3, [pc, #52]	@ (8002d98 <HAL_RCC_OscConfig+0x26c>)
 8002d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d0f0      	beq.n	8002d50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d6e:	2001      	movs	r0, #1
 8002d70:	f000 face 	bl	8003310 <RCC_Delay>
 8002d74:	e01c      	b.n	8002db0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d76:	4b0a      	ldr	r3, [pc, #40]	@ (8002da0 <HAL_RCC_OscConfig+0x274>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d7c:	f7fd ff84 	bl	8000c88 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d82:	e00f      	b.n	8002da4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d84:	f7fd ff80 	bl	8000c88 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d908      	bls.n	8002da4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e146      	b.n	8003024 <HAL_RCC_OscConfig+0x4f8>
 8002d96:	bf00      	nop
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	42420000 	.word	0x42420000
 8002da0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002da4:	4b92      	ldr	r3, [pc, #584]	@ (8002ff0 <HAL_RCC_OscConfig+0x4c4>)
 8002da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1e9      	bne.n	8002d84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0304 	and.w	r3, r3, #4
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f000 80a6 	beq.w	8002f0a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dc2:	4b8b      	ldr	r3, [pc, #556]	@ (8002ff0 <HAL_RCC_OscConfig+0x4c4>)
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10d      	bne.n	8002dea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dce:	4b88      	ldr	r3, [pc, #544]	@ (8002ff0 <HAL_RCC_OscConfig+0x4c4>)
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	4a87      	ldr	r2, [pc, #540]	@ (8002ff0 <HAL_RCC_OscConfig+0x4c4>)
 8002dd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dd8:	61d3      	str	r3, [r2, #28]
 8002dda:	4b85      	ldr	r3, [pc, #532]	@ (8002ff0 <HAL_RCC_OscConfig+0x4c4>)
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002de2:	60bb      	str	r3, [r7, #8]
 8002de4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002de6:	2301      	movs	r3, #1
 8002de8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dea:	4b82      	ldr	r3, [pc, #520]	@ (8002ff4 <HAL_RCC_OscConfig+0x4c8>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d118      	bne.n	8002e28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002df6:	4b7f      	ldr	r3, [pc, #508]	@ (8002ff4 <HAL_RCC_OscConfig+0x4c8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a7e      	ldr	r2, [pc, #504]	@ (8002ff4 <HAL_RCC_OscConfig+0x4c8>)
 8002dfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e02:	f7fd ff41 	bl	8000c88 <HAL_GetTick>
 8002e06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e08:	e008      	b.n	8002e1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e0a:	f7fd ff3d 	bl	8000c88 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b64      	cmp	r3, #100	@ 0x64
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e103      	b.n	8003024 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e1c:	4b75      	ldr	r3, [pc, #468]	@ (8002ff4 <HAL_RCC_OscConfig+0x4c8>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0f0      	beq.n	8002e0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d106      	bne.n	8002e3e <HAL_RCC_OscConfig+0x312>
 8002e30:	4b6f      	ldr	r3, [pc, #444]	@ (8002ff0 <HAL_RCC_OscConfig+0x4c4>)
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	4a6e      	ldr	r2, [pc, #440]	@ (8002ff0 <HAL_RCC_OscConfig+0x4c4>)
 8002e36:	f043 0301 	orr.w	r3, r3, #1
 8002e3a:	6213      	str	r3, [r2, #32]
 8002e3c:	e02d      	b.n	8002e9a <HAL_RCC_OscConfig+0x36e>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10c      	bne.n	8002e60 <HAL_RCC_OscConfig+0x334>
 8002e46:	4b6a      	ldr	r3, [pc, #424]	@ (8002ff0 <HAL_RCC_OscConfig+0x4c4>)
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	4a69      	ldr	r2, [pc, #420]	@ (8002ff0 <HAL_RCC_OscConfig+0x4c4>)
 8002e4c:	f023 0301 	bic.w	r3, r3, #1
 8002e50:	6213      	str	r3, [r2, #32]
 8002e52:	4b67      	ldr	r3, [pc, #412]	@ (8002ff0 <HAL_RCC_OscConfig+0x4c4>)
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	4a66      	ldr	r2, [pc, #408]	@ (8002ff0 <HAL_RCC_OscConfig+0x4c4>)
 8002e58:	f023 0304 	bic.w	r3, r3, #4
 8002e5c:	6213      	str	r3, [r2, #32]
 8002e5e:	e01c      	b.n	8002e9a <HAL_RCC_OscConfig+0x36e>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	2b05      	cmp	r3, #5
 8002e66:	d10c      	bne.n	8002e82 <HAL_RCC_OscConfig+0x356>
 8002e68:	4b61      	ldr	r3, [pc, #388]	@ (8002ff0 <HAL_RCC_OscConfig+0x4c4>)
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	4a60      	ldr	r2, [pc, #384]	@ (8002ff0 <HAL_RCC_OscConfig+0x4c4>)
 8002e6e:	f043 0304 	orr.w	r3, r3, #4
 8002e72:	6213      	str	r3, [r2, #32]
 8002e74:	4b5e      	ldr	r3, [pc, #376]	@ (8002ff0 <HAL_RCC_OscConfig+0x4c4>)
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	4a5d      	ldr	r2, [pc, #372]	@ (8002ff0 <HAL_RCC_OscConfig+0x4c4>)
 8002e7a:	f043 0301 	orr.w	r3, r3, #1
 8002e7e:	6213      	str	r3, [r2, #32]
 8002e80:	e00b      	b.n	8002e9a <HAL_RCC_OscConfig+0x36e>
 8002e82:	4b5b      	ldr	r3, [pc, #364]	@ (8002ff0 <HAL_RCC_OscConfig+0x4c4>)
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	4a5a      	ldr	r2, [pc, #360]	@ (8002ff0 <HAL_RCC_OscConfig+0x4c4>)
 8002e88:	f023 0301 	bic.w	r3, r3, #1
 8002e8c:	6213      	str	r3, [r2, #32]
 8002e8e:	4b58      	ldr	r3, [pc, #352]	@ (8002ff0 <HAL_RCC_OscConfig+0x4c4>)
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	4a57      	ldr	r2, [pc, #348]	@ (8002ff0 <HAL_RCC_OscConfig+0x4c4>)
 8002e94:	f023 0304 	bic.w	r3, r3, #4
 8002e98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d015      	beq.n	8002ece <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ea2:	f7fd fef1 	bl	8000c88 <HAL_GetTick>
 8002ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea8:	e00a      	b.n	8002ec0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eaa:	f7fd feed 	bl	8000c88 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e0b1      	b.n	8003024 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ec0:	4b4b      	ldr	r3, [pc, #300]	@ (8002ff0 <HAL_RCC_OscConfig+0x4c4>)
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d0ee      	beq.n	8002eaa <HAL_RCC_OscConfig+0x37e>
 8002ecc:	e014      	b.n	8002ef8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ece:	f7fd fedb 	bl	8000c88 <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ed4:	e00a      	b.n	8002eec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ed6:	f7fd fed7 	bl	8000c88 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e09b      	b.n	8003024 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eec:	4b40      	ldr	r3, [pc, #256]	@ (8002ff0 <HAL_RCC_OscConfig+0x4c4>)
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1ee      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ef8:	7dfb      	ldrb	r3, [r7, #23]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d105      	bne.n	8002f0a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002efe:	4b3c      	ldr	r3, [pc, #240]	@ (8002ff0 <HAL_RCC_OscConfig+0x4c4>)
 8002f00:	69db      	ldr	r3, [r3, #28]
 8002f02:	4a3b      	ldr	r2, [pc, #236]	@ (8002ff0 <HAL_RCC_OscConfig+0x4c4>)
 8002f04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f08:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	69db      	ldr	r3, [r3, #28]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f000 8087 	beq.w	8003022 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f14:	4b36      	ldr	r3, [pc, #216]	@ (8002ff0 <HAL_RCC_OscConfig+0x4c4>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f003 030c 	and.w	r3, r3, #12
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	d061      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	69db      	ldr	r3, [r3, #28]
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d146      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f28:	4b33      	ldr	r3, [pc, #204]	@ (8002ff8 <HAL_RCC_OscConfig+0x4cc>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f2e:	f7fd feab 	bl	8000c88 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f34:	e008      	b.n	8002f48 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f36:	f7fd fea7 	bl	8000c88 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e06d      	b.n	8003024 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f48:	4b29      	ldr	r3, [pc, #164]	@ (8002ff0 <HAL_RCC_OscConfig+0x4c4>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1f0      	bne.n	8002f36 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f5c:	d108      	bne.n	8002f70 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f5e:	4b24      	ldr	r3, [pc, #144]	@ (8002ff0 <HAL_RCC_OscConfig+0x4c4>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	4921      	ldr	r1, [pc, #132]	@ (8002ff0 <HAL_RCC_OscConfig+0x4c4>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f70:	4b1f      	ldr	r3, [pc, #124]	@ (8002ff0 <HAL_RCC_OscConfig+0x4c4>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a19      	ldr	r1, [r3, #32]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f80:	430b      	orrs	r3, r1
 8002f82:	491b      	ldr	r1, [pc, #108]	@ (8002ff0 <HAL_RCC_OscConfig+0x4c4>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f88:	4b1b      	ldr	r3, [pc, #108]	@ (8002ff8 <HAL_RCC_OscConfig+0x4cc>)
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8e:	f7fd fe7b 	bl	8000c88 <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f94:	e008      	b.n	8002fa8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f96:	f7fd fe77 	bl	8000c88 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e03d      	b.n	8003024 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fa8:	4b11      	ldr	r3, [pc, #68]	@ (8002ff0 <HAL_RCC_OscConfig+0x4c4>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d0f0      	beq.n	8002f96 <HAL_RCC_OscConfig+0x46a>
 8002fb4:	e035      	b.n	8003022 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fb6:	4b10      	ldr	r3, [pc, #64]	@ (8002ff8 <HAL_RCC_OscConfig+0x4cc>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fbc:	f7fd fe64 	bl	8000c88 <HAL_GetTick>
 8002fc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fc4:	f7fd fe60 	bl	8000c88 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e026      	b.n	8003024 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fd6:	4b06      	ldr	r3, [pc, #24]	@ (8002ff0 <HAL_RCC_OscConfig+0x4c4>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1f0      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x498>
 8002fe2:	e01e      	b.n	8003022 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	69db      	ldr	r3, [r3, #28]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d107      	bne.n	8002ffc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e019      	b.n	8003024 <HAL_RCC_OscConfig+0x4f8>
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	40007000 	.word	0x40007000
 8002ff8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800302c <HAL_RCC_OscConfig+0x500>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	429a      	cmp	r2, r3
 800300e:	d106      	bne.n	800301e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800301a:	429a      	cmp	r2, r3
 800301c:	d001      	beq.n	8003022 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e000      	b.n	8003024 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3718      	adds	r7, #24
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	40021000 	.word	0x40021000

08003030 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d101      	bne.n	8003044 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e0d0      	b.n	80031e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003044:	4b6a      	ldr	r3, [pc, #424]	@ (80031f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	429a      	cmp	r2, r3
 8003050:	d910      	bls.n	8003074 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003052:	4b67      	ldr	r3, [pc, #412]	@ (80031f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f023 0207 	bic.w	r2, r3, #7
 800305a:	4965      	ldr	r1, [pc, #404]	@ (80031f0 <HAL_RCC_ClockConfig+0x1c0>)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	4313      	orrs	r3, r2
 8003060:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003062:	4b63      	ldr	r3, [pc, #396]	@ (80031f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0307 	and.w	r3, r3, #7
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	429a      	cmp	r2, r3
 800306e:	d001      	beq.n	8003074 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e0b8      	b.n	80031e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d020      	beq.n	80030c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0304 	and.w	r3, r3, #4
 8003088:	2b00      	cmp	r3, #0
 800308a:	d005      	beq.n	8003098 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800308c:	4b59      	ldr	r3, [pc, #356]	@ (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	4a58      	ldr	r2, [pc, #352]	@ (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003092:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003096:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0308 	and.w	r3, r3, #8
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d005      	beq.n	80030b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030a4:	4b53      	ldr	r3, [pc, #332]	@ (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	4a52      	ldr	r2, [pc, #328]	@ (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 80030aa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80030ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030b0:	4b50      	ldr	r3, [pc, #320]	@ (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	494d      	ldr	r1, [pc, #308]	@ (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d040      	beq.n	8003150 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d107      	bne.n	80030e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030d6:	4b47      	ldr	r3, [pc, #284]	@ (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d115      	bne.n	800310e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e07f      	b.n	80031e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d107      	bne.n	80030fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ee:	4b41      	ldr	r3, [pc, #260]	@ (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d109      	bne.n	800310e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e073      	b.n	80031e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030fe:	4b3d      	ldr	r3, [pc, #244]	@ (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e06b      	b.n	80031e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800310e:	4b39      	ldr	r3, [pc, #228]	@ (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f023 0203 	bic.w	r2, r3, #3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	4936      	ldr	r1, [pc, #216]	@ (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 800311c:	4313      	orrs	r3, r2
 800311e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003120:	f7fd fdb2 	bl	8000c88 <HAL_GetTick>
 8003124:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003126:	e00a      	b.n	800313e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003128:	f7fd fdae 	bl	8000c88 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003136:	4293      	cmp	r3, r2
 8003138:	d901      	bls.n	800313e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e053      	b.n	80031e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800313e:	4b2d      	ldr	r3, [pc, #180]	@ (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f003 020c 	and.w	r2, r3, #12
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	429a      	cmp	r2, r3
 800314e:	d1eb      	bne.n	8003128 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003150:	4b27      	ldr	r3, [pc, #156]	@ (80031f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	683a      	ldr	r2, [r7, #0]
 800315a:	429a      	cmp	r2, r3
 800315c:	d210      	bcs.n	8003180 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800315e:	4b24      	ldr	r3, [pc, #144]	@ (80031f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f023 0207 	bic.w	r2, r3, #7
 8003166:	4922      	ldr	r1, [pc, #136]	@ (80031f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	4313      	orrs	r3, r2
 800316c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800316e:	4b20      	ldr	r3, [pc, #128]	@ (80031f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0307 	and.w	r3, r3, #7
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	429a      	cmp	r2, r3
 800317a:	d001      	beq.n	8003180 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e032      	b.n	80031e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b00      	cmp	r3, #0
 800318a:	d008      	beq.n	800319e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800318c:	4b19      	ldr	r3, [pc, #100]	@ (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	4916      	ldr	r1, [pc, #88]	@ (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 800319a:	4313      	orrs	r3, r2
 800319c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0308 	and.w	r3, r3, #8
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d009      	beq.n	80031be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031aa:	4b12      	ldr	r3, [pc, #72]	@ (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	490e      	ldr	r1, [pc, #56]	@ (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031be:	f000 f821 	bl	8003204 <HAL_RCC_GetSysClockFreq>
 80031c2:	4602      	mov	r2, r0
 80031c4:	4b0b      	ldr	r3, [pc, #44]	@ (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	091b      	lsrs	r3, r3, #4
 80031ca:	f003 030f 	and.w	r3, r3, #15
 80031ce:	490a      	ldr	r1, [pc, #40]	@ (80031f8 <HAL_RCC_ClockConfig+0x1c8>)
 80031d0:	5ccb      	ldrb	r3, [r1, r3]
 80031d2:	fa22 f303 	lsr.w	r3, r2, r3
 80031d6:	4a09      	ldr	r2, [pc, #36]	@ (80031fc <HAL_RCC_ClockConfig+0x1cc>)
 80031d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031da:	4b09      	ldr	r3, [pc, #36]	@ (8003200 <HAL_RCC_ClockConfig+0x1d0>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f7fd fd10 	bl	8000c04 <HAL_InitTick>

  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	40022000 	.word	0x40022000
 80031f4:	40021000 	.word	0x40021000
 80031f8:	08004238 	.word	0x08004238
 80031fc:	20000004 	.word	0x20000004
 8003200:	2000000c 	.word	0x2000000c

08003204 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003204:	b480      	push	{r7}
 8003206:	b087      	sub	sp, #28
 8003208:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800320a:	2300      	movs	r3, #0
 800320c:	60fb      	str	r3, [r7, #12]
 800320e:	2300      	movs	r3, #0
 8003210:	60bb      	str	r3, [r7, #8]
 8003212:	2300      	movs	r3, #0
 8003214:	617b      	str	r3, [r7, #20]
 8003216:	2300      	movs	r3, #0
 8003218:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800321a:	2300      	movs	r3, #0
 800321c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800321e:	4b1e      	ldr	r3, [pc, #120]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x94>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f003 030c 	and.w	r3, r3, #12
 800322a:	2b04      	cmp	r3, #4
 800322c:	d002      	beq.n	8003234 <HAL_RCC_GetSysClockFreq+0x30>
 800322e:	2b08      	cmp	r3, #8
 8003230:	d003      	beq.n	800323a <HAL_RCC_GetSysClockFreq+0x36>
 8003232:	e027      	b.n	8003284 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003234:	4b19      	ldr	r3, [pc, #100]	@ (800329c <HAL_RCC_GetSysClockFreq+0x98>)
 8003236:	613b      	str	r3, [r7, #16]
      break;
 8003238:	e027      	b.n	800328a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	0c9b      	lsrs	r3, r3, #18
 800323e:	f003 030f 	and.w	r3, r3, #15
 8003242:	4a17      	ldr	r2, [pc, #92]	@ (80032a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003244:	5cd3      	ldrb	r3, [r2, r3]
 8003246:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d010      	beq.n	8003274 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003252:	4b11      	ldr	r3, [pc, #68]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x94>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	0c5b      	lsrs	r3, r3, #17
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	4a11      	ldr	r2, [pc, #68]	@ (80032a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800325e:	5cd3      	ldrb	r3, [r2, r3]
 8003260:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a0d      	ldr	r2, [pc, #52]	@ (800329c <HAL_RCC_GetSysClockFreq+0x98>)
 8003266:	fb03 f202 	mul.w	r2, r3, r2
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003270:	617b      	str	r3, [r7, #20]
 8003272:	e004      	b.n	800327e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	4a0c      	ldr	r2, [pc, #48]	@ (80032a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003278:	fb02 f303 	mul.w	r3, r2, r3
 800327c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	613b      	str	r3, [r7, #16]
      break;
 8003282:	e002      	b.n	800328a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003284:	4b05      	ldr	r3, [pc, #20]	@ (800329c <HAL_RCC_GetSysClockFreq+0x98>)
 8003286:	613b      	str	r3, [r7, #16]
      break;
 8003288:	bf00      	nop
    }
  }
  return sysclockfreq;
 800328a:	693b      	ldr	r3, [r7, #16]
}
 800328c:	4618      	mov	r0, r3
 800328e:	371c      	adds	r7, #28
 8003290:	46bd      	mov	sp, r7
 8003292:	bc80      	pop	{r7}
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	40021000 	.word	0x40021000
 800329c:	007a1200 	.word	0x007a1200
 80032a0:	08004250 	.word	0x08004250
 80032a4:	08004260 	.word	0x08004260
 80032a8:	003d0900 	.word	0x003d0900

080032ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032b0:	4b02      	ldr	r3, [pc, #8]	@ (80032bc <HAL_RCC_GetHCLKFreq+0x10>)
 80032b2:	681b      	ldr	r3, [r3, #0]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bc80      	pop	{r7}
 80032ba:	4770      	bx	lr
 80032bc:	20000004 	.word	0x20000004

080032c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032c4:	f7ff fff2 	bl	80032ac <HAL_RCC_GetHCLKFreq>
 80032c8:	4602      	mov	r2, r0
 80032ca:	4b05      	ldr	r3, [pc, #20]	@ (80032e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	0a1b      	lsrs	r3, r3, #8
 80032d0:	f003 0307 	and.w	r3, r3, #7
 80032d4:	4903      	ldr	r1, [pc, #12]	@ (80032e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032d6:	5ccb      	ldrb	r3, [r1, r3]
 80032d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032dc:	4618      	mov	r0, r3
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	40021000 	.word	0x40021000
 80032e4:	08004248 	.word	0x08004248

080032e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032ec:	f7ff ffde 	bl	80032ac <HAL_RCC_GetHCLKFreq>
 80032f0:	4602      	mov	r2, r0
 80032f2:	4b05      	ldr	r3, [pc, #20]	@ (8003308 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	0adb      	lsrs	r3, r3, #11
 80032f8:	f003 0307 	and.w	r3, r3, #7
 80032fc:	4903      	ldr	r1, [pc, #12]	@ (800330c <HAL_RCC_GetPCLK2Freq+0x24>)
 80032fe:	5ccb      	ldrb	r3, [r1, r3]
 8003300:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003304:	4618      	mov	r0, r3
 8003306:	bd80      	pop	{r7, pc}
 8003308:	40021000 	.word	0x40021000
 800330c:	08004248 	.word	0x08004248

08003310 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003318:	4b0a      	ldr	r3, [pc, #40]	@ (8003344 <RCC_Delay+0x34>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a0a      	ldr	r2, [pc, #40]	@ (8003348 <RCC_Delay+0x38>)
 800331e:	fba2 2303 	umull	r2, r3, r2, r3
 8003322:	0a5b      	lsrs	r3, r3, #9
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	fb02 f303 	mul.w	r3, r2, r3
 800332a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800332c:	bf00      	nop
  }
  while (Delay --);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	1e5a      	subs	r2, r3, #1
 8003332:	60fa      	str	r2, [r7, #12]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1f9      	bne.n	800332c <RCC_Delay+0x1c>
}
 8003338:	bf00      	nop
 800333a:	bf00      	nop
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	bc80      	pop	{r7}
 8003342:	4770      	bx	lr
 8003344:	20000004 	.word	0x20000004
 8003348:	10624dd3 	.word	0x10624dd3

0800334c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e042      	b.n	80033e4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d106      	bne.n	8003378 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7fd fa08 	bl	8000788 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2224      	movs	r2, #36	@ 0x24
 800337c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68da      	ldr	r2, [r3, #12]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800338e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 f98f 	bl	80036b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	691a      	ldr	r2, [r3, #16]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80033a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	695a      	ldr	r2, [r3, #20]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80033b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68da      	ldr	r2, [r3, #12]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2220      	movs	r2, #32
 80033d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2220      	movs	r2, #32
 80033d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3708      	adds	r7, #8
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b08a      	sub	sp, #40	@ 0x28
 80033f0:	af02      	add	r7, sp, #8
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	603b      	str	r3, [r7, #0]
 80033f8:	4613      	mov	r3, r2
 80033fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033fc:	2300      	movs	r3, #0
 80033fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b20      	cmp	r3, #32
 800340a:	d175      	bne.n	80034f8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d002      	beq.n	8003418 <HAL_UART_Transmit+0x2c>
 8003412:	88fb      	ldrh	r3, [r7, #6]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e06e      	b.n	80034fa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2221      	movs	r2, #33	@ 0x21
 8003426:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800342a:	f7fd fc2d 	bl	8000c88 <HAL_GetTick>
 800342e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	88fa      	ldrh	r2, [r7, #6]
 8003434:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	88fa      	ldrh	r2, [r7, #6]
 800343a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003444:	d108      	bne.n	8003458 <HAL_UART_Transmit+0x6c>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d104      	bne.n	8003458 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800344e:	2300      	movs	r3, #0
 8003450:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	61bb      	str	r3, [r7, #24]
 8003456:	e003      	b.n	8003460 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800345c:	2300      	movs	r3, #0
 800345e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003460:	e02e      	b.n	80034c0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	9300      	str	r3, [sp, #0]
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	2200      	movs	r2, #0
 800346a:	2180      	movs	r1, #128	@ 0x80
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f000 f865 	bl	800353c <UART_WaitOnFlagUntilTimeout>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d005      	beq.n	8003484 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2220      	movs	r2, #32
 800347c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e03a      	b.n	80034fa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10b      	bne.n	80034a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	881b      	ldrh	r3, [r3, #0]
 800348e:	461a      	mov	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003498:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	3302      	adds	r3, #2
 800349e:	61bb      	str	r3, [r7, #24]
 80034a0:	e007      	b.n	80034b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	781a      	ldrb	r2, [r3, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	3301      	adds	r3, #1
 80034b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	3b01      	subs	r3, #1
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1cb      	bne.n	8003462 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	9300      	str	r3, [sp, #0]
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	2200      	movs	r2, #0
 80034d2:	2140      	movs	r1, #64	@ 0x40
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f000 f831 	bl	800353c <UART_WaitOnFlagUntilTimeout>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d005      	beq.n	80034ec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2220      	movs	r2, #32
 80034e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e006      	b.n	80034fa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2220      	movs	r2, #32
 80034f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80034f4:	2300      	movs	r3, #0
 80034f6:	e000      	b.n	80034fa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80034f8:	2302      	movs	r3, #2
  }
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3720      	adds	r7, #32
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8003502:	b480      	push	{r7}
 8003504:	b085      	sub	sp, #20
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 800350a:	2300      	movs	r3, #0
 800350c:	60fb      	str	r3, [r7, #12]
 800350e:	2300      	movs	r3, #0
 8003510:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003518:	b2db      	uxtb	r3, r3
 800351a:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003522:	b2db      	uxtb	r3, r3
 8003524:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	b2da      	uxtb	r2, r3
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	b2db      	uxtb	r3, r3
 800352e:	4313      	orrs	r3, r2
 8003530:	b2db      	uxtb	r3, r3
}
 8003532:	4618      	mov	r0, r3
 8003534:	3714      	adds	r7, #20
 8003536:	46bd      	mov	sp, r7
 8003538:	bc80      	pop	{r7}
 800353a:	4770      	bx	lr

0800353c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	603b      	str	r3, [r7, #0]
 8003548:	4613      	mov	r3, r2
 800354a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800354c:	e03b      	b.n	80035c6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800354e:	6a3b      	ldr	r3, [r7, #32]
 8003550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003554:	d037      	beq.n	80035c6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003556:	f7fd fb97 	bl	8000c88 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	6a3a      	ldr	r2, [r7, #32]
 8003562:	429a      	cmp	r2, r3
 8003564:	d302      	bcc.n	800356c <UART_WaitOnFlagUntilTimeout+0x30>
 8003566:	6a3b      	ldr	r3, [r7, #32]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e03a      	b.n	80035e6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	f003 0304 	and.w	r3, r3, #4
 800357a:	2b00      	cmp	r3, #0
 800357c:	d023      	beq.n	80035c6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	2b80      	cmp	r3, #128	@ 0x80
 8003582:	d020      	beq.n	80035c6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	2b40      	cmp	r3, #64	@ 0x40
 8003588:	d01d      	beq.n	80035c6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0308 	and.w	r3, r3, #8
 8003594:	2b08      	cmp	r3, #8
 8003596:	d116      	bne.n	80035c6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003598:	2300      	movs	r3, #0
 800359a:	617b      	str	r3, [r7, #20]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	617b      	str	r3, [r7, #20]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	617b      	str	r3, [r7, #20]
 80035ac:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f000 f81d 	bl	80035ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2208      	movs	r2, #8
 80035b8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e00f      	b.n	80035e6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	4013      	ands	r3, r2
 80035d0:	68ba      	ldr	r2, [r7, #8]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	bf0c      	ite	eq
 80035d6:	2301      	moveq	r3, #1
 80035d8:	2300      	movne	r3, #0
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	461a      	mov	r2, r3
 80035de:	79fb      	ldrb	r3, [r7, #7]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d0b4      	beq.n	800354e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3718      	adds	r7, #24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035ee:	b480      	push	{r7}
 80035f0:	b095      	sub	sp, #84	@ 0x54
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	330c      	adds	r3, #12
 80035fc:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003600:	e853 3f00 	ldrex	r3, [r3]
 8003604:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003608:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800360c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	330c      	adds	r3, #12
 8003614:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003616:	643a      	str	r2, [r7, #64]	@ 0x40
 8003618:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800361a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800361c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800361e:	e841 2300 	strex	r3, r2, [r1]
 8003622:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1e5      	bne.n	80035f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	3314      	adds	r3, #20
 8003630:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003632:	6a3b      	ldr	r3, [r7, #32]
 8003634:	e853 3f00 	ldrex	r3, [r3]
 8003638:	61fb      	str	r3, [r7, #28]
   return(result);
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	f023 0301 	bic.w	r3, r3, #1
 8003640:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	3314      	adds	r3, #20
 8003648:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800364a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800364c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003650:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003652:	e841 2300 	strex	r3, r2, [r1]
 8003656:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1e5      	bne.n	800362a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003662:	2b01      	cmp	r3, #1
 8003664:	d119      	bne.n	800369a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	330c      	adds	r3, #12
 800366c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	e853 3f00 	ldrex	r3, [r3]
 8003674:	60bb      	str	r3, [r7, #8]
   return(result);
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	f023 0310 	bic.w	r3, r3, #16
 800367c:	647b      	str	r3, [r7, #68]	@ 0x44
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	330c      	adds	r3, #12
 8003684:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003686:	61ba      	str	r2, [r7, #24]
 8003688:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368a:	6979      	ldr	r1, [r7, #20]
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	e841 2300 	strex	r3, r2, [r1]
 8003692:	613b      	str	r3, [r7, #16]
   return(result);
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1e5      	bne.n	8003666 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2220      	movs	r2, #32
 800369e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80036a8:	bf00      	nop
 80036aa:	3754      	adds	r7, #84	@ 0x54
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bc80      	pop	{r7}
 80036b0:	4770      	bx	lr
	...

080036b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68da      	ldr	r2, [r3, #12]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	689a      	ldr	r2, [r3, #8]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	431a      	orrs	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80036ee:	f023 030c 	bic.w	r3, r3, #12
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	6812      	ldr	r2, [r2, #0]
 80036f6:	68b9      	ldr	r1, [r7, #8]
 80036f8:	430b      	orrs	r3, r1
 80036fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	699a      	ldr	r2, [r3, #24]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	430a      	orrs	r2, r1
 8003710:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a2c      	ldr	r2, [pc, #176]	@ (80037c8 <UART_SetConfig+0x114>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d103      	bne.n	8003724 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800371c:	f7ff fde4 	bl	80032e8 <HAL_RCC_GetPCLK2Freq>
 8003720:	60f8      	str	r0, [r7, #12]
 8003722:	e002      	b.n	800372a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003724:	f7ff fdcc 	bl	80032c0 <HAL_RCC_GetPCLK1Freq>
 8003728:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	4613      	mov	r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	4413      	add	r3, r2
 8003732:	009a      	lsls	r2, r3, #2
 8003734:	441a      	add	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003740:	4a22      	ldr	r2, [pc, #136]	@ (80037cc <UART_SetConfig+0x118>)
 8003742:	fba2 2303 	umull	r2, r3, r2, r3
 8003746:	095b      	lsrs	r3, r3, #5
 8003748:	0119      	lsls	r1, r3, #4
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	4613      	mov	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	009a      	lsls	r2, r3, #2
 8003754:	441a      	add	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003760:	4b1a      	ldr	r3, [pc, #104]	@ (80037cc <UART_SetConfig+0x118>)
 8003762:	fba3 0302 	umull	r0, r3, r3, r2
 8003766:	095b      	lsrs	r3, r3, #5
 8003768:	2064      	movs	r0, #100	@ 0x64
 800376a:	fb00 f303 	mul.w	r3, r0, r3
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	011b      	lsls	r3, r3, #4
 8003772:	3332      	adds	r3, #50	@ 0x32
 8003774:	4a15      	ldr	r2, [pc, #84]	@ (80037cc <UART_SetConfig+0x118>)
 8003776:	fba2 2303 	umull	r2, r3, r2, r3
 800377a:	095b      	lsrs	r3, r3, #5
 800377c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003780:	4419      	add	r1, r3
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	4613      	mov	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4413      	add	r3, r2
 800378a:	009a      	lsls	r2, r3, #2
 800378c:	441a      	add	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	fbb2 f2f3 	udiv	r2, r2, r3
 8003798:	4b0c      	ldr	r3, [pc, #48]	@ (80037cc <UART_SetConfig+0x118>)
 800379a:	fba3 0302 	umull	r0, r3, r3, r2
 800379e:	095b      	lsrs	r3, r3, #5
 80037a0:	2064      	movs	r0, #100	@ 0x64
 80037a2:	fb00 f303 	mul.w	r3, r0, r3
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	011b      	lsls	r3, r3, #4
 80037aa:	3332      	adds	r3, #50	@ 0x32
 80037ac:	4a07      	ldr	r2, [pc, #28]	@ (80037cc <UART_SetConfig+0x118>)
 80037ae:	fba2 2303 	umull	r2, r3, r2, r3
 80037b2:	095b      	lsrs	r3, r3, #5
 80037b4:	f003 020f 	and.w	r2, r3, #15
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	440a      	add	r2, r1
 80037be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80037c0:	bf00      	nop
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	40013800 	.word	0x40013800
 80037cc:	51eb851f 	.word	0x51eb851f

080037d0 <sniprintf>:
 80037d0:	b40c      	push	{r2, r3}
 80037d2:	b530      	push	{r4, r5, lr}
 80037d4:	4b18      	ldr	r3, [pc, #96]	@ (8003838 <sniprintf+0x68>)
 80037d6:	1e0c      	subs	r4, r1, #0
 80037d8:	681d      	ldr	r5, [r3, #0]
 80037da:	b09d      	sub	sp, #116	@ 0x74
 80037dc:	da08      	bge.n	80037f0 <sniprintf+0x20>
 80037de:	238b      	movs	r3, #139	@ 0x8b
 80037e0:	f04f 30ff 	mov.w	r0, #4294967295
 80037e4:	602b      	str	r3, [r5, #0]
 80037e6:	b01d      	add	sp, #116	@ 0x74
 80037e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80037ec:	b002      	add	sp, #8
 80037ee:	4770      	bx	lr
 80037f0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80037f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80037f8:	f04f 0300 	mov.w	r3, #0
 80037fc:	931b      	str	r3, [sp, #108]	@ 0x6c
 80037fe:	bf0c      	ite	eq
 8003800:	4623      	moveq	r3, r4
 8003802:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003806:	9304      	str	r3, [sp, #16]
 8003808:	9307      	str	r3, [sp, #28]
 800380a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800380e:	9002      	str	r0, [sp, #8]
 8003810:	9006      	str	r0, [sp, #24]
 8003812:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003816:	4628      	mov	r0, r5
 8003818:	ab21      	add	r3, sp, #132	@ 0x84
 800381a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800381c:	a902      	add	r1, sp, #8
 800381e:	9301      	str	r3, [sp, #4]
 8003820:	f000 f992 	bl	8003b48 <_svfiprintf_r>
 8003824:	1c43      	adds	r3, r0, #1
 8003826:	bfbc      	itt	lt
 8003828:	238b      	movlt	r3, #139	@ 0x8b
 800382a:	602b      	strlt	r3, [r5, #0]
 800382c:	2c00      	cmp	r4, #0
 800382e:	d0da      	beq.n	80037e6 <sniprintf+0x16>
 8003830:	2200      	movs	r2, #0
 8003832:	9b02      	ldr	r3, [sp, #8]
 8003834:	701a      	strb	r2, [r3, #0]
 8003836:	e7d6      	b.n	80037e6 <sniprintf+0x16>
 8003838:	20000014 	.word	0x20000014

0800383c <memset>:
 800383c:	4603      	mov	r3, r0
 800383e:	4402      	add	r2, r0
 8003840:	4293      	cmp	r3, r2
 8003842:	d100      	bne.n	8003846 <memset+0xa>
 8003844:	4770      	bx	lr
 8003846:	f803 1b01 	strb.w	r1, [r3], #1
 800384a:	e7f9      	b.n	8003840 <memset+0x4>

0800384c <__errno>:
 800384c:	4b01      	ldr	r3, [pc, #4]	@ (8003854 <__errno+0x8>)
 800384e:	6818      	ldr	r0, [r3, #0]
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	20000014 	.word	0x20000014

08003858 <__libc_init_array>:
 8003858:	b570      	push	{r4, r5, r6, lr}
 800385a:	2600      	movs	r6, #0
 800385c:	4d0c      	ldr	r5, [pc, #48]	@ (8003890 <__libc_init_array+0x38>)
 800385e:	4c0d      	ldr	r4, [pc, #52]	@ (8003894 <__libc_init_array+0x3c>)
 8003860:	1b64      	subs	r4, r4, r5
 8003862:	10a4      	asrs	r4, r4, #2
 8003864:	42a6      	cmp	r6, r4
 8003866:	d109      	bne.n	800387c <__libc_init_array+0x24>
 8003868:	f000 fc76 	bl	8004158 <_init>
 800386c:	2600      	movs	r6, #0
 800386e:	4d0a      	ldr	r5, [pc, #40]	@ (8003898 <__libc_init_array+0x40>)
 8003870:	4c0a      	ldr	r4, [pc, #40]	@ (800389c <__libc_init_array+0x44>)
 8003872:	1b64      	subs	r4, r4, r5
 8003874:	10a4      	asrs	r4, r4, #2
 8003876:	42a6      	cmp	r6, r4
 8003878:	d105      	bne.n	8003886 <__libc_init_array+0x2e>
 800387a:	bd70      	pop	{r4, r5, r6, pc}
 800387c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003880:	4798      	blx	r3
 8003882:	3601      	adds	r6, #1
 8003884:	e7ee      	b.n	8003864 <__libc_init_array+0xc>
 8003886:	f855 3b04 	ldr.w	r3, [r5], #4
 800388a:	4798      	blx	r3
 800388c:	3601      	adds	r6, #1
 800388e:	e7f2      	b.n	8003876 <__libc_init_array+0x1e>
 8003890:	080042a0 	.word	0x080042a0
 8003894:	080042a0 	.word	0x080042a0
 8003898:	080042a0 	.word	0x080042a0
 800389c:	080042a4 	.word	0x080042a4

080038a0 <__retarget_lock_acquire_recursive>:
 80038a0:	4770      	bx	lr

080038a2 <__retarget_lock_release_recursive>:
 80038a2:	4770      	bx	lr

080038a4 <_free_r>:
 80038a4:	b538      	push	{r3, r4, r5, lr}
 80038a6:	4605      	mov	r5, r0
 80038a8:	2900      	cmp	r1, #0
 80038aa:	d040      	beq.n	800392e <_free_r+0x8a>
 80038ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038b0:	1f0c      	subs	r4, r1, #4
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	bfb8      	it	lt
 80038b6:	18e4      	addlt	r4, r4, r3
 80038b8:	f000 f8de 	bl	8003a78 <__malloc_lock>
 80038bc:	4a1c      	ldr	r2, [pc, #112]	@ (8003930 <_free_r+0x8c>)
 80038be:	6813      	ldr	r3, [r2, #0]
 80038c0:	b933      	cbnz	r3, 80038d0 <_free_r+0x2c>
 80038c2:	6063      	str	r3, [r4, #4]
 80038c4:	6014      	str	r4, [r2, #0]
 80038c6:	4628      	mov	r0, r5
 80038c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038cc:	f000 b8da 	b.w	8003a84 <__malloc_unlock>
 80038d0:	42a3      	cmp	r3, r4
 80038d2:	d908      	bls.n	80038e6 <_free_r+0x42>
 80038d4:	6820      	ldr	r0, [r4, #0]
 80038d6:	1821      	adds	r1, r4, r0
 80038d8:	428b      	cmp	r3, r1
 80038da:	bf01      	itttt	eq
 80038dc:	6819      	ldreq	r1, [r3, #0]
 80038de:	685b      	ldreq	r3, [r3, #4]
 80038e0:	1809      	addeq	r1, r1, r0
 80038e2:	6021      	streq	r1, [r4, #0]
 80038e4:	e7ed      	b.n	80038c2 <_free_r+0x1e>
 80038e6:	461a      	mov	r2, r3
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	b10b      	cbz	r3, 80038f0 <_free_r+0x4c>
 80038ec:	42a3      	cmp	r3, r4
 80038ee:	d9fa      	bls.n	80038e6 <_free_r+0x42>
 80038f0:	6811      	ldr	r1, [r2, #0]
 80038f2:	1850      	adds	r0, r2, r1
 80038f4:	42a0      	cmp	r0, r4
 80038f6:	d10b      	bne.n	8003910 <_free_r+0x6c>
 80038f8:	6820      	ldr	r0, [r4, #0]
 80038fa:	4401      	add	r1, r0
 80038fc:	1850      	adds	r0, r2, r1
 80038fe:	4283      	cmp	r3, r0
 8003900:	6011      	str	r1, [r2, #0]
 8003902:	d1e0      	bne.n	80038c6 <_free_r+0x22>
 8003904:	6818      	ldr	r0, [r3, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	4408      	add	r0, r1
 800390a:	6010      	str	r0, [r2, #0]
 800390c:	6053      	str	r3, [r2, #4]
 800390e:	e7da      	b.n	80038c6 <_free_r+0x22>
 8003910:	d902      	bls.n	8003918 <_free_r+0x74>
 8003912:	230c      	movs	r3, #12
 8003914:	602b      	str	r3, [r5, #0]
 8003916:	e7d6      	b.n	80038c6 <_free_r+0x22>
 8003918:	6820      	ldr	r0, [r4, #0]
 800391a:	1821      	adds	r1, r4, r0
 800391c:	428b      	cmp	r3, r1
 800391e:	bf01      	itttt	eq
 8003920:	6819      	ldreq	r1, [r3, #0]
 8003922:	685b      	ldreq	r3, [r3, #4]
 8003924:	1809      	addeq	r1, r1, r0
 8003926:	6021      	streq	r1, [r4, #0]
 8003928:	6063      	str	r3, [r4, #4]
 800392a:	6054      	str	r4, [r2, #4]
 800392c:	e7cb      	b.n	80038c6 <_free_r+0x22>
 800392e:	bd38      	pop	{r3, r4, r5, pc}
 8003930:	20000298 	.word	0x20000298

08003934 <sbrk_aligned>:
 8003934:	b570      	push	{r4, r5, r6, lr}
 8003936:	4e0f      	ldr	r6, [pc, #60]	@ (8003974 <sbrk_aligned+0x40>)
 8003938:	460c      	mov	r4, r1
 800393a:	6831      	ldr	r1, [r6, #0]
 800393c:	4605      	mov	r5, r0
 800393e:	b911      	cbnz	r1, 8003946 <sbrk_aligned+0x12>
 8003940:	f000 fba8 	bl	8004094 <_sbrk_r>
 8003944:	6030      	str	r0, [r6, #0]
 8003946:	4621      	mov	r1, r4
 8003948:	4628      	mov	r0, r5
 800394a:	f000 fba3 	bl	8004094 <_sbrk_r>
 800394e:	1c43      	adds	r3, r0, #1
 8003950:	d103      	bne.n	800395a <sbrk_aligned+0x26>
 8003952:	f04f 34ff 	mov.w	r4, #4294967295
 8003956:	4620      	mov	r0, r4
 8003958:	bd70      	pop	{r4, r5, r6, pc}
 800395a:	1cc4      	adds	r4, r0, #3
 800395c:	f024 0403 	bic.w	r4, r4, #3
 8003960:	42a0      	cmp	r0, r4
 8003962:	d0f8      	beq.n	8003956 <sbrk_aligned+0x22>
 8003964:	1a21      	subs	r1, r4, r0
 8003966:	4628      	mov	r0, r5
 8003968:	f000 fb94 	bl	8004094 <_sbrk_r>
 800396c:	3001      	adds	r0, #1
 800396e:	d1f2      	bne.n	8003956 <sbrk_aligned+0x22>
 8003970:	e7ef      	b.n	8003952 <sbrk_aligned+0x1e>
 8003972:	bf00      	nop
 8003974:	20000294 	.word	0x20000294

08003978 <_malloc_r>:
 8003978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800397c:	1ccd      	adds	r5, r1, #3
 800397e:	f025 0503 	bic.w	r5, r5, #3
 8003982:	3508      	adds	r5, #8
 8003984:	2d0c      	cmp	r5, #12
 8003986:	bf38      	it	cc
 8003988:	250c      	movcc	r5, #12
 800398a:	2d00      	cmp	r5, #0
 800398c:	4606      	mov	r6, r0
 800398e:	db01      	blt.n	8003994 <_malloc_r+0x1c>
 8003990:	42a9      	cmp	r1, r5
 8003992:	d904      	bls.n	800399e <_malloc_r+0x26>
 8003994:	230c      	movs	r3, #12
 8003996:	6033      	str	r3, [r6, #0]
 8003998:	2000      	movs	r0, #0
 800399a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800399e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003a74 <_malloc_r+0xfc>
 80039a2:	f000 f869 	bl	8003a78 <__malloc_lock>
 80039a6:	f8d8 3000 	ldr.w	r3, [r8]
 80039aa:	461c      	mov	r4, r3
 80039ac:	bb44      	cbnz	r4, 8003a00 <_malloc_r+0x88>
 80039ae:	4629      	mov	r1, r5
 80039b0:	4630      	mov	r0, r6
 80039b2:	f7ff ffbf 	bl	8003934 <sbrk_aligned>
 80039b6:	1c43      	adds	r3, r0, #1
 80039b8:	4604      	mov	r4, r0
 80039ba:	d158      	bne.n	8003a6e <_malloc_r+0xf6>
 80039bc:	f8d8 4000 	ldr.w	r4, [r8]
 80039c0:	4627      	mov	r7, r4
 80039c2:	2f00      	cmp	r7, #0
 80039c4:	d143      	bne.n	8003a4e <_malloc_r+0xd6>
 80039c6:	2c00      	cmp	r4, #0
 80039c8:	d04b      	beq.n	8003a62 <_malloc_r+0xea>
 80039ca:	6823      	ldr	r3, [r4, #0]
 80039cc:	4639      	mov	r1, r7
 80039ce:	4630      	mov	r0, r6
 80039d0:	eb04 0903 	add.w	r9, r4, r3
 80039d4:	f000 fb5e 	bl	8004094 <_sbrk_r>
 80039d8:	4581      	cmp	r9, r0
 80039da:	d142      	bne.n	8003a62 <_malloc_r+0xea>
 80039dc:	6821      	ldr	r1, [r4, #0]
 80039de:	4630      	mov	r0, r6
 80039e0:	1a6d      	subs	r5, r5, r1
 80039e2:	4629      	mov	r1, r5
 80039e4:	f7ff ffa6 	bl	8003934 <sbrk_aligned>
 80039e8:	3001      	adds	r0, #1
 80039ea:	d03a      	beq.n	8003a62 <_malloc_r+0xea>
 80039ec:	6823      	ldr	r3, [r4, #0]
 80039ee:	442b      	add	r3, r5
 80039f0:	6023      	str	r3, [r4, #0]
 80039f2:	f8d8 3000 	ldr.w	r3, [r8]
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	bb62      	cbnz	r2, 8003a54 <_malloc_r+0xdc>
 80039fa:	f8c8 7000 	str.w	r7, [r8]
 80039fe:	e00f      	b.n	8003a20 <_malloc_r+0xa8>
 8003a00:	6822      	ldr	r2, [r4, #0]
 8003a02:	1b52      	subs	r2, r2, r5
 8003a04:	d420      	bmi.n	8003a48 <_malloc_r+0xd0>
 8003a06:	2a0b      	cmp	r2, #11
 8003a08:	d917      	bls.n	8003a3a <_malloc_r+0xc2>
 8003a0a:	1961      	adds	r1, r4, r5
 8003a0c:	42a3      	cmp	r3, r4
 8003a0e:	6025      	str	r5, [r4, #0]
 8003a10:	bf18      	it	ne
 8003a12:	6059      	strne	r1, [r3, #4]
 8003a14:	6863      	ldr	r3, [r4, #4]
 8003a16:	bf08      	it	eq
 8003a18:	f8c8 1000 	streq.w	r1, [r8]
 8003a1c:	5162      	str	r2, [r4, r5]
 8003a1e:	604b      	str	r3, [r1, #4]
 8003a20:	4630      	mov	r0, r6
 8003a22:	f000 f82f 	bl	8003a84 <__malloc_unlock>
 8003a26:	f104 000b 	add.w	r0, r4, #11
 8003a2a:	1d23      	adds	r3, r4, #4
 8003a2c:	f020 0007 	bic.w	r0, r0, #7
 8003a30:	1ac2      	subs	r2, r0, r3
 8003a32:	bf1c      	itt	ne
 8003a34:	1a1b      	subne	r3, r3, r0
 8003a36:	50a3      	strne	r3, [r4, r2]
 8003a38:	e7af      	b.n	800399a <_malloc_r+0x22>
 8003a3a:	6862      	ldr	r2, [r4, #4]
 8003a3c:	42a3      	cmp	r3, r4
 8003a3e:	bf0c      	ite	eq
 8003a40:	f8c8 2000 	streq.w	r2, [r8]
 8003a44:	605a      	strne	r2, [r3, #4]
 8003a46:	e7eb      	b.n	8003a20 <_malloc_r+0xa8>
 8003a48:	4623      	mov	r3, r4
 8003a4a:	6864      	ldr	r4, [r4, #4]
 8003a4c:	e7ae      	b.n	80039ac <_malloc_r+0x34>
 8003a4e:	463c      	mov	r4, r7
 8003a50:	687f      	ldr	r7, [r7, #4]
 8003a52:	e7b6      	b.n	80039c2 <_malloc_r+0x4a>
 8003a54:	461a      	mov	r2, r3
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	42a3      	cmp	r3, r4
 8003a5a:	d1fb      	bne.n	8003a54 <_malloc_r+0xdc>
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	6053      	str	r3, [r2, #4]
 8003a60:	e7de      	b.n	8003a20 <_malloc_r+0xa8>
 8003a62:	230c      	movs	r3, #12
 8003a64:	4630      	mov	r0, r6
 8003a66:	6033      	str	r3, [r6, #0]
 8003a68:	f000 f80c 	bl	8003a84 <__malloc_unlock>
 8003a6c:	e794      	b.n	8003998 <_malloc_r+0x20>
 8003a6e:	6005      	str	r5, [r0, #0]
 8003a70:	e7d6      	b.n	8003a20 <_malloc_r+0xa8>
 8003a72:	bf00      	nop
 8003a74:	20000298 	.word	0x20000298

08003a78 <__malloc_lock>:
 8003a78:	4801      	ldr	r0, [pc, #4]	@ (8003a80 <__malloc_lock+0x8>)
 8003a7a:	f7ff bf11 	b.w	80038a0 <__retarget_lock_acquire_recursive>
 8003a7e:	bf00      	nop
 8003a80:	20000290 	.word	0x20000290

08003a84 <__malloc_unlock>:
 8003a84:	4801      	ldr	r0, [pc, #4]	@ (8003a8c <__malloc_unlock+0x8>)
 8003a86:	f7ff bf0c 	b.w	80038a2 <__retarget_lock_release_recursive>
 8003a8a:	bf00      	nop
 8003a8c:	20000290 	.word	0x20000290

08003a90 <__ssputs_r>:
 8003a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a94:	461f      	mov	r7, r3
 8003a96:	688e      	ldr	r6, [r1, #8]
 8003a98:	4682      	mov	sl, r0
 8003a9a:	42be      	cmp	r6, r7
 8003a9c:	460c      	mov	r4, r1
 8003a9e:	4690      	mov	r8, r2
 8003aa0:	680b      	ldr	r3, [r1, #0]
 8003aa2:	d82d      	bhi.n	8003b00 <__ssputs_r+0x70>
 8003aa4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003aa8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003aac:	d026      	beq.n	8003afc <__ssputs_r+0x6c>
 8003aae:	6965      	ldr	r5, [r4, #20]
 8003ab0:	6909      	ldr	r1, [r1, #16]
 8003ab2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ab6:	eba3 0901 	sub.w	r9, r3, r1
 8003aba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003abe:	1c7b      	adds	r3, r7, #1
 8003ac0:	444b      	add	r3, r9
 8003ac2:	106d      	asrs	r5, r5, #1
 8003ac4:	429d      	cmp	r5, r3
 8003ac6:	bf38      	it	cc
 8003ac8:	461d      	movcc	r5, r3
 8003aca:	0553      	lsls	r3, r2, #21
 8003acc:	d527      	bpl.n	8003b1e <__ssputs_r+0x8e>
 8003ace:	4629      	mov	r1, r5
 8003ad0:	f7ff ff52 	bl	8003978 <_malloc_r>
 8003ad4:	4606      	mov	r6, r0
 8003ad6:	b360      	cbz	r0, 8003b32 <__ssputs_r+0xa2>
 8003ad8:	464a      	mov	r2, r9
 8003ada:	6921      	ldr	r1, [r4, #16]
 8003adc:	f000 faf8 	bl	80040d0 <memcpy>
 8003ae0:	89a3      	ldrh	r3, [r4, #12]
 8003ae2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003ae6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003aea:	81a3      	strh	r3, [r4, #12]
 8003aec:	6126      	str	r6, [r4, #16]
 8003aee:	444e      	add	r6, r9
 8003af0:	6026      	str	r6, [r4, #0]
 8003af2:	463e      	mov	r6, r7
 8003af4:	6165      	str	r5, [r4, #20]
 8003af6:	eba5 0509 	sub.w	r5, r5, r9
 8003afa:	60a5      	str	r5, [r4, #8]
 8003afc:	42be      	cmp	r6, r7
 8003afe:	d900      	bls.n	8003b02 <__ssputs_r+0x72>
 8003b00:	463e      	mov	r6, r7
 8003b02:	4632      	mov	r2, r6
 8003b04:	4641      	mov	r1, r8
 8003b06:	6820      	ldr	r0, [r4, #0]
 8003b08:	f000 faaa 	bl	8004060 <memmove>
 8003b0c:	2000      	movs	r0, #0
 8003b0e:	68a3      	ldr	r3, [r4, #8]
 8003b10:	1b9b      	subs	r3, r3, r6
 8003b12:	60a3      	str	r3, [r4, #8]
 8003b14:	6823      	ldr	r3, [r4, #0]
 8003b16:	4433      	add	r3, r6
 8003b18:	6023      	str	r3, [r4, #0]
 8003b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b1e:	462a      	mov	r2, r5
 8003b20:	f000 fae4 	bl	80040ec <_realloc_r>
 8003b24:	4606      	mov	r6, r0
 8003b26:	2800      	cmp	r0, #0
 8003b28:	d1e0      	bne.n	8003aec <__ssputs_r+0x5c>
 8003b2a:	4650      	mov	r0, sl
 8003b2c:	6921      	ldr	r1, [r4, #16]
 8003b2e:	f7ff feb9 	bl	80038a4 <_free_r>
 8003b32:	230c      	movs	r3, #12
 8003b34:	f8ca 3000 	str.w	r3, [sl]
 8003b38:	89a3      	ldrh	r3, [r4, #12]
 8003b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8003b3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b42:	81a3      	strh	r3, [r4, #12]
 8003b44:	e7e9      	b.n	8003b1a <__ssputs_r+0x8a>
	...

08003b48 <_svfiprintf_r>:
 8003b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b4c:	4698      	mov	r8, r3
 8003b4e:	898b      	ldrh	r3, [r1, #12]
 8003b50:	4607      	mov	r7, r0
 8003b52:	061b      	lsls	r3, r3, #24
 8003b54:	460d      	mov	r5, r1
 8003b56:	4614      	mov	r4, r2
 8003b58:	b09d      	sub	sp, #116	@ 0x74
 8003b5a:	d510      	bpl.n	8003b7e <_svfiprintf_r+0x36>
 8003b5c:	690b      	ldr	r3, [r1, #16]
 8003b5e:	b973      	cbnz	r3, 8003b7e <_svfiprintf_r+0x36>
 8003b60:	2140      	movs	r1, #64	@ 0x40
 8003b62:	f7ff ff09 	bl	8003978 <_malloc_r>
 8003b66:	6028      	str	r0, [r5, #0]
 8003b68:	6128      	str	r0, [r5, #16]
 8003b6a:	b930      	cbnz	r0, 8003b7a <_svfiprintf_r+0x32>
 8003b6c:	230c      	movs	r3, #12
 8003b6e:	603b      	str	r3, [r7, #0]
 8003b70:	f04f 30ff 	mov.w	r0, #4294967295
 8003b74:	b01d      	add	sp, #116	@ 0x74
 8003b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b7a:	2340      	movs	r3, #64	@ 0x40
 8003b7c:	616b      	str	r3, [r5, #20]
 8003b7e:	2300      	movs	r3, #0
 8003b80:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b82:	2320      	movs	r3, #32
 8003b84:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003b88:	2330      	movs	r3, #48	@ 0x30
 8003b8a:	f04f 0901 	mov.w	r9, #1
 8003b8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b92:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003d2c <_svfiprintf_r+0x1e4>
 8003b96:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003b9a:	4623      	mov	r3, r4
 8003b9c:	469a      	mov	sl, r3
 8003b9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ba2:	b10a      	cbz	r2, 8003ba8 <_svfiprintf_r+0x60>
 8003ba4:	2a25      	cmp	r2, #37	@ 0x25
 8003ba6:	d1f9      	bne.n	8003b9c <_svfiprintf_r+0x54>
 8003ba8:	ebba 0b04 	subs.w	fp, sl, r4
 8003bac:	d00b      	beq.n	8003bc6 <_svfiprintf_r+0x7e>
 8003bae:	465b      	mov	r3, fp
 8003bb0:	4622      	mov	r2, r4
 8003bb2:	4629      	mov	r1, r5
 8003bb4:	4638      	mov	r0, r7
 8003bb6:	f7ff ff6b 	bl	8003a90 <__ssputs_r>
 8003bba:	3001      	adds	r0, #1
 8003bbc:	f000 80a7 	beq.w	8003d0e <_svfiprintf_r+0x1c6>
 8003bc0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003bc2:	445a      	add	r2, fp
 8003bc4:	9209      	str	r2, [sp, #36]	@ 0x24
 8003bc6:	f89a 3000 	ldrb.w	r3, [sl]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f000 809f 	beq.w	8003d0e <_svfiprintf_r+0x1c6>
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8003bd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003bda:	f10a 0a01 	add.w	sl, sl, #1
 8003bde:	9304      	str	r3, [sp, #16]
 8003be0:	9307      	str	r3, [sp, #28]
 8003be2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003be6:	931a      	str	r3, [sp, #104]	@ 0x68
 8003be8:	4654      	mov	r4, sl
 8003bea:	2205      	movs	r2, #5
 8003bec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bf0:	484e      	ldr	r0, [pc, #312]	@ (8003d2c <_svfiprintf_r+0x1e4>)
 8003bf2:	f000 fa5f 	bl	80040b4 <memchr>
 8003bf6:	9a04      	ldr	r2, [sp, #16]
 8003bf8:	b9d8      	cbnz	r0, 8003c32 <_svfiprintf_r+0xea>
 8003bfa:	06d0      	lsls	r0, r2, #27
 8003bfc:	bf44      	itt	mi
 8003bfe:	2320      	movmi	r3, #32
 8003c00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c04:	0711      	lsls	r1, r2, #28
 8003c06:	bf44      	itt	mi
 8003c08:	232b      	movmi	r3, #43	@ 0x2b
 8003c0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c0e:	f89a 3000 	ldrb.w	r3, [sl]
 8003c12:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c14:	d015      	beq.n	8003c42 <_svfiprintf_r+0xfa>
 8003c16:	4654      	mov	r4, sl
 8003c18:	2000      	movs	r0, #0
 8003c1a:	f04f 0c0a 	mov.w	ip, #10
 8003c1e:	9a07      	ldr	r2, [sp, #28]
 8003c20:	4621      	mov	r1, r4
 8003c22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c26:	3b30      	subs	r3, #48	@ 0x30
 8003c28:	2b09      	cmp	r3, #9
 8003c2a:	d94b      	bls.n	8003cc4 <_svfiprintf_r+0x17c>
 8003c2c:	b1b0      	cbz	r0, 8003c5c <_svfiprintf_r+0x114>
 8003c2e:	9207      	str	r2, [sp, #28]
 8003c30:	e014      	b.n	8003c5c <_svfiprintf_r+0x114>
 8003c32:	eba0 0308 	sub.w	r3, r0, r8
 8003c36:	fa09 f303 	lsl.w	r3, r9, r3
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	46a2      	mov	sl, r4
 8003c3e:	9304      	str	r3, [sp, #16]
 8003c40:	e7d2      	b.n	8003be8 <_svfiprintf_r+0xa0>
 8003c42:	9b03      	ldr	r3, [sp, #12]
 8003c44:	1d19      	adds	r1, r3, #4
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	9103      	str	r1, [sp, #12]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	bfbb      	ittet	lt
 8003c4e:	425b      	neglt	r3, r3
 8003c50:	f042 0202 	orrlt.w	r2, r2, #2
 8003c54:	9307      	strge	r3, [sp, #28]
 8003c56:	9307      	strlt	r3, [sp, #28]
 8003c58:	bfb8      	it	lt
 8003c5a:	9204      	strlt	r2, [sp, #16]
 8003c5c:	7823      	ldrb	r3, [r4, #0]
 8003c5e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003c60:	d10a      	bne.n	8003c78 <_svfiprintf_r+0x130>
 8003c62:	7863      	ldrb	r3, [r4, #1]
 8003c64:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c66:	d132      	bne.n	8003cce <_svfiprintf_r+0x186>
 8003c68:	9b03      	ldr	r3, [sp, #12]
 8003c6a:	3402      	adds	r4, #2
 8003c6c:	1d1a      	adds	r2, r3, #4
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	9203      	str	r2, [sp, #12]
 8003c72:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003c76:	9305      	str	r3, [sp, #20]
 8003c78:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003d30 <_svfiprintf_r+0x1e8>
 8003c7c:	2203      	movs	r2, #3
 8003c7e:	4650      	mov	r0, sl
 8003c80:	7821      	ldrb	r1, [r4, #0]
 8003c82:	f000 fa17 	bl	80040b4 <memchr>
 8003c86:	b138      	cbz	r0, 8003c98 <_svfiprintf_r+0x150>
 8003c88:	2240      	movs	r2, #64	@ 0x40
 8003c8a:	9b04      	ldr	r3, [sp, #16]
 8003c8c:	eba0 000a 	sub.w	r0, r0, sl
 8003c90:	4082      	lsls	r2, r0
 8003c92:	4313      	orrs	r3, r2
 8003c94:	3401      	adds	r4, #1
 8003c96:	9304      	str	r3, [sp, #16]
 8003c98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c9c:	2206      	movs	r2, #6
 8003c9e:	4825      	ldr	r0, [pc, #148]	@ (8003d34 <_svfiprintf_r+0x1ec>)
 8003ca0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003ca4:	f000 fa06 	bl	80040b4 <memchr>
 8003ca8:	2800      	cmp	r0, #0
 8003caa:	d036      	beq.n	8003d1a <_svfiprintf_r+0x1d2>
 8003cac:	4b22      	ldr	r3, [pc, #136]	@ (8003d38 <_svfiprintf_r+0x1f0>)
 8003cae:	bb1b      	cbnz	r3, 8003cf8 <_svfiprintf_r+0x1b0>
 8003cb0:	9b03      	ldr	r3, [sp, #12]
 8003cb2:	3307      	adds	r3, #7
 8003cb4:	f023 0307 	bic.w	r3, r3, #7
 8003cb8:	3308      	adds	r3, #8
 8003cba:	9303      	str	r3, [sp, #12]
 8003cbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003cbe:	4433      	add	r3, r6
 8003cc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8003cc2:	e76a      	b.n	8003b9a <_svfiprintf_r+0x52>
 8003cc4:	460c      	mov	r4, r1
 8003cc6:	2001      	movs	r0, #1
 8003cc8:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ccc:	e7a8      	b.n	8003c20 <_svfiprintf_r+0xd8>
 8003cce:	2300      	movs	r3, #0
 8003cd0:	f04f 0c0a 	mov.w	ip, #10
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	3401      	adds	r4, #1
 8003cd8:	9305      	str	r3, [sp, #20]
 8003cda:	4620      	mov	r0, r4
 8003cdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ce0:	3a30      	subs	r2, #48	@ 0x30
 8003ce2:	2a09      	cmp	r2, #9
 8003ce4:	d903      	bls.n	8003cee <_svfiprintf_r+0x1a6>
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d0c6      	beq.n	8003c78 <_svfiprintf_r+0x130>
 8003cea:	9105      	str	r1, [sp, #20]
 8003cec:	e7c4      	b.n	8003c78 <_svfiprintf_r+0x130>
 8003cee:	4604      	mov	r4, r0
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	fb0c 2101 	mla	r1, ip, r1, r2
 8003cf6:	e7f0      	b.n	8003cda <_svfiprintf_r+0x192>
 8003cf8:	ab03      	add	r3, sp, #12
 8003cfa:	9300      	str	r3, [sp, #0]
 8003cfc:	462a      	mov	r2, r5
 8003cfe:	4638      	mov	r0, r7
 8003d00:	4b0e      	ldr	r3, [pc, #56]	@ (8003d3c <_svfiprintf_r+0x1f4>)
 8003d02:	a904      	add	r1, sp, #16
 8003d04:	f3af 8000 	nop.w
 8003d08:	1c42      	adds	r2, r0, #1
 8003d0a:	4606      	mov	r6, r0
 8003d0c:	d1d6      	bne.n	8003cbc <_svfiprintf_r+0x174>
 8003d0e:	89ab      	ldrh	r3, [r5, #12]
 8003d10:	065b      	lsls	r3, r3, #25
 8003d12:	f53f af2d 	bmi.w	8003b70 <_svfiprintf_r+0x28>
 8003d16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003d18:	e72c      	b.n	8003b74 <_svfiprintf_r+0x2c>
 8003d1a:	ab03      	add	r3, sp, #12
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	462a      	mov	r2, r5
 8003d20:	4638      	mov	r0, r7
 8003d22:	4b06      	ldr	r3, [pc, #24]	@ (8003d3c <_svfiprintf_r+0x1f4>)
 8003d24:	a904      	add	r1, sp, #16
 8003d26:	f000 f87d 	bl	8003e24 <_printf_i>
 8003d2a:	e7ed      	b.n	8003d08 <_svfiprintf_r+0x1c0>
 8003d2c:	08004262 	.word	0x08004262
 8003d30:	08004268 	.word	0x08004268
 8003d34:	0800426c 	.word	0x0800426c
 8003d38:	00000000 	.word	0x00000000
 8003d3c:	08003a91 	.word	0x08003a91

08003d40 <_printf_common>:
 8003d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d44:	4616      	mov	r6, r2
 8003d46:	4698      	mov	r8, r3
 8003d48:	688a      	ldr	r2, [r1, #8]
 8003d4a:	690b      	ldr	r3, [r1, #16]
 8003d4c:	4607      	mov	r7, r0
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	bfb8      	it	lt
 8003d52:	4613      	movlt	r3, r2
 8003d54:	6033      	str	r3, [r6, #0]
 8003d56:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003d5a:	460c      	mov	r4, r1
 8003d5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003d60:	b10a      	cbz	r2, 8003d66 <_printf_common+0x26>
 8003d62:	3301      	adds	r3, #1
 8003d64:	6033      	str	r3, [r6, #0]
 8003d66:	6823      	ldr	r3, [r4, #0]
 8003d68:	0699      	lsls	r1, r3, #26
 8003d6a:	bf42      	ittt	mi
 8003d6c:	6833      	ldrmi	r3, [r6, #0]
 8003d6e:	3302      	addmi	r3, #2
 8003d70:	6033      	strmi	r3, [r6, #0]
 8003d72:	6825      	ldr	r5, [r4, #0]
 8003d74:	f015 0506 	ands.w	r5, r5, #6
 8003d78:	d106      	bne.n	8003d88 <_printf_common+0x48>
 8003d7a:	f104 0a19 	add.w	sl, r4, #25
 8003d7e:	68e3      	ldr	r3, [r4, #12]
 8003d80:	6832      	ldr	r2, [r6, #0]
 8003d82:	1a9b      	subs	r3, r3, r2
 8003d84:	42ab      	cmp	r3, r5
 8003d86:	dc2b      	bgt.n	8003de0 <_printf_common+0xa0>
 8003d88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003d8c:	6822      	ldr	r2, [r4, #0]
 8003d8e:	3b00      	subs	r3, #0
 8003d90:	bf18      	it	ne
 8003d92:	2301      	movne	r3, #1
 8003d94:	0692      	lsls	r2, r2, #26
 8003d96:	d430      	bmi.n	8003dfa <_printf_common+0xba>
 8003d98:	4641      	mov	r1, r8
 8003d9a:	4638      	mov	r0, r7
 8003d9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003da0:	47c8      	blx	r9
 8003da2:	3001      	adds	r0, #1
 8003da4:	d023      	beq.n	8003dee <_printf_common+0xae>
 8003da6:	6823      	ldr	r3, [r4, #0]
 8003da8:	6922      	ldr	r2, [r4, #16]
 8003daa:	f003 0306 	and.w	r3, r3, #6
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	bf14      	ite	ne
 8003db2:	2500      	movne	r5, #0
 8003db4:	6833      	ldreq	r3, [r6, #0]
 8003db6:	f04f 0600 	mov.w	r6, #0
 8003dba:	bf08      	it	eq
 8003dbc:	68e5      	ldreq	r5, [r4, #12]
 8003dbe:	f104 041a 	add.w	r4, r4, #26
 8003dc2:	bf08      	it	eq
 8003dc4:	1aed      	subeq	r5, r5, r3
 8003dc6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003dca:	bf08      	it	eq
 8003dcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	bfc4      	itt	gt
 8003dd4:	1a9b      	subgt	r3, r3, r2
 8003dd6:	18ed      	addgt	r5, r5, r3
 8003dd8:	42b5      	cmp	r5, r6
 8003dda:	d11a      	bne.n	8003e12 <_printf_common+0xd2>
 8003ddc:	2000      	movs	r0, #0
 8003dde:	e008      	b.n	8003df2 <_printf_common+0xb2>
 8003de0:	2301      	movs	r3, #1
 8003de2:	4652      	mov	r2, sl
 8003de4:	4641      	mov	r1, r8
 8003de6:	4638      	mov	r0, r7
 8003de8:	47c8      	blx	r9
 8003dea:	3001      	adds	r0, #1
 8003dec:	d103      	bne.n	8003df6 <_printf_common+0xb6>
 8003dee:	f04f 30ff 	mov.w	r0, #4294967295
 8003df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003df6:	3501      	adds	r5, #1
 8003df8:	e7c1      	b.n	8003d7e <_printf_common+0x3e>
 8003dfa:	2030      	movs	r0, #48	@ 0x30
 8003dfc:	18e1      	adds	r1, r4, r3
 8003dfe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003e02:	1c5a      	adds	r2, r3, #1
 8003e04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003e08:	4422      	add	r2, r4
 8003e0a:	3302      	adds	r3, #2
 8003e0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003e10:	e7c2      	b.n	8003d98 <_printf_common+0x58>
 8003e12:	2301      	movs	r3, #1
 8003e14:	4622      	mov	r2, r4
 8003e16:	4641      	mov	r1, r8
 8003e18:	4638      	mov	r0, r7
 8003e1a:	47c8      	blx	r9
 8003e1c:	3001      	adds	r0, #1
 8003e1e:	d0e6      	beq.n	8003dee <_printf_common+0xae>
 8003e20:	3601      	adds	r6, #1
 8003e22:	e7d9      	b.n	8003dd8 <_printf_common+0x98>

08003e24 <_printf_i>:
 8003e24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e28:	7e0f      	ldrb	r7, [r1, #24]
 8003e2a:	4691      	mov	r9, r2
 8003e2c:	2f78      	cmp	r7, #120	@ 0x78
 8003e2e:	4680      	mov	r8, r0
 8003e30:	460c      	mov	r4, r1
 8003e32:	469a      	mov	sl, r3
 8003e34:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003e36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003e3a:	d807      	bhi.n	8003e4c <_printf_i+0x28>
 8003e3c:	2f62      	cmp	r7, #98	@ 0x62
 8003e3e:	d80a      	bhi.n	8003e56 <_printf_i+0x32>
 8003e40:	2f00      	cmp	r7, #0
 8003e42:	f000 80d1 	beq.w	8003fe8 <_printf_i+0x1c4>
 8003e46:	2f58      	cmp	r7, #88	@ 0x58
 8003e48:	f000 80b8 	beq.w	8003fbc <_printf_i+0x198>
 8003e4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003e54:	e03a      	b.n	8003ecc <_printf_i+0xa8>
 8003e56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003e5a:	2b15      	cmp	r3, #21
 8003e5c:	d8f6      	bhi.n	8003e4c <_printf_i+0x28>
 8003e5e:	a101      	add	r1, pc, #4	@ (adr r1, 8003e64 <_printf_i+0x40>)
 8003e60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e64:	08003ebd 	.word	0x08003ebd
 8003e68:	08003ed1 	.word	0x08003ed1
 8003e6c:	08003e4d 	.word	0x08003e4d
 8003e70:	08003e4d 	.word	0x08003e4d
 8003e74:	08003e4d 	.word	0x08003e4d
 8003e78:	08003e4d 	.word	0x08003e4d
 8003e7c:	08003ed1 	.word	0x08003ed1
 8003e80:	08003e4d 	.word	0x08003e4d
 8003e84:	08003e4d 	.word	0x08003e4d
 8003e88:	08003e4d 	.word	0x08003e4d
 8003e8c:	08003e4d 	.word	0x08003e4d
 8003e90:	08003fcf 	.word	0x08003fcf
 8003e94:	08003efb 	.word	0x08003efb
 8003e98:	08003f89 	.word	0x08003f89
 8003e9c:	08003e4d 	.word	0x08003e4d
 8003ea0:	08003e4d 	.word	0x08003e4d
 8003ea4:	08003ff1 	.word	0x08003ff1
 8003ea8:	08003e4d 	.word	0x08003e4d
 8003eac:	08003efb 	.word	0x08003efb
 8003eb0:	08003e4d 	.word	0x08003e4d
 8003eb4:	08003e4d 	.word	0x08003e4d
 8003eb8:	08003f91 	.word	0x08003f91
 8003ebc:	6833      	ldr	r3, [r6, #0]
 8003ebe:	1d1a      	adds	r2, r3, #4
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	6032      	str	r2, [r6, #0]
 8003ec4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ec8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e09c      	b.n	800400a <_printf_i+0x1e6>
 8003ed0:	6833      	ldr	r3, [r6, #0]
 8003ed2:	6820      	ldr	r0, [r4, #0]
 8003ed4:	1d19      	adds	r1, r3, #4
 8003ed6:	6031      	str	r1, [r6, #0]
 8003ed8:	0606      	lsls	r6, r0, #24
 8003eda:	d501      	bpl.n	8003ee0 <_printf_i+0xbc>
 8003edc:	681d      	ldr	r5, [r3, #0]
 8003ede:	e003      	b.n	8003ee8 <_printf_i+0xc4>
 8003ee0:	0645      	lsls	r5, r0, #25
 8003ee2:	d5fb      	bpl.n	8003edc <_printf_i+0xb8>
 8003ee4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003ee8:	2d00      	cmp	r5, #0
 8003eea:	da03      	bge.n	8003ef4 <_printf_i+0xd0>
 8003eec:	232d      	movs	r3, #45	@ 0x2d
 8003eee:	426d      	negs	r5, r5
 8003ef0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ef4:	230a      	movs	r3, #10
 8003ef6:	4858      	ldr	r0, [pc, #352]	@ (8004058 <_printf_i+0x234>)
 8003ef8:	e011      	b.n	8003f1e <_printf_i+0xfa>
 8003efa:	6821      	ldr	r1, [r4, #0]
 8003efc:	6833      	ldr	r3, [r6, #0]
 8003efe:	0608      	lsls	r0, r1, #24
 8003f00:	f853 5b04 	ldr.w	r5, [r3], #4
 8003f04:	d402      	bmi.n	8003f0c <_printf_i+0xe8>
 8003f06:	0649      	lsls	r1, r1, #25
 8003f08:	bf48      	it	mi
 8003f0a:	b2ad      	uxthmi	r5, r5
 8003f0c:	2f6f      	cmp	r7, #111	@ 0x6f
 8003f0e:	6033      	str	r3, [r6, #0]
 8003f10:	bf14      	ite	ne
 8003f12:	230a      	movne	r3, #10
 8003f14:	2308      	moveq	r3, #8
 8003f16:	4850      	ldr	r0, [pc, #320]	@ (8004058 <_printf_i+0x234>)
 8003f18:	2100      	movs	r1, #0
 8003f1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003f1e:	6866      	ldr	r6, [r4, #4]
 8003f20:	2e00      	cmp	r6, #0
 8003f22:	60a6      	str	r6, [r4, #8]
 8003f24:	db05      	blt.n	8003f32 <_printf_i+0x10e>
 8003f26:	6821      	ldr	r1, [r4, #0]
 8003f28:	432e      	orrs	r6, r5
 8003f2a:	f021 0104 	bic.w	r1, r1, #4
 8003f2e:	6021      	str	r1, [r4, #0]
 8003f30:	d04b      	beq.n	8003fca <_printf_i+0x1a6>
 8003f32:	4616      	mov	r6, r2
 8003f34:	fbb5 f1f3 	udiv	r1, r5, r3
 8003f38:	fb03 5711 	mls	r7, r3, r1, r5
 8003f3c:	5dc7      	ldrb	r7, [r0, r7]
 8003f3e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003f42:	462f      	mov	r7, r5
 8003f44:	42bb      	cmp	r3, r7
 8003f46:	460d      	mov	r5, r1
 8003f48:	d9f4      	bls.n	8003f34 <_printf_i+0x110>
 8003f4a:	2b08      	cmp	r3, #8
 8003f4c:	d10b      	bne.n	8003f66 <_printf_i+0x142>
 8003f4e:	6823      	ldr	r3, [r4, #0]
 8003f50:	07df      	lsls	r7, r3, #31
 8003f52:	d508      	bpl.n	8003f66 <_printf_i+0x142>
 8003f54:	6923      	ldr	r3, [r4, #16]
 8003f56:	6861      	ldr	r1, [r4, #4]
 8003f58:	4299      	cmp	r1, r3
 8003f5a:	bfde      	ittt	le
 8003f5c:	2330      	movle	r3, #48	@ 0x30
 8003f5e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003f62:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003f66:	1b92      	subs	r2, r2, r6
 8003f68:	6122      	str	r2, [r4, #16]
 8003f6a:	464b      	mov	r3, r9
 8003f6c:	4621      	mov	r1, r4
 8003f6e:	4640      	mov	r0, r8
 8003f70:	f8cd a000 	str.w	sl, [sp]
 8003f74:	aa03      	add	r2, sp, #12
 8003f76:	f7ff fee3 	bl	8003d40 <_printf_common>
 8003f7a:	3001      	adds	r0, #1
 8003f7c:	d14a      	bne.n	8004014 <_printf_i+0x1f0>
 8003f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8003f82:	b004      	add	sp, #16
 8003f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f88:	6823      	ldr	r3, [r4, #0]
 8003f8a:	f043 0320 	orr.w	r3, r3, #32
 8003f8e:	6023      	str	r3, [r4, #0]
 8003f90:	2778      	movs	r7, #120	@ 0x78
 8003f92:	4832      	ldr	r0, [pc, #200]	@ (800405c <_printf_i+0x238>)
 8003f94:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003f98:	6823      	ldr	r3, [r4, #0]
 8003f9a:	6831      	ldr	r1, [r6, #0]
 8003f9c:	061f      	lsls	r7, r3, #24
 8003f9e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003fa2:	d402      	bmi.n	8003faa <_printf_i+0x186>
 8003fa4:	065f      	lsls	r7, r3, #25
 8003fa6:	bf48      	it	mi
 8003fa8:	b2ad      	uxthmi	r5, r5
 8003faa:	6031      	str	r1, [r6, #0]
 8003fac:	07d9      	lsls	r1, r3, #31
 8003fae:	bf44      	itt	mi
 8003fb0:	f043 0320 	orrmi.w	r3, r3, #32
 8003fb4:	6023      	strmi	r3, [r4, #0]
 8003fb6:	b11d      	cbz	r5, 8003fc0 <_printf_i+0x19c>
 8003fb8:	2310      	movs	r3, #16
 8003fba:	e7ad      	b.n	8003f18 <_printf_i+0xf4>
 8003fbc:	4826      	ldr	r0, [pc, #152]	@ (8004058 <_printf_i+0x234>)
 8003fbe:	e7e9      	b.n	8003f94 <_printf_i+0x170>
 8003fc0:	6823      	ldr	r3, [r4, #0]
 8003fc2:	f023 0320 	bic.w	r3, r3, #32
 8003fc6:	6023      	str	r3, [r4, #0]
 8003fc8:	e7f6      	b.n	8003fb8 <_printf_i+0x194>
 8003fca:	4616      	mov	r6, r2
 8003fcc:	e7bd      	b.n	8003f4a <_printf_i+0x126>
 8003fce:	6833      	ldr	r3, [r6, #0]
 8003fd0:	6825      	ldr	r5, [r4, #0]
 8003fd2:	1d18      	adds	r0, r3, #4
 8003fd4:	6961      	ldr	r1, [r4, #20]
 8003fd6:	6030      	str	r0, [r6, #0]
 8003fd8:	062e      	lsls	r6, r5, #24
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	d501      	bpl.n	8003fe2 <_printf_i+0x1be>
 8003fde:	6019      	str	r1, [r3, #0]
 8003fe0:	e002      	b.n	8003fe8 <_printf_i+0x1c4>
 8003fe2:	0668      	lsls	r0, r5, #25
 8003fe4:	d5fb      	bpl.n	8003fde <_printf_i+0x1ba>
 8003fe6:	8019      	strh	r1, [r3, #0]
 8003fe8:	2300      	movs	r3, #0
 8003fea:	4616      	mov	r6, r2
 8003fec:	6123      	str	r3, [r4, #16]
 8003fee:	e7bc      	b.n	8003f6a <_printf_i+0x146>
 8003ff0:	6833      	ldr	r3, [r6, #0]
 8003ff2:	2100      	movs	r1, #0
 8003ff4:	1d1a      	adds	r2, r3, #4
 8003ff6:	6032      	str	r2, [r6, #0]
 8003ff8:	681e      	ldr	r6, [r3, #0]
 8003ffa:	6862      	ldr	r2, [r4, #4]
 8003ffc:	4630      	mov	r0, r6
 8003ffe:	f000 f859 	bl	80040b4 <memchr>
 8004002:	b108      	cbz	r0, 8004008 <_printf_i+0x1e4>
 8004004:	1b80      	subs	r0, r0, r6
 8004006:	6060      	str	r0, [r4, #4]
 8004008:	6863      	ldr	r3, [r4, #4]
 800400a:	6123      	str	r3, [r4, #16]
 800400c:	2300      	movs	r3, #0
 800400e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004012:	e7aa      	b.n	8003f6a <_printf_i+0x146>
 8004014:	4632      	mov	r2, r6
 8004016:	4649      	mov	r1, r9
 8004018:	4640      	mov	r0, r8
 800401a:	6923      	ldr	r3, [r4, #16]
 800401c:	47d0      	blx	sl
 800401e:	3001      	adds	r0, #1
 8004020:	d0ad      	beq.n	8003f7e <_printf_i+0x15a>
 8004022:	6823      	ldr	r3, [r4, #0]
 8004024:	079b      	lsls	r3, r3, #30
 8004026:	d413      	bmi.n	8004050 <_printf_i+0x22c>
 8004028:	68e0      	ldr	r0, [r4, #12]
 800402a:	9b03      	ldr	r3, [sp, #12]
 800402c:	4298      	cmp	r0, r3
 800402e:	bfb8      	it	lt
 8004030:	4618      	movlt	r0, r3
 8004032:	e7a6      	b.n	8003f82 <_printf_i+0x15e>
 8004034:	2301      	movs	r3, #1
 8004036:	4632      	mov	r2, r6
 8004038:	4649      	mov	r1, r9
 800403a:	4640      	mov	r0, r8
 800403c:	47d0      	blx	sl
 800403e:	3001      	adds	r0, #1
 8004040:	d09d      	beq.n	8003f7e <_printf_i+0x15a>
 8004042:	3501      	adds	r5, #1
 8004044:	68e3      	ldr	r3, [r4, #12]
 8004046:	9903      	ldr	r1, [sp, #12]
 8004048:	1a5b      	subs	r3, r3, r1
 800404a:	42ab      	cmp	r3, r5
 800404c:	dcf2      	bgt.n	8004034 <_printf_i+0x210>
 800404e:	e7eb      	b.n	8004028 <_printf_i+0x204>
 8004050:	2500      	movs	r5, #0
 8004052:	f104 0619 	add.w	r6, r4, #25
 8004056:	e7f5      	b.n	8004044 <_printf_i+0x220>
 8004058:	08004273 	.word	0x08004273
 800405c:	08004284 	.word	0x08004284

08004060 <memmove>:
 8004060:	4288      	cmp	r0, r1
 8004062:	b510      	push	{r4, lr}
 8004064:	eb01 0402 	add.w	r4, r1, r2
 8004068:	d902      	bls.n	8004070 <memmove+0x10>
 800406a:	4284      	cmp	r4, r0
 800406c:	4623      	mov	r3, r4
 800406e:	d807      	bhi.n	8004080 <memmove+0x20>
 8004070:	1e43      	subs	r3, r0, #1
 8004072:	42a1      	cmp	r1, r4
 8004074:	d008      	beq.n	8004088 <memmove+0x28>
 8004076:	f811 2b01 	ldrb.w	r2, [r1], #1
 800407a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800407e:	e7f8      	b.n	8004072 <memmove+0x12>
 8004080:	4601      	mov	r1, r0
 8004082:	4402      	add	r2, r0
 8004084:	428a      	cmp	r2, r1
 8004086:	d100      	bne.n	800408a <memmove+0x2a>
 8004088:	bd10      	pop	{r4, pc}
 800408a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800408e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004092:	e7f7      	b.n	8004084 <memmove+0x24>

08004094 <_sbrk_r>:
 8004094:	b538      	push	{r3, r4, r5, lr}
 8004096:	2300      	movs	r3, #0
 8004098:	4d05      	ldr	r5, [pc, #20]	@ (80040b0 <_sbrk_r+0x1c>)
 800409a:	4604      	mov	r4, r0
 800409c:	4608      	mov	r0, r1
 800409e:	602b      	str	r3, [r5, #0]
 80040a0:	f7fc fbfe 	bl	80008a0 <_sbrk>
 80040a4:	1c43      	adds	r3, r0, #1
 80040a6:	d102      	bne.n	80040ae <_sbrk_r+0x1a>
 80040a8:	682b      	ldr	r3, [r5, #0]
 80040aa:	b103      	cbz	r3, 80040ae <_sbrk_r+0x1a>
 80040ac:	6023      	str	r3, [r4, #0]
 80040ae:	bd38      	pop	{r3, r4, r5, pc}
 80040b0:	2000028c 	.word	0x2000028c

080040b4 <memchr>:
 80040b4:	4603      	mov	r3, r0
 80040b6:	b510      	push	{r4, lr}
 80040b8:	b2c9      	uxtb	r1, r1
 80040ba:	4402      	add	r2, r0
 80040bc:	4293      	cmp	r3, r2
 80040be:	4618      	mov	r0, r3
 80040c0:	d101      	bne.n	80040c6 <memchr+0x12>
 80040c2:	2000      	movs	r0, #0
 80040c4:	e003      	b.n	80040ce <memchr+0x1a>
 80040c6:	7804      	ldrb	r4, [r0, #0]
 80040c8:	3301      	adds	r3, #1
 80040ca:	428c      	cmp	r4, r1
 80040cc:	d1f6      	bne.n	80040bc <memchr+0x8>
 80040ce:	bd10      	pop	{r4, pc}

080040d0 <memcpy>:
 80040d0:	440a      	add	r2, r1
 80040d2:	4291      	cmp	r1, r2
 80040d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80040d8:	d100      	bne.n	80040dc <memcpy+0xc>
 80040da:	4770      	bx	lr
 80040dc:	b510      	push	{r4, lr}
 80040de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040e2:	4291      	cmp	r1, r2
 80040e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040e8:	d1f9      	bne.n	80040de <memcpy+0xe>
 80040ea:	bd10      	pop	{r4, pc}

080040ec <_realloc_r>:
 80040ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040f0:	4607      	mov	r7, r0
 80040f2:	4614      	mov	r4, r2
 80040f4:	460d      	mov	r5, r1
 80040f6:	b921      	cbnz	r1, 8004102 <_realloc_r+0x16>
 80040f8:	4611      	mov	r1, r2
 80040fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040fe:	f7ff bc3b 	b.w	8003978 <_malloc_r>
 8004102:	b92a      	cbnz	r2, 8004110 <_realloc_r+0x24>
 8004104:	f7ff fbce 	bl	80038a4 <_free_r>
 8004108:	4625      	mov	r5, r4
 800410a:	4628      	mov	r0, r5
 800410c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004110:	f000 f81a 	bl	8004148 <_malloc_usable_size_r>
 8004114:	4284      	cmp	r4, r0
 8004116:	4606      	mov	r6, r0
 8004118:	d802      	bhi.n	8004120 <_realloc_r+0x34>
 800411a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800411e:	d8f4      	bhi.n	800410a <_realloc_r+0x1e>
 8004120:	4621      	mov	r1, r4
 8004122:	4638      	mov	r0, r7
 8004124:	f7ff fc28 	bl	8003978 <_malloc_r>
 8004128:	4680      	mov	r8, r0
 800412a:	b908      	cbnz	r0, 8004130 <_realloc_r+0x44>
 800412c:	4645      	mov	r5, r8
 800412e:	e7ec      	b.n	800410a <_realloc_r+0x1e>
 8004130:	42b4      	cmp	r4, r6
 8004132:	4622      	mov	r2, r4
 8004134:	4629      	mov	r1, r5
 8004136:	bf28      	it	cs
 8004138:	4632      	movcs	r2, r6
 800413a:	f7ff ffc9 	bl	80040d0 <memcpy>
 800413e:	4629      	mov	r1, r5
 8004140:	4638      	mov	r0, r7
 8004142:	f7ff fbaf 	bl	80038a4 <_free_r>
 8004146:	e7f1      	b.n	800412c <_realloc_r+0x40>

08004148 <_malloc_usable_size_r>:
 8004148:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800414c:	1f18      	subs	r0, r3, #4
 800414e:	2b00      	cmp	r3, #0
 8004150:	bfbc      	itt	lt
 8004152:	580b      	ldrlt	r3, [r1, r0]
 8004154:	18c0      	addlt	r0, r0, r3
 8004156:	4770      	bx	lr

08004158 <_init>:
 8004158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800415a:	bf00      	nop
 800415c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800415e:	bc08      	pop	{r3}
 8004160:	469e      	mov	lr, r3
 8004162:	4770      	bx	lr

08004164 <_fini>:
 8004164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004166:	bf00      	nop
 8004168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800416a:	bc08      	pop	{r3}
 800416c:	469e      	mov	lr, r3
 800416e:	4770      	bx	lr
