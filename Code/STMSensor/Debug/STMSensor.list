
STMSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009628  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08009734  08009734  0000a734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009890  08009890  0000b1d0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009890  08009890  0000a890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009898  08009898  0000b1d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009898  08009898  0000a898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800989c  0800989c  0000a89c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d0  20000000  080098a0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001388  200001d0  08009a70  0000b1d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001558  08009a70  0000b558  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f9a0  00000000  00000000  0000b1f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003101  00000000  00000000  0001ab99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  0001dca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a3a  00000000  00000000  0001ea50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004dd6  00000000  00000000  0001f48a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013972  00000000  00000000  00024260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087737  00000000  00000000  00037bd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bf309  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b5c  00000000  00000000  000bf34c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000c2ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001d0 	.word	0x200001d0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800971c 	.word	0x0800971c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001d4 	.word	0x200001d4
 8000148:	0800971c 	.word	0x0800971c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fbe5 	bl	8000930 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f8c1 	bl	80002ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f947 	bl	80003fc <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800016e:	f008 f975 	bl	800845c <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8000172:	f000 f915 	bl	80003a0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* Attempt to initialize the VL53L0X sensor on I2C bus 1
  * This checks if sensor is connected and responding with correct ID (0xEE) */
  if (VL53L0X_Init(&hi2c1) == HAL_OK) {
 8000176:	484f      	ldr	r0, [pc, #316]	@ (80002b4 <main+0x158>)
 8000178:	f000 fb34 	bl	80007e4 <VL53L0X_Init>
 800017c:	4603      	mov	r3, r0
 800017e:	2b00      	cmp	r3, #0
 8000180:	d103      	bne.n	800018a <main+0x2e>
     /* Sensor found and initialized successfully */
     SendMessageUSB("VL53L0X Sensor Initialize Success...\n");
 8000182:	484d      	ldr	r0, [pc, #308]	@ (80002b8 <main+0x15c>)
 8000184:	f000 fac8 	bl	8000718 <SendMessageUSB>
 8000188:	e005      	b.n	8000196 <main+0x3a>
  } else {
     /* Sensor initialization failed - either not connected, wrong wiring,
      * or not a VL53L0X sensor (wrong ID) */
     SendMessageUSB("VL53L0X Sensor Initialize Fail...\n");
 800018a:	484c      	ldr	r0, [pc, #304]	@ (80002bc <main+0x160>)
 800018c:	f000 fac4 	bl	8000718 <SendMessageUSB>
     initError = 1;  // Set error flag to track initialization failure
 8000190:	4b4b      	ldr	r3, [pc, #300]	@ (80002c0 <main+0x164>)
 8000192:	2201      	movs	r2, #1
 8000194:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* Check initial sensor state from initialization */
	  if (initError) {
 8000196:	4b4a      	ldr	r3, [pc, #296]	@ (80002c0 <main+0x164>)
 8000198:	781b      	ldrb	r3, [r3, #0]
 800019a:	2b00      	cmp	r3, #0
 800019c:	d002      	beq.n	80001a4 <main+0x48>
	     sensorOK = 0;  // Sensor failed during init
 800019e:	4b49      	ldr	r3, [pc, #292]	@ (80002c4 <main+0x168>)
 80001a0:	2200      	movs	r2, #0
 80001a2:	701a      	strb	r2, [r3, #0]
	  }

	  /* Attempt sensor reconnection every ~1 second if it's not working */
	  if (!sensorOK) {
 80001a4:	4b47      	ldr	r3, [pc, #284]	@ (80002c4 <main+0x168>)
 80001a6:	781b      	ldrb	r3, [r3, #0]
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	d126      	bne.n	80001fa <main+0x9e>
	     reconnectTimer++;
 80001ac:	4b46      	ldr	r3, [pc, #280]	@ (80002c8 <main+0x16c>)
 80001ae:	781b      	ldrb	r3, [r3, #0]
 80001b0:	3301      	adds	r3, #1
 80001b2:	b2da      	uxtb	r2, r3
 80001b4:	4b44      	ldr	r3, [pc, #272]	@ (80002c8 <main+0x16c>)
 80001b6:	701a      	strb	r2, [r3, #0]
	     if (reconnectTimer >= 50) {  // 50 loops * 20ms = 1 second
 80001b8:	4b43      	ldr	r3, [pc, #268]	@ (80002c8 <main+0x16c>)
 80001ba:	781b      	ldrb	r3, [r3, #0]
 80001bc:	2b31      	cmp	r3, #49	@ 0x31
 80001be:	d91c      	bls.n	80001fa <main+0x9e>
	         reconnectTimer = 0;
 80001c0:	4b41      	ldr	r3, [pc, #260]	@ (80002c8 <main+0x16c>)
 80001c2:	2200      	movs	r2, #0
 80001c4:	701a      	strb	r2, [r3, #0]

	         /* Reset I2C bus before trying to reconnect
	                  * This clears any stuck I2C conditions */
	                 HAL_I2C_DeInit(&hi2c1);
 80001c6:	483b      	ldr	r0, [pc, #236]	@ (80002b4 <main+0x158>)
 80001c8:	f001 f8e2 	bl	8001390 <HAL_I2C_DeInit>
	                 HAL_Delay(10);
 80001cc:	200a      	movs	r0, #10
 80001ce:	f000 fc11 	bl	80009f4 <HAL_Delay>
	                 MX_I2C1_Init();  // Reinitialize I2C peripheral
 80001d2:	f000 f8e5 	bl	80003a0 <MX_I2C1_Init>
	                 HAL_Delay(10);
 80001d6:	200a      	movs	r0, #10
 80001d8:	f000 fc0c 	bl	80009f4 <HAL_Delay>

	         /* Try to initialize sensor again */
	         if (VL53L0X_Init(&hi2c1) == HAL_OK) {
 80001dc:	4835      	ldr	r0, [pc, #212]	@ (80002b4 <main+0x158>)
 80001de:	f000 fb01 	bl	80007e4 <VL53L0X_Init>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d108      	bne.n	80001fa <main+0x9e>
	             sensorOK = 1;  // Sensor is back online
 80001e8:	4b36      	ldr	r3, [pc, #216]	@ (80002c4 <main+0x168>)
 80001ea:	2201      	movs	r2, #1
 80001ec:	701a      	strb	r2, [r3, #0]
	             initError = 0;
 80001ee:	4b34      	ldr	r3, [pc, #208]	@ (80002c0 <main+0x164>)
 80001f0:	2200      	movs	r2, #0
 80001f2:	701a      	strb	r2, [r3, #0]
	             SendMessageUSB("Sensor reconnected\n");
 80001f4:	4835      	ldr	r0, [pc, #212]	@ (80002cc <main+0x170>)
 80001f6:	f000 fa8f 	bl	8000718 <SendMessageUSB>
	         }
	     }
	  }

	  /* Read and transmit sensor data if sensor is working */
	  if (sensorOK) {
 80001fa:	4b32      	ldr	r3, [pc, #200]	@ (80002c4 <main+0x168>)
 80001fc:	781b      	ldrb	r3, [r3, #0]
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d01e      	beq.n	8000240 <main+0xe4>
	     uint16_t distance = VL53L0X_ReadDistance(&hi2c1);
 8000202:	482c      	ldr	r0, [pc, #176]	@ (80002b4 <main+0x158>)
 8000204:	f000 fb0e 	bl	8000824 <VL53L0X_ReadDistance>
 8000208:	4603      	mov	r3, r0
 800020a:	80fb      	strh	r3, [r7, #6]

	     if (distance != DISTANCE_ERROR) {
 800020c:	88fb      	ldrh	r3, [r7, #6]
 800020e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000212:	4293      	cmp	r3, r2
 8000214:	d00e      	beq.n	8000234 <main+0xd8>
	         /* Valid reading - try to send over USB */
	         if (SendSensorUSB(distance) != HAL_OK) {
 8000216:	88fb      	ldrh	r3, [r7, #6]
 8000218:	4618      	mov	r0, r3
 800021a:	f000 faad 	bl	8000778 <SendSensorUSB>
 800021e:	4603      	mov	r3, r0
 8000220:	2b00      	cmp	r3, #0
 8000222:	d003      	beq.n	800022c <main+0xd0>
	             usbOK = 0;  // USB transmission failed
 8000224:	4b2a      	ldr	r3, [pc, #168]	@ (80002d0 <main+0x174>)
 8000226:	2200      	movs	r2, #0
 8000228:	701a      	strb	r2, [r3, #0]
 800022a:	e009      	b.n	8000240 <main+0xe4>
	         } else {
	             usbOK = 1;  // USB working fine
 800022c:	4b28      	ldr	r3, [pc, #160]	@ (80002d0 <main+0x174>)
 800022e:	2201      	movs	r2, #1
 8000230:	701a      	strb	r2, [r3, #0]
 8000232:	e005      	b.n	8000240 <main+0xe4>
	         }
	         // TODO Add CAN Imple
	     } else {
	         /* Sensor read failed - mark as not working */
	         sensorOK = 0;
 8000234:	4b23      	ldr	r3, [pc, #140]	@ (80002c4 <main+0x168>)
 8000236:	2200      	movs	r2, #0
 8000238:	701a      	strb	r2, [r3, #0]
	         SendMessageUSB("Sensor read failed\n");
 800023a:	4826      	ldr	r0, [pc, #152]	@ (80002d4 <main+0x178>)
 800023c:	f000 fa6c 	bl	8000718 <SendMessageUSB>
	     }
	  }

	  /* Check USB connection health (optional - implement based on your USB stack) */
	  if (USBStatus() != USBD_OK) {
 8000240:	f000 fac6 	bl	80007d0 <USBStatus>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d002      	beq.n	8000250 <main+0xf4>
	     usbOK = 0;  // USB disconnected or not ready
 800024a:	4b21      	ldr	r3, [pc, #132]	@ (80002d0 <main+0x174>)
 800024c:	2200      	movs	r2, #0
 800024e:	701a      	strb	r2, [r3, #0]

	  /* LED Status Indicator (Pull-Up: LOW = ON, HIGH = OFF)
	  * Different patterns for different states:
	  * - All OK: LED ON (solid)
	  * - Any error: LED OFF */
	  if (sensorOK && usbOK && canOK) {
 8000250:	4b1c      	ldr	r3, [pc, #112]	@ (80002c4 <main+0x168>)
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	2b00      	cmp	r3, #0
 8000256:	d00e      	beq.n	8000276 <main+0x11a>
 8000258:	4b1d      	ldr	r3, [pc, #116]	@ (80002d0 <main+0x174>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d00a      	beq.n	8000276 <main+0x11a>
 8000260:	4b1d      	ldr	r3, [pc, #116]	@ (80002d8 <main+0x17c>)
 8000262:	781b      	ldrb	r3, [r3, #0]
 8000264:	2b00      	cmp	r3, #0
 8000266:	d006      	beq.n	8000276 <main+0x11a>
	     /* Everything working - LED ON */
	     HAL_GPIO_WritePin(LED_BUILTIN, GPIO_PIN_RESET);
 8000268:	2200      	movs	r2, #0
 800026a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800026e:	481b      	ldr	r0, [pc, #108]	@ (80002dc <main+0x180>)
 8000270:	f000 ff32 	bl	80010d8 <HAL_GPIO_WritePin>
 8000274:	e01a      	b.n	80002ac <main+0x150>
	  } else {
	     /* Something has failed - LED OFF
	      * Could expand this to blink patterns for specific errors */
	     HAL_GPIO_WritePin(LED_BUILTIN, GPIO_PIN_SET);
 8000276:	2201      	movs	r2, #1
 8000278:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800027c:	4817      	ldr	r0, [pc, #92]	@ (80002dc <main+0x180>)
 800027e:	f000 ff2b 	bl	80010d8 <HAL_GPIO_WritePin>

	     /* Print which system failed for debugging */
	     if (!sensorOK) SendMessageUSB("ERROR: Sensor\n");
 8000282:	4b10      	ldr	r3, [pc, #64]	@ (80002c4 <main+0x168>)
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	2b00      	cmp	r3, #0
 8000288:	d102      	bne.n	8000290 <main+0x134>
 800028a:	4815      	ldr	r0, [pc, #84]	@ (80002e0 <main+0x184>)
 800028c:	f000 fa44 	bl	8000718 <SendMessageUSB>
	     if (!usbOK)    SendMessageUSB("ERROR: USB\n");
 8000290:	4b0f      	ldr	r3, [pc, #60]	@ (80002d0 <main+0x174>)
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d102      	bne.n	800029e <main+0x142>
 8000298:	4812      	ldr	r0, [pc, #72]	@ (80002e4 <main+0x188>)
 800029a:	f000 fa3d 	bl	8000718 <SendMessageUSB>
	     if (!canOK)    SendMessageUSB("ERROR: CAN\n");
 800029e:	4b0e      	ldr	r3, [pc, #56]	@ (80002d8 <main+0x17c>)
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d102      	bne.n	80002ac <main+0x150>
 80002a6:	4810      	ldr	r0, [pc, #64]	@ (80002e8 <main+0x18c>)
 80002a8:	f000 fa36 	bl	8000718 <SendMessageUSB>
	  }

	  /* Wait 20ms before next loop iteration
	  * This matches FRC CAN bus update period (50Hz) */
	  HAL_Delay(20);
 80002ac:	2014      	movs	r0, #20
 80002ae:	f000 fba1 	bl	80009f4 <HAL_Delay>
	  if (initError) {
 80002b2:	e770      	b.n	8000196 <main+0x3a>
 80002b4:	200001ec 	.word	0x200001ec
 80002b8:	08009734 	.word	0x08009734
 80002bc:	0800975c 	.word	0x0800975c
 80002c0:	20000240 	.word	0x20000240
 80002c4:	20000241 	.word	0x20000241
 80002c8:	20000242 	.word	0x20000242
 80002cc:	08009780 	.word	0x08009780
 80002d0:	20000000 	.word	0x20000000
 80002d4:	08009794 	.word	0x08009794
 80002d8:	20000001 	.word	0x20000001
 80002dc:	40011000 	.word	0x40011000
 80002e0:	080097a8 	.word	0x080097a8
 80002e4:	080097b8 	.word	0x080097b8
 80002e8:	080097c4 	.word	0x080097c4

080002ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b094      	sub	sp, #80	@ 0x50
 80002f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80002f6:	2228      	movs	r2, #40	@ 0x28
 80002f8:	2100      	movs	r1, #0
 80002fa:	4618      	mov	r0, r3
 80002fc:	f008 fd80 	bl	8008e00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000300:	f107 0314 	add.w	r3, r7, #20
 8000304:	2200      	movs	r2, #0
 8000306:	601a      	str	r2, [r3, #0]
 8000308:	605a      	str	r2, [r3, #4]
 800030a:	609a      	str	r2, [r3, #8]
 800030c:	60da      	str	r2, [r3, #12]
 800030e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	605a      	str	r2, [r3, #4]
 8000318:	609a      	str	r2, [r3, #8]
 800031a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800031c:	2301      	movs	r3, #1
 800031e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000320:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000324:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000326:	2300      	movs	r3, #0
 8000328:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800032a:	2301      	movs	r3, #1
 800032c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800032e:	2302      	movs	r3, #2
 8000330:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000332:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000336:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000338:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800033c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000342:	4618      	mov	r0, r3
 8000344:	f003 fcd6 	bl	8003cf4 <HAL_RCC_OscConfig>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800034e:	f000 f8ad 	bl	80004ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000352:	230f      	movs	r3, #15
 8000354:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000356:	2302      	movs	r3, #2
 8000358:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800035a:	2300      	movs	r3, #0
 800035c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800035e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000362:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000364:	2300      	movs	r3, #0
 8000366:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000368:	f107 0314 	add.w	r3, r7, #20
 800036c:	2102      	movs	r1, #2
 800036e:	4618      	mov	r0, r3
 8000370:	f003 ff42 	bl	80041f8 <HAL_RCC_ClockConfig>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800037a:	f000 f897 	bl	80004ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800037e:	2310      	movs	r3, #16
 8000380:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000382:	2300      	movs	r3, #0
 8000384:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	4618      	mov	r0, r3
 800038a:	f004 f8af 	bl	80044ec <HAL_RCCEx_PeriphCLKConfig>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000394:	f000 f88a 	bl	80004ac <Error_Handler>
  }
}
 8000398:	bf00      	nop
 800039a:	3750      	adds	r7, #80	@ 0x50
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}

080003a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003a4:	4b12      	ldr	r3, [pc, #72]	@ (80003f0 <MX_I2C1_Init+0x50>)
 80003a6:	4a13      	ldr	r2, [pc, #76]	@ (80003f4 <MX_I2C1_Init+0x54>)
 80003a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80003aa:	4b11      	ldr	r3, [pc, #68]	@ (80003f0 <MX_I2C1_Init+0x50>)
 80003ac:	4a12      	ldr	r2, [pc, #72]	@ (80003f8 <MX_I2C1_Init+0x58>)
 80003ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003b0:	4b0f      	ldr	r3, [pc, #60]	@ (80003f0 <MX_I2C1_Init+0x50>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80003b6:	4b0e      	ldr	r3, [pc, #56]	@ (80003f0 <MX_I2C1_Init+0x50>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003bc:	4b0c      	ldr	r3, [pc, #48]	@ (80003f0 <MX_I2C1_Init+0x50>)
 80003be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80003c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003c4:	4b0a      	ldr	r3, [pc, #40]	@ (80003f0 <MX_I2C1_Init+0x50>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80003ca:	4b09      	ldr	r3, [pc, #36]	@ (80003f0 <MX_I2C1_Init+0x50>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003d0:	4b07      	ldr	r3, [pc, #28]	@ (80003f0 <MX_I2C1_Init+0x50>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003d6:	4b06      	ldr	r3, [pc, #24]	@ (80003f0 <MX_I2C1_Init+0x50>)
 80003d8:	2200      	movs	r2, #0
 80003da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003dc:	4804      	ldr	r0, [pc, #16]	@ (80003f0 <MX_I2C1_Init+0x50>)
 80003de:	f000 fe93 	bl	8001108 <HAL_I2C_Init>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d001      	beq.n	80003ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80003e8:	f000 f860 	bl	80004ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003ec:	bf00      	nop
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	200001ec 	.word	0x200001ec
 80003f4:	40005400 	.word	0x40005400
 80003f8:	000186a0 	.word	0x000186a0

080003fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b088      	sub	sp, #32
 8000400:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000402:	f107 0310 	add.w	r3, r7, #16
 8000406:	2200      	movs	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
 800040a:	605a      	str	r2, [r3, #4]
 800040c:	609a      	str	r2, [r3, #8]
 800040e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000410:	4b24      	ldr	r3, [pc, #144]	@ (80004a4 <MX_GPIO_Init+0xa8>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	4a23      	ldr	r2, [pc, #140]	@ (80004a4 <MX_GPIO_Init+0xa8>)
 8000416:	f043 0310 	orr.w	r3, r3, #16
 800041a:	6193      	str	r3, [r2, #24]
 800041c:	4b21      	ldr	r3, [pc, #132]	@ (80004a4 <MX_GPIO_Init+0xa8>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	f003 0310 	and.w	r3, r3, #16
 8000424:	60fb      	str	r3, [r7, #12]
 8000426:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000428:	4b1e      	ldr	r3, [pc, #120]	@ (80004a4 <MX_GPIO_Init+0xa8>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	4a1d      	ldr	r2, [pc, #116]	@ (80004a4 <MX_GPIO_Init+0xa8>)
 800042e:	f043 0320 	orr.w	r3, r3, #32
 8000432:	6193      	str	r3, [r2, #24]
 8000434:	4b1b      	ldr	r3, [pc, #108]	@ (80004a4 <MX_GPIO_Init+0xa8>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	f003 0320 	and.w	r3, r3, #32
 800043c:	60bb      	str	r3, [r7, #8]
 800043e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000440:	4b18      	ldr	r3, [pc, #96]	@ (80004a4 <MX_GPIO_Init+0xa8>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	4a17      	ldr	r2, [pc, #92]	@ (80004a4 <MX_GPIO_Init+0xa8>)
 8000446:	f043 0304 	orr.w	r3, r3, #4
 800044a:	6193      	str	r3, [r2, #24]
 800044c:	4b15      	ldr	r3, [pc, #84]	@ (80004a4 <MX_GPIO_Init+0xa8>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	f003 0304 	and.w	r3, r3, #4
 8000454:	607b      	str	r3, [r7, #4]
 8000456:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000458:	4b12      	ldr	r3, [pc, #72]	@ (80004a4 <MX_GPIO_Init+0xa8>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	4a11      	ldr	r2, [pc, #68]	@ (80004a4 <MX_GPIO_Init+0xa8>)
 800045e:	f043 0308 	orr.w	r3, r3, #8
 8000462:	6193      	str	r3, [r2, #24]
 8000464:	4b0f      	ldr	r3, [pc, #60]	@ (80004a4 <MX_GPIO_Init+0xa8>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	f003 0308 	and.w	r3, r3, #8
 800046c:	603b      	str	r3, [r7, #0]
 800046e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Status_LED_GPIO_Port, Status_LED_Pin, GPIO_PIN_RESET);
 8000470:	2200      	movs	r2, #0
 8000472:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000476:	480c      	ldr	r0, [pc, #48]	@ (80004a8 <MX_GPIO_Init+0xac>)
 8000478:	f000 fe2e 	bl	80010d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Status_LED_Pin */
  GPIO_InitStruct.Pin = Status_LED_Pin;
 800047c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000480:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000482:	2301      	movs	r3, #1
 8000484:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000486:	2301      	movs	r3, #1
 8000488:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800048a:	2303      	movs	r3, #3
 800048c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Status_LED_GPIO_Port, &GPIO_InitStruct);
 800048e:	f107 0310 	add.w	r3, r7, #16
 8000492:	4619      	mov	r1, r3
 8000494:	4804      	ldr	r0, [pc, #16]	@ (80004a8 <MX_GPIO_Init+0xac>)
 8000496:	f000 fbdf 	bl	8000c58 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800049a:	bf00      	nop
 800049c:	3720      	adds	r7, #32
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	40021000 	.word	0x40021000
 80004a8:	40011000 	.word	0x40011000

080004ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004b0:	b672      	cpsid	i
}
 80004b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004b4:	bf00      	nop
 80004b6:	e7fd      	b.n	80004b4 <Error_Handler+0x8>

080004b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b085      	sub	sp, #20
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004be:	4b15      	ldr	r3, [pc, #84]	@ (8000514 <HAL_MspInit+0x5c>)
 80004c0:	699b      	ldr	r3, [r3, #24]
 80004c2:	4a14      	ldr	r2, [pc, #80]	@ (8000514 <HAL_MspInit+0x5c>)
 80004c4:	f043 0301 	orr.w	r3, r3, #1
 80004c8:	6193      	str	r3, [r2, #24]
 80004ca:	4b12      	ldr	r3, [pc, #72]	@ (8000514 <HAL_MspInit+0x5c>)
 80004cc:	699b      	ldr	r3, [r3, #24]
 80004ce:	f003 0301 	and.w	r3, r3, #1
 80004d2:	60bb      	str	r3, [r7, #8]
 80004d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000514 <HAL_MspInit+0x5c>)
 80004d8:	69db      	ldr	r3, [r3, #28]
 80004da:	4a0e      	ldr	r2, [pc, #56]	@ (8000514 <HAL_MspInit+0x5c>)
 80004dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004e0:	61d3      	str	r3, [r2, #28]
 80004e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000514 <HAL_MspInit+0x5c>)
 80004e4:	69db      	ldr	r3, [r3, #28]
 80004e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80004ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000518 <HAL_MspInit+0x60>)
 80004f0:	685b      	ldr	r3, [r3, #4]
 80004f2:	60fb      	str	r3, [r7, #12]
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000502:	60fb      	str	r3, [r7, #12]
 8000504:	4a04      	ldr	r2, [pc, #16]	@ (8000518 <HAL_MspInit+0x60>)
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800050a:	bf00      	nop
 800050c:	3714      	adds	r7, #20
 800050e:	46bd      	mov	sp, r7
 8000510:	bc80      	pop	{r7}
 8000512:	4770      	bx	lr
 8000514:	40021000 	.word	0x40021000
 8000518:	40010000 	.word	0x40010000

0800051c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b088      	sub	sp, #32
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000524:	f107 0310 	add.w	r3, r7, #16
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4a15      	ldr	r2, [pc, #84]	@ (800058c <HAL_I2C_MspInit+0x70>)
 8000538:	4293      	cmp	r3, r2
 800053a:	d123      	bne.n	8000584 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800053c:	4b14      	ldr	r3, [pc, #80]	@ (8000590 <HAL_I2C_MspInit+0x74>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	4a13      	ldr	r2, [pc, #76]	@ (8000590 <HAL_I2C_MspInit+0x74>)
 8000542:	f043 0308 	orr.w	r3, r3, #8
 8000546:	6193      	str	r3, [r2, #24]
 8000548:	4b11      	ldr	r3, [pc, #68]	@ (8000590 <HAL_I2C_MspInit+0x74>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	f003 0308 	and.w	r3, r3, #8
 8000550:	60fb      	str	r3, [r7, #12]
 8000552:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000554:	23c0      	movs	r3, #192	@ 0xc0
 8000556:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000558:	2312      	movs	r3, #18
 800055a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800055c:	2303      	movs	r3, #3
 800055e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000560:	f107 0310 	add.w	r3, r7, #16
 8000564:	4619      	mov	r1, r3
 8000566:	480b      	ldr	r0, [pc, #44]	@ (8000594 <HAL_I2C_MspInit+0x78>)
 8000568:	f000 fb76 	bl	8000c58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800056c:	4b08      	ldr	r3, [pc, #32]	@ (8000590 <HAL_I2C_MspInit+0x74>)
 800056e:	69db      	ldr	r3, [r3, #28]
 8000570:	4a07      	ldr	r2, [pc, #28]	@ (8000590 <HAL_I2C_MspInit+0x74>)
 8000572:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000576:	61d3      	str	r3, [r2, #28]
 8000578:	4b05      	ldr	r3, [pc, #20]	@ (8000590 <HAL_I2C_MspInit+0x74>)
 800057a:	69db      	ldr	r3, [r3, #28]
 800057c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000584:	bf00      	nop
 8000586:	3720      	adds	r7, #32
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40005400 	.word	0x40005400
 8000590:	40021000 	.word	0x40021000
 8000594:	40010c00 	.word	0x40010c00

08000598 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a0a      	ldr	r2, [pc, #40]	@ (80005d0 <HAL_I2C_MspDeInit+0x38>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d10d      	bne.n	80005c6 <HAL_I2C_MspDeInit+0x2e>
  {
    /* USER CODE BEGIN I2C1_MspDeInit 0 */

    /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80005aa:	4b0a      	ldr	r3, [pc, #40]	@ (80005d4 <HAL_I2C_MspDeInit+0x3c>)
 80005ac:	69db      	ldr	r3, [r3, #28]
 80005ae:	4a09      	ldr	r2, [pc, #36]	@ (80005d4 <HAL_I2C_MspDeInit+0x3c>)
 80005b0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80005b4:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80005b6:	2140      	movs	r1, #64	@ 0x40
 80005b8:	4807      	ldr	r0, [pc, #28]	@ (80005d8 <HAL_I2C_MspDeInit+0x40>)
 80005ba:	f000 fcd1 	bl	8000f60 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80005be:	2180      	movs	r1, #128	@ 0x80
 80005c0:	4805      	ldr	r0, [pc, #20]	@ (80005d8 <HAL_I2C_MspDeInit+0x40>)
 80005c2:	f000 fccd 	bl	8000f60 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C1_MspDeInit 1 */

    /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40005400 	.word	0x40005400
 80005d4:	40021000 	.word	0x40021000
 80005d8:	40010c00 	.word	0x40010c00

080005dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005e0:	bf00      	nop
 80005e2:	e7fd      	b.n	80005e0 <NMI_Handler+0x4>

080005e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005e8:	bf00      	nop
 80005ea:	e7fd      	b.n	80005e8 <HardFault_Handler+0x4>

080005ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005f0:	bf00      	nop
 80005f2:	e7fd      	b.n	80005f0 <MemManage_Handler+0x4>

080005f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005f8:	bf00      	nop
 80005fa:	e7fd      	b.n	80005f8 <BusFault_Handler+0x4>

080005fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000600:	bf00      	nop
 8000602:	e7fd      	b.n	8000600 <UsageFault_Handler+0x4>

08000604 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr

08000610 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr

0800061c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	bc80      	pop	{r7}
 8000626:	4770      	bx	lr

08000628 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800062c:	f000 f9c6 	bl	80009bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}

08000634 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000638:	4802      	ldr	r0, [pc, #8]	@ (8000644 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800063a:	f001 ff16 	bl	800246a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000f18 	.word	0x20000f18

08000648 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000650:	4a14      	ldr	r2, [pc, #80]	@ (80006a4 <_sbrk+0x5c>)
 8000652:	4b15      	ldr	r3, [pc, #84]	@ (80006a8 <_sbrk+0x60>)
 8000654:	1ad3      	subs	r3, r2, r3
 8000656:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800065c:	4b13      	ldr	r3, [pc, #76]	@ (80006ac <_sbrk+0x64>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d102      	bne.n	800066a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000664:	4b11      	ldr	r3, [pc, #68]	@ (80006ac <_sbrk+0x64>)
 8000666:	4a12      	ldr	r2, [pc, #72]	@ (80006b0 <_sbrk+0x68>)
 8000668:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800066a:	4b10      	ldr	r3, [pc, #64]	@ (80006ac <_sbrk+0x64>)
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4413      	add	r3, r2
 8000672:	693a      	ldr	r2, [r7, #16]
 8000674:	429a      	cmp	r2, r3
 8000676:	d207      	bcs.n	8000688 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000678:	f008 fbca 	bl	8008e10 <__errno>
 800067c:	4603      	mov	r3, r0
 800067e:	220c      	movs	r2, #12
 8000680:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000682:	f04f 33ff 	mov.w	r3, #4294967295
 8000686:	e009      	b.n	800069c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000688:	4b08      	ldr	r3, [pc, #32]	@ (80006ac <_sbrk+0x64>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800068e:	4b07      	ldr	r3, [pc, #28]	@ (80006ac <_sbrk+0x64>)
 8000690:	681a      	ldr	r2, [r3, #0]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	4413      	add	r3, r2
 8000696:	4a05      	ldr	r2, [pc, #20]	@ (80006ac <_sbrk+0x64>)
 8000698:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800069a:	68fb      	ldr	r3, [r7, #12]
}
 800069c:	4618      	mov	r0, r3
 800069e:	3718      	adds	r7, #24
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20005000 	.word	0x20005000
 80006a8:	00000400 	.word	0x00000400
 80006ac:	20000244 	.word	0x20000244
 80006b0:	20001558 	.word	0x20001558

080006b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006b8:	bf00      	nop
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr

080006c0 <USBWrite>:
#include "gpio.h"
#include "stdbool.h"

USBD_StatusTypeDef status;

USBD_StatusTypeDef USBWrite(uint8_t *txData) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
	uint16_t len = strlen((char*)txData);
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f7ff fd3f 	bl	800014c <strlen>
 80006ce:	4603      	mov	r3, r0
 80006d0:	81fb      	strh	r3, [r7, #14]
	// Keep trying until it's not busy
	    do {
	        status = CDC_Transmit_FS(txData, len);
 80006d2:	89fb      	ldrh	r3, [r7, #14]
 80006d4:	4619      	mov	r1, r3
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	f007 ff7e 	bl	80085d8 <CDC_Transmit_FS>
 80006dc:	4603      	mov	r3, r0
 80006de:	461a      	mov	r2, r3
 80006e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000714 <USBWrite+0x54>)
 80006e2:	701a      	strb	r2, [r3, #0]
	        if (status == USBD_BUSY) {
 80006e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000714 <USBWrite+0x54>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d102      	bne.n	80006f2 <USBWrite+0x32>
	            HAL_Delay(10);  // Small delay before retrying
 80006ec:	200a      	movs	r0, #10
 80006ee:	f000 f981 	bl	80009f4 <HAL_Delay>
	        }
	    } while (status == USBD_BUSY);
 80006f2:	4b08      	ldr	r3, [pc, #32]	@ (8000714 <USBWrite+0x54>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d0eb      	beq.n	80006d2 <USBWrite+0x12>

	if (status == USBD_OK) {
 80006fa:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <USBWrite+0x54>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d102      	bne.n	8000708 <USBWrite+0x48>
		return status;
 8000702:	4b04      	ldr	r3, [pc, #16]	@ (8000714 <USBWrite+0x54>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	e001      	b.n	800070c <USBWrite+0x4c>
	} else {
		return status;
 8000708:	4b02      	ldr	r3, [pc, #8]	@ (8000714 <USBWrite+0x54>)
 800070a:	781b      	ldrb	r3, [r3, #0]
	}
}
 800070c:	4618      	mov	r0, r3
 800070e:	3710      	adds	r7, #16
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000248 	.word	0x20000248

08000718 <SendMessageUSB>:

USBD_StatusTypeDef SendMessageUSB(const char *msg) {
 8000718:	b580      	push	{r7, lr}
 800071a:	b0c4      	sub	sp, #272	@ 0x110
 800071c:	af00      	add	r7, sp, #0
 800071e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000722:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000726:	6018      	str	r0, [r3, #0]
	uint8_t buffer[256];
	size_t msgLen = strlen(msg);
 8000728:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800072c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000730:	6818      	ldr	r0, [r3, #0]
 8000732:	f7ff fd0b 	bl	800014c <strlen>
 8000736:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	memcpy(buffer, msg, msgLen);
 800073a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800073e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000742:	f107 000c 	add.w	r0, r7, #12
 8000746:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800074a:	6819      	ldr	r1, [r3, #0]
 800074c:	f008 fb8c 	bl	8008e68 <memcpy>
	buffer[msgLen] = '\0';
 8000750:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000754:	f5a3 7282 	sub.w	r2, r3, #260	@ 0x104
 8000758:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800075c:	4413      	add	r3, r2
 800075e:	2200      	movs	r2, #0
 8000760:	701a      	strb	r2, [r3, #0]

	return USBWrite(buffer);
 8000762:	f107 030c 	add.w	r3, r7, #12
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff ffaa 	bl	80006c0 <USBWrite>
 800076c:	4603      	mov	r3, r0
}
 800076e:	4618      	mov	r0, r3
 8000770:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}

08000778 <SendSensorUSB>:

USBD_StatusTypeDef SendSensorUSB(uint16_t distance) {
 8000778:	b580      	push	{r7, lr}
 800077a:	b0c6      	sub	sp, #280	@ 0x118
 800077c:	af00      	add	r7, sp, #0
 800077e:	4602      	mov	r2, r0
 8000780:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000784:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 8000788:	801a      	strh	r2, [r3, #0]
    uint8_t buffer[256];
    char distance_str[10];

    // Convert distance to string
    snprintf(distance_str, sizeof(distance_str), "%u", distance);
 800078a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800078e:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 8000792:	881b      	ldrh	r3, [r3, #0]
 8000794:	f107 000c 	add.w	r0, r7, #12
 8000798:	4a0b      	ldr	r2, [pc, #44]	@ (80007c8 <SendSensorUSB+0x50>)
 800079a:	210a      	movs	r1, #10
 800079c:	f008 fafa 	bl	8008d94 <sniprintf>

    // Create full message
    snprintf((char*)buffer, sizeof(buffer), "Distance: %smm\r\n", distance_str);
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	f107 0018 	add.w	r0, r7, #24
 80007a8:	4a08      	ldr	r2, [pc, #32]	@ (80007cc <SendSensorUSB+0x54>)
 80007aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007ae:	f008 faf1 	bl	8008d94 <sniprintf>

    return USBWrite(buffer);
 80007b2:	f107 0318 	add.w	r3, r7, #24
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff ff82 	bl	80006c0 <USBWrite>
 80007bc:	4603      	mov	r3, r0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	080097d0 	.word	0x080097d0
 80007cc:	080097d4 	.word	0x080097d4

080007d0 <USBStatus>:

USBD_StatusTypeDef USBStatus() {
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
	return status;
 80007d4:	4b02      	ldr	r3, [pc, #8]	@ (80007e0 <USBStatus+0x10>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
}
 80007d8:	4618      	mov	r0, r3
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr
 80007e0:	20000248 	.word	0x20000248

080007e4 <VL53L0X_Init>:
 * @return HAL_OK if sensor found, HAL_ERROR if something's wrong
 * 
 * We ask the sensor for its ID number to make sure it's really there
 * and that it's the right type of sensor (VL53L0X always returns 0xEE)
 */
HAL_StatusTypeDef VL53L0X_Init(I2C_HandleTypeDef *hi2c) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b088      	sub	sp, #32
 80007e8:	af04      	add	r7, sp, #16
 80007ea:	6078      	str	r0, [r7, #4]
    uint8_t sensor_id;  // Variable to store the ID we read from sensor
    
    /* Read the sensor's ID register at address 0xC0 */
    if (HAL_I2C_Mem_Read(hi2c,                    // Use this I2C bus
 80007ec:	2364      	movs	r3, #100	@ 0x64
 80007ee:	9302      	str	r3, [sp, #8]
 80007f0:	2301      	movs	r3, #1
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	f107 030f 	add.w	r3, r7, #15
 80007f8:	9300      	str	r3, [sp, #0]
 80007fa:	2301      	movs	r3, #1
 80007fc:	22c0      	movs	r2, #192	@ 0xc0
 80007fe:	2152      	movs	r1, #82	@ 0x52
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	f000 feef 	bl	80015e4 <HAL_I2C_Mem_Read>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <VL53L0X_Init+0x2c>
                         &sensor_id,               // Store the ID here
                         1,                        // Read 1 byte
                         I2C_TIMEOUT_MS) != HAL_OK) {  // Wait max 100ms
        
        /* If we can't read the ID, sensor is probably not connected */
        return HAL_ERROR;  
 800080c:	2301      	movs	r3, #1
 800080e:	e005      	b.n	800081c <VL53L0X_Init+0x38>
    }
    
    /* Check if the ID matches what we expect (0xEE)
     * All genuine VL53L0X sensors have this same ID */
    if (sensor_id != VL53L0X_EXPECTED_ID) {
 8000810:	7bfb      	ldrb	r3, [r7, #15]
 8000812:	2bee      	cmp	r3, #238	@ 0xee
 8000814:	d001      	beq.n	800081a <VL53L0X_Init+0x36>
        /* Wrong ID means it's not a VL53L0X sensor */
        return HAL_ERROR;  
 8000816:	2301      	movs	r3, #1
 8000818:	e000      	b.n	800081c <VL53L0X_Init+0x38>
    }
    
    /* Sensor found and responding correctly */
    return HAL_OK;  
 800081a:	2300      	movs	r3, #0
}
 800081c:	4618      	mov	r0, r3
 800081e:	3710      	adds	r7, #16
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}

08000824 <VL53L0X_ReadDistance>:
 * The measurement process:
 * 1. Tell sensor to take a measurement
 * 2. Wait for it to finish (check status register)
 * 3. Read the 16-bit result from the distance register
 */
uint16_t VL53L0X_ReadDistance(I2C_HandleTypeDef *hi2c) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b08a      	sub	sp, #40	@ 0x28
 8000828:	af04      	add	r7, sp, #16
 800082a:	6078      	str	r0, [r7, #4]
    uint8_t distance_bytes[2];  // Array to store the 2-byte distance value
    uint8_t command;            // Command byte to send to sensor
    uint8_t status;             // Sensor's status byte
    uint32_t wait_loops = 0;    // Counter to prevent waiting forever
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]
    
    /* Tell sensor to start a measurement by writing 0x01 to register 0x00 */
    command = START_SINGLE_MEASURE;  // 0x01 = take one measurement
 8000830:	2301      	movs	r3, #1
 8000832:	73fb      	strb	r3, [r7, #15]
    
    if (HAL_I2C_Mem_Write(hi2c,                   // Use this I2C bus
 8000834:	2364      	movs	r3, #100	@ 0x64
 8000836:	9302      	str	r3, [sp, #8]
 8000838:	2301      	movs	r3, #1
 800083a:	9301      	str	r3, [sp, #4]
 800083c:	f107 030f 	add.w	r3, r7, #15
 8000840:	9300      	str	r3, [sp, #0]
 8000842:	2301      	movs	r3, #1
 8000844:	2200      	movs	r2, #0
 8000846:	2152      	movs	r1, #82	@ 0x52
 8000848:	6878      	ldr	r0, [r7, #4]
 800084a:	f000 fdd1 	bl	80013f0 <HAL_I2C_Mem_Write>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d002      	beq.n	800085a <VL53L0X_ReadDistance+0x36>
                          &command,                // Send this command (0x01)
                          1,                       // Send 1 byte
                          I2C_TIMEOUT_MS) != HAL_OK) {  // Wait max 100ms
        
        /* Couldn't send command to sensor */
        return DISTANCE_ERROR;  // Return error value (0xFFFF)
 8000854:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000858:	e040      	b.n	80008dc <VL53L0X_ReadDistance+0xb8>
    /* Wait for measurement to complete
     * The sensor sets bit 0 of the status register to 1 when done
     * We keep checking this bit until it becomes 1 */
    do {
        /* Read the status register at address 0x14 */
        if (HAL_I2C_Mem_Read(hi2c,                    // Use this I2C bus
 800085a:	2364      	movs	r3, #100	@ 0x64
 800085c:	9302      	str	r3, [sp, #8]
 800085e:	2301      	movs	r3, #1
 8000860:	9301      	str	r3, [sp, #4]
 8000862:	f107 030e 	add.w	r3, r7, #14
 8000866:	9300      	str	r3, [sp, #0]
 8000868:	2301      	movs	r3, #1
 800086a:	2214      	movs	r2, #20
 800086c:	2152      	movs	r1, #82	@ 0x52
 800086e:	6878      	ldr	r0, [r7, #4]
 8000870:	f000 feb8 	bl	80015e4 <HAL_I2C_Mem_Read>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d002      	beq.n	8000880 <VL53L0X_ReadDistance+0x5c>
                             &status,                  // Store status here
                             1,                        // Read 1 byte
                             I2C_TIMEOUT_MS) != HAL_OK) {  // Wait max 100ms
            
            /* Couldn't read status */
            return DISTANCE_ERROR;  
 800087a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800087e:	e02d      	b.n	80008dc <VL53L0X_ReadDistance+0xb8>
        }
        
        /* Check if we've been waiting too long (>100ms is unusual) */
        wait_loops++;
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	3301      	adds	r3, #1
 8000884:	617b      	str	r3, [r7, #20]
        if (wait_loops > MEASUREMENT_TIMEOUT_MS) {
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	2b64      	cmp	r3, #100	@ 0x64
 800088a:	d902      	bls.n	8000892 <VL53L0X_ReadDistance+0x6e>
            /* Sensor is taking too long, something's wrong */
            return DISTANCE_ERROR;
 800088c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000890:	e024      	b.n	80008dc <VL53L0X_ReadDistance+0xb8>
        }
        
        /* Wait 1 millisecond before checking again */
        HAL_Delay(1);
 8000892:	2001      	movs	r0, #1
 8000894:	f000 f8ae 	bl	80009f4 <HAL_Delay>
        
        /* Keep looping while bit 0 is still 0 (not ready) */
    } while ((status & MEASUREMENT_READY_BIT) == 0);
 8000898:	7bbb      	ldrb	r3, [r7, #14]
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d0db      	beq.n	800085a <VL53L0X_ReadDistance+0x36>
    
    /* Measurement is ready! Read the distance value (2 bytes at address 0x1E) */
    if (HAL_I2C_Mem_Read(hi2c,                    // Use this I2C bus
 80008a2:	2364      	movs	r3, #100	@ 0x64
 80008a4:	9302      	str	r3, [sp, #8]
 80008a6:	2302      	movs	r3, #2
 80008a8:	9301      	str	r3, [sp, #4]
 80008aa:	f107 0310 	add.w	r3, r7, #16
 80008ae:	9300      	str	r3, [sp, #0]
 80008b0:	2301      	movs	r3, #1
 80008b2:	221e      	movs	r2, #30
 80008b4:	2152      	movs	r1, #82	@ 0x52
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f000 fe94 	bl	80015e4 <HAL_I2C_Mem_Read>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d002      	beq.n	80008c8 <VL53L0X_ReadDistance+0xa4>
                         distance_bytes,           // Store 2 bytes here
                         2,                        // Read 2 bytes
                         I2C_TIMEOUT_MS) != HAL_OK) {  // Wait max 100ms
        
        /* Couldn't read the distance */
        return DISTANCE_ERROR;
 80008c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80008c6:	e009      	b.n	80008dc <VL53L0X_ReadDistance+0xb8>
    
    /* Combine the 2 bytes into one 16-bit number
     * First byte is the high byte (multiply by 256)
     * Second byte is the low byte
     * Example: if bytes are [0x01, 0x2C], distance = (1 * 256) + 44 = 300mm */
    uint16_t distance = (distance_bytes[0] << 8) | distance_bytes[1];
 80008c8:	7c3b      	ldrb	r3, [r7, #16]
 80008ca:	b21b      	sxth	r3, r3
 80008cc:	021b      	lsls	r3, r3, #8
 80008ce:	b21a      	sxth	r2, r3
 80008d0:	7c7b      	ldrb	r3, [r7, #17]
 80008d2:	b21b      	sxth	r3, r3
 80008d4:	4313      	orrs	r3, r2
 80008d6:	b21b      	sxth	r3, r3
 80008d8:	827b      	strh	r3, [r7, #18]
    
    /* Return the distance in millimeters */
    return distance;
 80008da:	8a7b      	ldrh	r3, [r7, #18]
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3718      	adds	r7, #24
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008e4:	f7ff fee6 	bl	80006b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008e8:	480b      	ldr	r0, [pc, #44]	@ (8000918 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008ea:	490c      	ldr	r1, [pc, #48]	@ (800091c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008ec:	4a0c      	ldr	r2, [pc, #48]	@ (8000920 <LoopFillZerobss+0x16>)
  movs r3, #0
 80008ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f0:	e002      	b.n	80008f8 <LoopCopyDataInit>

080008f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008f6:	3304      	adds	r3, #4

080008f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008fc:	d3f9      	bcc.n	80008f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008fe:	4a09      	ldr	r2, [pc, #36]	@ (8000924 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000900:	4c09      	ldr	r4, [pc, #36]	@ (8000928 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000902:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000904:	e001      	b.n	800090a <LoopFillZerobss>

08000906 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000906:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000908:	3204      	adds	r2, #4

0800090a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800090a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800090c:	d3fb      	bcc.n	8000906 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800090e:	f008 fa85 	bl	8008e1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000912:	f7ff fc23 	bl	800015c <main>
  bx lr
 8000916:	4770      	bx	lr
  ldr r0, =_sdata
 8000918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800091c:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8000920:	080098a0 	.word	0x080098a0
  ldr r2, =_sbss
 8000924:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8000928:	20001558 	.word	0x20001558

0800092c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800092c:	e7fe      	b.n	800092c <ADC1_2_IRQHandler>
	...

08000930 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000934:	4b08      	ldr	r3, [pc, #32]	@ (8000958 <HAL_Init+0x28>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a07      	ldr	r2, [pc, #28]	@ (8000958 <HAL_Init+0x28>)
 800093a:	f043 0310 	orr.w	r3, r3, #16
 800093e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000940:	2003      	movs	r0, #3
 8000942:	f000 f947 	bl	8000bd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000946:	200f      	movs	r0, #15
 8000948:	f000 f808 	bl	800095c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800094c:	f7ff fdb4 	bl	80004b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000950:	2300      	movs	r3, #0
}
 8000952:	4618      	mov	r0, r3
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40022000 	.word	0x40022000

0800095c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000964:	4b12      	ldr	r3, [pc, #72]	@ (80009b0 <HAL_InitTick+0x54>)
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	4b12      	ldr	r3, [pc, #72]	@ (80009b4 <HAL_InitTick+0x58>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	4619      	mov	r1, r3
 800096e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000972:	fbb3 f3f1 	udiv	r3, r3, r1
 8000976:	fbb2 f3f3 	udiv	r3, r2, r3
 800097a:	4618      	mov	r0, r3
 800097c:	f000 f95f 	bl	8000c3e <HAL_SYSTICK_Config>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000986:	2301      	movs	r3, #1
 8000988:	e00e      	b.n	80009a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2b0f      	cmp	r3, #15
 800098e:	d80a      	bhi.n	80009a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000990:	2200      	movs	r2, #0
 8000992:	6879      	ldr	r1, [r7, #4]
 8000994:	f04f 30ff 	mov.w	r0, #4294967295
 8000998:	f000 f927 	bl	8000bea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800099c:	4a06      	ldr	r2, [pc, #24]	@ (80009b8 <HAL_InitTick+0x5c>)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009a2:	2300      	movs	r3, #0
 80009a4:	e000      	b.n	80009a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009a6:	2301      	movs	r3, #1
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000004 	.word	0x20000004
 80009b4:	2000000c 	.word	0x2000000c
 80009b8:	20000008 	.word	0x20000008

080009bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009c0:	4b05      	ldr	r3, [pc, #20]	@ (80009d8 <HAL_IncTick+0x1c>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	461a      	mov	r2, r3
 80009c6:	4b05      	ldr	r3, [pc, #20]	@ (80009dc <HAL_IncTick+0x20>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4413      	add	r3, r2
 80009cc:	4a03      	ldr	r2, [pc, #12]	@ (80009dc <HAL_IncTick+0x20>)
 80009ce:	6013      	str	r3, [r2, #0]
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr
 80009d8:	2000000c 	.word	0x2000000c
 80009dc:	2000024c 	.word	0x2000024c

080009e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  return uwTick;
 80009e4:	4b02      	ldr	r3, [pc, #8]	@ (80009f0 <HAL_GetTick+0x10>)
 80009e6:	681b      	ldr	r3, [r3, #0]
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr
 80009f0:	2000024c 	.word	0x2000024c

080009f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009fc:	f7ff fff0 	bl	80009e0 <HAL_GetTick>
 8000a00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a0c:	d005      	beq.n	8000a1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a38 <HAL_Delay+0x44>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	461a      	mov	r2, r3
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	4413      	add	r3, r2
 8000a18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a1a:	bf00      	nop
 8000a1c:	f7ff ffe0 	bl	80009e0 <HAL_GetTick>
 8000a20:	4602      	mov	r2, r0
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	1ad3      	subs	r3, r2, r3
 8000a26:	68fa      	ldr	r2, [r7, #12]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d8f7      	bhi.n	8000a1c <HAL_Delay+0x28>
  {
  }
}
 8000a2c:	bf00      	nop
 8000a2e:	bf00      	nop
 8000a30:	3710      	adds	r7, #16
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	2000000c 	.word	0x2000000c

08000a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b085      	sub	sp, #20
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f003 0307 	and.w	r3, r3, #7
 8000a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a80 <__NVIC_SetPriorityGrouping+0x44>)
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a52:	68ba      	ldr	r2, [r7, #8]
 8000a54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a58:	4013      	ands	r3, r2
 8000a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a6e:	4a04      	ldr	r2, [pc, #16]	@ (8000a80 <__NVIC_SetPriorityGrouping+0x44>)
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	60d3      	str	r3, [r2, #12]
}
 8000a74:	bf00      	nop
 8000a76:	3714      	adds	r7, #20
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bc80      	pop	{r7}
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a88:	4b04      	ldr	r3, [pc, #16]	@ (8000a9c <__NVIC_GetPriorityGrouping+0x18>)
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	0a1b      	lsrs	r3, r3, #8
 8000a8e:	f003 0307 	and.w	r3, r3, #7
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bc80      	pop	{r7}
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	db0b      	blt.n	8000aca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	f003 021f 	and.w	r2, r3, #31
 8000ab8:	4906      	ldr	r1, [pc, #24]	@ (8000ad4 <__NVIC_EnableIRQ+0x34>)
 8000aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abe:	095b      	lsrs	r3, r3, #5
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000aca:	bf00      	nop
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc80      	pop	{r7}
 8000ad2:	4770      	bx	lr
 8000ad4:	e000e100 	.word	0xe000e100

08000ad8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	6039      	str	r1, [r7, #0]
 8000ae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	db0a      	blt.n	8000b02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	490c      	ldr	r1, [pc, #48]	@ (8000b24 <__NVIC_SetPriority+0x4c>)
 8000af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af6:	0112      	lsls	r2, r2, #4
 8000af8:	b2d2      	uxtb	r2, r2
 8000afa:	440b      	add	r3, r1
 8000afc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b00:	e00a      	b.n	8000b18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	4908      	ldr	r1, [pc, #32]	@ (8000b28 <__NVIC_SetPriority+0x50>)
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	f003 030f 	and.w	r3, r3, #15
 8000b0e:	3b04      	subs	r3, #4
 8000b10:	0112      	lsls	r2, r2, #4
 8000b12:	b2d2      	uxtb	r2, r2
 8000b14:	440b      	add	r3, r1
 8000b16:	761a      	strb	r2, [r3, #24]
}
 8000b18:	bf00      	nop
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bc80      	pop	{r7}
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	e000e100 	.word	0xe000e100
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b089      	sub	sp, #36	@ 0x24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	f003 0307 	and.w	r3, r3, #7
 8000b3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b40:	69fb      	ldr	r3, [r7, #28]
 8000b42:	f1c3 0307 	rsb	r3, r3, #7
 8000b46:	2b04      	cmp	r3, #4
 8000b48:	bf28      	it	cs
 8000b4a:	2304      	movcs	r3, #4
 8000b4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	3304      	adds	r3, #4
 8000b52:	2b06      	cmp	r3, #6
 8000b54:	d902      	bls.n	8000b5c <NVIC_EncodePriority+0x30>
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	3b03      	subs	r3, #3
 8000b5a:	e000      	b.n	8000b5e <NVIC_EncodePriority+0x32>
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b60:	f04f 32ff 	mov.w	r2, #4294967295
 8000b64:	69bb      	ldr	r3, [r7, #24]
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	43da      	mvns	r2, r3
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	401a      	ands	r2, r3
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b74:	f04f 31ff 	mov.w	r1, #4294967295
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7e:	43d9      	mvns	r1, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b84:	4313      	orrs	r3, r2
         );
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3724      	adds	r7, #36	@ 0x24
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr

08000b90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ba0:	d301      	bcc.n	8000ba6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e00f      	b.n	8000bc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd0 <SysTick_Config+0x40>)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	3b01      	subs	r3, #1
 8000bac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bae:	210f      	movs	r1, #15
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	f7ff ff90 	bl	8000ad8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bb8:	4b05      	ldr	r3, [pc, #20]	@ (8000bd0 <SysTick_Config+0x40>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bbe:	4b04      	ldr	r3, [pc, #16]	@ (8000bd0 <SysTick_Config+0x40>)
 8000bc0:	2207      	movs	r2, #7
 8000bc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	e000e010 	.word	0xe000e010

08000bd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f7ff ff2d 	bl	8000a3c <__NVIC_SetPriorityGrouping>
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b086      	sub	sp, #24
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	60b9      	str	r1, [r7, #8]
 8000bf4:	607a      	str	r2, [r7, #4]
 8000bf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bfc:	f7ff ff42 	bl	8000a84 <__NVIC_GetPriorityGrouping>
 8000c00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c02:	687a      	ldr	r2, [r7, #4]
 8000c04:	68b9      	ldr	r1, [r7, #8]
 8000c06:	6978      	ldr	r0, [r7, #20]
 8000c08:	f7ff ff90 	bl	8000b2c <NVIC_EncodePriority>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c12:	4611      	mov	r1, r2
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff ff5f 	bl	8000ad8 <__NVIC_SetPriority>
}
 8000c1a:	bf00      	nop
 8000c1c:	3718      	adds	r7, #24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b082      	sub	sp, #8
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	4603      	mov	r3, r0
 8000c2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff ff35 	bl	8000aa0 <__NVIC_EnableIRQ>
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b082      	sub	sp, #8
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f7ff ffa2 	bl	8000b90 <SysTick_Config>
 8000c4c:	4603      	mov	r3, r0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
	...

08000c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b08b      	sub	sp, #44	@ 0x2c
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c62:	2300      	movs	r3, #0
 8000c64:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c66:	2300      	movs	r3, #0
 8000c68:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c6a:	e169      	b.n	8000f40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c70:	fa02 f303 	lsl.w	r3, r2, r3
 8000c74:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	69fa      	ldr	r2, [r7, #28]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c80:	69ba      	ldr	r2, [r7, #24]
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	f040 8158 	bne.w	8000f3a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	4a9a      	ldr	r2, [pc, #616]	@ (8000ef8 <HAL_GPIO_Init+0x2a0>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d05e      	beq.n	8000d52 <HAL_GPIO_Init+0xfa>
 8000c94:	4a98      	ldr	r2, [pc, #608]	@ (8000ef8 <HAL_GPIO_Init+0x2a0>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d875      	bhi.n	8000d86 <HAL_GPIO_Init+0x12e>
 8000c9a:	4a98      	ldr	r2, [pc, #608]	@ (8000efc <HAL_GPIO_Init+0x2a4>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d058      	beq.n	8000d52 <HAL_GPIO_Init+0xfa>
 8000ca0:	4a96      	ldr	r2, [pc, #600]	@ (8000efc <HAL_GPIO_Init+0x2a4>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d86f      	bhi.n	8000d86 <HAL_GPIO_Init+0x12e>
 8000ca6:	4a96      	ldr	r2, [pc, #600]	@ (8000f00 <HAL_GPIO_Init+0x2a8>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d052      	beq.n	8000d52 <HAL_GPIO_Init+0xfa>
 8000cac:	4a94      	ldr	r2, [pc, #592]	@ (8000f00 <HAL_GPIO_Init+0x2a8>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d869      	bhi.n	8000d86 <HAL_GPIO_Init+0x12e>
 8000cb2:	4a94      	ldr	r2, [pc, #592]	@ (8000f04 <HAL_GPIO_Init+0x2ac>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d04c      	beq.n	8000d52 <HAL_GPIO_Init+0xfa>
 8000cb8:	4a92      	ldr	r2, [pc, #584]	@ (8000f04 <HAL_GPIO_Init+0x2ac>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d863      	bhi.n	8000d86 <HAL_GPIO_Init+0x12e>
 8000cbe:	4a92      	ldr	r2, [pc, #584]	@ (8000f08 <HAL_GPIO_Init+0x2b0>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d046      	beq.n	8000d52 <HAL_GPIO_Init+0xfa>
 8000cc4:	4a90      	ldr	r2, [pc, #576]	@ (8000f08 <HAL_GPIO_Init+0x2b0>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d85d      	bhi.n	8000d86 <HAL_GPIO_Init+0x12e>
 8000cca:	2b12      	cmp	r3, #18
 8000ccc:	d82a      	bhi.n	8000d24 <HAL_GPIO_Init+0xcc>
 8000cce:	2b12      	cmp	r3, #18
 8000cd0:	d859      	bhi.n	8000d86 <HAL_GPIO_Init+0x12e>
 8000cd2:	a201      	add	r2, pc, #4	@ (adr r2, 8000cd8 <HAL_GPIO_Init+0x80>)
 8000cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cd8:	08000d53 	.word	0x08000d53
 8000cdc:	08000d2d 	.word	0x08000d2d
 8000ce0:	08000d3f 	.word	0x08000d3f
 8000ce4:	08000d81 	.word	0x08000d81
 8000ce8:	08000d87 	.word	0x08000d87
 8000cec:	08000d87 	.word	0x08000d87
 8000cf0:	08000d87 	.word	0x08000d87
 8000cf4:	08000d87 	.word	0x08000d87
 8000cf8:	08000d87 	.word	0x08000d87
 8000cfc:	08000d87 	.word	0x08000d87
 8000d00:	08000d87 	.word	0x08000d87
 8000d04:	08000d87 	.word	0x08000d87
 8000d08:	08000d87 	.word	0x08000d87
 8000d0c:	08000d87 	.word	0x08000d87
 8000d10:	08000d87 	.word	0x08000d87
 8000d14:	08000d87 	.word	0x08000d87
 8000d18:	08000d87 	.word	0x08000d87
 8000d1c:	08000d35 	.word	0x08000d35
 8000d20:	08000d49 	.word	0x08000d49
 8000d24:	4a79      	ldr	r2, [pc, #484]	@ (8000f0c <HAL_GPIO_Init+0x2b4>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d013      	beq.n	8000d52 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d2a:	e02c      	b.n	8000d86 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	623b      	str	r3, [r7, #32]
          break;
 8000d32:	e029      	b.n	8000d88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	3304      	adds	r3, #4
 8000d3a:	623b      	str	r3, [r7, #32]
          break;
 8000d3c:	e024      	b.n	8000d88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	68db      	ldr	r3, [r3, #12]
 8000d42:	3308      	adds	r3, #8
 8000d44:	623b      	str	r3, [r7, #32]
          break;
 8000d46:	e01f      	b.n	8000d88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	330c      	adds	r3, #12
 8000d4e:	623b      	str	r3, [r7, #32]
          break;
 8000d50:	e01a      	b.n	8000d88 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d102      	bne.n	8000d60 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d5a:	2304      	movs	r3, #4
 8000d5c:	623b      	str	r3, [r7, #32]
          break;
 8000d5e:	e013      	b.n	8000d88 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d105      	bne.n	8000d74 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d68:	2308      	movs	r3, #8
 8000d6a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	69fa      	ldr	r2, [r7, #28]
 8000d70:	611a      	str	r2, [r3, #16]
          break;
 8000d72:	e009      	b.n	8000d88 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d74:	2308      	movs	r3, #8
 8000d76:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	69fa      	ldr	r2, [r7, #28]
 8000d7c:	615a      	str	r2, [r3, #20]
          break;
 8000d7e:	e003      	b.n	8000d88 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d80:	2300      	movs	r3, #0
 8000d82:	623b      	str	r3, [r7, #32]
          break;
 8000d84:	e000      	b.n	8000d88 <HAL_GPIO_Init+0x130>
          break;
 8000d86:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	2bff      	cmp	r3, #255	@ 0xff
 8000d8c:	d801      	bhi.n	8000d92 <HAL_GPIO_Init+0x13a>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	e001      	b.n	8000d96 <HAL_GPIO_Init+0x13e>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	3304      	adds	r3, #4
 8000d96:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	2bff      	cmp	r3, #255	@ 0xff
 8000d9c:	d802      	bhi.n	8000da4 <HAL_GPIO_Init+0x14c>
 8000d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	e002      	b.n	8000daa <HAL_GPIO_Init+0x152>
 8000da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000da6:	3b08      	subs	r3, #8
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	210f      	movs	r1, #15
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	fa01 f303 	lsl.w	r3, r1, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	401a      	ands	r2, r3
 8000dbc:	6a39      	ldr	r1, [r7, #32]
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc4:	431a      	orrs	r2, r3
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000dd8:	4b4d      	ldr	r3, [pc, #308]	@ (8000f10 <HAL_GPIO_Init+0x2b8>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	4a4c      	ldr	r2, [pc, #304]	@ (8000f10 <HAL_GPIO_Init+0x2b8>)
 8000dde:	f043 0301 	orr.w	r3, r3, #1
 8000de2:	6193      	str	r3, [r2, #24]
 8000de4:	4b4a      	ldr	r3, [pc, #296]	@ (8000f10 <HAL_GPIO_Init+0x2b8>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	f003 0301 	and.w	r3, r3, #1
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000df0:	4a48      	ldr	r2, [pc, #288]	@ (8000f14 <HAL_GPIO_Init+0x2bc>)
 8000df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000df4:	089b      	lsrs	r3, r3, #2
 8000df6:	3302      	adds	r3, #2
 8000df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dfc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e00:	f003 0303 	and.w	r3, r3, #3
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	220f      	movs	r2, #15
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	68fa      	ldr	r2, [r7, #12]
 8000e10:	4013      	ands	r3, r2
 8000e12:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4a40      	ldr	r2, [pc, #256]	@ (8000f18 <HAL_GPIO_Init+0x2c0>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d013      	beq.n	8000e44 <HAL_GPIO_Init+0x1ec>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4a3f      	ldr	r2, [pc, #252]	@ (8000f1c <HAL_GPIO_Init+0x2c4>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d00d      	beq.n	8000e40 <HAL_GPIO_Init+0x1e8>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4a3e      	ldr	r2, [pc, #248]	@ (8000f20 <HAL_GPIO_Init+0x2c8>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d007      	beq.n	8000e3c <HAL_GPIO_Init+0x1e4>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4a3d      	ldr	r2, [pc, #244]	@ (8000f24 <HAL_GPIO_Init+0x2cc>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d101      	bne.n	8000e38 <HAL_GPIO_Init+0x1e0>
 8000e34:	2303      	movs	r3, #3
 8000e36:	e006      	b.n	8000e46 <HAL_GPIO_Init+0x1ee>
 8000e38:	2304      	movs	r3, #4
 8000e3a:	e004      	b.n	8000e46 <HAL_GPIO_Init+0x1ee>
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	e002      	b.n	8000e46 <HAL_GPIO_Init+0x1ee>
 8000e40:	2301      	movs	r3, #1
 8000e42:	e000      	b.n	8000e46 <HAL_GPIO_Init+0x1ee>
 8000e44:	2300      	movs	r3, #0
 8000e46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e48:	f002 0203 	and.w	r2, r2, #3
 8000e4c:	0092      	lsls	r2, r2, #2
 8000e4e:	4093      	lsls	r3, r2
 8000e50:	68fa      	ldr	r2, [r7, #12]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e56:	492f      	ldr	r1, [pc, #188]	@ (8000f14 <HAL_GPIO_Init+0x2bc>)
 8000e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e5a:	089b      	lsrs	r3, r3, #2
 8000e5c:	3302      	adds	r3, #2
 8000e5e:	68fa      	ldr	r2, [r7, #12]
 8000e60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d006      	beq.n	8000e7e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e70:	4b2d      	ldr	r3, [pc, #180]	@ (8000f28 <HAL_GPIO_Init+0x2d0>)
 8000e72:	689a      	ldr	r2, [r3, #8]
 8000e74:	492c      	ldr	r1, [pc, #176]	@ (8000f28 <HAL_GPIO_Init+0x2d0>)
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	608b      	str	r3, [r1, #8]
 8000e7c:	e006      	b.n	8000e8c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e7e:	4b2a      	ldr	r3, [pc, #168]	@ (8000f28 <HAL_GPIO_Init+0x2d0>)
 8000e80:	689a      	ldr	r2, [r3, #8]
 8000e82:	69bb      	ldr	r3, [r7, #24]
 8000e84:	43db      	mvns	r3, r3
 8000e86:	4928      	ldr	r1, [pc, #160]	@ (8000f28 <HAL_GPIO_Init+0x2d0>)
 8000e88:	4013      	ands	r3, r2
 8000e8a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d006      	beq.n	8000ea6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e98:	4b23      	ldr	r3, [pc, #140]	@ (8000f28 <HAL_GPIO_Init+0x2d0>)
 8000e9a:	68da      	ldr	r2, [r3, #12]
 8000e9c:	4922      	ldr	r1, [pc, #136]	@ (8000f28 <HAL_GPIO_Init+0x2d0>)
 8000e9e:	69bb      	ldr	r3, [r7, #24]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	60cb      	str	r3, [r1, #12]
 8000ea4:	e006      	b.n	8000eb4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ea6:	4b20      	ldr	r3, [pc, #128]	@ (8000f28 <HAL_GPIO_Init+0x2d0>)
 8000ea8:	68da      	ldr	r2, [r3, #12]
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	43db      	mvns	r3, r3
 8000eae:	491e      	ldr	r1, [pc, #120]	@ (8000f28 <HAL_GPIO_Init+0x2d0>)
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d006      	beq.n	8000ece <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ec0:	4b19      	ldr	r3, [pc, #100]	@ (8000f28 <HAL_GPIO_Init+0x2d0>)
 8000ec2:	685a      	ldr	r2, [r3, #4]
 8000ec4:	4918      	ldr	r1, [pc, #96]	@ (8000f28 <HAL_GPIO_Init+0x2d0>)
 8000ec6:	69bb      	ldr	r3, [r7, #24]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	604b      	str	r3, [r1, #4]
 8000ecc:	e006      	b.n	8000edc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ece:	4b16      	ldr	r3, [pc, #88]	@ (8000f28 <HAL_GPIO_Init+0x2d0>)
 8000ed0:	685a      	ldr	r2, [r3, #4]
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	4914      	ldr	r1, [pc, #80]	@ (8000f28 <HAL_GPIO_Init+0x2d0>)
 8000ed8:	4013      	ands	r3, r2
 8000eda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d021      	beq.n	8000f2c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f28 <HAL_GPIO_Init+0x2d0>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	490e      	ldr	r1, [pc, #56]	@ (8000f28 <HAL_GPIO_Init+0x2d0>)
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	600b      	str	r3, [r1, #0]
 8000ef4:	e021      	b.n	8000f3a <HAL_GPIO_Init+0x2e2>
 8000ef6:	bf00      	nop
 8000ef8:	10320000 	.word	0x10320000
 8000efc:	10310000 	.word	0x10310000
 8000f00:	10220000 	.word	0x10220000
 8000f04:	10210000 	.word	0x10210000
 8000f08:	10120000 	.word	0x10120000
 8000f0c:	10110000 	.word	0x10110000
 8000f10:	40021000 	.word	0x40021000
 8000f14:	40010000 	.word	0x40010000
 8000f18:	40010800 	.word	0x40010800
 8000f1c:	40010c00 	.word	0x40010c00
 8000f20:	40011000 	.word	0x40011000
 8000f24:	40011400 	.word	0x40011400
 8000f28:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f5c <HAL_GPIO_Init+0x304>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	43db      	mvns	r3, r3
 8000f34:	4909      	ldr	r1, [pc, #36]	@ (8000f5c <HAL_GPIO_Init+0x304>)
 8000f36:	4013      	ands	r3, r2
 8000f38:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f46:	fa22 f303 	lsr.w	r3, r2, r3
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	f47f ae8e 	bne.w	8000c6c <HAL_GPIO_Init+0x14>
  }
}
 8000f50:	bf00      	nop
 8000f52:	bf00      	nop
 8000f54:	372c      	adds	r7, #44	@ 0x2c
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr
 8000f5c:	40010400 	.word	0x40010400

08000f60 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b089      	sub	sp, #36	@ 0x24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8000f6e:	e09a      	b.n	80010a6 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8000f70:	2201      	movs	r2, #1
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	683a      	ldr	r2, [r7, #0]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	f000 808d 	beq.w	80010a0 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8000f86:	4a4e      	ldr	r2, [pc, #312]	@ (80010c0 <HAL_GPIO_DeInit+0x160>)
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	089b      	lsrs	r3, r3, #2
 8000f8c:	3302      	adds	r3, #2
 8000f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f92:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	f003 0303 	and.w	r3, r3, #3
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	220f      	movs	r2, #15
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	697a      	ldr	r2, [r7, #20]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4a46      	ldr	r2, [pc, #280]	@ (80010c4 <HAL_GPIO_DeInit+0x164>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d013      	beq.n	8000fd8 <HAL_GPIO_DeInit+0x78>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a45      	ldr	r2, [pc, #276]	@ (80010c8 <HAL_GPIO_DeInit+0x168>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d00d      	beq.n	8000fd4 <HAL_GPIO_DeInit+0x74>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4a44      	ldr	r2, [pc, #272]	@ (80010cc <HAL_GPIO_DeInit+0x16c>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d007      	beq.n	8000fd0 <HAL_GPIO_DeInit+0x70>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a43      	ldr	r2, [pc, #268]	@ (80010d0 <HAL_GPIO_DeInit+0x170>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d101      	bne.n	8000fcc <HAL_GPIO_DeInit+0x6c>
 8000fc8:	2303      	movs	r3, #3
 8000fca:	e006      	b.n	8000fda <HAL_GPIO_DeInit+0x7a>
 8000fcc:	2304      	movs	r3, #4
 8000fce:	e004      	b.n	8000fda <HAL_GPIO_DeInit+0x7a>
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	e002      	b.n	8000fda <HAL_GPIO_DeInit+0x7a>
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e000      	b.n	8000fda <HAL_GPIO_DeInit+0x7a>
 8000fd8:	2300      	movs	r3, #0
 8000fda:	69fa      	ldr	r2, [r7, #28]
 8000fdc:	f002 0203 	and.w	r2, r2, #3
 8000fe0:	0092      	lsls	r2, r2, #2
 8000fe2:	4093      	lsls	r3, r2
 8000fe4:	697a      	ldr	r2, [r7, #20]
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d132      	bne.n	8001050 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8000fea:	4b3a      	ldr	r3, [pc, #232]	@ (80010d4 <HAL_GPIO_DeInit+0x174>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	4938      	ldr	r1, [pc, #224]	@ (80010d4 <HAL_GPIO_DeInit+0x174>)
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8000ff8:	4b36      	ldr	r3, [pc, #216]	@ (80010d4 <HAL_GPIO_DeInit+0x174>)
 8000ffa:	685a      	ldr	r2, [r3, #4]
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	43db      	mvns	r3, r3
 8001000:	4934      	ldr	r1, [pc, #208]	@ (80010d4 <HAL_GPIO_DeInit+0x174>)
 8001002:	4013      	ands	r3, r2
 8001004:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8001006:	4b33      	ldr	r3, [pc, #204]	@ (80010d4 <HAL_GPIO_DeInit+0x174>)
 8001008:	68da      	ldr	r2, [r3, #12]
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	43db      	mvns	r3, r3
 800100e:	4931      	ldr	r1, [pc, #196]	@ (80010d4 <HAL_GPIO_DeInit+0x174>)
 8001010:	4013      	ands	r3, r2
 8001012:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8001014:	4b2f      	ldr	r3, [pc, #188]	@ (80010d4 <HAL_GPIO_DeInit+0x174>)
 8001016:	689a      	ldr	r2, [r3, #8]
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	43db      	mvns	r3, r3
 800101c:	492d      	ldr	r1, [pc, #180]	@ (80010d4 <HAL_GPIO_DeInit+0x174>)
 800101e:	4013      	ands	r3, r2
 8001020:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	f003 0303 	and.w	r3, r3, #3
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	220f      	movs	r2, #15
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8001032:	4a23      	ldr	r2, [pc, #140]	@ (80010c0 <HAL_GPIO_DeInit+0x160>)
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	089b      	lsrs	r3, r3, #2
 8001038:	3302      	adds	r3, #2
 800103a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	43da      	mvns	r2, r3
 8001042:	481f      	ldr	r0, [pc, #124]	@ (80010c0 <HAL_GPIO_DeInit+0x160>)
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	089b      	lsrs	r3, r3, #2
 8001048:	400a      	ands	r2, r1
 800104a:	3302      	adds	r3, #2
 800104c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	2bff      	cmp	r3, #255	@ 0xff
 8001054:	d801      	bhi.n	800105a <HAL_GPIO_DeInit+0xfa>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	e001      	b.n	800105e <HAL_GPIO_DeInit+0xfe>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	3304      	adds	r3, #4
 800105e:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	2bff      	cmp	r3, #255	@ 0xff
 8001064:	d802      	bhi.n	800106c <HAL_GPIO_DeInit+0x10c>
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	e002      	b.n	8001072 <HAL_GPIO_DeInit+0x112>
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	3b08      	subs	r3, #8
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	210f      	movs	r1, #15
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	fa01 f303 	lsl.w	r3, r1, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	401a      	ands	r2, r3
 8001084:	2104      	movs	r1, #4
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	fa01 f303 	lsl.w	r3, r1, r3
 800108c:	431a      	orrs	r2, r3
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	68da      	ldr	r2, [r3, #12]
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	43db      	mvns	r3, r3
 800109a:	401a      	ands	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	60da      	str	r2, [r3, #12]
    }

    position++;
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	3301      	adds	r3, #1
 80010a4:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 80010a6:	683a      	ldr	r2, [r7, #0]
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	fa22 f303 	lsr.w	r3, r2, r3
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	f47f af5e 	bne.w	8000f70 <HAL_GPIO_DeInit+0x10>
  }
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	3724      	adds	r7, #36	@ 0x24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr
 80010c0:	40010000 	.word	0x40010000
 80010c4:	40010800 	.word	0x40010800
 80010c8:	40010c00 	.word	0x40010c00
 80010cc:	40011000 	.word	0x40011000
 80010d0:	40011400 	.word	0x40011400
 80010d4:	40010400 	.word	0x40010400

080010d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	460b      	mov	r3, r1
 80010e2:	807b      	strh	r3, [r7, #2]
 80010e4:	4613      	mov	r3, r2
 80010e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010e8:	787b      	ldrb	r3, [r7, #1]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d003      	beq.n	80010f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ee:	887a      	ldrh	r2, [r7, #2]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80010f4:	e003      	b.n	80010fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010f6:	887b      	ldrh	r3, [r7, #2]
 80010f8:	041a      	lsls	r2, r3, #16
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	611a      	str	r2, [r3, #16]
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr

08001108 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d101      	bne.n	800111a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e12b      	b.n	8001372 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2b00      	cmp	r3, #0
 8001124:	d106      	bne.n	8001134 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2200      	movs	r2, #0
 800112a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff f9f4 	bl	800051c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2224      	movs	r2, #36	@ 0x24
 8001138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f022 0201 	bic.w	r2, r2, #1
 800114a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800115a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800116a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800116c:	f003 f98c 	bl	8004488 <HAL_RCC_GetPCLK1Freq>
 8001170:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	4a81      	ldr	r2, [pc, #516]	@ (800137c <HAL_I2C_Init+0x274>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d807      	bhi.n	800118c <HAL_I2C_Init+0x84>
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	4a80      	ldr	r2, [pc, #512]	@ (8001380 <HAL_I2C_Init+0x278>)
 8001180:	4293      	cmp	r3, r2
 8001182:	bf94      	ite	ls
 8001184:	2301      	movls	r3, #1
 8001186:	2300      	movhi	r3, #0
 8001188:	b2db      	uxtb	r3, r3
 800118a:	e006      	b.n	800119a <HAL_I2C_Init+0x92>
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4a7d      	ldr	r2, [pc, #500]	@ (8001384 <HAL_I2C_Init+0x27c>)
 8001190:	4293      	cmp	r3, r2
 8001192:	bf94      	ite	ls
 8001194:	2301      	movls	r3, #1
 8001196:	2300      	movhi	r3, #0
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e0e7      	b.n	8001372 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	4a78      	ldr	r2, [pc, #480]	@ (8001388 <HAL_I2C_Init+0x280>)
 80011a6:	fba2 2303 	umull	r2, r3, r2, r3
 80011aa:	0c9b      	lsrs	r3, r3, #18
 80011ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	68ba      	ldr	r2, [r7, #8]
 80011be:	430a      	orrs	r2, r1
 80011c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	6a1b      	ldr	r3, [r3, #32]
 80011c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	4a6a      	ldr	r2, [pc, #424]	@ (800137c <HAL_I2C_Init+0x274>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d802      	bhi.n	80011dc <HAL_I2C_Init+0xd4>
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	3301      	adds	r3, #1
 80011da:	e009      	b.n	80011f0 <HAL_I2C_Init+0xe8>
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80011e2:	fb02 f303 	mul.w	r3, r2, r3
 80011e6:	4a69      	ldr	r2, [pc, #420]	@ (800138c <HAL_I2C_Init+0x284>)
 80011e8:	fba2 2303 	umull	r2, r3, r2, r3
 80011ec:	099b      	lsrs	r3, r3, #6
 80011ee:	3301      	adds	r3, #1
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	6812      	ldr	r2, [r2, #0]
 80011f4:	430b      	orrs	r3, r1
 80011f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	69db      	ldr	r3, [r3, #28]
 80011fe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001202:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	495c      	ldr	r1, [pc, #368]	@ (800137c <HAL_I2C_Init+0x274>)
 800120c:	428b      	cmp	r3, r1
 800120e:	d819      	bhi.n	8001244 <HAL_I2C_Init+0x13c>
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	1e59      	subs	r1, r3, #1
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	fbb1 f3f3 	udiv	r3, r1, r3
 800121e:	1c59      	adds	r1, r3, #1
 8001220:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001224:	400b      	ands	r3, r1
 8001226:	2b00      	cmp	r3, #0
 8001228:	d00a      	beq.n	8001240 <HAL_I2C_Init+0x138>
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	1e59      	subs	r1, r3, #1
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	fbb1 f3f3 	udiv	r3, r1, r3
 8001238:	3301      	adds	r3, #1
 800123a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800123e:	e051      	b.n	80012e4 <HAL_I2C_Init+0x1dc>
 8001240:	2304      	movs	r3, #4
 8001242:	e04f      	b.n	80012e4 <HAL_I2C_Init+0x1dc>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d111      	bne.n	8001270 <HAL_I2C_Init+0x168>
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	1e58      	subs	r0, r3, #1
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6859      	ldr	r1, [r3, #4]
 8001254:	460b      	mov	r3, r1
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	440b      	add	r3, r1
 800125a:	fbb0 f3f3 	udiv	r3, r0, r3
 800125e:	3301      	adds	r3, #1
 8001260:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001264:	2b00      	cmp	r3, #0
 8001266:	bf0c      	ite	eq
 8001268:	2301      	moveq	r3, #1
 800126a:	2300      	movne	r3, #0
 800126c:	b2db      	uxtb	r3, r3
 800126e:	e012      	b.n	8001296 <HAL_I2C_Init+0x18e>
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	1e58      	subs	r0, r3, #1
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6859      	ldr	r1, [r3, #4]
 8001278:	460b      	mov	r3, r1
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	440b      	add	r3, r1
 800127e:	0099      	lsls	r1, r3, #2
 8001280:	440b      	add	r3, r1
 8001282:	fbb0 f3f3 	udiv	r3, r0, r3
 8001286:	3301      	adds	r3, #1
 8001288:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800128c:	2b00      	cmp	r3, #0
 800128e:	bf0c      	ite	eq
 8001290:	2301      	moveq	r3, #1
 8001292:	2300      	movne	r3, #0
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <HAL_I2C_Init+0x196>
 800129a:	2301      	movs	r3, #1
 800129c:	e022      	b.n	80012e4 <HAL_I2C_Init+0x1dc>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d10e      	bne.n	80012c4 <HAL_I2C_Init+0x1bc>
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	1e58      	subs	r0, r3, #1
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6859      	ldr	r1, [r3, #4]
 80012ae:	460b      	mov	r3, r1
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	440b      	add	r3, r1
 80012b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80012b8:	3301      	adds	r3, #1
 80012ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80012c2:	e00f      	b.n	80012e4 <HAL_I2C_Init+0x1dc>
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	1e58      	subs	r0, r3, #1
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6859      	ldr	r1, [r3, #4]
 80012cc:	460b      	mov	r3, r1
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	440b      	add	r3, r1
 80012d2:	0099      	lsls	r1, r3, #2
 80012d4:	440b      	add	r3, r1
 80012d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80012da:	3301      	adds	r3, #1
 80012dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80012e4:	6879      	ldr	r1, [r7, #4]
 80012e6:	6809      	ldr	r1, [r1, #0]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	69da      	ldr	r2, [r3, #28]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a1b      	ldr	r3, [r3, #32]
 80012fe:	431a      	orrs	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	430a      	orrs	r2, r1
 8001306:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001312:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	6911      	ldr	r1, [r2, #16]
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	68d2      	ldr	r2, [r2, #12]
 800131e:	4311      	orrs	r1, r2
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	6812      	ldr	r2, [r2, #0]
 8001324:	430b      	orrs	r3, r1
 8001326:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	695a      	ldr	r2, [r3, #20]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	431a      	orrs	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	430a      	orrs	r2, r1
 8001342:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f042 0201 	orr.w	r2, r2, #1
 8001352:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2220      	movs	r2, #32
 800135e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	000186a0 	.word	0x000186a0
 8001380:	001e847f 	.word	0x001e847f
 8001384:	003d08ff 	.word	0x003d08ff
 8001388:	431bde83 	.word	0x431bde83
 800138c:	10624dd3 	.word	0x10624dd3

08001390 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d101      	bne.n	80013a2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e021      	b.n	80013e6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2224      	movs	r2, #36	@ 0x24
 80013a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f022 0201 	bic.w	r2, r2, #1
 80013b8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff f8ec 	bl	8000598 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2200      	movs	r2, #0
 80013d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2200      	movs	r2, #0
 80013d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
	...

080013f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b088      	sub	sp, #32
 80013f4:	af02      	add	r7, sp, #8
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	4608      	mov	r0, r1
 80013fa:	4611      	mov	r1, r2
 80013fc:	461a      	mov	r2, r3
 80013fe:	4603      	mov	r3, r0
 8001400:	817b      	strh	r3, [r7, #10]
 8001402:	460b      	mov	r3, r1
 8001404:	813b      	strh	r3, [r7, #8]
 8001406:	4613      	mov	r3, r2
 8001408:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800140a:	f7ff fae9 	bl	80009e0 <HAL_GetTick>
 800140e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001416:	b2db      	uxtb	r3, r3
 8001418:	2b20      	cmp	r3, #32
 800141a:	f040 80d9 	bne.w	80015d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	9300      	str	r3, [sp, #0]
 8001422:	2319      	movs	r3, #25
 8001424:	2201      	movs	r2, #1
 8001426:	496d      	ldr	r1, [pc, #436]	@ (80015dc <HAL_I2C_Mem_Write+0x1ec>)
 8001428:	68f8      	ldr	r0, [r7, #12]
 800142a:	f000 fccd 	bl	8001dc8 <I2C_WaitOnFlagUntilTimeout>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001434:	2302      	movs	r3, #2
 8001436:	e0cc      	b.n	80015d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800143e:	2b01      	cmp	r3, #1
 8001440:	d101      	bne.n	8001446 <HAL_I2C_Mem_Write+0x56>
 8001442:	2302      	movs	r3, #2
 8001444:	e0c5      	b.n	80015d2 <HAL_I2C_Mem_Write+0x1e2>
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2201      	movs	r2, #1
 800144a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0301 	and.w	r3, r3, #1
 8001458:	2b01      	cmp	r3, #1
 800145a:	d007      	beq.n	800146c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f042 0201 	orr.w	r2, r2, #1
 800146a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800147a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2221      	movs	r2, #33	@ 0x21
 8001480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2240      	movs	r2, #64	@ 0x40
 8001488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2200      	movs	r2, #0
 8001490:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	6a3a      	ldr	r2, [r7, #32]
 8001496:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800149c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014a2:	b29a      	uxth	r2, r3
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4a4d      	ldr	r2, [pc, #308]	@ (80015e0 <HAL_I2C_Mem_Write+0x1f0>)
 80014ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80014ae:	88f8      	ldrh	r0, [r7, #6]
 80014b0:	893a      	ldrh	r2, [r7, #8]
 80014b2:	8979      	ldrh	r1, [r7, #10]
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	9301      	str	r3, [sp, #4]
 80014b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	4603      	mov	r3, r0
 80014be:	68f8      	ldr	r0, [r7, #12]
 80014c0:	f000 fb04 	bl	8001acc <I2C_RequestMemoryWrite>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d052      	beq.n	8001570 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e081      	b.n	80015d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014ce:	697a      	ldr	r2, [r7, #20]
 80014d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80014d2:	68f8      	ldr	r0, [r7, #12]
 80014d4:	f000 fd92 	bl	8001ffc <I2C_WaitOnTXEFlagUntilTimeout>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d00d      	beq.n	80014fa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e2:	2b04      	cmp	r3, #4
 80014e4:	d107      	bne.n	80014f6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80014f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e06b      	b.n	80015d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014fe:	781a      	ldrb	r2, [r3, #0]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800150a:	1c5a      	adds	r2, r3, #1
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001514:	3b01      	subs	r3, #1
 8001516:	b29a      	uxth	r2, r3
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001520:	b29b      	uxth	r3, r3
 8001522:	3b01      	subs	r3, #1
 8001524:	b29a      	uxth	r2, r3
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	695b      	ldr	r3, [r3, #20]
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	2b04      	cmp	r3, #4
 8001536:	d11b      	bne.n	8001570 <HAL_I2C_Mem_Write+0x180>
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800153c:	2b00      	cmp	r3, #0
 800153e:	d017      	beq.n	8001570 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001544:	781a      	ldrb	r2, [r3, #0]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001550:	1c5a      	adds	r2, r3, #1
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800155a:	3b01      	subs	r3, #1
 800155c:	b29a      	uxth	r2, r3
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001566:	b29b      	uxth	r3, r3
 8001568:	3b01      	subs	r3, #1
 800156a:	b29a      	uxth	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1aa      	bne.n	80014ce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001578:	697a      	ldr	r2, [r7, #20]
 800157a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800157c:	68f8      	ldr	r0, [r7, #12]
 800157e:	f000 fd85 	bl	800208c <I2C_WaitOnBTFFlagUntilTimeout>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d00d      	beq.n	80015a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158c:	2b04      	cmp	r3, #4
 800158e:	d107      	bne.n	80015a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800159e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e016      	b.n	80015d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80015b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2220      	movs	r2, #32
 80015b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2200      	movs	r2, #0
 80015c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80015cc:	2300      	movs	r3, #0
 80015ce:	e000      	b.n	80015d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80015d0:	2302      	movs	r3, #2
  }
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	00100002 	.word	0x00100002
 80015e0:	ffff0000 	.word	0xffff0000

080015e4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08c      	sub	sp, #48	@ 0x30
 80015e8:	af02      	add	r7, sp, #8
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	4608      	mov	r0, r1
 80015ee:	4611      	mov	r1, r2
 80015f0:	461a      	mov	r2, r3
 80015f2:	4603      	mov	r3, r0
 80015f4:	817b      	strh	r3, [r7, #10]
 80015f6:	460b      	mov	r3, r1
 80015f8:	813b      	strh	r3, [r7, #8]
 80015fa:	4613      	mov	r3, r2
 80015fc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80015fe:	2300      	movs	r3, #0
 8001600:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001602:	f7ff f9ed 	bl	80009e0 <HAL_GetTick>
 8001606:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800160e:	b2db      	uxtb	r3, r3
 8001610:	2b20      	cmp	r3, #32
 8001612:	f040 8250 	bne.w	8001ab6 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001618:	9300      	str	r3, [sp, #0]
 800161a:	2319      	movs	r3, #25
 800161c:	2201      	movs	r2, #1
 800161e:	4982      	ldr	r1, [pc, #520]	@ (8001828 <HAL_I2C_Mem_Read+0x244>)
 8001620:	68f8      	ldr	r0, [r7, #12]
 8001622:	f000 fbd1 	bl	8001dc8 <I2C_WaitOnFlagUntilTimeout>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800162c:	2302      	movs	r3, #2
 800162e:	e243      	b.n	8001ab8 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001636:	2b01      	cmp	r3, #1
 8001638:	d101      	bne.n	800163e <HAL_I2C_Mem_Read+0x5a>
 800163a:	2302      	movs	r3, #2
 800163c:	e23c      	b.n	8001ab8 <HAL_I2C_Mem_Read+0x4d4>
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2201      	movs	r2, #1
 8001642:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0301 	and.w	r3, r3, #1
 8001650:	2b01      	cmp	r3, #1
 8001652:	d007      	beq.n	8001664 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f042 0201 	orr.w	r2, r2, #1
 8001662:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001672:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2222      	movs	r2, #34	@ 0x22
 8001678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2240      	movs	r2, #64	@ 0x40
 8001680:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2200      	movs	r2, #0
 8001688:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800168e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001694:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800169a:	b29a      	uxth	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	4a62      	ldr	r2, [pc, #392]	@ (800182c <HAL_I2C_Mem_Read+0x248>)
 80016a4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80016a6:	88f8      	ldrh	r0, [r7, #6]
 80016a8:	893a      	ldrh	r2, [r7, #8]
 80016aa:	8979      	ldrh	r1, [r7, #10]
 80016ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ae:	9301      	str	r3, [sp, #4]
 80016b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016b2:	9300      	str	r3, [sp, #0]
 80016b4:	4603      	mov	r3, r0
 80016b6:	68f8      	ldr	r0, [r7, #12]
 80016b8:	f000 fa9e 	bl	8001bf8 <I2C_RequestMemoryRead>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e1f8      	b.n	8001ab8 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d113      	bne.n	80016f6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	695b      	ldr	r3, [r3, #20]
 80016d8:	61fb      	str	r3, [r7, #28]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	61fb      	str	r3, [r7, #28]
 80016e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	e1cc      	b.n	8001a90 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d11e      	bne.n	800173c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800170c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800170e:	b672      	cpsid	i
}
 8001710:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001712:	2300      	movs	r3, #0
 8001714:	61bb      	str	r3, [r7, #24]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	695b      	ldr	r3, [r3, #20]
 800171c:	61bb      	str	r3, [r7, #24]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	61bb      	str	r3, [r7, #24]
 8001726:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001736:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001738:	b662      	cpsie	i
}
 800173a:	e035      	b.n	80017a8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001740:	2b02      	cmp	r3, #2
 8001742:	d11e      	bne.n	8001782 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001752:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001754:	b672      	cpsid	i
}
 8001756:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	617b      	str	r3, [r7, #20]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800177c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800177e:	b662      	cpsie	i
}
 8001780:	e012      	b.n	80017a8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001790:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001792:	2300      	movs	r3, #0
 8001794:	613b      	str	r3, [r7, #16]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	695b      	ldr	r3, [r3, #20]
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	613b      	str	r3, [r7, #16]
 80017a6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80017a8:	e172      	b.n	8001a90 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017ae:	2b03      	cmp	r3, #3
 80017b0:	f200 811f 	bhi.w	80019f2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d123      	bne.n	8001804 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017be:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80017c0:	68f8      	ldr	r0, [r7, #12]
 80017c2:	f000 fcab 	bl	800211c <I2C_WaitOnRXNEFlagUntilTimeout>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e173      	b.n	8001ab8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	691a      	ldr	r2, [r3, #16]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e2:	1c5a      	adds	r2, r3, #1
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017ec:	3b01      	subs	r3, #1
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	3b01      	subs	r3, #1
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001802:	e145      	b.n	8001a90 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001808:	2b02      	cmp	r3, #2
 800180a:	d152      	bne.n	80018b2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800180c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001812:	2200      	movs	r2, #0
 8001814:	4906      	ldr	r1, [pc, #24]	@ (8001830 <HAL_I2C_Mem_Read+0x24c>)
 8001816:	68f8      	ldr	r0, [r7, #12]
 8001818:	f000 fad6 	bl	8001dc8 <I2C_WaitOnFlagUntilTimeout>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d008      	beq.n	8001834 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e148      	b.n	8001ab8 <HAL_I2C_Mem_Read+0x4d4>
 8001826:	bf00      	nop
 8001828:	00100002 	.word	0x00100002
 800182c:	ffff0000 	.word	0xffff0000
 8001830:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001834:	b672      	cpsid	i
}
 8001836:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001846:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	691a      	ldr	r2, [r3, #16]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800185a:	1c5a      	adds	r2, r3, #1
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001864:	3b01      	subs	r3, #1
 8001866:	b29a      	uxth	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001870:	b29b      	uxth	r3, r3
 8001872:	3b01      	subs	r3, #1
 8001874:	b29a      	uxth	r2, r3
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800187a:	b662      	cpsie	i
}
 800187c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	691a      	ldr	r2, [r3, #16]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001888:	b2d2      	uxtb	r2, r2
 800188a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001890:	1c5a      	adds	r2, r3, #1
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800189a:	3b01      	subs	r3, #1
 800189c:	b29a      	uxth	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	3b01      	subs	r3, #1
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80018b0:	e0ee      	b.n	8001a90 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80018b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018b8:	2200      	movs	r2, #0
 80018ba:	4981      	ldr	r1, [pc, #516]	@ (8001ac0 <HAL_I2C_Mem_Read+0x4dc>)
 80018bc:	68f8      	ldr	r0, [r7, #12]
 80018be:	f000 fa83 	bl	8001dc8 <I2C_WaitOnFlagUntilTimeout>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e0f5      	b.n	8001ab8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80018da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80018dc:	b672      	cpsid	i
}
 80018de:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	691a      	ldr	r2, [r3, #16]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ea:	b2d2      	uxtb	r2, r2
 80018ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f2:	1c5a      	adds	r2, r3, #1
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018fc:	3b01      	subs	r3, #1
 80018fe:	b29a      	uxth	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001908:	b29b      	uxth	r3, r3
 800190a:	3b01      	subs	r3, #1
 800190c:	b29a      	uxth	r2, r3
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001912:	4b6c      	ldr	r3, [pc, #432]	@ (8001ac4 <HAL_I2C_Mem_Read+0x4e0>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	08db      	lsrs	r3, r3, #3
 8001918:	4a6b      	ldr	r2, [pc, #428]	@ (8001ac8 <HAL_I2C_Mem_Read+0x4e4>)
 800191a:	fba2 2303 	umull	r2, r3, r2, r3
 800191e:	0a1a      	lsrs	r2, r3, #8
 8001920:	4613      	mov	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4413      	add	r3, r2
 8001926:	00da      	lsls	r2, r3, #3
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800192c:	6a3b      	ldr	r3, [r7, #32]
 800192e:	3b01      	subs	r3, #1
 8001930:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001932:	6a3b      	ldr	r3, [r7, #32]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d118      	bne.n	800196a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2200      	movs	r2, #0
 800193c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2220      	movs	r2, #32
 8001942:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001952:	f043 0220 	orr.w	r2, r3, #32
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800195a:	b662      	cpsie	i
}
 800195c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e0a6      	b.n	8001ab8 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	695b      	ldr	r3, [r3, #20]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	2b04      	cmp	r3, #4
 8001976:	d1d9      	bne.n	800192c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001986:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	691a      	ldr	r2, [r3, #16]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001992:	b2d2      	uxtb	r2, r2
 8001994:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800199a:	1c5a      	adds	r2, r3, #1
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019a4:	3b01      	subs	r3, #1
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	3b01      	subs	r3, #1
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80019ba:	b662      	cpsie	i
}
 80019bc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	691a      	ldr	r2, [r3, #16]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c8:	b2d2      	uxtb	r2, r2
 80019ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d0:	1c5a      	adds	r2, r3, #1
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019da:	3b01      	subs	r3, #1
 80019dc:	b29a      	uxth	r2, r3
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	3b01      	subs	r3, #1
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80019f0:	e04e      	b.n	8001a90 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019f4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f000 fb90 	bl	800211c <I2C_WaitOnRXNEFlagUntilTimeout>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e058      	b.n	8001ab8 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	691a      	ldr	r2, [r3, #16]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a10:	b2d2      	uxtb	r2, r2
 8001a12:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a18:	1c5a      	adds	r2, r3, #1
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a22:	3b01      	subs	r3, #1
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	3b01      	subs	r3, #1
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	f003 0304 	and.w	r3, r3, #4
 8001a42:	2b04      	cmp	r3, #4
 8001a44:	d124      	bne.n	8001a90 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a4a:	2b03      	cmp	r3, #3
 8001a4c:	d107      	bne.n	8001a5e <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a5c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	691a      	ldr	r2, [r3, #16]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a68:	b2d2      	uxtb	r2, r2
 8001a6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a70:	1c5a      	adds	r2, r3, #1
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f47f ae88 	bne.w	80017aa <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2220      	movs	r2, #32
 8001a9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	e000      	b.n	8001ab8 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8001ab6:	2302      	movs	r3, #2
  }
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3728      	adds	r7, #40	@ 0x28
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	00010004 	.word	0x00010004
 8001ac4:	20000004 	.word	0x20000004
 8001ac8:	14f8b589 	.word	0x14f8b589

08001acc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b088      	sub	sp, #32
 8001ad0:	af02      	add	r7, sp, #8
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	4608      	mov	r0, r1
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4603      	mov	r3, r0
 8001adc:	817b      	strh	r3, [r7, #10]
 8001ade:	460b      	mov	r3, r1
 8001ae0:	813b      	strh	r3, [r7, #8]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001af4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	6a3b      	ldr	r3, [r7, #32]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001b02:	68f8      	ldr	r0, [r7, #12]
 8001b04:	f000 f960 	bl	8001dc8 <I2C_WaitOnFlagUntilTimeout>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d00d      	beq.n	8001b2a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b1c:	d103      	bne.n	8001b26 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b24:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e05f      	b.n	8001bea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b2a:	897b      	ldrh	r3, [r7, #10]
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	461a      	mov	r2, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001b38:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3c:	6a3a      	ldr	r2, [r7, #32]
 8001b3e:	492d      	ldr	r1, [pc, #180]	@ (8001bf4 <I2C_RequestMemoryWrite+0x128>)
 8001b40:	68f8      	ldr	r0, [r7, #12]
 8001b42:	f000 f9bb 	bl	8001ebc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e04c      	b.n	8001bea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	617b      	str	r3, [r7, #20]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	617b      	str	r3, [r7, #20]
 8001b64:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b68:	6a39      	ldr	r1, [r7, #32]
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f000 fa46 	bl	8001ffc <I2C_WaitOnTXEFlagUntilTimeout>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d00d      	beq.n	8001b92 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	d107      	bne.n	8001b8e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b8c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e02b      	b.n	8001bea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b92:	88fb      	ldrh	r3, [r7, #6]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d105      	bne.n	8001ba4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001b98:	893b      	ldrh	r3, [r7, #8]
 8001b9a:	b2da      	uxtb	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	611a      	str	r2, [r3, #16]
 8001ba2:	e021      	b.n	8001be8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001ba4:	893b      	ldrh	r3, [r7, #8]
 8001ba6:	0a1b      	lsrs	r3, r3, #8
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bb4:	6a39      	ldr	r1, [r7, #32]
 8001bb6:	68f8      	ldr	r0, [r7, #12]
 8001bb8:	f000 fa20 	bl	8001ffc <I2C_WaitOnTXEFlagUntilTimeout>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d00d      	beq.n	8001bde <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc6:	2b04      	cmp	r3, #4
 8001bc8:	d107      	bne.n	8001bda <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bd8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e005      	b.n	8001bea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001bde:	893b      	ldrh	r3, [r7, #8]
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3718      	adds	r7, #24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	00010002 	.word	0x00010002

08001bf8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b088      	sub	sp, #32
 8001bfc:	af02      	add	r7, sp, #8
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	4608      	mov	r0, r1
 8001c02:	4611      	mov	r1, r2
 8001c04:	461a      	mov	r2, r3
 8001c06:	4603      	mov	r3, r0
 8001c08:	817b      	strh	r3, [r7, #10]
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	813b      	strh	r3, [r7, #8]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001c20:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	6a3b      	ldr	r3, [r7, #32]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	f000 f8c2 	bl	8001dc8 <I2C_WaitOnFlagUntilTimeout>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d00d      	beq.n	8001c66 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c58:	d103      	bne.n	8001c62 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c60:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e0aa      	b.n	8001dbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c66:	897b      	ldrh	r3, [r7, #10]
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001c74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c78:	6a3a      	ldr	r2, [r7, #32]
 8001c7a:	4952      	ldr	r1, [pc, #328]	@ (8001dc4 <I2C_RequestMemoryRead+0x1cc>)
 8001c7c:	68f8      	ldr	r0, [r7, #12]
 8001c7e:	f000 f91d 	bl	8001ebc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e097      	b.n	8001dbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	617b      	str	r3, [r7, #20]
 8001ca0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ca4:	6a39      	ldr	r1, [r7, #32]
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	f000 f9a8 	bl	8001ffc <I2C_WaitOnTXEFlagUntilTimeout>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d00d      	beq.n	8001cce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	d107      	bne.n	8001cca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cc8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e076      	b.n	8001dbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001cce:	88fb      	ldrh	r3, [r7, #6]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d105      	bne.n	8001ce0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001cd4:	893b      	ldrh	r3, [r7, #8]
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	611a      	str	r2, [r3, #16]
 8001cde:	e021      	b.n	8001d24 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001ce0:	893b      	ldrh	r3, [r7, #8]
 8001ce2:	0a1b      	lsrs	r3, r3, #8
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cf0:	6a39      	ldr	r1, [r7, #32]
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	f000 f982 	bl	8001ffc <I2C_WaitOnTXEFlagUntilTimeout>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d00d      	beq.n	8001d1a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d02:	2b04      	cmp	r3, #4
 8001d04:	d107      	bne.n	8001d16 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e050      	b.n	8001dbc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d1a:	893b      	ldrh	r3, [r7, #8]
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d26:	6a39      	ldr	r1, [r7, #32]
 8001d28:	68f8      	ldr	r0, [r7, #12]
 8001d2a:	f000 f967 	bl	8001ffc <I2C_WaitOnTXEFlagUntilTimeout>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d00d      	beq.n	8001d50 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d38:	2b04      	cmp	r3, #4
 8001d3a:	d107      	bne.n	8001d4c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d4a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e035      	b.n	8001dbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d5e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	6a3b      	ldr	r3, [r7, #32]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001d6c:	68f8      	ldr	r0, [r7, #12]
 8001d6e:	f000 f82b 	bl	8001dc8 <I2C_WaitOnFlagUntilTimeout>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d00d      	beq.n	8001d94 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d86:	d103      	bne.n	8001d90 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d8e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e013      	b.n	8001dbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001d94:	897b      	ldrh	r3, [r7, #10]
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da6:	6a3a      	ldr	r2, [r7, #32]
 8001da8:	4906      	ldr	r1, [pc, #24]	@ (8001dc4 <I2C_RequestMemoryRead+0x1cc>)
 8001daa:	68f8      	ldr	r0, [r7, #12]
 8001dac:	f000 f886 	bl	8001ebc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e000      	b.n	8001dbc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3718      	adds	r7, #24
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	00010002 	.word	0x00010002

08001dc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	603b      	str	r3, [r7, #0]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dd8:	e048      	b.n	8001e6c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de0:	d044      	beq.n	8001e6c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001de2:	f7fe fdfd 	bl	80009e0 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d302      	bcc.n	8001df8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d139      	bne.n	8001e6c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	0c1b      	lsrs	r3, r3, #16
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d10d      	bne.n	8001e1e <I2C_WaitOnFlagUntilTimeout+0x56>
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	695b      	ldr	r3, [r3, #20]
 8001e08:	43da      	mvns	r2, r3
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	bf0c      	ite	eq
 8001e14:	2301      	moveq	r3, #1
 8001e16:	2300      	movne	r3, #0
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	e00c      	b.n	8001e38 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	43da      	mvns	r2, r3
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	bf0c      	ite	eq
 8001e30:	2301      	moveq	r3, #1
 8001e32:	2300      	movne	r3, #0
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	461a      	mov	r2, r3
 8001e38:	79fb      	ldrb	r3, [r7, #7]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d116      	bne.n	8001e6c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2220      	movs	r2, #32
 8001e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e58:	f043 0220 	orr.w	r2, r3, #32
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e023      	b.n	8001eb4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	0c1b      	lsrs	r3, r3, #16
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d10d      	bne.n	8001e92 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	43da      	mvns	r2, r3
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	4013      	ands	r3, r2
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	bf0c      	ite	eq
 8001e88:	2301      	moveq	r3, #1
 8001e8a:	2300      	movne	r3, #0
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	461a      	mov	r2, r3
 8001e90:	e00c      	b.n	8001eac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	43da      	mvns	r2, r3
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	bf0c      	ite	eq
 8001ea4:	2301      	moveq	r3, #1
 8001ea6:	2300      	movne	r3, #0
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	461a      	mov	r2, r3
 8001eac:	79fb      	ldrb	r3, [r7, #7]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d093      	beq.n	8001dda <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3710      	adds	r7, #16
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
 8001ec8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001eca:	e071      	b.n	8001fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ed6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eda:	d123      	bne.n	8001f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001eea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001ef4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2220      	movs	r2, #32
 8001f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f10:	f043 0204 	orr.w	r2, r3, #4
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e067      	b.n	8001ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f2a:	d041      	beq.n	8001fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f2c:	f7fe fd58 	bl	80009e0 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d302      	bcc.n	8001f42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d136      	bne.n	8001fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	0c1b      	lsrs	r3, r3, #16
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d10c      	bne.n	8001f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	43da      	mvns	r2, r3
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	4013      	ands	r3, r2
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	bf14      	ite	ne
 8001f5e:	2301      	movne	r3, #1
 8001f60:	2300      	moveq	r3, #0
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	e00b      	b.n	8001f7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	43da      	mvns	r2, r3
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	4013      	ands	r3, r2
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	bf14      	ite	ne
 8001f78:	2301      	movne	r3, #1
 8001f7a:	2300      	moveq	r3, #0
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d016      	beq.n	8001fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2200      	movs	r2, #0
 8001f86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2220      	movs	r2, #32
 8001f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9c:	f043 0220 	orr.w	r2, r3, #32
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e021      	b.n	8001ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	0c1b      	lsrs	r3, r3, #16
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d10c      	bne.n	8001fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	695b      	ldr	r3, [r3, #20]
 8001fc0:	43da      	mvns	r2, r3
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	bf14      	ite	ne
 8001fcc:	2301      	movne	r3, #1
 8001fce:	2300      	moveq	r3, #0
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	e00b      	b.n	8001fec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	43da      	mvns	r2, r3
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	bf14      	ite	ne
 8001fe6:	2301      	movne	r3, #1
 8001fe8:	2300      	moveq	r3, #0
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f47f af6d 	bne.w	8001ecc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3710      	adds	r7, #16
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002008:	e034      	b.n	8002074 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f000 f8e3 	bl	80021d6 <I2C_IsAcknowledgeFailed>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e034      	b.n	8002084 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002020:	d028      	beq.n	8002074 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002022:	f7fe fcdd 	bl	80009e0 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	68ba      	ldr	r2, [r7, #8]
 800202e:	429a      	cmp	r2, r3
 8002030:	d302      	bcc.n	8002038 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d11d      	bne.n	8002074 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002042:	2b80      	cmp	r3, #128	@ 0x80
 8002044:	d016      	beq.n	8002074 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2200      	movs	r2, #0
 800204a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2220      	movs	r2, #32
 8002050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002060:	f043 0220 	orr.w	r2, r3, #32
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e007      	b.n	8002084 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800207e:	2b80      	cmp	r3, #128	@ 0x80
 8002080:	d1c3      	bne.n	800200a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002098:	e034      	b.n	8002104 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f000 f89b 	bl	80021d6 <I2C_IsAcknowledgeFailed>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e034      	b.n	8002114 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b0:	d028      	beq.n	8002104 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020b2:	f7fe fc95 	bl	80009e0 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	68ba      	ldr	r2, [r7, #8]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d302      	bcc.n	80020c8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d11d      	bne.n	8002104 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	f003 0304 	and.w	r3, r3, #4
 80020d2:	2b04      	cmp	r3, #4
 80020d4:	d016      	beq.n	8002104 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2200      	movs	r2, #0
 80020da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2220      	movs	r2, #32
 80020e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f0:	f043 0220 	orr.w	r2, r3, #32
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e007      	b.n	8002114 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	f003 0304 	and.w	r3, r3, #4
 800210e:	2b04      	cmp	r3, #4
 8002110:	d1c3      	bne.n	800209a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002128:	e049      	b.n	80021be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	695b      	ldr	r3, [r3, #20]
 8002130:	f003 0310 	and.w	r3, r3, #16
 8002134:	2b10      	cmp	r3, #16
 8002136:	d119      	bne.n	800216c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f06f 0210 	mvn.w	r2, #16
 8002140:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2200      	movs	r2, #0
 8002146:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2220      	movs	r2, #32
 800214c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e030      	b.n	80021ce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800216c:	f7fe fc38 	bl	80009e0 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	68ba      	ldr	r2, [r7, #8]
 8002178:	429a      	cmp	r2, r3
 800217a:	d302      	bcc.n	8002182 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d11d      	bne.n	80021be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	695b      	ldr	r3, [r3, #20]
 8002188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800218c:	2b40      	cmp	r3, #64	@ 0x40
 800218e:	d016      	beq.n	80021be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2220      	movs	r2, #32
 800219a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021aa:	f043 0220 	orr.w	r2, r3, #32
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e007      	b.n	80021ce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	695b      	ldr	r3, [r3, #20]
 80021c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021c8:	2b40      	cmp	r3, #64	@ 0x40
 80021ca:	d1ae      	bne.n	800212a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021ec:	d11b      	bne.n	8002226 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80021f6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2220      	movs	r2, #32
 8002202:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002212:	f043 0204 	orr.w	r2, r3, #4
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e000      	b.n	8002228 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	bc80      	pop	{r7}
 8002230:	4770      	bx	lr

08002232 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b084      	sub	sp, #16
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d101      	bne.n	8002244 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e0e8      	b.n	8002416 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800224a:	b2db      	uxtb	r3, r3
 800224c:	2b00      	cmp	r3, #0
 800224e:	d106      	bne.n	800225e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f006 faf1 	bl	8008840 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2203      	movs	r2, #3
 8002262:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f002 fa14 	bl	800469e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6818      	ldr	r0, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	3304      	adds	r3, #4
 800227e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002280:	f002 f9ea 	bl	8004658 <USB_CoreInit>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d005      	beq.n	8002296 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2202      	movs	r2, #2
 800228e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e0bf      	b.n	8002416 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2100      	movs	r1, #0
 800229c:	4618      	mov	r0, r3
 800229e:	f002 fa18 	bl	80046d2 <USB_SetCurrentMode>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d005      	beq.n	80022b4 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2202      	movs	r2, #2
 80022ac:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e0b0      	b.n	8002416 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022b4:	2300      	movs	r3, #0
 80022b6:	73fb      	strb	r3, [r7, #15]
 80022b8:	e03e      	b.n	8002338 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022ba:	7bfa      	ldrb	r2, [r7, #15]
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	4613      	mov	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	4413      	add	r3, r2
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	440b      	add	r3, r1
 80022c8:	3311      	adds	r3, #17
 80022ca:	2201      	movs	r2, #1
 80022cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022ce:	7bfa      	ldrb	r2, [r7, #15]
 80022d0:	6879      	ldr	r1, [r7, #4]
 80022d2:	4613      	mov	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4413      	add	r3, r2
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	440b      	add	r3, r1
 80022dc:	3310      	adds	r3, #16
 80022de:	7bfa      	ldrb	r2, [r7, #15]
 80022e0:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022e2:	7bfa      	ldrb	r2, [r7, #15]
 80022e4:	6879      	ldr	r1, [r7, #4]
 80022e6:	4613      	mov	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	440b      	add	r3, r1
 80022f0:	3313      	adds	r3, #19
 80022f2:	2200      	movs	r2, #0
 80022f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022f6:	7bfa      	ldrb	r2, [r7, #15]
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	4613      	mov	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	4413      	add	r3, r2
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	440b      	add	r3, r1
 8002304:	3320      	adds	r3, #32
 8002306:	2200      	movs	r2, #0
 8002308:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800230a:	7bfa      	ldrb	r2, [r7, #15]
 800230c:	6879      	ldr	r1, [r7, #4]
 800230e:	4613      	mov	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	4413      	add	r3, r2
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	440b      	add	r3, r1
 8002318:	3324      	adds	r3, #36	@ 0x24
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800231e:	7bfb      	ldrb	r3, [r7, #15]
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	1c5a      	adds	r2, r3, #1
 8002324:	4613      	mov	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	440b      	add	r3, r1
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002332:	7bfb      	ldrb	r3, [r7, #15]
 8002334:	3301      	adds	r3, #1
 8002336:	73fb      	strb	r3, [r7, #15]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	791b      	ldrb	r3, [r3, #4]
 800233c:	7bfa      	ldrb	r2, [r7, #15]
 800233e:	429a      	cmp	r2, r3
 8002340:	d3bb      	bcc.n	80022ba <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002342:	2300      	movs	r3, #0
 8002344:	73fb      	strb	r3, [r7, #15]
 8002346:	e044      	b.n	80023d2 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002348:	7bfa      	ldrb	r2, [r7, #15]
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	4613      	mov	r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	4413      	add	r3, r2
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	440b      	add	r3, r1
 8002356:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800235a:	2200      	movs	r2, #0
 800235c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800235e:	7bfa      	ldrb	r2, [r7, #15]
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	4613      	mov	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4413      	add	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	440b      	add	r3, r1
 800236c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002370:	7bfa      	ldrb	r2, [r7, #15]
 8002372:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002374:	7bfa      	ldrb	r2, [r7, #15]
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	4613      	mov	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	440b      	add	r3, r1
 8002382:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002386:	2200      	movs	r2, #0
 8002388:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800238a:	7bfa      	ldrb	r2, [r7, #15]
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	4613      	mov	r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	4413      	add	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	440b      	add	r3, r1
 8002398:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023a0:	7bfa      	ldrb	r2, [r7, #15]
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	4613      	mov	r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	4413      	add	r3, r2
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	440b      	add	r3, r1
 80023ae:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023b6:	7bfa      	ldrb	r2, [r7, #15]
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	4613      	mov	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	440b      	add	r3, r1
 80023c4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
 80023ce:	3301      	adds	r3, #1
 80023d0:	73fb      	strb	r3, [r7, #15]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	791b      	ldrb	r3, [r3, #4]
 80023d6:	7bfa      	ldrb	r2, [r7, #15]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d3b5      	bcc.n	8002348 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6818      	ldr	r0, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3304      	adds	r3, #4
 80023e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023e6:	f002 f980 	bl	80046ea <USB_DevInit>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d005      	beq.n	80023fc <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2202      	movs	r2, #2
 80023f4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e00c      	b.n	8002416 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2201      	movs	r2, #1
 8002406:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f004 fbff 	bl	8006c12 <USB_DevDisconnect>

  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b082      	sub	sp, #8
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800242c:	2b01      	cmp	r3, #1
 800242e:	d101      	bne.n	8002434 <HAL_PCD_Start+0x16>
 8002430:	2302      	movs	r3, #2
 8002432:	e016      	b.n	8002462 <HAL_PCD_Start+0x44>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4618      	mov	r0, r3
 8002442:	f002 f916 	bl	8004672 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002446:	2101      	movs	r1, #1
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f006 fc6c 	bl	8008d26 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f004 fbd3 	bl	8006bfe <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b088      	sub	sp, #32
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f004 fbd5 	bl	8006c26 <USB_ReadInterrupts>
 800247c:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d003      	beq.n	8002490 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f000 fb1a 	bl	8002ac2 <PCD_EP_ISR_Handler>

    return;
 800248e:	e119      	b.n	80026c4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002496:	2b00      	cmp	r3, #0
 8002498:	d013      	beq.n	80024c2 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024ac:	b292      	uxth	r2, r2
 80024ae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f006 fa3f 	bl	8008936 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80024b8:	2100      	movs	r1, #0
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 f905 	bl	80026ca <HAL_PCD_SetAddress>

    return;
 80024c0:	e100      	b.n	80026c4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00c      	beq.n	80024e6 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80024de:	b292      	uxth	r2, r2
 80024e0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80024e4:	e0ee      	b.n	80026c4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00c      	beq.n	800250a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002502:	b292      	uxth	r2, r2
 8002504:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002508:	e0dc      	b.n	80026c4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d027      	beq.n	8002564 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800251c:	b29a      	uxth	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f022 0204 	bic.w	r2, r2, #4
 8002526:	b292      	uxth	r2, r2
 8002528:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002534:	b29a      	uxth	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f022 0208 	bic.w	r2, r2, #8
 800253e:	b292      	uxth	r2, r2
 8002540:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f006 fa2f 	bl	80089a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002552:	b29a      	uxth	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800255c:	b292      	uxth	r2, r2
 800255e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002562:	e0af      	b.n	80026c4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800256a:	2b00      	cmp	r3, #0
 800256c:	f000 8083 	beq.w	8002676 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002570:	2300      	movs	r3, #0
 8002572:	77fb      	strb	r3, [r7, #31]
 8002574:	e010      	b.n	8002598 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	461a      	mov	r2, r3
 800257c:	7ffb      	ldrb	r3, [r7, #31]
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	441a      	add	r2, r3
 8002582:	7ffb      	ldrb	r3, [r7, #31]
 8002584:	8812      	ldrh	r2, [r2, #0]
 8002586:	b292      	uxth	r2, r2
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	3320      	adds	r3, #32
 800258c:	443b      	add	r3, r7
 800258e:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002592:	7ffb      	ldrb	r3, [r7, #31]
 8002594:	3301      	adds	r3, #1
 8002596:	77fb      	strb	r3, [r7, #31]
 8002598:	7ffb      	ldrb	r3, [r7, #31]
 800259a:	2b07      	cmp	r3, #7
 800259c:	d9eb      	bls.n	8002576 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f042 0201 	orr.w	r2, r2, #1
 80025b0:	b292      	uxth	r2, r2
 80025b2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80025be:	b29a      	uxth	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 0201 	bic.w	r2, r2, #1
 80025c8:	b292      	uxth	r2, r2
 80025ca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80025ce:	bf00      	nop
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80025d8:	b29b      	uxth	r3, r3
 80025da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d0f6      	beq.n	80025d0 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025f4:	b292      	uxth	r2, r2
 80025f6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80025fa:	2300      	movs	r3, #0
 80025fc:	77fb      	strb	r3, [r7, #31]
 80025fe:	e00f      	b.n	8002620 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002600:	7ffb      	ldrb	r3, [r7, #31]
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	6812      	ldr	r2, [r2, #0]
 8002606:	4611      	mov	r1, r2
 8002608:	7ffa      	ldrb	r2, [r7, #31]
 800260a:	0092      	lsls	r2, r2, #2
 800260c:	440a      	add	r2, r1
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	3320      	adds	r3, #32
 8002612:	443b      	add	r3, r7
 8002614:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002618:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800261a:	7ffb      	ldrb	r3, [r7, #31]
 800261c:	3301      	adds	r3, #1
 800261e:	77fb      	strb	r3, [r7, #31]
 8002620:	7ffb      	ldrb	r3, [r7, #31]
 8002622:	2b07      	cmp	r3, #7
 8002624:	d9ec      	bls.n	8002600 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800262e:	b29a      	uxth	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f042 0208 	orr.w	r2, r2, #8
 8002638:	b292      	uxth	r2, r2
 800263a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002646:	b29a      	uxth	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002650:	b292      	uxth	r2, r2
 8002652:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800265e:	b29a      	uxth	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f042 0204 	orr.w	r2, r2, #4
 8002668:	b292      	uxth	r2, r2
 800266a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f006 f980 	bl	8008974 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002674:	e026      	b.n	80026c4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00f      	beq.n	80026a0 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002688:	b29a      	uxth	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002692:	b292      	uxth	r2, r2
 8002694:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f006 f93e 	bl	800891a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800269e:	e011      	b.n	80026c4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00c      	beq.n	80026c4 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026bc:	b292      	uxth	r2, r2
 80026be:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80026c2:	bf00      	nop
  }
}
 80026c4:	3720      	adds	r7, #32
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b082      	sub	sp, #8
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
 80026d2:	460b      	mov	r3, r1
 80026d4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d101      	bne.n	80026e4 <HAL_PCD_SetAddress+0x1a>
 80026e0:	2302      	movs	r3, #2
 80026e2:	e012      	b.n	800270a <HAL_PCD_SetAddress+0x40>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	78fa      	ldrb	r2, [r7, #3]
 80026f0:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	78fa      	ldrb	r2, [r7, #3]
 80026f8:	4611      	mov	r1, r2
 80026fa:	4618      	mov	r0, r3
 80026fc:	f004 fa6c 	bl	8006bd8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b084      	sub	sp, #16
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
 800271a:	4608      	mov	r0, r1
 800271c:	4611      	mov	r1, r2
 800271e:	461a      	mov	r2, r3
 8002720:	4603      	mov	r3, r0
 8002722:	70fb      	strb	r3, [r7, #3]
 8002724:	460b      	mov	r3, r1
 8002726:	803b      	strh	r3, [r7, #0]
 8002728:	4613      	mov	r3, r2
 800272a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800272c:	2300      	movs	r3, #0
 800272e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002730:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002734:	2b00      	cmp	r3, #0
 8002736:	da0e      	bge.n	8002756 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002738:	78fb      	ldrb	r3, [r7, #3]
 800273a:	f003 0207 	and.w	r2, r3, #7
 800273e:	4613      	mov	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4413      	add	r3, r2
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	3310      	adds	r3, #16
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	4413      	add	r3, r2
 800274c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2201      	movs	r2, #1
 8002752:	705a      	strb	r2, [r3, #1]
 8002754:	e00e      	b.n	8002774 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002756:	78fb      	ldrb	r3, [r7, #3]
 8002758:	f003 0207 	and.w	r2, r3, #7
 800275c:	4613      	mov	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4413      	add	r3, r2
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	4413      	add	r3, r2
 800276c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002774:	78fb      	ldrb	r3, [r7, #3]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	b2da      	uxtb	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002780:	883a      	ldrh	r2, [r7, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	78ba      	ldrb	r2, [r7, #2]
 800278a:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800278c:	78bb      	ldrb	r3, [r7, #2]
 800278e:	2b02      	cmp	r3, #2
 8002790:	d102      	bne.n	8002798 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d101      	bne.n	80027a6 <HAL_PCD_EP_Open+0x94>
 80027a2:	2302      	movs	r3, #2
 80027a4:	e00e      	b.n	80027c4 <HAL_PCD_EP_Open+0xb2>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68f9      	ldr	r1, [r7, #12]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f001 ffb5 	bl	8004724 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80027c2:	7afb      	ldrb	r3, [r7, #11]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	460b      	mov	r3, r1
 80027d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	da0e      	bge.n	80027fe <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027e0:	78fb      	ldrb	r3, [r7, #3]
 80027e2:	f003 0207 	and.w	r2, r3, #7
 80027e6:	4613      	mov	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	3310      	adds	r3, #16
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	4413      	add	r3, r2
 80027f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2201      	movs	r2, #1
 80027fa:	705a      	strb	r2, [r3, #1]
 80027fc:	e00e      	b.n	800281c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027fe:	78fb      	ldrb	r3, [r7, #3]
 8002800:	f003 0207 	and.w	r2, r3, #7
 8002804:	4613      	mov	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4413      	add	r3, r2
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	4413      	add	r3, r2
 8002814:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800281c:	78fb      	ldrb	r3, [r7, #3]
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	b2da      	uxtb	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800282e:	2b01      	cmp	r3, #1
 8002830:	d101      	bne.n	8002836 <HAL_PCD_EP_Close+0x6a>
 8002832:	2302      	movs	r3, #2
 8002834:	e00e      	b.n	8002854 <HAL_PCD_EP_Close+0x88>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68f9      	ldr	r1, [r7, #12]
 8002844:	4618      	mov	r0, r3
 8002846:	f002 fb2d 	bl	8004ea4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	607a      	str	r2, [r7, #4]
 8002866:	603b      	str	r3, [r7, #0]
 8002868:	460b      	mov	r3, r1
 800286a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800286c:	7afb      	ldrb	r3, [r7, #11]
 800286e:	f003 0207 	and.w	r2, r3, #7
 8002872:	4613      	mov	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	4413      	add	r3, r2
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	4413      	add	r3, r2
 8002882:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	2200      	movs	r2, #0
 8002894:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	2200      	movs	r2, #0
 800289a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800289c:	7afb      	ldrb	r3, [r7, #11]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	b2da      	uxtb	r2, r3
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6979      	ldr	r1, [r7, #20]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f002 fce4 	bl	800527c <USB_EPStartXfer>

  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80028be:	b480      	push	{r7}
 80028c0:	b083      	sub	sp, #12
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
 80028c6:	460b      	mov	r3, r1
 80028c8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80028ca:	78fb      	ldrb	r3, [r7, #3]
 80028cc:	f003 0207 	and.w	r2, r3, #7
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	4613      	mov	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	440b      	add	r3, r1
 80028dc:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80028e0:	681b      	ldr	r3, [r3, #0]
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr

080028ec <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	607a      	str	r2, [r7, #4]
 80028f6:	603b      	str	r3, [r7, #0]
 80028f8:	460b      	mov	r3, r1
 80028fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028fc:	7afb      	ldrb	r3, [r7, #11]
 80028fe:	f003 0207 	and.w	r2, r3, #7
 8002902:	4613      	mov	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	3310      	adds	r3, #16
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	4413      	add	r3, r2
 8002910:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	2200      	movs	r2, #0
 8002930:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	2201      	movs	r2, #1
 8002936:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002938:	7afb      	ldrb	r3, [r7, #11]
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	b2da      	uxtb	r2, r3
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6979      	ldr	r1, [r7, #20]
 800294a:	4618      	mov	r0, r3
 800294c:	f002 fc96 	bl	800527c <USB_EPStartXfer>

  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3718      	adds	r7, #24
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b084      	sub	sp, #16
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
 8002962:	460b      	mov	r3, r1
 8002964:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002966:	78fb      	ldrb	r3, [r7, #3]
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	7912      	ldrb	r2, [r2, #4]
 8002970:	4293      	cmp	r3, r2
 8002972:	d901      	bls.n	8002978 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e04c      	b.n	8002a12 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002978:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800297c:	2b00      	cmp	r3, #0
 800297e:	da0e      	bge.n	800299e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002980:	78fb      	ldrb	r3, [r7, #3]
 8002982:	f003 0207 	and.w	r2, r3, #7
 8002986:	4613      	mov	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	3310      	adds	r3, #16
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	4413      	add	r3, r2
 8002994:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2201      	movs	r2, #1
 800299a:	705a      	strb	r2, [r3, #1]
 800299c:	e00c      	b.n	80029b8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800299e:	78fa      	ldrb	r2, [r7, #3]
 80029a0:	4613      	mov	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	4413      	add	r3, r2
 80029b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2201      	movs	r2, #1
 80029bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029be:	78fb      	ldrb	r3, [r7, #3]
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d101      	bne.n	80029d8 <HAL_PCD_EP_SetStall+0x7e>
 80029d4:	2302      	movs	r3, #2
 80029d6:	e01c      	b.n	8002a12 <HAL_PCD_EP_SetStall+0xb8>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68f9      	ldr	r1, [r7, #12]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f003 fff9 	bl	80069de <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029ec:	78fb      	ldrb	r3, [r7, #3]
 80029ee:	f003 0307 	and.w	r3, r3, #7
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d108      	bne.n	8002a08 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8002a00:	4619      	mov	r1, r3
 8002a02:	4610      	mov	r0, r2
 8002a04:	f004 f91e 	bl	8006c44 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b084      	sub	sp, #16
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
 8002a22:	460b      	mov	r3, r1
 8002a24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002a26:	78fb      	ldrb	r3, [r7, #3]
 8002a28:	f003 030f 	and.w	r3, r3, #15
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	7912      	ldrb	r2, [r2, #4]
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d901      	bls.n	8002a38 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e040      	b.n	8002aba <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	da0e      	bge.n	8002a5e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a40:	78fb      	ldrb	r3, [r7, #3]
 8002a42:	f003 0207 	and.w	r2, r3, #7
 8002a46:	4613      	mov	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4413      	add	r3, r2
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	3310      	adds	r3, #16
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	4413      	add	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	705a      	strb	r2, [r3, #1]
 8002a5c:	e00e      	b.n	8002a7c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a5e:	78fb      	ldrb	r3, [r7, #3]
 8002a60:	f003 0207 	and.w	r2, r3, #7
 8002a64:	4613      	mov	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	4413      	add	r3, r2
 8002a74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a82:	78fb      	ldrb	r3, [r7, #3]
 8002a84:	f003 0307 	and.w	r3, r3, #7
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d101      	bne.n	8002a9c <HAL_PCD_EP_ClrStall+0x82>
 8002a98:	2302      	movs	r3, #2
 8002a9a:	e00e      	b.n	8002aba <HAL_PCD_EP_ClrStall+0xa0>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68f9      	ldr	r1, [r7, #12]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f003 ffe7 	bl	8006a7e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b096      	sub	sp, #88	@ 0x58
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002aca:	e3bb      	b.n	8003244 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ad4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002ad8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	f003 030f 	and.w	r3, r3, #15
 8002ae2:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8002ae6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f040 8175 	bne.w	8002dda <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002af0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002af4:	f003 0310 	and.w	r3, r3, #16
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d14e      	bne.n	8002b9a <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	881b      	ldrh	r3, [r3, #0]
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002b08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b0c:	81fb      	strh	r3, [r7, #14]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	89fb      	ldrh	r3, [r7, #14]
 8002b14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3310      	adds	r3, #16
 8002b24:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	461a      	mov	r2, r3
 8002b32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	4413      	add	r3, r2
 8002b3a:	3302      	adds	r3, #2
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	6812      	ldr	r2, [r2, #0]
 8002b42:	4413      	add	r3, r2
 8002b44:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002b48:	881b      	ldrh	r3, [r3, #0]
 8002b4a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b50:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002b52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b54:	695a      	ldr	r2, [r3, #20]
 8002b56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	441a      	add	r2, r3
 8002b5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b5e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002b60:	2100      	movs	r1, #0
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f005 febf 	bl	80088e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	7b5b      	ldrb	r3, [r3, #13]
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f000 8368 	beq.w	8003244 <PCD_EP_ISR_Handler+0x782>
 8002b74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f040 8363 	bne.w	8003244 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	7b5b      	ldrb	r3, [r3, #13]
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002b88:	b2da      	uxtb	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	735a      	strb	r2, [r3, #13]
 8002b98:	e354      	b.n	8003244 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002ba0:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	881b      	ldrh	r3, [r3, #0]
 8002ba8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002bac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002bb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d034      	beq.n	8002c22 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	4413      	add	r3, r2
 8002bcc:	3306      	adds	r3, #6
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	6812      	ldr	r2, [r2, #0]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002bda:	881b      	ldrh	r3, [r3, #0]
 8002bdc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002be0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002be2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6818      	ldr	r0, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8002bee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bf0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002bf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bf4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	f004 f875 	bl	8006ce6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	881b      	ldrh	r3, [r3, #0]
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002c08:	4013      	ands	r3, r2
 8002c0a:	823b      	strh	r3, [r7, #16]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	8a3a      	ldrh	r2, [r7, #16]
 8002c12:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002c16:	b292      	uxth	r2, r2
 8002c18:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f005 fe36 	bl	800888c <HAL_PCD_SetupStageCallback>
 8002c20:	e310      	b.n	8003244 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002c22:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f280 830c 	bge.w	8003244 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	881b      	ldrh	r3, [r3, #0]
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002c38:	4013      	ands	r3, r2
 8002c3a:	83fb      	strh	r3, [r7, #30]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	8bfa      	ldrh	r2, [r7, #30]
 8002c42:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002c46:	b292      	uxth	r2, r2
 8002c48:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	461a      	mov	r2, r3
 8002c56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	4413      	add	r3, r2
 8002c5e:	3306      	adds	r3, #6
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	6812      	ldr	r2, [r2, #0]
 8002c66:	4413      	add	r3, r2
 8002c68:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002c6c:	881b      	ldrh	r3, [r3, #0]
 8002c6e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c74:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002c76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d019      	beq.n	8002cb2 <PCD_EP_ISR_Handler+0x1f0>
 8002c7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d015      	beq.n	8002cb2 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6818      	ldr	r0, [r3, #0]
 8002c8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c8c:	6959      	ldr	r1, [r3, #20]
 8002c8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c90:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002c92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c94:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	f004 f825 	bl	8006ce6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002c9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c9e:	695a      	ldr	r2, [r3, #20]
 8002ca0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ca2:	69db      	ldr	r3, [r3, #28]
 8002ca4:	441a      	add	r2, r3
 8002ca6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ca8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002caa:	2100      	movs	r1, #0
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f005 fdff 	bl	80088b0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	881b      	ldrh	r3, [r3, #0]
 8002cb8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002cbc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002cc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f040 82bd 	bne.w	8003244 <PCD_EP_ISR_Handler+0x782>
 8002cca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002cce:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002cd2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002cd6:	f000 82b5 	beq.w	8003244 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	61bb      	str	r3, [r7, #24]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	461a      	mov	r2, r3
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	4413      	add	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002cf8:	617b      	str	r3, [r7, #20]
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	881b      	ldrh	r3, [r3, #0]
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	801a      	strh	r2, [r3, #0]
 8002d0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	2b3e      	cmp	r3, #62	@ 0x3e
 8002d10:	d91d      	bls.n	8002d4e <PCD_EP_ISR_Handler+0x28c>
 8002d12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	095b      	lsrs	r3, r3, #5
 8002d18:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	f003 031f 	and.w	r3, r3, #31
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d102      	bne.n	8002d2c <PCD_EP_ISR_Handler+0x26a>
 8002d26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	881b      	ldrh	r3, [r3, #0]
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	029b      	lsls	r3, r3, #10
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	801a      	strh	r2, [r3, #0]
 8002d4c:	e026      	b.n	8002d9c <PCD_EP_ISR_Handler+0x2da>
 8002d4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10a      	bne.n	8002d6c <PCD_EP_ISR_Handler+0x2aa>
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	881b      	ldrh	r3, [r3, #0]
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	801a      	strh	r2, [r3, #0]
 8002d6a:	e017      	b.n	8002d9c <PCD_EP_ISR_Handler+0x2da>
 8002d6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	085b      	lsrs	r3, r3, #1
 8002d72:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d002      	beq.n	8002d86 <PCD_EP_ISR_Handler+0x2c4>
 8002d80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d82:	3301      	adds	r3, #1
 8002d84:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	881b      	ldrh	r3, [r3, #0]
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	029b      	lsls	r3, r3, #10
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	4313      	orrs	r3, r2
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	881b      	ldrh	r3, [r3, #0]
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002da8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dac:	827b      	strh	r3, [r7, #18]
 8002dae:	8a7b      	ldrh	r3, [r7, #18]
 8002db0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002db4:	827b      	strh	r3, [r7, #18]
 8002db6:	8a7b      	ldrh	r3, [r7, #18]
 8002db8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002dbc:	827b      	strh	r3, [r7, #18]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	8a7b      	ldrh	r3, [r7, #18]
 8002dc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002dc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002dcc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002dd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	8013      	strh	r3, [r2, #0]
 8002dd8:	e234      	b.n	8003244 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	461a      	mov	r2, r3
 8002de0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4413      	add	r3, r2
 8002de8:	881b      	ldrh	r3, [r3, #0]
 8002dea:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002dee:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f280 80fc 	bge.w	8002ff0 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	881b      	ldrh	r3, [r3, #0]
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002e0e:	4013      	ands	r3, r2
 8002e10:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	461a      	mov	r2, r3
 8002e1a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8002e26:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002e2a:	b292      	uxth	r2, r2
 8002e2c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002e2e:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002e32:	4613      	mov	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4413      	add	r3, r2
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	4413      	add	r3, r2
 8002e42:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002e44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e46:	7b1b      	ldrb	r3, [r3, #12]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d125      	bne.n	8002e98 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	461a      	mov	r2, r3
 8002e58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	4413      	add	r3, r2
 8002e60:	3306      	adds	r3, #6
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	6812      	ldr	r2, [r2, #0]
 8002e68:	4413      	add	r3, r2
 8002e6a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002e6e:	881b      	ldrh	r3, [r3, #0]
 8002e70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e74:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8002e78:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 8092 	beq.w	8002fa6 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6818      	ldr	r0, [r3, #0]
 8002e86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e88:	6959      	ldr	r1, [r3, #20]
 8002e8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e8c:	88da      	ldrh	r2, [r3, #6]
 8002e8e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002e92:	f003 ff28 	bl	8006ce6 <USB_ReadPMA>
 8002e96:	e086      	b.n	8002fa6 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002e98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e9a:	78db      	ldrb	r3, [r3, #3]
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d10a      	bne.n	8002eb6 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002ea0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 f9d9 	bl	8003260 <HAL_PCD_EP_DB_Receive>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8002eb4:	e077      	b.n	8002fa6 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	461a      	mov	r2, r3
 8002ebc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	4413      	add	r3, r2
 8002ec4:	881b      	ldrh	r3, [r3, #0]
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002ecc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ed0:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	461a      	mov	r2, r3
 8002eda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	441a      	add	r2, r3
 8002ee2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002ee6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002eea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002eee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ef2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	461a      	mov	r2, r3
 8002f00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4413      	add	r3, r2
 8002f08:	881b      	ldrh	r3, [r3, #0]
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d024      	beq.n	8002f5e <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	461a      	mov	r2, r3
 8002f20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	4413      	add	r3, r2
 8002f28:	3302      	adds	r3, #2
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	6812      	ldr	r2, [r2, #0]
 8002f30:	4413      	add	r3, r2
 8002f32:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002f36:	881b      	ldrh	r3, [r3, #0]
 8002f38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f3c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002f40:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d02e      	beq.n	8002fa6 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6818      	ldr	r0, [r3, #0]
 8002f4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f4e:	6959      	ldr	r1, [r3, #20]
 8002f50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f52:	891a      	ldrh	r2, [r3, #8]
 8002f54:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002f58:	f003 fec5 	bl	8006ce6 <USB_ReadPMA>
 8002f5c:	e023      	b.n	8002fa6 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	461a      	mov	r2, r3
 8002f6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	4413      	add	r3, r2
 8002f72:	3306      	adds	r3, #6
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	6812      	ldr	r2, [r2, #0]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002f80:	881b      	ldrh	r3, [r3, #0]
 8002f82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f86:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002f8a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d009      	beq.n	8002fa6 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6818      	ldr	r0, [r3, #0]
 8002f96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f98:	6959      	ldr	r1, [r3, #20]
 8002f9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f9c:	895a      	ldrh	r2, [r3, #10]
 8002f9e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002fa2:	f003 fea0 	bl	8006ce6 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002fa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fa8:	69da      	ldr	r2, [r3, #28]
 8002faa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002fae:	441a      	add	r2, r3
 8002fb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fb2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002fb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fb6:	695a      	ldr	r2, [r3, #20]
 8002fb8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002fbc:	441a      	add	r2, r3
 8002fbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fc0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002fc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d005      	beq.n	8002fd6 <PCD_EP_ISR_Handler+0x514>
 8002fca:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002fce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d206      	bcs.n	8002fe4 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002fd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	4619      	mov	r1, r3
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f005 fc67 	bl	80088b0 <HAL_PCD_DataOutStageCallback>
 8002fe2:	e005      	b.n	8002ff0 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002fea:	4618      	mov	r0, r3
 8002fec:	f002 f946 	bl	800527c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002ff0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002ff4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f000 8123 	beq.w	8003244 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8002ffe:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003002:	4613      	mov	r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	4413      	add	r3, r2
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	3310      	adds	r3, #16
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	4413      	add	r3, r2
 8003010:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	461a      	mov	r2, r3
 8003018:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	4413      	add	r3, r2
 8003020:	881b      	ldrh	r3, [r3, #0]
 8003022:	b29b      	uxth	r3, r3
 8003024:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003028:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800302c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	461a      	mov	r2, r3
 8003036:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	441a      	add	r2, r3
 800303e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003042:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003046:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800304a:	b29b      	uxth	r3, r3
 800304c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800304e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003050:	78db      	ldrb	r3, [r3, #3]
 8003052:	2b01      	cmp	r3, #1
 8003054:	f040 80a2 	bne.w	800319c <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8003058:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800305a:	2200      	movs	r2, #0
 800305c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800305e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003060:	7b1b      	ldrb	r3, [r3, #12]
 8003062:	2b00      	cmp	r3, #0
 8003064:	f000 8093 	beq.w	800318e <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003068:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800306c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003070:	2b00      	cmp	r3, #0
 8003072:	d046      	beq.n	8003102 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003074:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003076:	785b      	ldrb	r3, [r3, #1]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d126      	bne.n	80030ca <PCD_EP_ISR_Handler+0x608>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	627b      	str	r3, [r7, #36]	@ 0x24
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800308a:	b29b      	uxth	r3, r3
 800308c:	461a      	mov	r2, r3
 800308e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003090:	4413      	add	r3, r2
 8003092:	627b      	str	r3, [r7, #36]	@ 0x24
 8003094:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	011a      	lsls	r2, r3, #4
 800309a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309c:	4413      	add	r3, r2
 800309e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80030a2:	623b      	str	r3, [r7, #32]
 80030a4:	6a3b      	ldr	r3, [r7, #32]
 80030a6:	881b      	ldrh	r3, [r3, #0]
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	6a3b      	ldr	r3, [r7, #32]
 80030b2:	801a      	strh	r2, [r3, #0]
 80030b4:	6a3b      	ldr	r3, [r7, #32]
 80030b6:	881b      	ldrh	r3, [r3, #0]
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	6a3b      	ldr	r3, [r7, #32]
 80030c6:	801a      	strh	r2, [r3, #0]
 80030c8:	e061      	b.n	800318e <PCD_EP_ISR_Handler+0x6cc>
 80030ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030cc:	785b      	ldrb	r3, [r3, #1]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d15d      	bne.n	800318e <PCD_EP_ISR_Handler+0x6cc>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	461a      	mov	r2, r3
 80030e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030e6:	4413      	add	r3, r2
 80030e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	011a      	lsls	r2, r3, #4
 80030f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030f2:	4413      	add	r3, r2
 80030f4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80030f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030fc:	2200      	movs	r2, #0
 80030fe:	801a      	strh	r2, [r3, #0]
 8003100:	e045      	b.n	800318e <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003108:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800310a:	785b      	ldrb	r3, [r3, #1]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d126      	bne.n	800315e <PCD_EP_ISR_Handler+0x69c>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	637b      	str	r3, [r7, #52]	@ 0x34
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800311e:	b29b      	uxth	r3, r3
 8003120:	461a      	mov	r2, r3
 8003122:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003124:	4413      	add	r3, r2
 8003126:	637b      	str	r3, [r7, #52]	@ 0x34
 8003128:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	011a      	lsls	r2, r3, #4
 800312e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003130:	4413      	add	r3, r2
 8003132:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003136:	633b      	str	r3, [r7, #48]	@ 0x30
 8003138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800313a:	881b      	ldrh	r3, [r3, #0]
 800313c:	b29b      	uxth	r3, r3
 800313e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003142:	b29a      	uxth	r2, r3
 8003144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003146:	801a      	strh	r2, [r3, #0]
 8003148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800314a:	881b      	ldrh	r3, [r3, #0]
 800314c:	b29b      	uxth	r3, r3
 800314e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003152:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003156:	b29a      	uxth	r2, r3
 8003158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800315a:	801a      	strh	r2, [r3, #0]
 800315c:	e017      	b.n	800318e <PCD_EP_ISR_Handler+0x6cc>
 800315e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003160:	785b      	ldrb	r3, [r3, #1]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d113      	bne.n	800318e <PCD_EP_ISR_Handler+0x6cc>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800316e:	b29b      	uxth	r3, r3
 8003170:	461a      	mov	r2, r3
 8003172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003174:	4413      	add	r3, r2
 8003176:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003178:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	011a      	lsls	r2, r3, #4
 800317e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003180:	4413      	add	r3, r2
 8003182:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003186:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800318a:	2200      	movs	r2, #0
 800318c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800318e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	4619      	mov	r1, r3
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f005 fba6 	bl	80088e6 <HAL_PCD_DataInStageCallback>
 800319a:	e053      	b.n	8003244 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800319c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80031a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d146      	bne.n	8003236 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	461a      	mov	r2, r3
 80031b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	4413      	add	r3, r2
 80031bc:	3302      	adds	r3, #2
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	6812      	ldr	r2, [r2, #0]
 80031c4:	4413      	add	r3, r2
 80031c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80031ca:	881b      	ldrh	r3, [r3, #0]
 80031cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031d0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80031d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031d6:	699a      	ldr	r2, [r3, #24]
 80031d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80031dc:	429a      	cmp	r2, r3
 80031de:	d907      	bls.n	80031f0 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 80031e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031e2:	699a      	ldr	r2, [r3, #24]
 80031e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80031e8:	1ad2      	subs	r2, r2, r3
 80031ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031ec:	619a      	str	r2, [r3, #24]
 80031ee:	e002      	b.n	80031f6 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 80031f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031f2:	2200      	movs	r2, #0
 80031f4:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80031f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d106      	bne.n	800320c <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80031fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	4619      	mov	r1, r3
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f005 fb6e 	bl	80088e6 <HAL_PCD_DataInStageCallback>
 800320a:	e01b      	b.n	8003244 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800320c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800320e:	695a      	ldr	r2, [r3, #20]
 8003210:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003214:	441a      	add	r2, r3
 8003216:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003218:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800321a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800321c:	69da      	ldr	r2, [r3, #28]
 800321e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003222:	441a      	add	r2, r3
 8003224:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003226:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800322e:	4618      	mov	r0, r3
 8003230:	f002 f824 	bl	800527c <USB_EPStartXfer>
 8003234:	e006      	b.n	8003244 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003236:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800323a:	461a      	mov	r2, r3
 800323c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f91b 	bl	800347a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800324c:	b29b      	uxth	r3, r3
 800324e:	b21b      	sxth	r3, r3
 8003250:	2b00      	cmp	r3, #0
 8003252:	f6ff ac3b 	blt.w	8002acc <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3758      	adds	r7, #88	@ 0x58
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b088      	sub	sp, #32
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	4613      	mov	r3, r2
 800326c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800326e:	88fb      	ldrh	r3, [r7, #6]
 8003270:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d07e      	beq.n	8003376 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003280:	b29b      	uxth	r3, r3
 8003282:	461a      	mov	r2, r3
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	4413      	add	r3, r2
 800328c:	3302      	adds	r3, #2
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	6812      	ldr	r2, [r2, #0]
 8003294:	4413      	add	r3, r2
 8003296:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800329a:	881b      	ldrh	r3, [r3, #0]
 800329c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032a0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	699a      	ldr	r2, [r3, #24]
 80032a6:	8b7b      	ldrh	r3, [r7, #26]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d306      	bcc.n	80032ba <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	699a      	ldr	r2, [r3, #24]
 80032b0:	8b7b      	ldrh	r3, [r7, #26]
 80032b2:	1ad2      	subs	r2, r2, r3
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	619a      	str	r2, [r3, #24]
 80032b8:	e002      	b.n	80032c0 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	2200      	movs	r2, #0
 80032be:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d123      	bne.n	8003310 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	461a      	mov	r2, r3
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	881b      	ldrh	r3, [r3, #0]
 80032d8:	b29b      	uxth	r3, r3
 80032da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80032de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032e2:	833b      	strh	r3, [r7, #24]
 80032e4:	8b3b      	ldrh	r3, [r7, #24]
 80032e6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80032ea:	833b      	strh	r3, [r7, #24]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	461a      	mov	r2, r3
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	441a      	add	r2, r3
 80032fa:	8b3b      	ldrh	r3, [r7, #24]
 80032fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003300:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003304:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003308:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800330c:	b29b      	uxth	r3, r3
 800330e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003310:	88fb      	ldrh	r3, [r7, #6]
 8003312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003316:	2b00      	cmp	r3, #0
 8003318:	d01f      	beq.n	800335a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	461a      	mov	r2, r3
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4413      	add	r3, r2
 8003328:	881b      	ldrh	r3, [r3, #0]
 800332a:	b29b      	uxth	r3, r3
 800332c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003330:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003334:	82fb      	strh	r3, [r7, #22]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	461a      	mov	r2, r3
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	441a      	add	r2, r3
 8003344:	8afb      	ldrh	r3, [r7, #22]
 8003346:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800334a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800334e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003352:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003356:	b29b      	uxth	r3, r3
 8003358:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800335a:	8b7b      	ldrh	r3, [r7, #26]
 800335c:	2b00      	cmp	r3, #0
 800335e:	f000 8087 	beq.w	8003470 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6818      	ldr	r0, [r3, #0]
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	6959      	ldr	r1, [r3, #20]
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	891a      	ldrh	r2, [r3, #8]
 800336e:	8b7b      	ldrh	r3, [r7, #26]
 8003370:	f003 fcb9 	bl	8006ce6 <USB_ReadPMA>
 8003374:	e07c      	b.n	8003470 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800337e:	b29b      	uxth	r3, r3
 8003380:	461a      	mov	r2, r3
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	4413      	add	r3, r2
 800338a:	3306      	adds	r3, #6
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	6812      	ldr	r2, [r2, #0]
 8003392:	4413      	add	r3, r2
 8003394:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003398:	881b      	ldrh	r3, [r3, #0]
 800339a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800339e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	699a      	ldr	r2, [r3, #24]
 80033a4:	8b7b      	ldrh	r3, [r7, #26]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d306      	bcc.n	80033b8 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	699a      	ldr	r2, [r3, #24]
 80033ae:	8b7b      	ldrh	r3, [r7, #26]
 80033b0:	1ad2      	subs	r2, r2, r3
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	619a      	str	r2, [r3, #24]
 80033b6:	e002      	b.n	80033be <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	2200      	movs	r2, #0
 80033bc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d123      	bne.n	800340e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	461a      	mov	r2, r3
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4413      	add	r3, r2
 80033d4:	881b      	ldrh	r3, [r3, #0]
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80033dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033e0:	83fb      	strh	r3, [r7, #30]
 80033e2:	8bfb      	ldrh	r3, [r7, #30]
 80033e4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80033e8:	83fb      	strh	r3, [r7, #30]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	461a      	mov	r2, r3
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	441a      	add	r2, r3
 80033f8:	8bfb      	ldrh	r3, [r7, #30]
 80033fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80033fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003402:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003406:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800340a:	b29b      	uxth	r3, r3
 800340c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800340e:	88fb      	ldrh	r3, [r7, #6]
 8003410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003414:	2b00      	cmp	r3, #0
 8003416:	d11f      	bne.n	8003458 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	461a      	mov	r2, r3
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4413      	add	r3, r2
 8003426:	881b      	ldrh	r3, [r3, #0]
 8003428:	b29b      	uxth	r3, r3
 800342a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800342e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003432:	83bb      	strh	r3, [r7, #28]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	461a      	mov	r2, r3
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	441a      	add	r2, r3
 8003442:	8bbb      	ldrh	r3, [r7, #28]
 8003444:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003448:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800344c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003450:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003454:	b29b      	uxth	r3, r3
 8003456:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003458:	8b7b      	ldrh	r3, [r7, #26]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d008      	beq.n	8003470 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6818      	ldr	r0, [r3, #0]
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	6959      	ldr	r1, [r3, #20]
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	895a      	ldrh	r2, [r3, #10]
 800346a:	8b7b      	ldrh	r3, [r7, #26]
 800346c:	f003 fc3b 	bl	8006ce6 <USB_ReadPMA>
    }
  }

  return count;
 8003470:	8b7b      	ldrh	r3, [r7, #26]
}
 8003472:	4618      	mov	r0, r3
 8003474:	3720      	adds	r7, #32
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b0a4      	sub	sp, #144	@ 0x90
 800347e:	af00      	add	r7, sp, #0
 8003480:	60f8      	str	r0, [r7, #12]
 8003482:	60b9      	str	r1, [r7, #8]
 8003484:	4613      	mov	r3, r2
 8003486:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003488:	88fb      	ldrh	r3, [r7, #6]
 800348a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800348e:	2b00      	cmp	r3, #0
 8003490:	f000 81dd 	beq.w	800384e <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800349c:	b29b      	uxth	r3, r3
 800349e:	461a      	mov	r2, r3
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	4413      	add	r3, r2
 80034a8:	3302      	adds	r3, #2
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	6812      	ldr	r2, [r2, #0]
 80034b0:	4413      	add	r3, r2
 80034b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80034b6:	881b      	ldrh	r3, [r3, #0]
 80034b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034bc:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	699a      	ldr	r2, [r3, #24]
 80034c4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d907      	bls.n	80034dc <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	699a      	ldr	r2, [r3, #24]
 80034d0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80034d4:	1ad2      	subs	r2, r2, r3
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	619a      	str	r2, [r3, #24]
 80034da:	e002      	b.n	80034e2 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	2200      	movs	r2, #0
 80034e0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f040 80b9 	bne.w	800365e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	785b      	ldrb	r3, [r3, #1]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d126      	bne.n	8003542 <HAL_PCD_EP_DB_Transmit+0xc8>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003502:	b29b      	uxth	r3, r3
 8003504:	461a      	mov	r2, r3
 8003506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003508:	4413      	add	r3, r2
 800350a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	011a      	lsls	r2, r3, #4
 8003512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003514:	4413      	add	r3, r2
 8003516:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800351a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800351c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800351e:	881b      	ldrh	r3, [r3, #0]
 8003520:	b29b      	uxth	r3, r3
 8003522:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003526:	b29a      	uxth	r2, r3
 8003528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800352a:	801a      	strh	r2, [r3, #0]
 800352c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800352e:	881b      	ldrh	r3, [r3, #0]
 8003530:	b29b      	uxth	r3, r3
 8003532:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003536:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800353a:	b29a      	uxth	r2, r3
 800353c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800353e:	801a      	strh	r2, [r3, #0]
 8003540:	e01a      	b.n	8003578 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	785b      	ldrb	r3, [r3, #1]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d116      	bne.n	8003578 <HAL_PCD_EP_DB_Transmit+0xfe>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003558:	b29b      	uxth	r3, r3
 800355a:	461a      	mov	r2, r3
 800355c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800355e:	4413      	add	r3, r2
 8003560:	637b      	str	r3, [r7, #52]	@ 0x34
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	011a      	lsls	r2, r3, #4
 8003568:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800356a:	4413      	add	r3, r2
 800356c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003570:	633b      	str	r3, [r7, #48]	@ 0x30
 8003572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003574:	2200      	movs	r2, #0
 8003576:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	627b      	str	r3, [r7, #36]	@ 0x24
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	785b      	ldrb	r3, [r3, #1]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d126      	bne.n	80035d4 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	61fb      	str	r3, [r7, #28]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003594:	b29b      	uxth	r3, r3
 8003596:	461a      	mov	r2, r3
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	4413      	add	r3, r2
 800359c:	61fb      	str	r3, [r7, #28]
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	011a      	lsls	r2, r3, #4
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	4413      	add	r3, r2
 80035a8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80035ac:	61bb      	str	r3, [r7, #24]
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	881b      	ldrh	r3, [r3, #0]
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	801a      	strh	r2, [r3, #0]
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	881b      	ldrh	r3, [r3, #0]
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	801a      	strh	r2, [r3, #0]
 80035d2:	e017      	b.n	8003604 <HAL_PCD_EP_DB_Transmit+0x18a>
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	785b      	ldrb	r3, [r3, #1]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d113      	bne.n	8003604 <HAL_PCD_EP_DB_Transmit+0x18a>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	461a      	mov	r2, r3
 80035e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ea:	4413      	add	r3, r2
 80035ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	011a      	lsls	r2, r3, #4
 80035f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f6:	4413      	add	r3, r2
 80035f8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80035fc:	623b      	str	r3, [r7, #32]
 80035fe:	6a3b      	ldr	r3, [r7, #32]
 8003600:	2200      	movs	r2, #0
 8003602:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	4619      	mov	r1, r3
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f005 f96b 	bl	80088e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003610:	88fb      	ldrh	r3, [r7, #6]
 8003612:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003616:	2b00      	cmp	r3, #0
 8003618:	f000 82fc 	beq.w	8003c14 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	461a      	mov	r2, r3
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	4413      	add	r3, r2
 800362a:	881b      	ldrh	r3, [r3, #0]
 800362c:	b29b      	uxth	r3, r3
 800362e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003632:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003636:	82fb      	strh	r3, [r7, #22]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	461a      	mov	r2, r3
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	441a      	add	r2, r3
 8003646:	8afb      	ldrh	r3, [r7, #22]
 8003648:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800364c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003650:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003654:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003658:	b29b      	uxth	r3, r3
 800365a:	8013      	strh	r3, [r2, #0]
 800365c:	e2da      	b.n	8003c14 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800365e:	88fb      	ldrh	r3, [r7, #6]
 8003660:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d021      	beq.n	80036ac <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	461a      	mov	r2, r3
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	881b      	ldrh	r3, [r3, #0]
 8003678:	b29b      	uxth	r3, r3
 800367a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800367e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003682:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	461a      	mov	r2, r3
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	441a      	add	r2, r3
 8003694:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003698:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800369c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80036a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80036a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	f040 82ae 	bne.w	8003c14 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	695a      	ldr	r2, [r3, #20]
 80036bc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80036c0:	441a      	add	r2, r3
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	69da      	ldr	r2, [r3, #28]
 80036ca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80036ce:	441a      	add	r2, r3
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	6a1a      	ldr	r2, [r3, #32]
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d30b      	bcc.n	80036f8 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	6a1a      	ldr	r2, [r3, #32]
 80036ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036f0:	1ad2      	subs	r2, r2, r3
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	621a      	str	r2, [r3, #32]
 80036f6:	e017      	b.n	8003728 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d108      	bne.n	8003712 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003700:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003704:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003710:	e00a      	b.n	8003728 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	2200      	movs	r2, #0
 8003726:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	785b      	ldrb	r3, [r3, #1]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d165      	bne.n	80037fc <HAL_PCD_EP_DB_Transmit+0x382>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800373e:	b29b      	uxth	r3, r3
 8003740:	461a      	mov	r2, r3
 8003742:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003744:	4413      	add	r3, r2
 8003746:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	011a      	lsls	r2, r3, #4
 800374e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003750:	4413      	add	r3, r2
 8003752:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003756:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800375a:	881b      	ldrh	r3, [r3, #0]
 800375c:	b29b      	uxth	r3, r3
 800375e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003762:	b29a      	uxth	r2, r3
 8003764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003766:	801a      	strh	r2, [r3, #0]
 8003768:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800376c:	2b3e      	cmp	r3, #62	@ 0x3e
 800376e:	d91d      	bls.n	80037ac <HAL_PCD_EP_DB_Transmit+0x332>
 8003770:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003774:	095b      	lsrs	r3, r3, #5
 8003776:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003778:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800377c:	f003 031f 	and.w	r3, r3, #31
 8003780:	2b00      	cmp	r3, #0
 8003782:	d102      	bne.n	800378a <HAL_PCD_EP_DB_Transmit+0x310>
 8003784:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003786:	3b01      	subs	r3, #1
 8003788:	64bb      	str	r3, [r7, #72]	@ 0x48
 800378a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800378c:	881b      	ldrh	r3, [r3, #0]
 800378e:	b29a      	uxth	r2, r3
 8003790:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003792:	b29b      	uxth	r3, r3
 8003794:	029b      	lsls	r3, r3, #10
 8003796:	b29b      	uxth	r3, r3
 8003798:	4313      	orrs	r3, r2
 800379a:	b29b      	uxth	r3, r3
 800379c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037a8:	801a      	strh	r2, [r3, #0]
 80037aa:	e044      	b.n	8003836 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80037ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10a      	bne.n	80037ca <HAL_PCD_EP_DB_Transmit+0x350>
 80037b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037b6:	881b      	ldrh	r3, [r3, #0]
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037c6:	801a      	strh	r2, [r3, #0]
 80037c8:	e035      	b.n	8003836 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80037ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037ce:	085b      	lsrs	r3, r3, #1
 80037d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d002      	beq.n	80037e4 <HAL_PCD_EP_DB_Transmit+0x36a>
 80037de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037e0:	3301      	adds	r3, #1
 80037e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037e6:	881b      	ldrh	r3, [r3, #0]
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	029b      	lsls	r3, r3, #10
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	4313      	orrs	r3, r2
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037f8:	801a      	strh	r2, [r3, #0]
 80037fa:	e01c      	b.n	8003836 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	785b      	ldrb	r3, [r3, #1]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d118      	bne.n	8003836 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	647b      	str	r3, [r7, #68]	@ 0x44
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003812:	b29b      	uxth	r3, r3
 8003814:	461a      	mov	r2, r3
 8003816:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003818:	4413      	add	r3, r2
 800381a:	647b      	str	r3, [r7, #68]	@ 0x44
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	011a      	lsls	r2, r3, #4
 8003822:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003824:	4413      	add	r3, r2
 8003826:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800382a:	643b      	str	r3, [r7, #64]	@ 0x40
 800382c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003830:	b29a      	uxth	r2, r3
 8003832:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003834:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6818      	ldr	r0, [r3, #0]
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	6959      	ldr	r1, [r3, #20]
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	891a      	ldrh	r2, [r3, #8]
 8003842:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003846:	b29b      	uxth	r3, r3
 8003848:	f003 fa07 	bl	8006c5a <USB_WritePMA>
 800384c:	e1e2      	b.n	8003c14 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003856:	b29b      	uxth	r3, r3
 8003858:	461a      	mov	r2, r3
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	4413      	add	r3, r2
 8003862:	3306      	adds	r3, #6
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	6812      	ldr	r2, [r2, #0]
 800386a:	4413      	add	r3, r2
 800386c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003870:	881b      	ldrh	r3, [r3, #0]
 8003872:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003876:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	699a      	ldr	r2, [r3, #24]
 800387e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003882:	429a      	cmp	r2, r3
 8003884:	d307      	bcc.n	8003896 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	699a      	ldr	r2, [r3, #24]
 800388a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800388e:	1ad2      	subs	r2, r2, r3
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	619a      	str	r2, [r3, #24]
 8003894:	e002      	b.n	800389c <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	2200      	movs	r2, #0
 800389a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f040 80c0 	bne.w	8003a26 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	785b      	ldrb	r3, [r3, #1]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d126      	bne.n	80038fc <HAL_PCD_EP_DB_Transmit+0x482>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038bc:	b29b      	uxth	r3, r3
 80038be:	461a      	mov	r2, r3
 80038c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80038c2:	4413      	add	r3, r2
 80038c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	011a      	lsls	r2, r3, #4
 80038cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80038ce:	4413      	add	r3, r2
 80038d0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80038d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80038d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038d8:	881b      	ldrh	r3, [r3, #0]
 80038da:	b29b      	uxth	r3, r3
 80038dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038e4:	801a      	strh	r2, [r3, #0]
 80038e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038e8:	881b      	ldrh	r3, [r3, #0]
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038f8:	801a      	strh	r2, [r3, #0]
 80038fa:	e01a      	b.n	8003932 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	785b      	ldrb	r3, [r3, #1]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d116      	bne.n	8003932 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	667b      	str	r3, [r7, #100]	@ 0x64
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003912:	b29b      	uxth	r3, r3
 8003914:	461a      	mov	r2, r3
 8003916:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003918:	4413      	add	r3, r2
 800391a:	667b      	str	r3, [r7, #100]	@ 0x64
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	011a      	lsls	r2, r3, #4
 8003922:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003924:	4413      	add	r3, r2
 8003926:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800392a:	663b      	str	r3, [r7, #96]	@ 0x60
 800392c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800392e:	2200      	movs	r2, #0
 8003930:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	677b      	str	r3, [r7, #116]	@ 0x74
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	785b      	ldrb	r3, [r3, #1]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d12b      	bne.n	8003998 <HAL_PCD_EP_DB_Transmit+0x51e>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800394e:	b29b      	uxth	r3, r3
 8003950:	461a      	mov	r2, r3
 8003952:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003954:	4413      	add	r3, r2
 8003956:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	011a      	lsls	r2, r3, #4
 800395e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003960:	4413      	add	r3, r2
 8003962:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003966:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800396a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800396e:	881b      	ldrh	r3, [r3, #0]
 8003970:	b29b      	uxth	r3, r3
 8003972:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003976:	b29a      	uxth	r2, r3
 8003978:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800397c:	801a      	strh	r2, [r3, #0]
 800397e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003982:	881b      	ldrh	r3, [r3, #0]
 8003984:	b29b      	uxth	r3, r3
 8003986:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800398a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800398e:	b29a      	uxth	r2, r3
 8003990:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003994:	801a      	strh	r2, [r3, #0]
 8003996:	e017      	b.n	80039c8 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	785b      	ldrb	r3, [r3, #1]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d113      	bne.n	80039c8 <HAL_PCD_EP_DB_Transmit+0x54e>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	461a      	mov	r2, r3
 80039ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039ae:	4413      	add	r3, r2
 80039b0:	677b      	str	r3, [r7, #116]	@ 0x74
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	011a      	lsls	r2, r3, #4
 80039b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039ba:	4413      	add	r3, r2
 80039bc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80039c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80039c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039c4:	2200      	movs	r2, #0
 80039c6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	4619      	mov	r1, r3
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	f004 ff89 	bl	80088e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80039d4:	88fb      	ldrh	r3, [r7, #6]
 80039d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f040 811a 	bne.w	8003c14 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	461a      	mov	r2, r3
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4413      	add	r3, r2
 80039ee:	881b      	ldrh	r3, [r3, #0]
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039fa:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	461a      	mov	r2, r3
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	441a      	add	r2, r3
 8003a0c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003a10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	8013      	strh	r3, [r2, #0]
 8003a24:	e0f6      	b.n	8003c14 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003a26:	88fb      	ldrh	r3, [r7, #6]
 8003a28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d121      	bne.n	8003a74 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	461a      	mov	r2, r3
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	4413      	add	r3, r2
 8003a3e:	881b      	ldrh	r3, [r3, #0]
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a4a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	461a      	mov	r2, r3
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	441a      	add	r2, r3
 8003a5c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003a60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a68:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	f040 80ca 	bne.w	8003c14 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	695a      	ldr	r2, [r3, #20]
 8003a84:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003a88:	441a      	add	r2, r3
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	69da      	ldr	r2, [r3, #28]
 8003a92:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003a96:	441a      	add	r2, r3
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	6a1a      	ldr	r2, [r3, #32]
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d30b      	bcc.n	8003ac0 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	6a1a      	ldr	r2, [r3, #32]
 8003ab4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ab8:	1ad2      	subs	r2, r2, r3
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	621a      	str	r2, [r3, #32]
 8003abe:	e017      	b.n	8003af0 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d108      	bne.n	8003ada <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003ac8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003acc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003ad8:	e00a      	b.n	8003af0 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	657b      	str	r3, [r7, #84]	@ 0x54
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	785b      	ldrb	r3, [r3, #1]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d165      	bne.n	8003bca <HAL_PCD_EP_DB_Transmit+0x750>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	461a      	mov	r2, r3
 8003b10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b12:	4413      	add	r3, r2
 8003b14:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	011a      	lsls	r2, r3, #4
 8003b1c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b1e:	4413      	add	r3, r2
 8003b20:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003b24:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b28:	881b      	ldrh	r3, [r3, #0]
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b34:	801a      	strh	r2, [r3, #0]
 8003b36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b3a:	2b3e      	cmp	r3, #62	@ 0x3e
 8003b3c:	d91d      	bls.n	8003b7a <HAL_PCD_EP_DB_Transmit+0x700>
 8003b3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b42:	095b      	lsrs	r3, r3, #5
 8003b44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b4a:	f003 031f 	and.w	r3, r3, #31
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d102      	bne.n	8003b58 <HAL_PCD_EP_DB_Transmit+0x6de>
 8003b52:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b54:	3b01      	subs	r3, #1
 8003b56:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b5a:	881b      	ldrh	r3, [r3, #0]
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	029b      	lsls	r3, r3, #10
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	4313      	orrs	r3, r2
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b76:	801a      	strh	r2, [r3, #0]
 8003b78:	e041      	b.n	8003bfe <HAL_PCD_EP_DB_Transmit+0x784>
 8003b7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10a      	bne.n	8003b98 <HAL_PCD_EP_DB_Transmit+0x71e>
 8003b82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b84:	881b      	ldrh	r3, [r3, #0]
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b90:	b29a      	uxth	r2, r3
 8003b92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b94:	801a      	strh	r2, [r3, #0]
 8003b96:	e032      	b.n	8003bfe <HAL_PCD_EP_DB_Transmit+0x784>
 8003b98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b9c:	085b      	lsrs	r3, r3, #1
 8003b9e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ba0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d002      	beq.n	8003bb2 <HAL_PCD_EP_DB_Transmit+0x738>
 8003bac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003bae:	3301      	adds	r3, #1
 8003bb0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003bb2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bb4:	881b      	ldrh	r3, [r3, #0]
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	029b      	lsls	r3, r3, #10
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bc6:	801a      	strh	r2, [r3, #0]
 8003bc8:	e019      	b.n	8003bfe <HAL_PCD_EP_DB_Transmit+0x784>
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	785b      	ldrb	r3, [r3, #1]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d115      	bne.n	8003bfe <HAL_PCD_EP_DB_Transmit+0x784>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	461a      	mov	r2, r3
 8003bde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003be0:	4413      	add	r3, r2
 8003be2:	657b      	str	r3, [r7, #84]	@ 0x54
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	011a      	lsls	r2, r3, #4
 8003bea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bec:	4413      	add	r3, r2
 8003bee:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003bf2:	653b      	str	r3, [r7, #80]	@ 0x50
 8003bf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003bf8:	b29a      	uxth	r2, r3
 8003bfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bfc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6818      	ldr	r0, [r3, #0]
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	6959      	ldr	r1, [r3, #20]
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	895a      	ldrh	r2, [r3, #10]
 8003c0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	f003 f823 	bl	8006c5a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4413      	add	r3, r2
 8003c22:	881b      	ldrh	r3, [r3, #0]
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c2e:	82bb      	strh	r3, [r7, #20]
 8003c30:	8abb      	ldrh	r3, [r7, #20]
 8003c32:	f083 0310 	eor.w	r3, r3, #16
 8003c36:	82bb      	strh	r3, [r7, #20]
 8003c38:	8abb      	ldrh	r3, [r7, #20]
 8003c3a:	f083 0320 	eor.w	r3, r3, #32
 8003c3e:	82bb      	strh	r3, [r7, #20]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	461a      	mov	r2, r3
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	441a      	add	r2, r3
 8003c4e:	8abb      	ldrh	r3, [r7, #20]
 8003c50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3790      	adds	r7, #144	@ 0x90
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003c6e:	b480      	push	{r7}
 8003c70:	b087      	sub	sp, #28
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	60f8      	str	r0, [r7, #12]
 8003c76:	607b      	str	r3, [r7, #4]
 8003c78:	460b      	mov	r3, r1
 8003c7a:	817b      	strh	r3, [r7, #10]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003c80:	897b      	ldrh	r3, [r7, #10]
 8003c82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00b      	beq.n	8003ca4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c8c:	897b      	ldrh	r3, [r7, #10]
 8003c8e:	f003 0207 	and.w	r2, r3, #7
 8003c92:	4613      	mov	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4413      	add	r3, r2
 8003c98:	00db      	lsls	r3, r3, #3
 8003c9a:	3310      	adds	r3, #16
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	617b      	str	r3, [r7, #20]
 8003ca2:	e009      	b.n	8003cb8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003ca4:	897a      	ldrh	r2, [r7, #10]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	4413      	add	r3, r2
 8003cac:	00db      	lsls	r3, r3, #3
 8003cae:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003cb8:	893b      	ldrh	r3, [r7, #8]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d107      	bne.n	8003cce <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	80da      	strh	r2, [r3, #6]
 8003ccc:	e00b      	b.n	8003ce6 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	0c1b      	lsrs	r3, r3, #16
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	371c      	adds	r7, #28
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bc80      	pop	{r7}
 8003cf0:	4770      	bx	lr
	...

08003cf4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e272      	b.n	80041ec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f000 8087 	beq.w	8003e22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d14:	4b92      	ldr	r3, [pc, #584]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f003 030c 	and.w	r3, r3, #12
 8003d1c:	2b04      	cmp	r3, #4
 8003d1e:	d00c      	beq.n	8003d3a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d20:	4b8f      	ldr	r3, [pc, #572]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f003 030c 	and.w	r3, r3, #12
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	d112      	bne.n	8003d52 <HAL_RCC_OscConfig+0x5e>
 8003d2c:	4b8c      	ldr	r3, [pc, #560]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d38:	d10b      	bne.n	8003d52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d3a:	4b89      	ldr	r3, [pc, #548]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d06c      	beq.n	8003e20 <HAL_RCC_OscConfig+0x12c>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d168      	bne.n	8003e20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e24c      	b.n	80041ec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d5a:	d106      	bne.n	8003d6a <HAL_RCC_OscConfig+0x76>
 8003d5c:	4b80      	ldr	r3, [pc, #512]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a7f      	ldr	r2, [pc, #508]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003d62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d66:	6013      	str	r3, [r2, #0]
 8003d68:	e02e      	b.n	8003dc8 <HAL_RCC_OscConfig+0xd4>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10c      	bne.n	8003d8c <HAL_RCC_OscConfig+0x98>
 8003d72:	4b7b      	ldr	r3, [pc, #492]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a7a      	ldr	r2, [pc, #488]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003d78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d7c:	6013      	str	r3, [r2, #0]
 8003d7e:	4b78      	ldr	r3, [pc, #480]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a77      	ldr	r2, [pc, #476]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003d84:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d88:	6013      	str	r3, [r2, #0]
 8003d8a:	e01d      	b.n	8003dc8 <HAL_RCC_OscConfig+0xd4>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d94:	d10c      	bne.n	8003db0 <HAL_RCC_OscConfig+0xbc>
 8003d96:	4b72      	ldr	r3, [pc, #456]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a71      	ldr	r2, [pc, #452]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003d9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003da0:	6013      	str	r3, [r2, #0]
 8003da2:	4b6f      	ldr	r3, [pc, #444]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a6e      	ldr	r2, [pc, #440]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003da8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	e00b      	b.n	8003dc8 <HAL_RCC_OscConfig+0xd4>
 8003db0:	4b6b      	ldr	r3, [pc, #428]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a6a      	ldr	r2, [pc, #424]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003db6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dba:	6013      	str	r3, [r2, #0]
 8003dbc:	4b68      	ldr	r3, [pc, #416]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a67      	ldr	r2, [pc, #412]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003dc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dc6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d013      	beq.n	8003df8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd0:	f7fc fe06 	bl	80009e0 <HAL_GetTick>
 8003dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dd6:	e008      	b.n	8003dea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dd8:	f7fc fe02 	bl	80009e0 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b64      	cmp	r3, #100	@ 0x64
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e200      	b.n	80041ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dea:	4b5d      	ldr	r3, [pc, #372]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d0f0      	beq.n	8003dd8 <HAL_RCC_OscConfig+0xe4>
 8003df6:	e014      	b.n	8003e22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df8:	f7fc fdf2 	bl	80009e0 <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e00:	f7fc fdee 	bl	80009e0 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b64      	cmp	r3, #100	@ 0x64
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e1ec      	b.n	80041ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e12:	4b53      	ldr	r3, [pc, #332]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1f0      	bne.n	8003e00 <HAL_RCC_OscConfig+0x10c>
 8003e1e:	e000      	b.n	8003e22 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d063      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e2e:	4b4c      	ldr	r3, [pc, #304]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f003 030c 	and.w	r3, r3, #12
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00b      	beq.n	8003e52 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e3a:	4b49      	ldr	r3, [pc, #292]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f003 030c 	and.w	r3, r3, #12
 8003e42:	2b08      	cmp	r3, #8
 8003e44:	d11c      	bne.n	8003e80 <HAL_RCC_OscConfig+0x18c>
 8003e46:	4b46      	ldr	r3, [pc, #280]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d116      	bne.n	8003e80 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e52:	4b43      	ldr	r3, [pc, #268]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d005      	beq.n	8003e6a <HAL_RCC_OscConfig+0x176>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d001      	beq.n	8003e6a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e1c0      	b.n	80041ec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e6a:	4b3d      	ldr	r3, [pc, #244]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	4939      	ldr	r1, [pc, #228]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e7e:	e03a      	b.n	8003ef6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d020      	beq.n	8003eca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e88:	4b36      	ldr	r3, [pc, #216]	@ (8003f64 <HAL_RCC_OscConfig+0x270>)
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e8e:	f7fc fda7 	bl	80009e0 <HAL_GetTick>
 8003e92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e94:	e008      	b.n	8003ea8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e96:	f7fc fda3 	bl	80009e0 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e1a1      	b.n	80041ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ea8:	4b2d      	ldr	r3, [pc, #180]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d0f0      	beq.n	8003e96 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eb4:	4b2a      	ldr	r3, [pc, #168]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	4927      	ldr	r1, [pc, #156]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	600b      	str	r3, [r1, #0]
 8003ec8:	e015      	b.n	8003ef6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eca:	4b26      	ldr	r3, [pc, #152]	@ (8003f64 <HAL_RCC_OscConfig+0x270>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed0:	f7fc fd86 	bl	80009e0 <HAL_GetTick>
 8003ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ed6:	e008      	b.n	8003eea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ed8:	f7fc fd82 	bl	80009e0 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e180      	b.n	80041ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eea:	4b1d      	ldr	r3, [pc, #116]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1f0      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0308 	and.w	r3, r3, #8
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d03a      	beq.n	8003f78 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d019      	beq.n	8003f3e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f0a:	4b17      	ldr	r3, [pc, #92]	@ (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f10:	f7fc fd66 	bl	80009e0 <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f16:	e008      	b.n	8003f2a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f18:	f7fc fd62 	bl	80009e0 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e160      	b.n	80041ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d0f0      	beq.n	8003f18 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003f36:	2001      	movs	r0, #1
 8003f38:	f000 faba 	bl	80044b0 <RCC_Delay>
 8003f3c:	e01c      	b.n	8003f78 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f44:	f7fc fd4c 	bl	80009e0 <HAL_GetTick>
 8003f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f4a:	e00f      	b.n	8003f6c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f4c:	f7fc fd48 	bl	80009e0 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d908      	bls.n	8003f6c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e146      	b.n	80041ec <HAL_RCC_OscConfig+0x4f8>
 8003f5e:	bf00      	nop
 8003f60:	40021000 	.word	0x40021000
 8003f64:	42420000 	.word	0x42420000
 8003f68:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f6c:	4b92      	ldr	r3, [pc, #584]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1e9      	bne.n	8003f4c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f000 80a6 	beq.w	80040d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f86:	2300      	movs	r3, #0
 8003f88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f8a:	4b8b      	ldr	r3, [pc, #556]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8003f8c:	69db      	ldr	r3, [r3, #28]
 8003f8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10d      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f96:	4b88      	ldr	r3, [pc, #544]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	4a87      	ldr	r2, [pc, #540]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8003f9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fa0:	61d3      	str	r3, [r2, #28]
 8003fa2:	4b85      	ldr	r3, [pc, #532]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003faa:	60bb      	str	r3, [r7, #8]
 8003fac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb2:	4b82      	ldr	r3, [pc, #520]	@ (80041bc <HAL_RCC_OscConfig+0x4c8>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d118      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fbe:	4b7f      	ldr	r3, [pc, #508]	@ (80041bc <HAL_RCC_OscConfig+0x4c8>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a7e      	ldr	r2, [pc, #504]	@ (80041bc <HAL_RCC_OscConfig+0x4c8>)
 8003fc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fca:	f7fc fd09 	bl	80009e0 <HAL_GetTick>
 8003fce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd0:	e008      	b.n	8003fe4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fd2:	f7fc fd05 	bl	80009e0 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b64      	cmp	r3, #100	@ 0x64
 8003fde:	d901      	bls.n	8003fe4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e103      	b.n	80041ec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fe4:	4b75      	ldr	r3, [pc, #468]	@ (80041bc <HAL_RCC_OscConfig+0x4c8>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d0f0      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d106      	bne.n	8004006 <HAL_RCC_OscConfig+0x312>
 8003ff8:	4b6f      	ldr	r3, [pc, #444]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
 8003ffc:	4a6e      	ldr	r2, [pc, #440]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8003ffe:	f043 0301 	orr.w	r3, r3, #1
 8004002:	6213      	str	r3, [r2, #32]
 8004004:	e02d      	b.n	8004062 <HAL_RCC_OscConfig+0x36e>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10c      	bne.n	8004028 <HAL_RCC_OscConfig+0x334>
 800400e:	4b6a      	ldr	r3, [pc, #424]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	4a69      	ldr	r2, [pc, #420]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8004014:	f023 0301 	bic.w	r3, r3, #1
 8004018:	6213      	str	r3, [r2, #32]
 800401a:	4b67      	ldr	r3, [pc, #412]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	4a66      	ldr	r2, [pc, #408]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8004020:	f023 0304 	bic.w	r3, r3, #4
 8004024:	6213      	str	r3, [r2, #32]
 8004026:	e01c      	b.n	8004062 <HAL_RCC_OscConfig+0x36e>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	2b05      	cmp	r3, #5
 800402e:	d10c      	bne.n	800404a <HAL_RCC_OscConfig+0x356>
 8004030:	4b61      	ldr	r3, [pc, #388]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8004032:	6a1b      	ldr	r3, [r3, #32]
 8004034:	4a60      	ldr	r2, [pc, #384]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8004036:	f043 0304 	orr.w	r3, r3, #4
 800403a:	6213      	str	r3, [r2, #32]
 800403c:	4b5e      	ldr	r3, [pc, #376]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	4a5d      	ldr	r2, [pc, #372]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8004042:	f043 0301 	orr.w	r3, r3, #1
 8004046:	6213      	str	r3, [r2, #32]
 8004048:	e00b      	b.n	8004062 <HAL_RCC_OscConfig+0x36e>
 800404a:	4b5b      	ldr	r3, [pc, #364]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	4a5a      	ldr	r2, [pc, #360]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8004050:	f023 0301 	bic.w	r3, r3, #1
 8004054:	6213      	str	r3, [r2, #32]
 8004056:	4b58      	ldr	r3, [pc, #352]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	4a57      	ldr	r2, [pc, #348]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 800405c:	f023 0304 	bic.w	r3, r3, #4
 8004060:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d015      	beq.n	8004096 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800406a:	f7fc fcb9 	bl	80009e0 <HAL_GetTick>
 800406e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004070:	e00a      	b.n	8004088 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004072:	f7fc fcb5 	bl	80009e0 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004080:	4293      	cmp	r3, r2
 8004082:	d901      	bls.n	8004088 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e0b1      	b.n	80041ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004088:	4b4b      	ldr	r3, [pc, #300]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 800408a:	6a1b      	ldr	r3, [r3, #32]
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d0ee      	beq.n	8004072 <HAL_RCC_OscConfig+0x37e>
 8004094:	e014      	b.n	80040c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004096:	f7fc fca3 	bl	80009e0 <HAL_GetTick>
 800409a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800409c:	e00a      	b.n	80040b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800409e:	f7fc fc9f 	bl	80009e0 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d901      	bls.n	80040b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e09b      	b.n	80041ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040b4:	4b40      	ldr	r3, [pc, #256]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1ee      	bne.n	800409e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80040c0:	7dfb      	ldrb	r3, [r7, #23]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d105      	bne.n	80040d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040c6:	4b3c      	ldr	r3, [pc, #240]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	4a3b      	ldr	r2, [pc, #236]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 80040cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f000 8087 	beq.w	80041ea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040dc:	4b36      	ldr	r3, [pc, #216]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f003 030c 	and.w	r3, r3, #12
 80040e4:	2b08      	cmp	r3, #8
 80040e6:	d061      	beq.n	80041ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	69db      	ldr	r3, [r3, #28]
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d146      	bne.n	800417e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040f0:	4b33      	ldr	r3, [pc, #204]	@ (80041c0 <HAL_RCC_OscConfig+0x4cc>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f6:	f7fc fc73 	bl	80009e0 <HAL_GetTick>
 80040fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040fc:	e008      	b.n	8004110 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040fe:	f7fc fc6f 	bl	80009e0 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d901      	bls.n	8004110 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e06d      	b.n	80041ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004110:	4b29      	ldr	r3, [pc, #164]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1f0      	bne.n	80040fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004124:	d108      	bne.n	8004138 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004126:	4b24      	ldr	r3, [pc, #144]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	4921      	ldr	r1, [pc, #132]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8004134:	4313      	orrs	r3, r2
 8004136:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004138:	4b1f      	ldr	r3, [pc, #124]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a19      	ldr	r1, [r3, #32]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004148:	430b      	orrs	r3, r1
 800414a:	491b      	ldr	r1, [pc, #108]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 800414c:	4313      	orrs	r3, r2
 800414e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004150:	4b1b      	ldr	r3, [pc, #108]	@ (80041c0 <HAL_RCC_OscConfig+0x4cc>)
 8004152:	2201      	movs	r2, #1
 8004154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004156:	f7fc fc43 	bl	80009e0 <HAL_GetTick>
 800415a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800415c:	e008      	b.n	8004170 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800415e:	f7fc fc3f 	bl	80009e0 <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d901      	bls.n	8004170 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e03d      	b.n	80041ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004170:	4b11      	ldr	r3, [pc, #68]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d0f0      	beq.n	800415e <HAL_RCC_OscConfig+0x46a>
 800417c:	e035      	b.n	80041ea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800417e:	4b10      	ldr	r3, [pc, #64]	@ (80041c0 <HAL_RCC_OscConfig+0x4cc>)
 8004180:	2200      	movs	r2, #0
 8004182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004184:	f7fc fc2c 	bl	80009e0 <HAL_GetTick>
 8004188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800418c:	f7fc fc28 	bl	80009e0 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b02      	cmp	r3, #2
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e026      	b.n	80041ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800419e:	4b06      	ldr	r3, [pc, #24]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1f0      	bne.n	800418c <HAL_RCC_OscConfig+0x498>
 80041aa:	e01e      	b.n	80041ea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	69db      	ldr	r3, [r3, #28]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d107      	bne.n	80041c4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e019      	b.n	80041ec <HAL_RCC_OscConfig+0x4f8>
 80041b8:	40021000 	.word	0x40021000
 80041bc:	40007000 	.word	0x40007000
 80041c0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80041c4:	4b0b      	ldr	r3, [pc, #44]	@ (80041f4 <HAL_RCC_OscConfig+0x500>)
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d106      	bne.n	80041e6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d001      	beq.n	80041ea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e000      	b.n	80041ec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3718      	adds	r7, #24
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	40021000 	.word	0x40021000

080041f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e0d0      	b.n	80043ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800420c:	4b6a      	ldr	r3, [pc, #424]	@ (80043b8 <HAL_RCC_ClockConfig+0x1c0>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0307 	and.w	r3, r3, #7
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	429a      	cmp	r2, r3
 8004218:	d910      	bls.n	800423c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800421a:	4b67      	ldr	r3, [pc, #412]	@ (80043b8 <HAL_RCC_ClockConfig+0x1c0>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f023 0207 	bic.w	r2, r3, #7
 8004222:	4965      	ldr	r1, [pc, #404]	@ (80043b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	4313      	orrs	r3, r2
 8004228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800422a:	4b63      	ldr	r3, [pc, #396]	@ (80043b8 <HAL_RCC_ClockConfig+0x1c0>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0307 	and.w	r3, r3, #7
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	429a      	cmp	r2, r3
 8004236:	d001      	beq.n	800423c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e0b8      	b.n	80043ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d020      	beq.n	800428a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0304 	and.w	r3, r3, #4
 8004250:	2b00      	cmp	r3, #0
 8004252:	d005      	beq.n	8004260 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004254:	4b59      	ldr	r3, [pc, #356]	@ (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	4a58      	ldr	r2, [pc, #352]	@ (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 800425a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800425e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0308 	and.w	r3, r3, #8
 8004268:	2b00      	cmp	r3, #0
 800426a:	d005      	beq.n	8004278 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800426c:	4b53      	ldr	r3, [pc, #332]	@ (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	4a52      	ldr	r2, [pc, #328]	@ (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 8004272:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004276:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004278:	4b50      	ldr	r3, [pc, #320]	@ (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	494d      	ldr	r1, [pc, #308]	@ (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 8004286:	4313      	orrs	r3, r2
 8004288:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	2b00      	cmp	r3, #0
 8004294:	d040      	beq.n	8004318 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d107      	bne.n	80042ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800429e:	4b47      	ldr	r3, [pc, #284]	@ (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d115      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e07f      	b.n	80043ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d107      	bne.n	80042c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042b6:	4b41      	ldr	r3, [pc, #260]	@ (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d109      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e073      	b.n	80043ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042c6:	4b3d      	ldr	r3, [pc, #244]	@ (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e06b      	b.n	80043ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042d6:	4b39      	ldr	r3, [pc, #228]	@ (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f023 0203 	bic.w	r2, r3, #3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	4936      	ldr	r1, [pc, #216]	@ (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042e8:	f7fc fb7a 	bl	80009e0 <HAL_GetTick>
 80042ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ee:	e00a      	b.n	8004306 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042f0:	f7fc fb76 	bl	80009e0 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042fe:	4293      	cmp	r3, r2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e053      	b.n	80043ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004306:	4b2d      	ldr	r3, [pc, #180]	@ (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f003 020c 	and.w	r2, r3, #12
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	429a      	cmp	r2, r3
 8004316:	d1eb      	bne.n	80042f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004318:	4b27      	ldr	r3, [pc, #156]	@ (80043b8 <HAL_RCC_ClockConfig+0x1c0>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	683a      	ldr	r2, [r7, #0]
 8004322:	429a      	cmp	r2, r3
 8004324:	d210      	bcs.n	8004348 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004326:	4b24      	ldr	r3, [pc, #144]	@ (80043b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f023 0207 	bic.w	r2, r3, #7
 800432e:	4922      	ldr	r1, [pc, #136]	@ (80043b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	4313      	orrs	r3, r2
 8004334:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004336:	4b20      	ldr	r3, [pc, #128]	@ (80043b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0307 	and.w	r3, r3, #7
 800433e:	683a      	ldr	r2, [r7, #0]
 8004340:	429a      	cmp	r2, r3
 8004342:	d001      	beq.n	8004348 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e032      	b.n	80043ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0304 	and.w	r3, r3, #4
 8004350:	2b00      	cmp	r3, #0
 8004352:	d008      	beq.n	8004366 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004354:	4b19      	ldr	r3, [pc, #100]	@ (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	4916      	ldr	r1, [pc, #88]	@ (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 8004362:	4313      	orrs	r3, r2
 8004364:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0308 	and.w	r3, r3, #8
 800436e:	2b00      	cmp	r3, #0
 8004370:	d009      	beq.n	8004386 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004372:	4b12      	ldr	r3, [pc, #72]	@ (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	490e      	ldr	r1, [pc, #56]	@ (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 8004382:	4313      	orrs	r3, r2
 8004384:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004386:	f000 f821 	bl	80043cc <HAL_RCC_GetSysClockFreq>
 800438a:	4602      	mov	r2, r0
 800438c:	4b0b      	ldr	r3, [pc, #44]	@ (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	091b      	lsrs	r3, r3, #4
 8004392:	f003 030f 	and.w	r3, r3, #15
 8004396:	490a      	ldr	r1, [pc, #40]	@ (80043c0 <HAL_RCC_ClockConfig+0x1c8>)
 8004398:	5ccb      	ldrb	r3, [r1, r3]
 800439a:	fa22 f303 	lsr.w	r3, r2, r3
 800439e:	4a09      	ldr	r2, [pc, #36]	@ (80043c4 <HAL_RCC_ClockConfig+0x1cc>)
 80043a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80043a2:	4b09      	ldr	r3, [pc, #36]	@ (80043c8 <HAL_RCC_ClockConfig+0x1d0>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7fc fad8 	bl	800095c <HAL_InitTick>

  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	40022000 	.word	0x40022000
 80043bc:	40021000 	.word	0x40021000
 80043c0:	08009830 	.word	0x08009830
 80043c4:	20000004 	.word	0x20000004
 80043c8:	20000008 	.word	0x20000008

080043cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b087      	sub	sp, #28
 80043d0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043d2:	2300      	movs	r3, #0
 80043d4:	60fb      	str	r3, [r7, #12]
 80043d6:	2300      	movs	r3, #0
 80043d8:	60bb      	str	r3, [r7, #8]
 80043da:	2300      	movs	r3, #0
 80043dc:	617b      	str	r3, [r7, #20]
 80043de:	2300      	movs	r3, #0
 80043e0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80043e2:	2300      	movs	r3, #0
 80043e4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80043e6:	4b1e      	ldr	r3, [pc, #120]	@ (8004460 <HAL_RCC_GetSysClockFreq+0x94>)
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f003 030c 	and.w	r3, r3, #12
 80043f2:	2b04      	cmp	r3, #4
 80043f4:	d002      	beq.n	80043fc <HAL_RCC_GetSysClockFreq+0x30>
 80043f6:	2b08      	cmp	r3, #8
 80043f8:	d003      	beq.n	8004402 <HAL_RCC_GetSysClockFreq+0x36>
 80043fa:	e027      	b.n	800444c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043fc:	4b19      	ldr	r3, [pc, #100]	@ (8004464 <HAL_RCC_GetSysClockFreq+0x98>)
 80043fe:	613b      	str	r3, [r7, #16]
      break;
 8004400:	e027      	b.n	8004452 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	0c9b      	lsrs	r3, r3, #18
 8004406:	f003 030f 	and.w	r3, r3, #15
 800440a:	4a17      	ldr	r2, [pc, #92]	@ (8004468 <HAL_RCC_GetSysClockFreq+0x9c>)
 800440c:	5cd3      	ldrb	r3, [r2, r3]
 800440e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d010      	beq.n	800443c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800441a:	4b11      	ldr	r3, [pc, #68]	@ (8004460 <HAL_RCC_GetSysClockFreq+0x94>)
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	0c5b      	lsrs	r3, r3, #17
 8004420:	f003 0301 	and.w	r3, r3, #1
 8004424:	4a11      	ldr	r2, [pc, #68]	@ (800446c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004426:	5cd3      	ldrb	r3, [r2, r3]
 8004428:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a0d      	ldr	r2, [pc, #52]	@ (8004464 <HAL_RCC_GetSysClockFreq+0x98>)
 800442e:	fb03 f202 	mul.w	r2, r3, r2
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	fbb2 f3f3 	udiv	r3, r2, r3
 8004438:	617b      	str	r3, [r7, #20]
 800443a:	e004      	b.n	8004446 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a0c      	ldr	r2, [pc, #48]	@ (8004470 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004440:	fb02 f303 	mul.w	r3, r2, r3
 8004444:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	613b      	str	r3, [r7, #16]
      break;
 800444a:	e002      	b.n	8004452 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800444c:	4b05      	ldr	r3, [pc, #20]	@ (8004464 <HAL_RCC_GetSysClockFreq+0x98>)
 800444e:	613b      	str	r3, [r7, #16]
      break;
 8004450:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004452:	693b      	ldr	r3, [r7, #16]
}
 8004454:	4618      	mov	r0, r3
 8004456:	371c      	adds	r7, #28
 8004458:	46bd      	mov	sp, r7
 800445a:	bc80      	pop	{r7}
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	40021000 	.word	0x40021000
 8004464:	007a1200 	.word	0x007a1200
 8004468:	08009848 	.word	0x08009848
 800446c:	08009858 	.word	0x08009858
 8004470:	003d0900 	.word	0x003d0900

08004474 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004474:	b480      	push	{r7}
 8004476:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004478:	4b02      	ldr	r3, [pc, #8]	@ (8004484 <HAL_RCC_GetHCLKFreq+0x10>)
 800447a:	681b      	ldr	r3, [r3, #0]
}
 800447c:	4618      	mov	r0, r3
 800447e:	46bd      	mov	sp, r7
 8004480:	bc80      	pop	{r7}
 8004482:	4770      	bx	lr
 8004484:	20000004 	.word	0x20000004

08004488 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800448c:	f7ff fff2 	bl	8004474 <HAL_RCC_GetHCLKFreq>
 8004490:	4602      	mov	r2, r0
 8004492:	4b05      	ldr	r3, [pc, #20]	@ (80044a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	0a1b      	lsrs	r3, r3, #8
 8004498:	f003 0307 	and.w	r3, r3, #7
 800449c:	4903      	ldr	r1, [pc, #12]	@ (80044ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800449e:	5ccb      	ldrb	r3, [r1, r3]
 80044a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	40021000 	.word	0x40021000
 80044ac:	08009840 	.word	0x08009840

080044b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80044b8:	4b0a      	ldr	r3, [pc, #40]	@ (80044e4 <RCC_Delay+0x34>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a0a      	ldr	r2, [pc, #40]	@ (80044e8 <RCC_Delay+0x38>)
 80044be:	fba2 2303 	umull	r2, r3, r2, r3
 80044c2:	0a5b      	lsrs	r3, r3, #9
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	fb02 f303 	mul.w	r3, r2, r3
 80044ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80044cc:	bf00      	nop
  }
  while (Delay --);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	1e5a      	subs	r2, r3, #1
 80044d2:	60fa      	str	r2, [r7, #12]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1f9      	bne.n	80044cc <RCC_Delay+0x1c>
}
 80044d8:	bf00      	nop
 80044da:	bf00      	nop
 80044dc:	3714      	adds	r7, #20
 80044de:	46bd      	mov	sp, r7
 80044e0:	bc80      	pop	{r7}
 80044e2:	4770      	bx	lr
 80044e4:	20000004 	.word	0x20000004
 80044e8:	10624dd3 	.word	0x10624dd3

080044ec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b086      	sub	sp, #24
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80044f4:	2300      	movs	r3, #0
 80044f6:	613b      	str	r3, [r7, #16]
 80044f8:	2300      	movs	r3, #0
 80044fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0301 	and.w	r3, r3, #1
 8004504:	2b00      	cmp	r3, #0
 8004506:	d07d      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004508:	2300      	movs	r3, #0
 800450a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800450c:	4b4f      	ldr	r3, [pc, #316]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800450e:	69db      	ldr	r3, [r3, #28]
 8004510:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10d      	bne.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004518:	4b4c      	ldr	r3, [pc, #304]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800451a:	69db      	ldr	r3, [r3, #28]
 800451c:	4a4b      	ldr	r2, [pc, #300]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800451e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004522:	61d3      	str	r3, [r2, #28]
 8004524:	4b49      	ldr	r3, [pc, #292]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004526:	69db      	ldr	r3, [r3, #28]
 8004528:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800452c:	60bb      	str	r3, [r7, #8]
 800452e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004530:	2301      	movs	r3, #1
 8004532:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004534:	4b46      	ldr	r3, [pc, #280]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800453c:	2b00      	cmp	r3, #0
 800453e:	d118      	bne.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004540:	4b43      	ldr	r3, [pc, #268]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a42      	ldr	r2, [pc, #264]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004546:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800454a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800454c:	f7fc fa48 	bl	80009e0 <HAL_GetTick>
 8004550:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004552:	e008      	b.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004554:	f7fc fa44 	bl	80009e0 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b64      	cmp	r3, #100	@ 0x64
 8004560:	d901      	bls.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e06d      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004566:	4b3a      	ldr	r3, [pc, #232]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800456e:	2b00      	cmp	r3, #0
 8004570:	d0f0      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004572:	4b36      	ldr	r3, [pc, #216]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800457a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d02e      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	429a      	cmp	r2, r3
 800458e:	d027      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004590:	4b2e      	ldr	r3, [pc, #184]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004598:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800459a:	4b2e      	ldr	r3, [pc, #184]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800459c:	2201      	movs	r2, #1
 800459e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045a0:	4b2c      	ldr	r3, [pc, #176]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80045a6:	4a29      	ldr	r2, [pc, #164]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d014      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b6:	f7fc fa13 	bl	80009e0 <HAL_GetTick>
 80045ba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045bc:	e00a      	b.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045be:	f7fc fa0f 	bl	80009e0 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d901      	bls.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e036      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d4:	4b1d      	ldr	r3, [pc, #116]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045d6:	6a1b      	ldr	r3, [r3, #32]
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d0ee      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045e0:	4b1a      	ldr	r3, [pc, #104]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045e2:	6a1b      	ldr	r3, [r3, #32]
 80045e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	4917      	ldr	r1, [pc, #92]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80045f2:	7dfb      	ldrb	r3, [r7, #23]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d105      	bne.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045f8:	4b14      	ldr	r3, [pc, #80]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045fa:	69db      	ldr	r3, [r3, #28]
 80045fc:	4a13      	ldr	r2, [pc, #76]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004602:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d008      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004610:	4b0e      	ldr	r3, [pc, #56]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	490b      	ldr	r1, [pc, #44]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800461e:	4313      	orrs	r3, r2
 8004620:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0310 	and.w	r3, r3, #16
 800462a:	2b00      	cmp	r3, #0
 800462c:	d008      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800462e:	4b07      	ldr	r3, [pc, #28]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	4904      	ldr	r1, [pc, #16]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800463c:	4313      	orrs	r3, r2
 800463e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3718      	adds	r7, #24
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	40021000 	.word	0x40021000
 8004650:	40007000 	.word	0x40007000
 8004654:	42420440 	.word	0x42420440

08004658 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004658:	b480      	push	{r7}
 800465a:	b085      	sub	sp, #20
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	4638      	mov	r0, r7
 8004662:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3714      	adds	r7, #20
 800466c:	46bd      	mov	sp, r7
 800466e:	bc80      	pop	{r7}
 8004670:	4770      	bx	lr

08004672 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004672:	b480      	push	{r7}
 8004674:	b085      	sub	sp, #20
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004682:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004686:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	b29a      	uxth	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3714      	adds	r7, #20
 8004698:	46bd      	mov	sp, r7
 800469a:	bc80      	pop	{r7}
 800469c:	4770      	bx	lr

0800469e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800469e:	b480      	push	{r7}
 80046a0:	b085      	sub	sp, #20
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80046a6:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80046aa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	43db      	mvns	r3, r3
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	4013      	ands	r3, r2
 80046be:	b29a      	uxth	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3714      	adds	r7, #20
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bc80      	pop	{r7}
 80046d0:	4770      	bx	lr

080046d2 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80046d2:	b480      	push	{r7}
 80046d4:	b083      	sub	sp, #12
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
 80046da:	460b      	mov	r3, r1
 80046dc:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bc80      	pop	{r7}
 80046e8:	4770      	bx	lr

080046ea <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80046ea:	b480      	push	{r7}
 80046ec:	b085      	sub	sp, #20
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	60f8      	str	r0, [r7, #12]
 80046f2:	4638      	mov	r0, r7
 80046f4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3714      	adds	r7, #20
 800471e:	46bd      	mov	sp, r7
 8004720:	bc80      	pop	{r7}
 8004722:	4770      	bx	lr

08004724 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004724:	b480      	push	{r7}
 8004726:	b09d      	sub	sp, #116	@ 0x74
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800472e:	2300      	movs	r3, #0
 8004730:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4413      	add	r3, r2
 800473e:	881b      	ldrh	r3, [r3, #0]
 8004740:	b29b      	uxth	r3, r3
 8004742:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8004746:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800474a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	78db      	ldrb	r3, [r3, #3]
 8004752:	2b03      	cmp	r3, #3
 8004754:	d81f      	bhi.n	8004796 <USB_ActivateEndpoint+0x72>
 8004756:	a201      	add	r2, pc, #4	@ (adr r2, 800475c <USB_ActivateEndpoint+0x38>)
 8004758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475c:	0800476d 	.word	0x0800476d
 8004760:	08004789 	.word	0x08004789
 8004764:	0800479f 	.word	0x0800479f
 8004768:	0800477b 	.word	0x0800477b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800476c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004770:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004774:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004778:	e012      	b.n	80047a0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800477a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800477e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8004782:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004786:	e00b      	b.n	80047a0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004788:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800478c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004790:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004794:	e004      	b.n	80047a0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800479c:	e000      	b.n	80047a0 <USB_ActivateEndpoint+0x7c>
      break;
 800479e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	441a      	add	r2, r3
 80047aa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80047ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047be:	b29b      	uxth	r3, r3
 80047c0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	4413      	add	r3, r2
 80047cc:	881b      	ldrh	r3, [r3, #0]
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047d8:	b29b      	uxth	r3, r3
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	7812      	ldrb	r2, [r2, #0]
 80047de:	4313      	orrs	r3, r2
 80047e0:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	441a      	add	r2, r3
 80047ee:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80047f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004802:	b29b      	uxth	r3, r3
 8004804:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	7b1b      	ldrb	r3, [r3, #12]
 800480a:	2b00      	cmp	r3, #0
 800480c:	f040 8178 	bne.w	8004b00 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	785b      	ldrb	r3, [r3, #1]
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 8084 	beq.w	8004922 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	61bb      	str	r3, [r7, #24]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004824:	b29b      	uxth	r3, r3
 8004826:	461a      	mov	r2, r3
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	4413      	add	r3, r2
 800482c:	61bb      	str	r3, [r7, #24]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	011a      	lsls	r2, r3, #4
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	4413      	add	r3, r2
 8004838:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800483c:	617b      	str	r3, [r7, #20]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	88db      	ldrh	r3, [r3, #6]
 8004842:	085b      	lsrs	r3, r3, #1
 8004844:	b29b      	uxth	r3, r3
 8004846:	005b      	lsls	r3, r3, #1
 8004848:	b29a      	uxth	r2, r3
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	4413      	add	r3, r2
 8004858:	881b      	ldrh	r3, [r3, #0]
 800485a:	827b      	strh	r3, [r7, #18]
 800485c:	8a7b      	ldrh	r3, [r7, #18]
 800485e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004862:	2b00      	cmp	r3, #0
 8004864:	d01b      	beq.n	800489e <USB_ActivateEndpoint+0x17a>
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	4413      	add	r3, r2
 8004870:	881b      	ldrh	r3, [r3, #0]
 8004872:	b29b      	uxth	r3, r3
 8004874:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004878:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800487c:	823b      	strh	r3, [r7, #16]
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	441a      	add	r2, r3
 8004888:	8a3b      	ldrh	r3, [r7, #16]
 800488a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800488e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004892:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004896:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800489a:	b29b      	uxth	r3, r3
 800489c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	78db      	ldrb	r3, [r3, #3]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d020      	beq.n	80048e8 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	4413      	add	r3, r2
 80048b0:	881b      	ldrh	r3, [r3, #0]
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048bc:	81bb      	strh	r3, [r7, #12]
 80048be:	89bb      	ldrh	r3, [r7, #12]
 80048c0:	f083 0320 	eor.w	r3, r3, #32
 80048c4:	81bb      	strh	r3, [r7, #12]
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	441a      	add	r2, r3
 80048d0:	89bb      	ldrh	r3, [r7, #12]
 80048d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	8013      	strh	r3, [r2, #0]
 80048e6:	e2d5      	b.n	8004e94 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4413      	add	r3, r2
 80048f2:	881b      	ldrh	r3, [r3, #0]
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048fe:	81fb      	strh	r3, [r7, #14]
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	441a      	add	r2, r3
 800490a:	89fb      	ldrh	r3, [r7, #14]
 800490c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004910:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004914:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004918:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800491c:	b29b      	uxth	r3, r3
 800491e:	8013      	strh	r3, [r2, #0]
 8004920:	e2b8      	b.n	8004e94 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	633b      	str	r3, [r7, #48]	@ 0x30
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800492c:	b29b      	uxth	r3, r3
 800492e:	461a      	mov	r2, r3
 8004930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004932:	4413      	add	r3, r2
 8004934:	633b      	str	r3, [r7, #48]	@ 0x30
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	011a      	lsls	r2, r3, #4
 800493c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800493e:	4413      	add	r3, r2
 8004940:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004944:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	88db      	ldrh	r3, [r3, #6]
 800494a:	085b      	lsrs	r3, r3, #1
 800494c:	b29b      	uxth	r3, r3
 800494e:	005b      	lsls	r3, r3, #1
 8004950:	b29a      	uxth	r2, r3
 8004952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004954:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	62bb      	str	r3, [r7, #40]	@ 0x28
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004960:	b29b      	uxth	r3, r3
 8004962:	461a      	mov	r2, r3
 8004964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004966:	4413      	add	r3, r2
 8004968:	62bb      	str	r3, [r7, #40]	@ 0x28
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	011a      	lsls	r2, r3, #4
 8004970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004972:	4413      	add	r3, r2
 8004974:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004978:	627b      	str	r3, [r7, #36]	@ 0x24
 800497a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800497c:	881b      	ldrh	r3, [r3, #0]
 800497e:	b29b      	uxth	r3, r3
 8004980:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004984:	b29a      	uxth	r2, r3
 8004986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004988:	801a      	strh	r2, [r3, #0]
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004990:	d91d      	bls.n	80049ce <USB_ActivateEndpoint+0x2aa>
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	095b      	lsrs	r3, r3, #5
 8004998:	66bb      	str	r3, [r7, #104]	@ 0x68
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	f003 031f 	and.w	r3, r3, #31
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d102      	bne.n	80049ac <USB_ActivateEndpoint+0x288>
 80049a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80049a8:	3b01      	subs	r3, #1
 80049aa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ae:	881b      	ldrh	r3, [r3, #0]
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	029b      	lsls	r3, r3, #10
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	4313      	orrs	r3, r2
 80049bc:	b29b      	uxth	r3, r3
 80049be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ca:	801a      	strh	r2, [r3, #0]
 80049cc:	e026      	b.n	8004a1c <USB_ActivateEndpoint+0x2f8>
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d10a      	bne.n	80049ec <USB_ActivateEndpoint+0x2c8>
 80049d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d8:	881b      	ldrh	r3, [r3, #0]
 80049da:	b29b      	uxth	r3, r3
 80049dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e8:	801a      	strh	r2, [r3, #0]
 80049ea:	e017      	b.n	8004a1c <USB_ActivateEndpoint+0x2f8>
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	085b      	lsrs	r3, r3, #1
 80049f2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	f003 0301 	and.w	r3, r3, #1
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d002      	beq.n	8004a06 <USB_ActivateEndpoint+0x2e2>
 8004a00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a02:	3301      	adds	r3, #1
 8004a04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a08:	881b      	ldrh	r3, [r3, #0]
 8004a0a:	b29a      	uxth	r2, r3
 8004a0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	029b      	lsls	r3, r3, #10
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	4313      	orrs	r3, r2
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a1a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	4413      	add	r3, r2
 8004a26:	881b      	ldrh	r3, [r3, #0]
 8004a28:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004a2a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004a2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d01b      	beq.n	8004a6c <USB_ActivateEndpoint+0x348>
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	4413      	add	r3, r2
 8004a3e:	881b      	ldrh	r3, [r3, #0]
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a4a:	843b      	strh	r3, [r7, #32]
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	441a      	add	r2, r3
 8004a56:	8c3b      	ldrh	r3, [r7, #32]
 8004a58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a60:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d124      	bne.n	8004abe <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	881b      	ldrh	r3, [r3, #0]
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a8a:	83bb      	strh	r3, [r7, #28]
 8004a8c:	8bbb      	ldrh	r3, [r7, #28]
 8004a8e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004a92:	83bb      	strh	r3, [r7, #28]
 8004a94:	8bbb      	ldrh	r3, [r7, #28]
 8004a96:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004a9a:	83bb      	strh	r3, [r7, #28]
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	441a      	add	r2, r3
 8004aa6:	8bbb      	ldrh	r3, [r7, #28]
 8004aa8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004aac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ab0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ab4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	8013      	strh	r3, [r2, #0]
 8004abc:	e1ea      	b.n	8004e94 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	4413      	add	r3, r2
 8004ac8:	881b      	ldrh	r3, [r3, #0]
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ad0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ad4:	83fb      	strh	r3, [r7, #30]
 8004ad6:	8bfb      	ldrh	r3, [r7, #30]
 8004ad8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004adc:	83fb      	strh	r3, [r7, #30]
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	441a      	add	r2, r3
 8004ae8:	8bfb      	ldrh	r3, [r7, #30]
 8004aea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004aee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004af2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004af6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	8013      	strh	r3, [r2, #0]
 8004afe:	e1c9      	b.n	8004e94 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	78db      	ldrb	r3, [r3, #3]
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d11e      	bne.n	8004b46 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	4413      	add	r3, r2
 8004b12:	881b      	ldrh	r3, [r3, #0]
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b1e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	441a      	add	r2, r3
 8004b2c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004b30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b38:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004b3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	8013      	strh	r3, [r2, #0]
 8004b44:	e01d      	b.n	8004b82 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	4413      	add	r3, r2
 8004b50:	881b      	ldrh	r3, [r3, #0]
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004b58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b5c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	441a      	add	r2, r3
 8004b6a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8004b6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	461a      	mov	r2, r3
 8004b90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b92:	4413      	add	r3, r2
 8004b94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	011a      	lsls	r2, r3, #4
 8004b9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b9e:	4413      	add	r3, r2
 8004ba0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004ba4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	891b      	ldrh	r3, [r3, #8]
 8004baa:	085b      	lsrs	r3, r3, #1
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	005b      	lsls	r3, r3, #1
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004bb4:	801a      	strh	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	657b      	str	r3, [r7, #84]	@ 0x54
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bc6:	4413      	add	r3, r2
 8004bc8:	657b      	str	r3, [r7, #84]	@ 0x54
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	011a      	lsls	r2, r3, #4
 8004bd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bd2:	4413      	add	r3, r2
 8004bd4:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004bd8:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	895b      	ldrh	r3, [r3, #10]
 8004bde:	085b      	lsrs	r3, r3, #1
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	005b      	lsls	r3, r3, #1
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004be8:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	785b      	ldrb	r3, [r3, #1]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f040 8093 	bne.w	8004d1a <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	881b      	ldrh	r3, [r3, #0]
 8004c00:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8004c04:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004c08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d01b      	beq.n	8004c48 <USB_ActivateEndpoint+0x524>
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	4413      	add	r3, r2
 8004c1a:	881b      	ldrh	r3, [r3, #0]
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c26:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	441a      	add	r2, r3
 8004c32:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004c34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c3c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4413      	add	r3, r2
 8004c52:	881b      	ldrh	r3, [r3, #0]
 8004c54:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8004c56:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004c58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d01b      	beq.n	8004c98 <USB_ActivateEndpoint+0x574>
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	4413      	add	r3, r2
 8004c6a:	881b      	ldrh	r3, [r3, #0]
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c76:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	441a      	add	r2, r3
 8004c82:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004c84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c90:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	4413      	add	r3, r2
 8004ca2:	881b      	ldrh	r3, [r3, #0]
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004caa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cae:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004cb0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004cb2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004cb6:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004cb8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004cba:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004cbe:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	441a      	add	r2, r3
 8004cca:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004ccc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	4413      	add	r3, r2
 8004cea:	881b      	ldrh	r3, [r3, #0]
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cf2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cf6:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	441a      	add	r2, r3
 8004d02:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004d04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	8013      	strh	r3, [r2, #0]
 8004d18:	e0bc      	b.n	8004e94 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	4413      	add	r3, r2
 8004d24:	881b      	ldrh	r3, [r3, #0]
 8004d26:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004d2a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004d2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d01d      	beq.n	8004d72 <USB_ActivateEndpoint+0x64e>
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	4413      	add	r3, r2
 8004d40:	881b      	ldrh	r3, [r3, #0]
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d4c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	441a      	add	r2, r3
 8004d5a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004d5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d66:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4413      	add	r3, r2
 8004d7c:	881b      	ldrh	r3, [r3, #0]
 8004d7e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004d82:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004d86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d01d      	beq.n	8004dca <USB_ActivateEndpoint+0x6a6>
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	4413      	add	r3, r2
 8004d98:	881b      	ldrh	r3, [r3, #0]
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004da0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004da4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	441a      	add	r2, r3
 8004db2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004db6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004dba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004dbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004dc2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	78db      	ldrb	r3, [r3, #3]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d024      	beq.n	8004e1c <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	4413      	add	r3, r2
 8004ddc:	881b      	ldrh	r3, [r3, #0]
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004de4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004de8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004dec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004df0:	f083 0320 	eor.w	r3, r3, #32
 8004df4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	441a      	add	r2, r3
 8004e02:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004e06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	8013      	strh	r3, [r2, #0]
 8004e1a:	e01d      	b.n	8004e58 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4413      	add	r3, r2
 8004e26:	881b      	ldrh	r3, [r3, #0]
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e32:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	441a      	add	r2, r3
 8004e40:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004e44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	4413      	add	r3, r2
 8004e62:	881b      	ldrh	r3, [r3, #0]
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e6e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	441a      	add	r2, r3
 8004e7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004e80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004e94:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3774      	adds	r7, #116	@ 0x74
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bc80      	pop	{r7}
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop

08004ea4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b08d      	sub	sp, #52	@ 0x34
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	7b1b      	ldrb	r3, [r3, #12]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	f040 808e 	bne.w	8004fd4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	785b      	ldrb	r3, [r3, #1]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d044      	beq.n	8004f4a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4413      	add	r3, r2
 8004eca:	881b      	ldrh	r3, [r3, #0]
 8004ecc:	81bb      	strh	r3, [r7, #12]
 8004ece:	89bb      	ldrh	r3, [r7, #12]
 8004ed0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d01b      	beq.n	8004f10 <USB_DeactivateEndpoint+0x6c>
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	4413      	add	r3, r2
 8004ee2:	881b      	ldrh	r3, [r3, #0]
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004eea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eee:	817b      	strh	r3, [r7, #10]
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	441a      	add	r2, r3
 8004efa:	897b      	ldrh	r3, [r7, #10]
 8004efc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f08:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4413      	add	r3, r2
 8004f1a:	881b      	ldrh	r3, [r3, #0]
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f26:	813b      	strh	r3, [r7, #8]
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	441a      	add	r2, r3
 8004f32:	893b      	ldrh	r3, [r7, #8]
 8004f34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	8013      	strh	r3, [r2, #0]
 8004f48:	e192      	b.n	8005270 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	4413      	add	r3, r2
 8004f54:	881b      	ldrh	r3, [r3, #0]
 8004f56:	827b      	strh	r3, [r7, #18]
 8004f58:	8a7b      	ldrh	r3, [r7, #18]
 8004f5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d01b      	beq.n	8004f9a <USB_DeactivateEndpoint+0xf6>
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	4413      	add	r3, r2
 8004f6c:	881b      	ldrh	r3, [r3, #0]
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f78:	823b      	strh	r3, [r7, #16]
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	441a      	add	r2, r3
 8004f84:	8a3b      	ldrh	r3, [r7, #16]
 8004f86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f8e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004f92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	4413      	add	r3, r2
 8004fa4:	881b      	ldrh	r3, [r3, #0]
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004fac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fb0:	81fb      	strh	r3, [r7, #14]
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	441a      	add	r2, r3
 8004fbc:	89fb      	ldrh	r3, [r7, #14]
 8004fbe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fc2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	8013      	strh	r3, [r2, #0]
 8004fd2:	e14d      	b.n	8005270 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	785b      	ldrb	r3, [r3, #1]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f040 80a5 	bne.w	8005128 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	4413      	add	r3, r2
 8004fe8:	881b      	ldrh	r3, [r3, #0]
 8004fea:	843b      	strh	r3, [r7, #32]
 8004fec:	8c3b      	ldrh	r3, [r7, #32]
 8004fee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d01b      	beq.n	800502e <USB_DeactivateEndpoint+0x18a>
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	4413      	add	r3, r2
 8005000:	881b      	ldrh	r3, [r3, #0]
 8005002:	b29b      	uxth	r3, r3
 8005004:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005008:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800500c:	83fb      	strh	r3, [r7, #30]
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	441a      	add	r2, r3
 8005018:	8bfb      	ldrh	r3, [r7, #30]
 800501a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800501e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005022:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005026:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800502a:	b29b      	uxth	r3, r3
 800502c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	4413      	add	r3, r2
 8005038:	881b      	ldrh	r3, [r3, #0]
 800503a:	83bb      	strh	r3, [r7, #28]
 800503c:	8bbb      	ldrh	r3, [r7, #28]
 800503e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005042:	2b00      	cmp	r3, #0
 8005044:	d01b      	beq.n	800507e <USB_DeactivateEndpoint+0x1da>
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	4413      	add	r3, r2
 8005050:	881b      	ldrh	r3, [r3, #0]
 8005052:	b29b      	uxth	r3, r3
 8005054:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005058:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800505c:	837b      	strh	r3, [r7, #26]
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	441a      	add	r2, r3
 8005068:	8b7b      	ldrh	r3, [r7, #26]
 800506a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800506e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005072:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005076:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800507a:	b29b      	uxth	r3, r3
 800507c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	4413      	add	r3, r2
 8005088:	881b      	ldrh	r3, [r3, #0]
 800508a:	b29b      	uxth	r3, r3
 800508c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005090:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005094:	833b      	strh	r3, [r7, #24]
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	441a      	add	r2, r3
 80050a0:	8b3b      	ldrh	r3, [r7, #24]
 80050a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050ae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	4413      	add	r3, r2
 80050c0:	881b      	ldrh	r3, [r3, #0]
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80050c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050cc:	82fb      	strh	r3, [r7, #22]
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	441a      	add	r2, r3
 80050d8:	8afb      	ldrh	r3, [r7, #22]
 80050da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	4413      	add	r3, r2
 80050f8:	881b      	ldrh	r3, [r3, #0]
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005100:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005104:	82bb      	strh	r3, [r7, #20]
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	441a      	add	r2, r3
 8005110:	8abb      	ldrh	r3, [r7, #20]
 8005112:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005116:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800511a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800511e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005122:	b29b      	uxth	r3, r3
 8005124:	8013      	strh	r3, [r2, #0]
 8005126:	e0a3      	b.n	8005270 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	4413      	add	r3, r2
 8005132:	881b      	ldrh	r3, [r3, #0]
 8005134:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005136:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005138:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d01b      	beq.n	8005178 <USB_DeactivateEndpoint+0x2d4>
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4413      	add	r3, r2
 800514a:	881b      	ldrh	r3, [r3, #0]
 800514c:	b29b      	uxth	r3, r3
 800514e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005152:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005156:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	441a      	add	r2, r3
 8005162:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005164:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005168:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800516c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005170:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005174:	b29b      	uxth	r3, r3
 8005176:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	4413      	add	r3, r2
 8005182:	881b      	ldrh	r3, [r3, #0]
 8005184:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005186:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800518c:	2b00      	cmp	r3, #0
 800518e:	d01b      	beq.n	80051c8 <USB_DeactivateEndpoint+0x324>
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	4413      	add	r3, r2
 800519a:	881b      	ldrh	r3, [r3, #0]
 800519c:	b29b      	uxth	r3, r3
 800519e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051a6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	441a      	add	r2, r3
 80051b2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80051b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051c0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	4413      	add	r3, r2
 80051d2:	881b      	ldrh	r3, [r3, #0]
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051de:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	441a      	add	r2, r3
 80051ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80051ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80051f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	4413      	add	r3, r2
 800520a:	881b      	ldrh	r3, [r3, #0]
 800520c:	b29b      	uxth	r3, r3
 800520e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005212:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005216:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	441a      	add	r2, r3
 8005222:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005224:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005228:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800522c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005230:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005234:	b29b      	uxth	r3, r3
 8005236:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4413      	add	r3, r2
 8005242:	881b      	ldrh	r3, [r3, #0]
 8005244:	b29b      	uxth	r3, r3
 8005246:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800524a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800524e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	441a      	add	r2, r3
 800525a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800525c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005260:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005264:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005268:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800526c:	b29b      	uxth	r3, r3
 800526e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3734      	adds	r7, #52	@ 0x34
 8005276:	46bd      	mov	sp, r7
 8005278:	bc80      	pop	{r7}
 800527a:	4770      	bx	lr

0800527c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b0c2      	sub	sp, #264	@ 0x108
 8005280:	af00      	add	r7, sp, #0
 8005282:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005286:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800528a:	6018      	str	r0, [r3, #0]
 800528c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005290:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005294:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005296:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800529a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	785b      	ldrb	r3, [r3, #1]
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	f040 86b7 	bne.w	8006016 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80052a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	699a      	ldr	r2, [r3, #24]
 80052b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d908      	bls.n	80052d6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80052c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80052d4:	e007      	b.n	80052e6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80052d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80052e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	7b1b      	ldrb	r3, [r3, #12]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d13a      	bne.n	800536c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80052f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6959      	ldr	r1, [r3, #20]
 8005302:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005306:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	88da      	ldrh	r2, [r3, #6]
 800530e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005312:	b29b      	uxth	r3, r3
 8005314:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005318:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800531c:	6800      	ldr	r0, [r0, #0]
 800531e:	f001 fc9c 	bl	8006c5a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005322:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005326:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	613b      	str	r3, [r7, #16]
 800532e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005332:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800533c:	b29b      	uxth	r3, r3
 800533e:	461a      	mov	r2, r3
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	4413      	add	r3, r2
 8005344:	613b      	str	r3, [r7, #16]
 8005346:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800534a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	011a      	lsls	r2, r3, #4
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	4413      	add	r3, r2
 8005358:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800535c:	60fb      	str	r3, [r7, #12]
 800535e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005362:	b29a      	uxth	r2, r3
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	801a      	strh	r2, [r3, #0]
 8005368:	f000 be1f 	b.w	8005faa <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800536c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005370:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	78db      	ldrb	r3, [r3, #3]
 8005378:	2b02      	cmp	r3, #2
 800537a:	f040 8462 	bne.w	8005c42 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800537e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005382:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	6a1a      	ldr	r2, [r3, #32]
 800538a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800538e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	429a      	cmp	r2, r3
 8005398:	f240 83df 	bls.w	8005b5a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800539c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	4413      	add	r3, r2
 80053b6:	881b      	ldrh	r3, [r3, #0]
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053c2:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80053c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	441a      	add	r2, r3
 80053e0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80053e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053ec:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80053f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80053f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	6a1a      	ldr	r2, [r3, #32]
 8005404:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005408:	1ad2      	subs	r2, r2, r3
 800540a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800540e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005416:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800541a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005424:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	4413      	add	r3, r2
 8005430:	881b      	ldrh	r3, [r3, #0]
 8005432:	b29b      	uxth	r3, r3
 8005434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005438:	2b00      	cmp	r3, #0
 800543a:	f000 81c7 	beq.w	80057cc <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800543e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005442:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	633b      	str	r3, [r7, #48]	@ 0x30
 800544a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800544e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	785b      	ldrb	r3, [r3, #1]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d177      	bne.n	800554a <USB_EPStartXfer+0x2ce>
 800545a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800545e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005466:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800546a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005474:	b29b      	uxth	r3, r3
 8005476:	461a      	mov	r2, r3
 8005478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800547a:	4413      	add	r3, r2
 800547c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800547e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005482:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	011a      	lsls	r2, r3, #4
 800548c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800548e:	4413      	add	r3, r2
 8005490:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005494:	627b      	str	r3, [r7, #36]	@ 0x24
 8005496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005498:	881b      	ldrh	r3, [r3, #0]
 800549a:	b29b      	uxth	r3, r3
 800549c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054a0:	b29a      	uxth	r2, r3
 80054a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a4:	801a      	strh	r2, [r3, #0]
 80054a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054aa:	2b3e      	cmp	r3, #62	@ 0x3e
 80054ac:	d921      	bls.n	80054f2 <USB_EPStartXfer+0x276>
 80054ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054b2:	095b      	lsrs	r3, r3, #5
 80054b4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80054b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054bc:	f003 031f 	and.w	r3, r3, #31
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d104      	bne.n	80054ce <USB_EPStartXfer+0x252>
 80054c4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80054c8:	3b01      	subs	r3, #1
 80054ca:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80054ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d0:	881b      	ldrh	r3, [r3, #0]
 80054d2:	b29a      	uxth	r2, r3
 80054d4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80054d8:	b29b      	uxth	r3, r3
 80054da:	029b      	lsls	r3, r3, #10
 80054dc:	b29b      	uxth	r3, r3
 80054de:	4313      	orrs	r3, r2
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054ea:	b29a      	uxth	r2, r3
 80054ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ee:	801a      	strh	r2, [r3, #0]
 80054f0:	e050      	b.n	8005594 <USB_EPStartXfer+0x318>
 80054f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d10a      	bne.n	8005510 <USB_EPStartXfer+0x294>
 80054fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054fc:	881b      	ldrh	r3, [r3, #0]
 80054fe:	b29b      	uxth	r3, r3
 8005500:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005504:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005508:	b29a      	uxth	r2, r3
 800550a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800550c:	801a      	strh	r2, [r3, #0]
 800550e:	e041      	b.n	8005594 <USB_EPStartXfer+0x318>
 8005510:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005514:	085b      	lsrs	r3, r3, #1
 8005516:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800551a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800551e:	f003 0301 	and.w	r3, r3, #1
 8005522:	2b00      	cmp	r3, #0
 8005524:	d004      	beq.n	8005530 <USB_EPStartXfer+0x2b4>
 8005526:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800552a:	3301      	adds	r3, #1
 800552c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005532:	881b      	ldrh	r3, [r3, #0]
 8005534:	b29a      	uxth	r2, r3
 8005536:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800553a:	b29b      	uxth	r3, r3
 800553c:	029b      	lsls	r3, r3, #10
 800553e:	b29b      	uxth	r3, r3
 8005540:	4313      	orrs	r3, r2
 8005542:	b29a      	uxth	r2, r3
 8005544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005546:	801a      	strh	r2, [r3, #0]
 8005548:	e024      	b.n	8005594 <USB_EPStartXfer+0x318>
 800554a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800554e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	785b      	ldrb	r3, [r3, #1]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d11c      	bne.n	8005594 <USB_EPStartXfer+0x318>
 800555a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800555e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005568:	b29b      	uxth	r3, r3
 800556a:	461a      	mov	r2, r3
 800556c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800556e:	4413      	add	r3, r2
 8005570:	633b      	str	r3, [r7, #48]	@ 0x30
 8005572:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005576:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	011a      	lsls	r2, r3, #4
 8005580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005582:	4413      	add	r3, r2
 8005584:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005588:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800558a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800558e:	b29a      	uxth	r2, r3
 8005590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005592:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005594:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005598:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	895b      	ldrh	r3, [r3, #10]
 80055a0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	6959      	ldr	r1, [r3, #20]
 80055b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80055ba:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80055be:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80055c2:	6800      	ldr	r0, [r0, #0]
 80055c4:	f001 fb49 	bl	8006c5a <USB_WritePMA>
            ep->xfer_buff += len;
 80055c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	695a      	ldr	r2, [r3, #20]
 80055d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055d8:	441a      	add	r2, r3
 80055da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80055e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	6a1a      	ldr	r2, [r3, #32]
 80055f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d90f      	bls.n	8005622 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005602:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005606:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	6a1a      	ldr	r2, [r3, #32]
 800560e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005612:	1ad2      	subs	r2, r2, r3
 8005614:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005618:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	621a      	str	r2, [r3, #32]
 8005620:	e00e      	b.n	8005640 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005622:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005626:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005632:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005636:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2200      	movs	r2, #0
 800563e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005640:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005644:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	785b      	ldrb	r3, [r3, #1]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d177      	bne.n	8005740 <USB_EPStartXfer+0x4c4>
 8005650:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005654:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	61bb      	str	r3, [r7, #24]
 800565c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005660:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800566a:	b29b      	uxth	r3, r3
 800566c:	461a      	mov	r2, r3
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	4413      	add	r3, r2
 8005672:	61bb      	str	r3, [r7, #24]
 8005674:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005678:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	011a      	lsls	r2, r3, #4
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	4413      	add	r3, r2
 8005686:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800568a:	617b      	str	r3, [r7, #20]
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	881b      	ldrh	r3, [r3, #0]
 8005690:	b29b      	uxth	r3, r3
 8005692:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005696:	b29a      	uxth	r2, r3
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	801a      	strh	r2, [r3, #0]
 800569c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056a0:	2b3e      	cmp	r3, #62	@ 0x3e
 80056a2:	d921      	bls.n	80056e8 <USB_EPStartXfer+0x46c>
 80056a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056a8:	095b      	lsrs	r3, r3, #5
 80056aa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80056ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056b2:	f003 031f 	and.w	r3, r3, #31
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d104      	bne.n	80056c4 <USB_EPStartXfer+0x448>
 80056ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056be:	3b01      	subs	r3, #1
 80056c0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	881b      	ldrh	r3, [r3, #0]
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	029b      	lsls	r3, r3, #10
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	4313      	orrs	r3, r2
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056e0:	b29a      	uxth	r2, r3
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	801a      	strh	r2, [r3, #0]
 80056e6:	e056      	b.n	8005796 <USB_EPStartXfer+0x51a>
 80056e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d10a      	bne.n	8005706 <USB_EPStartXfer+0x48a>
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	881b      	ldrh	r3, [r3, #0]
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056fe:	b29a      	uxth	r2, r3
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	801a      	strh	r2, [r3, #0]
 8005704:	e047      	b.n	8005796 <USB_EPStartXfer+0x51a>
 8005706:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800570a:	085b      	lsrs	r3, r3, #1
 800570c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005710:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005714:	f003 0301 	and.w	r3, r3, #1
 8005718:	2b00      	cmp	r3, #0
 800571a:	d004      	beq.n	8005726 <USB_EPStartXfer+0x4aa>
 800571c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005720:	3301      	adds	r3, #1
 8005722:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	881b      	ldrh	r3, [r3, #0]
 800572a:	b29a      	uxth	r2, r3
 800572c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005730:	b29b      	uxth	r3, r3
 8005732:	029b      	lsls	r3, r3, #10
 8005734:	b29b      	uxth	r3, r3
 8005736:	4313      	orrs	r3, r2
 8005738:	b29a      	uxth	r2, r3
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	801a      	strh	r2, [r3, #0]
 800573e:	e02a      	b.n	8005796 <USB_EPStartXfer+0x51a>
 8005740:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005744:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	785b      	ldrb	r3, [r3, #1]
 800574c:	2b01      	cmp	r3, #1
 800574e:	d122      	bne.n	8005796 <USB_EPStartXfer+0x51a>
 8005750:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005754:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	623b      	str	r3, [r7, #32]
 800575c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005760:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800576a:	b29b      	uxth	r3, r3
 800576c:	461a      	mov	r2, r3
 800576e:	6a3b      	ldr	r3, [r7, #32]
 8005770:	4413      	add	r3, r2
 8005772:	623b      	str	r3, [r7, #32]
 8005774:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005778:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	011a      	lsls	r2, r3, #4
 8005782:	6a3b      	ldr	r3, [r7, #32]
 8005784:	4413      	add	r3, r2
 8005786:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800578a:	61fb      	str	r3, [r7, #28]
 800578c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005790:	b29a      	uxth	r2, r3
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005796:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800579a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	891b      	ldrh	r3, [r3, #8]
 80057a2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	6959      	ldr	r1, [r3, #20]
 80057b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80057bc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80057c0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80057c4:	6800      	ldr	r0, [r0, #0]
 80057c6:	f001 fa48 	bl	8006c5a <USB_WritePMA>
 80057ca:	e3ee      	b.n	8005faa <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80057cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	785b      	ldrb	r3, [r3, #1]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d177      	bne.n	80058cc <USB_EPStartXfer+0x650>
 80057dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	461a      	mov	r2, r3
 80057fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057fc:	4413      	add	r3, r2
 80057fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005800:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005804:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	011a      	lsls	r2, r3, #4
 800580e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005810:	4413      	add	r3, r2
 8005812:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005816:	647b      	str	r3, [r7, #68]	@ 0x44
 8005818:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800581a:	881b      	ldrh	r3, [r3, #0]
 800581c:	b29b      	uxth	r3, r3
 800581e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005822:	b29a      	uxth	r2, r3
 8005824:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005826:	801a      	strh	r2, [r3, #0]
 8005828:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800582c:	2b3e      	cmp	r3, #62	@ 0x3e
 800582e:	d921      	bls.n	8005874 <USB_EPStartXfer+0x5f8>
 8005830:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005834:	095b      	lsrs	r3, r3, #5
 8005836:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800583a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800583e:	f003 031f 	and.w	r3, r3, #31
 8005842:	2b00      	cmp	r3, #0
 8005844:	d104      	bne.n	8005850 <USB_EPStartXfer+0x5d4>
 8005846:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800584a:	3b01      	subs	r3, #1
 800584c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005850:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005852:	881b      	ldrh	r3, [r3, #0]
 8005854:	b29a      	uxth	r2, r3
 8005856:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800585a:	b29b      	uxth	r3, r3
 800585c:	029b      	lsls	r3, r3, #10
 800585e:	b29b      	uxth	r3, r3
 8005860:	4313      	orrs	r3, r2
 8005862:	b29b      	uxth	r3, r3
 8005864:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005868:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800586c:	b29a      	uxth	r2, r3
 800586e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005870:	801a      	strh	r2, [r3, #0]
 8005872:	e056      	b.n	8005922 <USB_EPStartXfer+0x6a6>
 8005874:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005878:	2b00      	cmp	r3, #0
 800587a:	d10a      	bne.n	8005892 <USB_EPStartXfer+0x616>
 800587c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800587e:	881b      	ldrh	r3, [r3, #0]
 8005880:	b29b      	uxth	r3, r3
 8005882:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005886:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800588a:	b29a      	uxth	r2, r3
 800588c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800588e:	801a      	strh	r2, [r3, #0]
 8005890:	e047      	b.n	8005922 <USB_EPStartXfer+0x6a6>
 8005892:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005896:	085b      	lsrs	r3, r3, #1
 8005898:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800589c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058a0:	f003 0301 	and.w	r3, r3, #1
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d004      	beq.n	80058b2 <USB_EPStartXfer+0x636>
 80058a8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80058ac:	3301      	adds	r3, #1
 80058ae:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80058b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058b4:	881b      	ldrh	r3, [r3, #0]
 80058b6:	b29a      	uxth	r2, r3
 80058b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80058bc:	b29b      	uxth	r3, r3
 80058be:	029b      	lsls	r3, r3, #10
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	4313      	orrs	r3, r2
 80058c4:	b29a      	uxth	r2, r3
 80058c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058c8:	801a      	strh	r2, [r3, #0]
 80058ca:	e02a      	b.n	8005922 <USB_EPStartXfer+0x6a6>
 80058cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	785b      	ldrb	r3, [r3, #1]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d122      	bne.n	8005922 <USB_EPStartXfer+0x6a6>
 80058dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80058e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	461a      	mov	r2, r3
 80058fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058fc:	4413      	add	r3, r2
 80058fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8005900:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005904:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	011a      	lsls	r2, r3, #4
 800590e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005910:	4413      	add	r3, r2
 8005912:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005916:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005918:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800591c:	b29a      	uxth	r2, r3
 800591e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005920:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005922:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005926:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	891b      	ldrh	r3, [r3, #8]
 800592e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005932:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005936:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	6959      	ldr	r1, [r3, #20]
 800593e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005942:	b29b      	uxth	r3, r3
 8005944:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005948:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800594c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005950:	6800      	ldr	r0, [r0, #0]
 8005952:	f001 f982 	bl	8006c5a <USB_WritePMA>
            ep->xfer_buff += len;
 8005956:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800595a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	695a      	ldr	r2, [r3, #20]
 8005962:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005966:	441a      	add	r2, r3
 8005968:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800596c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005974:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005978:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	6a1a      	ldr	r2, [r3, #32]
 8005980:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005984:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	429a      	cmp	r2, r3
 800598e:	d90f      	bls.n	80059b0 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005990:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005994:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	6a1a      	ldr	r2, [r3, #32]
 800599c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059a0:	1ad2      	subs	r2, r2, r3
 80059a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	621a      	str	r2, [r3, #32]
 80059ae:	e00e      	b.n	80059ce <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80059b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	6a1b      	ldr	r3, [r3, #32]
 80059bc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80059c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2200      	movs	r2, #0
 80059cc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80059ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80059da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	785b      	ldrb	r3, [r3, #1]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d177      	bne.n	8005ada <USB_EPStartXfer+0x85e>
 80059ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80059f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	461a      	mov	r2, r3
 8005a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a0a:	4413      	add	r3, r2
 8005a0c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	011a      	lsls	r2, r3, #4
 8005a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a1e:	4413      	add	r3, r2
 8005a20:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005a24:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a28:	881b      	ldrh	r3, [r3, #0]
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a34:	801a      	strh	r2, [r3, #0]
 8005a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a3a:	2b3e      	cmp	r3, #62	@ 0x3e
 8005a3c:	d921      	bls.n	8005a82 <USB_EPStartXfer+0x806>
 8005a3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a42:	095b      	lsrs	r3, r3, #5
 8005a44:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a4c:	f003 031f 	and.w	r3, r3, #31
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d104      	bne.n	8005a5e <USB_EPStartXfer+0x7e2>
 8005a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005a5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a60:	881b      	ldrh	r3, [r3, #0]
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	029b      	lsls	r3, r3, #10
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a7e:	801a      	strh	r2, [r3, #0]
 8005a80:	e050      	b.n	8005b24 <USB_EPStartXfer+0x8a8>
 8005a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d10a      	bne.n	8005aa0 <USB_EPStartXfer+0x824>
 8005a8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a8c:	881b      	ldrh	r3, [r3, #0]
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a9c:	801a      	strh	r2, [r3, #0]
 8005a9e:	e041      	b.n	8005b24 <USB_EPStartXfer+0x8a8>
 8005aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aa4:	085b      	lsrs	r3, r3, #1
 8005aa6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d004      	beq.n	8005ac0 <USB_EPStartXfer+0x844>
 8005ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aba:	3301      	adds	r3, #1
 8005abc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005ac0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ac2:	881b      	ldrh	r3, [r3, #0]
 8005ac4:	b29a      	uxth	r2, r3
 8005ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	029b      	lsls	r3, r3, #10
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	b29a      	uxth	r2, r3
 8005ad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ad6:	801a      	strh	r2, [r3, #0]
 8005ad8:	e024      	b.n	8005b24 <USB_EPStartXfer+0x8a8>
 8005ada:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ade:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	785b      	ldrb	r3, [r3, #1]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d11c      	bne.n	8005b24 <USB_EPStartXfer+0x8a8>
 8005aea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	461a      	mov	r2, r3
 8005afc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005afe:	4413      	add	r3, r2
 8005b00:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	011a      	lsls	r2, r3, #4
 8005b10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b12:	4413      	add	r3, r2
 8005b14:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005b18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b22:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005b24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	895b      	ldrh	r3, [r3, #10]
 8005b30:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	6959      	ldr	r1, [r3, #20]
 8005b40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005b4a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005b4e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005b52:	6800      	ldr	r0, [r0, #0]
 8005b54:	f001 f881 	bl	8006c5a <USB_WritePMA>
 8005b58:	e227      	b.n	8005faa <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005b5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6a1b      	ldr	r3, [r3, #32]
 8005b66:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005b6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	4413      	add	r3, r2
 8005b84:	881b      	ldrh	r3, [r3, #0]
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005b8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b90:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005b94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ba2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	441a      	add	r2, r3
 8005bae:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005bb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005bc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005bd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bd6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	461a      	mov	r2, r3
 8005be4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005be6:	4413      	add	r3, r2
 8005be8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005bea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	011a      	lsls	r2, r3, #4
 8005bf8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005bfa:	4413      	add	r3, r2
 8005bfc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005c00:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005c02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005c0a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005c0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	891b      	ldrh	r3, [r3, #8]
 8005c18:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	6959      	ldr	r1, [r3, #20]
 8005c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005c32:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005c36:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005c3a:	6800      	ldr	r0, [r0, #0]
 8005c3c:	f001 f80d 	bl	8006c5a <USB_WritePMA>
 8005c40:	e1b3      	b.n	8005faa <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005c42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	6a1a      	ldr	r2, [r3, #32]
 8005c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c52:	1ad2      	subs	r2, r2, r3
 8005c54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005c60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	4413      	add	r3, r2
 8005c7a:	881b      	ldrh	r3, [r3, #0]
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	f000 80c6 	beq.w	8005e14 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005c88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	785b      	ldrb	r3, [r3, #1]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d177      	bne.n	8005d94 <USB_EPStartXfer+0xb18>
 8005ca4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ca8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005cb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005cc4:	4413      	add	r3, r2
 8005cc6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005cc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ccc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	011a      	lsls	r2, r3, #4
 8005cd6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005cd8:	4413      	add	r3, r2
 8005cda:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005cde:	667b      	str	r3, [r7, #100]	@ 0x64
 8005ce0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ce2:	881b      	ldrh	r3, [r3, #0]
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005cee:	801a      	strh	r2, [r3, #0]
 8005cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cf4:	2b3e      	cmp	r3, #62	@ 0x3e
 8005cf6:	d921      	bls.n	8005d3c <USB_EPStartXfer+0xac0>
 8005cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cfc:	095b      	lsrs	r3, r3, #5
 8005cfe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005d02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d06:	f003 031f 	and.w	r3, r3, #31
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d104      	bne.n	8005d18 <USB_EPStartXfer+0xa9c>
 8005d0e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005d12:	3b01      	subs	r3, #1
 8005d14:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005d18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d1a:	881b      	ldrh	r3, [r3, #0]
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	029b      	lsls	r3, r3, #10
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d34:	b29a      	uxth	r2, r3
 8005d36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d38:	801a      	strh	r2, [r3, #0]
 8005d3a:	e050      	b.n	8005dde <USB_EPStartXfer+0xb62>
 8005d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d10a      	bne.n	8005d5a <USB_EPStartXfer+0xade>
 8005d44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d46:	881b      	ldrh	r3, [r3, #0]
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d52:	b29a      	uxth	r2, r3
 8005d54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d56:	801a      	strh	r2, [r3, #0]
 8005d58:	e041      	b.n	8005dde <USB_EPStartXfer+0xb62>
 8005d5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d5e:	085b      	lsrs	r3, r3, #1
 8005d60:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005d64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d68:	f003 0301 	and.w	r3, r3, #1
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d004      	beq.n	8005d7a <USB_EPStartXfer+0xafe>
 8005d70:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005d74:	3301      	adds	r3, #1
 8005d76:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005d7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d7c:	881b      	ldrh	r3, [r3, #0]
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	029b      	lsls	r3, r3, #10
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d90:	801a      	strh	r2, [r3, #0]
 8005d92:	e024      	b.n	8005dde <USB_EPStartXfer+0xb62>
 8005d94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	785b      	ldrb	r3, [r3, #1]
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d11c      	bne.n	8005dde <USB_EPStartXfer+0xb62>
 8005da4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005da8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	461a      	mov	r2, r3
 8005db6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005db8:	4413      	add	r3, r2
 8005dba:	673b      	str	r3, [r7, #112]	@ 0x70
 8005dbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	011a      	lsls	r2, r3, #4
 8005dca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005dcc:	4413      	add	r3, r2
 8005dce:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005dd2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ddc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005dde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005de2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	895b      	ldrh	r3, [r3, #10]
 8005dea:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005dee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005df2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	6959      	ldr	r1, [r3, #20]
 8005dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005e04:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005e08:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005e0c:	6800      	ldr	r0, [r0, #0]
 8005e0e:	f000 ff24 	bl	8006c5a <USB_WritePMA>
 8005e12:	e0ca      	b.n	8005faa <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005e14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	785b      	ldrb	r3, [r3, #1]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d177      	bne.n	8005f14 <USB_EPStartXfer+0xc98>
 8005e24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005e30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	461a      	mov	r2, r3
 8005e42:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005e44:	4413      	add	r3, r2
 8005e46:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005e48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	011a      	lsls	r2, r3, #4
 8005e56:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005e58:	4413      	add	r3, r2
 8005e5a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005e5e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005e60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e62:	881b      	ldrh	r3, [r3, #0]
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e6a:	b29a      	uxth	r2, r3
 8005e6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e6e:	801a      	strh	r2, [r3, #0]
 8005e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e74:	2b3e      	cmp	r3, #62	@ 0x3e
 8005e76:	d921      	bls.n	8005ebc <USB_EPStartXfer+0xc40>
 8005e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e7c:	095b      	lsrs	r3, r3, #5
 8005e7e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e86:	f003 031f 	and.w	r3, r3, #31
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d104      	bne.n	8005e98 <USB_EPStartXfer+0xc1c>
 8005e8e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005e92:	3b01      	subs	r3, #1
 8005e94:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005e98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e9a:	881b      	ldrh	r3, [r3, #0]
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	029b      	lsls	r3, r3, #10
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eb4:	b29a      	uxth	r2, r3
 8005eb6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005eb8:	801a      	strh	r2, [r3, #0]
 8005eba:	e05c      	b.n	8005f76 <USB_EPStartXfer+0xcfa>
 8005ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d10a      	bne.n	8005eda <USB_EPStartXfer+0xc5e>
 8005ec4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ec6:	881b      	ldrh	r3, [r3, #0]
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ece:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ed2:	b29a      	uxth	r2, r3
 8005ed4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ed6:	801a      	strh	r2, [r3, #0]
 8005ed8:	e04d      	b.n	8005f76 <USB_EPStartXfer+0xcfa>
 8005eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ede:	085b      	lsrs	r3, r3, #1
 8005ee0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ee8:	f003 0301 	and.w	r3, r3, #1
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d004      	beq.n	8005efa <USB_EPStartXfer+0xc7e>
 8005ef0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005efa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005efc:	881b      	ldrh	r3, [r3, #0]
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	029b      	lsls	r3, r3, #10
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	b29a      	uxth	r2, r3
 8005f0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f10:	801a      	strh	r2, [r3, #0]
 8005f12:	e030      	b.n	8005f76 <USB_EPStartXfer+0xcfa>
 8005f14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	785b      	ldrb	r3, [r3, #1]
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d128      	bne.n	8005f76 <USB_EPStartXfer+0xcfa>
 8005f24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	461a      	mov	r2, r3
 8005f44:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005f48:	4413      	add	r3, r2
 8005f4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	011a      	lsls	r2, r3, #4
 8005f5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005f60:	4413      	add	r3, r2
 8005f62:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005f66:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005f6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005f74:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005f76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	891b      	ldrh	r3, [r3, #8]
 8005f82:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	6959      	ldr	r1, [r3, #20]
 8005f92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005f9c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005fa0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005fa4:	6800      	ldr	r0, [r0, #0]
 8005fa6:	f000 fe58 	bl	8006c5a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005faa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	4413      	add	r3, r2
 8005fc4:	881b      	ldrh	r3, [r3, #0]
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fcc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fd0:	817b      	strh	r3, [r7, #10]
 8005fd2:	897b      	ldrh	r3, [r7, #10]
 8005fd4:	f083 0310 	eor.w	r3, r3, #16
 8005fd8:	817b      	strh	r3, [r7, #10]
 8005fda:	897b      	ldrh	r3, [r7, #10]
 8005fdc:	f083 0320 	eor.w	r3, r3, #32
 8005fe0:	817b      	strh	r3, [r7, #10]
 8005fe2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fe6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ff0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	441a      	add	r2, r3
 8005ffc:	897b      	ldrh	r3, [r7, #10]
 8005ffe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006002:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006006:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800600a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800600e:	b29b      	uxth	r3, r3
 8006010:	8013      	strh	r3, [r2, #0]
 8006012:	f000 bcde 	b.w	80069d2 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006016:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800601a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	7b1b      	ldrb	r3, [r3, #12]
 8006022:	2b00      	cmp	r3, #0
 8006024:	f040 80bb 	bne.w	800619e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006028:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800602c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	699a      	ldr	r2, [r3, #24]
 8006034:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006038:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	429a      	cmp	r2, r3
 8006042:	d917      	bls.n	8006074 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006044:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006048:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8006054:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006058:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	699a      	ldr	r2, [r3, #24]
 8006060:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006064:	1ad2      	subs	r2, r2, r3
 8006066:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800606a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	619a      	str	r2, [r3, #24]
 8006072:	e00e      	b.n	8006092 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006074:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006078:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	699b      	ldr	r3, [r3, #24]
 8006080:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8006084:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006088:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2200      	movs	r2, #0
 8006090:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006092:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006096:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80060a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	461a      	mov	r2, r3
 80060b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80060b6:	4413      	add	r3, r2
 80060b8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80060bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	011a      	lsls	r2, r3, #4
 80060ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80060ce:	4413      	add	r3, r2
 80060d0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80060d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80060d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060dc:	881b      	ldrh	r3, [r3, #0]
 80060de:	b29b      	uxth	r3, r3
 80060e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060e4:	b29a      	uxth	r2, r3
 80060e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060ea:	801a      	strh	r2, [r3, #0]
 80060ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060f0:	2b3e      	cmp	r3, #62	@ 0x3e
 80060f2:	d924      	bls.n	800613e <USB_EPStartXfer+0xec2>
 80060f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060f8:	095b      	lsrs	r3, r3, #5
 80060fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80060fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006102:	f003 031f 	and.w	r3, r3, #31
 8006106:	2b00      	cmp	r3, #0
 8006108:	d104      	bne.n	8006114 <USB_EPStartXfer+0xe98>
 800610a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800610e:	3b01      	subs	r3, #1
 8006110:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006114:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006118:	881b      	ldrh	r3, [r3, #0]
 800611a:	b29a      	uxth	r2, r3
 800611c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006120:	b29b      	uxth	r3, r3
 8006122:	029b      	lsls	r3, r3, #10
 8006124:	b29b      	uxth	r3, r3
 8006126:	4313      	orrs	r3, r2
 8006128:	b29b      	uxth	r3, r3
 800612a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800612e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006132:	b29a      	uxth	r2, r3
 8006134:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006138:	801a      	strh	r2, [r3, #0]
 800613a:	f000 bc10 	b.w	800695e <USB_EPStartXfer+0x16e2>
 800613e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006142:	2b00      	cmp	r3, #0
 8006144:	d10c      	bne.n	8006160 <USB_EPStartXfer+0xee4>
 8006146:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800614a:	881b      	ldrh	r3, [r3, #0]
 800614c:	b29b      	uxth	r3, r3
 800614e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006152:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006156:	b29a      	uxth	r2, r3
 8006158:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800615c:	801a      	strh	r2, [r3, #0]
 800615e:	e3fe      	b.n	800695e <USB_EPStartXfer+0x16e2>
 8006160:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006164:	085b      	lsrs	r3, r3, #1
 8006166:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800616a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800616e:	f003 0301 	and.w	r3, r3, #1
 8006172:	2b00      	cmp	r3, #0
 8006174:	d004      	beq.n	8006180 <USB_EPStartXfer+0xf04>
 8006176:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800617a:	3301      	adds	r3, #1
 800617c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006180:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006184:	881b      	ldrh	r3, [r3, #0]
 8006186:	b29a      	uxth	r2, r3
 8006188:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800618c:	b29b      	uxth	r3, r3
 800618e:	029b      	lsls	r3, r3, #10
 8006190:	b29b      	uxth	r3, r3
 8006192:	4313      	orrs	r3, r2
 8006194:	b29a      	uxth	r2, r3
 8006196:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800619a:	801a      	strh	r2, [r3, #0]
 800619c:	e3df      	b.n	800695e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800619e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	78db      	ldrb	r3, [r3, #3]
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	f040 8218 	bne.w	80065e0 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80061b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	785b      	ldrb	r3, [r3, #1]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	f040 809d 	bne.w	80062fc <USB_EPStartXfer+0x1080>
 80061c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80061d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061de:	b29b      	uxth	r3, r3
 80061e0:	461a      	mov	r2, r3
 80061e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80061e6:	4413      	add	r3, r2
 80061e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80061ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	011a      	lsls	r2, r3, #4
 80061fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80061fe:	4413      	add	r3, r2
 8006200:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006204:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006208:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800620c:	881b      	ldrh	r3, [r3, #0]
 800620e:	b29b      	uxth	r3, r3
 8006210:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006214:	b29a      	uxth	r2, r3
 8006216:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800621a:	801a      	strh	r2, [r3, #0]
 800621c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006220:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	2b3e      	cmp	r3, #62	@ 0x3e
 800622a:	d92b      	bls.n	8006284 <USB_EPStartXfer+0x1008>
 800622c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006230:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	095b      	lsrs	r3, r3, #5
 800623a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800623e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006242:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	f003 031f 	and.w	r3, r3, #31
 800624e:	2b00      	cmp	r3, #0
 8006250:	d104      	bne.n	800625c <USB_EPStartXfer+0xfe0>
 8006252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006256:	3b01      	subs	r3, #1
 8006258:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800625c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006260:	881b      	ldrh	r3, [r3, #0]
 8006262:	b29a      	uxth	r2, r3
 8006264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006268:	b29b      	uxth	r3, r3
 800626a:	029b      	lsls	r3, r3, #10
 800626c:	b29b      	uxth	r3, r3
 800626e:	4313      	orrs	r3, r2
 8006270:	b29b      	uxth	r3, r3
 8006272:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006276:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800627a:	b29a      	uxth	r2, r3
 800627c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006280:	801a      	strh	r2, [r3, #0]
 8006282:	e070      	b.n	8006366 <USB_EPStartXfer+0x10ea>
 8006284:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006288:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d10c      	bne.n	80062ae <USB_EPStartXfer+0x1032>
 8006294:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006298:	881b      	ldrh	r3, [r3, #0]
 800629a:	b29b      	uxth	r3, r3
 800629c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062a4:	b29a      	uxth	r2, r3
 80062a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80062aa:	801a      	strh	r2, [r3, #0]
 80062ac:	e05b      	b.n	8006366 <USB_EPStartXfer+0x10ea>
 80062ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	085b      	lsrs	r3, r3, #1
 80062bc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80062c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	f003 0301 	and.w	r3, r3, #1
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d004      	beq.n	80062de <USB_EPStartXfer+0x1062>
 80062d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062d8:	3301      	adds	r3, #1
 80062da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80062de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80062e2:	881b      	ldrh	r3, [r3, #0]
 80062e4:	b29a      	uxth	r2, r3
 80062e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	029b      	lsls	r3, r3, #10
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	4313      	orrs	r3, r2
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80062f8:	801a      	strh	r2, [r3, #0]
 80062fa:	e034      	b.n	8006366 <USB_EPStartXfer+0x10ea>
 80062fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006300:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	785b      	ldrb	r3, [r3, #1]
 8006308:	2b01      	cmp	r3, #1
 800630a:	d12c      	bne.n	8006366 <USB_EPStartXfer+0x10ea>
 800630c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006310:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800631a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800631e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006328:	b29b      	uxth	r3, r3
 800632a:	461a      	mov	r2, r3
 800632c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006330:	4413      	add	r3, r2
 8006332:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006336:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800633a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	011a      	lsls	r2, r3, #4
 8006344:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006348:	4413      	add	r3, r2
 800634a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800634e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006352:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006356:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	b29a      	uxth	r2, r3
 8006360:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006364:	801a      	strh	r2, [r3, #0]
 8006366:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800636a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006374:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006378:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	785b      	ldrb	r3, [r3, #1]
 8006380:	2b00      	cmp	r3, #0
 8006382:	f040 809d 	bne.w	80064c0 <USB_EPStartXfer+0x1244>
 8006386:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800638a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006394:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006398:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	461a      	mov	r2, r3
 80063a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80063aa:	4413      	add	r3, r2
 80063ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80063b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	011a      	lsls	r2, r3, #4
 80063be:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80063c2:	4413      	add	r3, r2
 80063c4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80063c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80063cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063d0:	881b      	ldrh	r3, [r3, #0]
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063d8:	b29a      	uxth	r2, r3
 80063da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063de:	801a      	strh	r2, [r3, #0]
 80063e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	2b3e      	cmp	r3, #62	@ 0x3e
 80063ee:	d92b      	bls.n	8006448 <USB_EPStartXfer+0x11cc>
 80063f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	095b      	lsrs	r3, r3, #5
 80063fe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006402:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006406:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	f003 031f 	and.w	r3, r3, #31
 8006412:	2b00      	cmp	r3, #0
 8006414:	d104      	bne.n	8006420 <USB_EPStartXfer+0x11a4>
 8006416:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800641a:	3b01      	subs	r3, #1
 800641c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006420:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006424:	881b      	ldrh	r3, [r3, #0]
 8006426:	b29a      	uxth	r2, r3
 8006428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800642c:	b29b      	uxth	r3, r3
 800642e:	029b      	lsls	r3, r3, #10
 8006430:	b29b      	uxth	r3, r3
 8006432:	4313      	orrs	r3, r2
 8006434:	b29b      	uxth	r3, r3
 8006436:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800643a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800643e:	b29a      	uxth	r2, r3
 8006440:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006444:	801a      	strh	r2, [r3, #0]
 8006446:	e069      	b.n	800651c <USB_EPStartXfer+0x12a0>
 8006448:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800644c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d10c      	bne.n	8006472 <USB_EPStartXfer+0x11f6>
 8006458:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800645c:	881b      	ldrh	r3, [r3, #0]
 800645e:	b29b      	uxth	r3, r3
 8006460:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006464:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006468:	b29a      	uxth	r2, r3
 800646a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800646e:	801a      	strh	r2, [r3, #0]
 8006470:	e054      	b.n	800651c <USB_EPStartXfer+0x12a0>
 8006472:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006476:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	085b      	lsrs	r3, r3, #1
 8006480:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006484:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006488:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	f003 0301 	and.w	r3, r3, #1
 8006494:	2b00      	cmp	r3, #0
 8006496:	d004      	beq.n	80064a2 <USB_EPStartXfer+0x1226>
 8006498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800649c:	3301      	adds	r3, #1
 800649e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80064a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80064a6:	881b      	ldrh	r3, [r3, #0]
 80064a8:	b29a      	uxth	r2, r3
 80064aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	029b      	lsls	r3, r3, #10
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	4313      	orrs	r3, r2
 80064b6:	b29a      	uxth	r2, r3
 80064b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80064bc:	801a      	strh	r2, [r3, #0]
 80064be:	e02d      	b.n	800651c <USB_EPStartXfer+0x12a0>
 80064c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	785b      	ldrb	r3, [r3, #1]
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d125      	bne.n	800651c <USB_EPStartXfer+0x12a0>
 80064d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064de:	b29b      	uxth	r3, r3
 80064e0:	461a      	mov	r2, r3
 80064e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80064e6:	4413      	add	r3, r2
 80064e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80064ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	011a      	lsls	r2, r3, #4
 80064fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80064fe:	4413      	add	r3, r2
 8006500:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006504:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006508:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800650c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	b29a      	uxth	r2, r3
 8006516:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800651a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800651c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006520:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	69db      	ldr	r3, [r3, #28]
 8006528:	2b00      	cmp	r3, #0
 800652a:	f000 8218 	beq.w	800695e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800652e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006532:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800653c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	4413      	add	r3, r2
 8006548:	881b      	ldrh	r3, [r3, #0]
 800654a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800654e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006552:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006556:	2b00      	cmp	r3, #0
 8006558:	d005      	beq.n	8006566 <USB_EPStartXfer+0x12ea>
 800655a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800655e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006562:	2b00      	cmp	r3, #0
 8006564:	d10d      	bne.n	8006582 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006566:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800656a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800656e:	2b00      	cmp	r3, #0
 8006570:	f040 81f5 	bne.w	800695e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006574:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800657c:	2b00      	cmp	r3, #0
 800657e:	f040 81ee 	bne.w	800695e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006582:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006586:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006590:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	4413      	add	r3, r2
 800659c:	881b      	ldrh	r3, [r3, #0]
 800659e:	b29b      	uxth	r3, r3
 80065a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065a8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80065ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	441a      	add	r2, r3
 80065c6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80065ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065d6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80065da:	b29b      	uxth	r3, r3
 80065dc:	8013      	strh	r3, [r2, #0]
 80065de:	e1be      	b.n	800695e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80065e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	78db      	ldrb	r3, [r3, #3]
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	f040 81b4 	bne.w	800695a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80065f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	699a      	ldr	r2, [r3, #24]
 80065fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006602:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	429a      	cmp	r2, r3
 800660c:	d917      	bls.n	800663e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800660e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006612:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800661e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006622:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	699a      	ldr	r2, [r3, #24]
 800662a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800662e:	1ad2      	subs	r2, r2, r3
 8006630:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006634:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	619a      	str	r2, [r3, #24]
 800663c:	e00e      	b.n	800665c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800663e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006642:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	699b      	ldr	r3, [r3, #24]
 800664a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800664e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006652:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2200      	movs	r2, #0
 800665a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800665c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006660:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	785b      	ldrb	r3, [r3, #1]
 8006668:	2b00      	cmp	r3, #0
 800666a:	f040 8085 	bne.w	8006778 <USB_EPStartXfer+0x14fc>
 800666e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006672:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800667c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006680:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800668a:	b29b      	uxth	r3, r3
 800668c:	461a      	mov	r2, r3
 800668e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006692:	4413      	add	r3, r2
 8006694:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006698:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800669c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	011a      	lsls	r2, r3, #4
 80066a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80066aa:	4413      	add	r3, r2
 80066ac:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80066b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80066b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80066b8:	881b      	ldrh	r3, [r3, #0]
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066c0:	b29a      	uxth	r2, r3
 80066c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80066c6:	801a      	strh	r2, [r3, #0]
 80066c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066cc:	2b3e      	cmp	r3, #62	@ 0x3e
 80066ce:	d923      	bls.n	8006718 <USB_EPStartXfer+0x149c>
 80066d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066d4:	095b      	lsrs	r3, r3, #5
 80066d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80066da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066de:	f003 031f 	and.w	r3, r3, #31
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d104      	bne.n	80066f0 <USB_EPStartXfer+0x1474>
 80066e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066ea:	3b01      	subs	r3, #1
 80066ec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80066f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80066f4:	881b      	ldrh	r3, [r3, #0]
 80066f6:	b29a      	uxth	r2, r3
 80066f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	029b      	lsls	r3, r3, #10
 8006700:	b29b      	uxth	r3, r3
 8006702:	4313      	orrs	r3, r2
 8006704:	b29b      	uxth	r3, r3
 8006706:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800670a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800670e:	b29a      	uxth	r2, r3
 8006710:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006714:	801a      	strh	r2, [r3, #0]
 8006716:	e060      	b.n	80067da <USB_EPStartXfer+0x155e>
 8006718:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800671c:	2b00      	cmp	r3, #0
 800671e:	d10c      	bne.n	800673a <USB_EPStartXfer+0x14be>
 8006720:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006724:	881b      	ldrh	r3, [r3, #0]
 8006726:	b29b      	uxth	r3, r3
 8006728:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800672c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006730:	b29a      	uxth	r2, r3
 8006732:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006736:	801a      	strh	r2, [r3, #0]
 8006738:	e04f      	b.n	80067da <USB_EPStartXfer+0x155e>
 800673a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800673e:	085b      	lsrs	r3, r3, #1
 8006740:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006744:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006748:	f003 0301 	and.w	r3, r3, #1
 800674c:	2b00      	cmp	r3, #0
 800674e:	d004      	beq.n	800675a <USB_EPStartXfer+0x14de>
 8006750:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006754:	3301      	adds	r3, #1
 8006756:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800675a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800675e:	881b      	ldrh	r3, [r3, #0]
 8006760:	b29a      	uxth	r2, r3
 8006762:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006766:	b29b      	uxth	r3, r3
 8006768:	029b      	lsls	r3, r3, #10
 800676a:	b29b      	uxth	r3, r3
 800676c:	4313      	orrs	r3, r2
 800676e:	b29a      	uxth	r2, r3
 8006770:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006774:	801a      	strh	r2, [r3, #0]
 8006776:	e030      	b.n	80067da <USB_EPStartXfer+0x155e>
 8006778:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800677c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	785b      	ldrb	r3, [r3, #1]
 8006784:	2b01      	cmp	r3, #1
 8006786:	d128      	bne.n	80067da <USB_EPStartXfer+0x155e>
 8006788:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800678c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006796:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800679a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	461a      	mov	r2, r3
 80067a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80067ac:	4413      	add	r3, r2
 80067ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80067b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	011a      	lsls	r2, r3, #4
 80067c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80067c4:	4413      	add	r3, r2
 80067c6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80067ca:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80067ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80067d8:	801a      	strh	r2, [r3, #0]
 80067da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80067e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	785b      	ldrb	r3, [r3, #1]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f040 8085 	bne.w	8006904 <USB_EPStartXfer+0x1688>
 80067fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006808:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800680c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006816:	b29b      	uxth	r3, r3
 8006818:	461a      	mov	r2, r3
 800681a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800681e:	4413      	add	r3, r2
 8006820:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006824:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006828:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	011a      	lsls	r2, r3, #4
 8006832:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006836:	4413      	add	r3, r2
 8006838:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800683c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006840:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006844:	881b      	ldrh	r3, [r3, #0]
 8006846:	b29b      	uxth	r3, r3
 8006848:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800684c:	b29a      	uxth	r2, r3
 800684e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006852:	801a      	strh	r2, [r3, #0]
 8006854:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006858:	2b3e      	cmp	r3, #62	@ 0x3e
 800685a:	d923      	bls.n	80068a4 <USB_EPStartXfer+0x1628>
 800685c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006860:	095b      	lsrs	r3, r3, #5
 8006862:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006866:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800686a:	f003 031f 	and.w	r3, r3, #31
 800686e:	2b00      	cmp	r3, #0
 8006870:	d104      	bne.n	800687c <USB_EPStartXfer+0x1600>
 8006872:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006876:	3b01      	subs	r3, #1
 8006878:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800687c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006880:	881b      	ldrh	r3, [r3, #0]
 8006882:	b29a      	uxth	r2, r3
 8006884:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006888:	b29b      	uxth	r3, r3
 800688a:	029b      	lsls	r3, r3, #10
 800688c:	b29b      	uxth	r3, r3
 800688e:	4313      	orrs	r3, r2
 8006890:	b29b      	uxth	r3, r3
 8006892:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006896:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800689a:	b29a      	uxth	r2, r3
 800689c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80068a0:	801a      	strh	r2, [r3, #0]
 80068a2:	e05c      	b.n	800695e <USB_EPStartXfer+0x16e2>
 80068a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d10c      	bne.n	80068c6 <USB_EPStartXfer+0x164a>
 80068ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80068b0:	881b      	ldrh	r3, [r3, #0]
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068bc:	b29a      	uxth	r2, r3
 80068be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80068c2:	801a      	strh	r2, [r3, #0]
 80068c4:	e04b      	b.n	800695e <USB_EPStartXfer+0x16e2>
 80068c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ca:	085b      	lsrs	r3, r3, #1
 80068cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80068d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068d4:	f003 0301 	and.w	r3, r3, #1
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d004      	beq.n	80068e6 <USB_EPStartXfer+0x166a>
 80068dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80068e0:	3301      	adds	r3, #1
 80068e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80068e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80068ea:	881b      	ldrh	r3, [r3, #0]
 80068ec:	b29a      	uxth	r2, r3
 80068ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	029b      	lsls	r3, r3, #10
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	4313      	orrs	r3, r2
 80068fa:	b29a      	uxth	r2, r3
 80068fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006900:	801a      	strh	r2, [r3, #0]
 8006902:	e02c      	b.n	800695e <USB_EPStartXfer+0x16e2>
 8006904:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006908:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	785b      	ldrb	r3, [r3, #1]
 8006910:	2b01      	cmp	r3, #1
 8006912:	d124      	bne.n	800695e <USB_EPStartXfer+0x16e2>
 8006914:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006918:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006922:	b29b      	uxth	r3, r3
 8006924:	461a      	mov	r2, r3
 8006926:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800692a:	4413      	add	r3, r2
 800692c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006930:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006934:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	011a      	lsls	r2, r3, #4
 800693e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006942:	4413      	add	r3, r2
 8006944:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006948:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800694c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006950:	b29a      	uxth	r2, r3
 8006952:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006956:	801a      	strh	r2, [r3, #0]
 8006958:	e001      	b.n	800695e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e03a      	b.n	80069d4 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800695e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006962:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800696c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	4413      	add	r3, r2
 8006978:	881b      	ldrh	r3, [r3, #0]
 800697a:	b29b      	uxth	r3, r3
 800697c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006980:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006984:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006988:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800698c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006990:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006994:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006998:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800699c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80069a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	441a      	add	r2, r3
 80069ba:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80069be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80069d2:	2300      	movs	r3, #0
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80069de:	b480      	push	{r7}
 80069e0:	b085      	sub	sp, #20
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
 80069e6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	785b      	ldrb	r3, [r3, #1]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d020      	beq.n	8006a32 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	4413      	add	r3, r2
 80069fa:	881b      	ldrh	r3, [r3, #0]
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a06:	81bb      	strh	r3, [r7, #12]
 8006a08:	89bb      	ldrh	r3, [r7, #12]
 8006a0a:	f083 0310 	eor.w	r3, r3, #16
 8006a0e:	81bb      	strh	r3, [r7, #12]
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	441a      	add	r2, r3
 8006a1a:	89bb      	ldrh	r3, [r7, #12]
 8006a1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	8013      	strh	r3, [r2, #0]
 8006a30:	e01f      	b.n	8006a72 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	4413      	add	r3, r2
 8006a3c:	881b      	ldrh	r3, [r3, #0]
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a48:	81fb      	strh	r3, [r7, #14]
 8006a4a:	89fb      	ldrh	r3, [r7, #14]
 8006a4c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006a50:	81fb      	strh	r3, [r7, #14]
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	441a      	add	r2, r3
 8006a5c:	89fb      	ldrh	r3, [r7, #14]
 8006a5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006a72:	2300      	movs	r3, #0
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3714      	adds	r7, #20
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bc80      	pop	{r7}
 8006a7c:	4770      	bx	lr

08006a7e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a7e:	b480      	push	{r7}
 8006a80:	b087      	sub	sp, #28
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
 8006a86:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	7b1b      	ldrb	r3, [r3, #12]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	f040 809d 	bne.w	8006bcc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	785b      	ldrb	r3, [r3, #1]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d04c      	beq.n	8006b34 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	4413      	add	r3, r2
 8006aa4:	881b      	ldrh	r3, [r3, #0]
 8006aa6:	823b      	strh	r3, [r7, #16]
 8006aa8:	8a3b      	ldrh	r3, [r7, #16]
 8006aaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d01b      	beq.n	8006aea <USB_EPClearStall+0x6c>
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	4413      	add	r3, r2
 8006abc:	881b      	ldrh	r3, [r3, #0]
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ac4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ac8:	81fb      	strh	r3, [r7, #14]
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	441a      	add	r2, r3
 8006ad4:	89fb      	ldrh	r3, [r7, #14]
 8006ad6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ada:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ade:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ae2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	78db      	ldrb	r3, [r3, #3]
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d06c      	beq.n	8006bcc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	4413      	add	r3, r2
 8006afc:	881b      	ldrh	r3, [r3, #0]
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b08:	81bb      	strh	r3, [r7, #12]
 8006b0a:	89bb      	ldrh	r3, [r7, #12]
 8006b0c:	f083 0320 	eor.w	r3, r3, #32
 8006b10:	81bb      	strh	r3, [r7, #12]
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	441a      	add	r2, r3
 8006b1c:	89bb      	ldrh	r3, [r7, #12]
 8006b1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	8013      	strh	r3, [r2, #0]
 8006b32:	e04b      	b.n	8006bcc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	4413      	add	r3, r2
 8006b3e:	881b      	ldrh	r3, [r3, #0]
 8006b40:	82fb      	strh	r3, [r7, #22]
 8006b42:	8afb      	ldrh	r3, [r7, #22]
 8006b44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d01b      	beq.n	8006b84 <USB_EPClearStall+0x106>
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	4413      	add	r3, r2
 8006b56:	881b      	ldrh	r3, [r3, #0]
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b62:	82bb      	strh	r3, [r7, #20]
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	441a      	add	r2, r3
 8006b6e:	8abb      	ldrh	r3, [r7, #20]
 8006b70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b78:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	4413      	add	r3, r2
 8006b8e:	881b      	ldrh	r3, [r3, #0]
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b9a:	827b      	strh	r3, [r7, #18]
 8006b9c:	8a7b      	ldrh	r3, [r7, #18]
 8006b9e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006ba2:	827b      	strh	r3, [r7, #18]
 8006ba4:	8a7b      	ldrh	r3, [r7, #18]
 8006ba6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006baa:	827b      	strh	r3, [r7, #18]
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	441a      	add	r2, r3
 8006bb6:	8a7b      	ldrh	r3, [r7, #18]
 8006bb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	371c      	adds	r7, #28
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bc80      	pop	{r7}
 8006bd6:	4770      	bx	lr

08006bd8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b083      	sub	sp, #12
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	460b      	mov	r3, r1
 8006be2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006be4:	78fb      	ldrb	r3, [r7, #3]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d103      	bne.n	8006bf2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2280      	movs	r2, #128	@ 0x80
 8006bee:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006bf2:	2300      	movs	r3, #0
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	370c      	adds	r7, #12
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bc80      	pop	{r7}
 8006bfc:	4770      	bx	lr

08006bfe <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006bfe:	b480      	push	{r7}
 8006c00:	b083      	sub	sp, #12
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006c06:	2300      	movs	r3, #0
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	370c      	adds	r7, #12
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bc80      	pop	{r7}
 8006c10:	4770      	bx	lr

08006c12 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006c12:	b480      	push	{r7}
 8006c14:	b083      	sub	sp, #12
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	370c      	adds	r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bc80      	pop	{r7}
 8006c24:	4770      	bx	lr

08006c26 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006c26:	b480      	push	{r7}
 8006c28:	b085      	sub	sp, #20
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006c38:	68fb      	ldr	r3, [r7, #12]
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3714      	adds	r7, #20
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bc80      	pop	{r7}
 8006c42:	4770      	bx	lr

08006c44 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006c4e:	2300      	movs	r3, #0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	370c      	adds	r7, #12
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bc80      	pop	{r7}
 8006c58:	4770      	bx	lr

08006c5a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006c5a:	b480      	push	{r7}
 8006c5c:	b08b      	sub	sp, #44	@ 0x2c
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	60f8      	str	r0, [r7, #12]
 8006c62:	60b9      	str	r1, [r7, #8]
 8006c64:	4611      	mov	r1, r2
 8006c66:	461a      	mov	r2, r3
 8006c68:	460b      	mov	r3, r1
 8006c6a:	80fb      	strh	r3, [r7, #6]
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006c70:	88bb      	ldrh	r3, [r7, #4]
 8006c72:	3301      	adds	r3, #1
 8006c74:	085b      	lsrs	r3, r3, #1
 8006c76:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006c80:	88fb      	ldrh	r3, [r7, #6]
 8006c82:	005a      	lsls	r2, r3, #1
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	4413      	add	r3, r2
 8006c88:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c8c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c92:	e01f      	b.n	8006cd4 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	b21b      	sxth	r3, r3
 8006ca2:	021b      	lsls	r3, r3, #8
 8006ca4:	b21a      	sxth	r2, r3
 8006ca6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006caa:	4313      	orrs	r3, r2
 8006cac:	b21b      	sxth	r3, r3
 8006cae:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006cb0:	6a3b      	ldr	r3, [r7, #32]
 8006cb2:	8a7a      	ldrh	r2, [r7, #18]
 8006cb4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006cb6:	6a3b      	ldr	r3, [r7, #32]
 8006cb8:	3302      	adds	r3, #2
 8006cba:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006cbc:	6a3b      	ldr	r3, [r7, #32]
 8006cbe:	3302      	adds	r3, #2
 8006cc0:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	3301      	adds	r3, #1
 8006ccc:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd0:	3b01      	subs	r3, #1
 8006cd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1dc      	bne.n	8006c94 <USB_WritePMA+0x3a>
  }
}
 8006cda:	bf00      	nop
 8006cdc:	bf00      	nop
 8006cde:	372c      	adds	r7, #44	@ 0x2c
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bc80      	pop	{r7}
 8006ce4:	4770      	bx	lr

08006ce6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006ce6:	b480      	push	{r7}
 8006ce8:	b08b      	sub	sp, #44	@ 0x2c
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	60f8      	str	r0, [r7, #12]
 8006cee:	60b9      	str	r1, [r7, #8]
 8006cf0:	4611      	mov	r1, r2
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	80fb      	strh	r3, [r7, #6]
 8006cf8:	4613      	mov	r3, r2
 8006cfa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006cfc:	88bb      	ldrh	r3, [r7, #4]
 8006cfe:	085b      	lsrs	r3, r3, #1
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006d0c:	88fb      	ldrh	r3, [r7, #6]
 8006d0e:	005a      	lsls	r2, r3, #1
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	4413      	add	r3, r2
 8006d14:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d18:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d1e:	e01b      	b.n	8006d58 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006d20:	6a3b      	ldr	r3, [r7, #32]
 8006d22:	881b      	ldrh	r3, [r3, #0]
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006d28:	6a3b      	ldr	r3, [r7, #32]
 8006d2a:	3302      	adds	r3, #2
 8006d2c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	b2da      	uxtb	r2, r3
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	3301      	adds	r3, #1
 8006d3a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	0a1b      	lsrs	r3, r3, #8
 8006d40:	b2da      	uxtb	r2, r3
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	3301      	adds	r3, #1
 8006d4a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006d4c:	6a3b      	ldr	r3, [r7, #32]
 8006d4e:	3302      	adds	r3, #2
 8006d50:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d54:	3b01      	subs	r3, #1
 8006d56:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d1e0      	bne.n	8006d20 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006d5e:	88bb      	ldrh	r3, [r7, #4]
 8006d60:	f003 0301 	and.w	r3, r3, #1
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d007      	beq.n	8006d7a <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006d6a:	6a3b      	ldr	r3, [r7, #32]
 8006d6c:	881b      	ldrh	r3, [r3, #0]
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	b2da      	uxtb	r2, r3
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	701a      	strb	r2, [r3, #0]
  }
}
 8006d7a:	bf00      	nop
 8006d7c:	372c      	adds	r7, #44	@ 0x2c
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bc80      	pop	{r7}
 8006d82:	4770      	bx	lr

08006d84 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006d90:	2300      	movs	r3, #0
 8006d92:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	7c1b      	ldrb	r3, [r3, #16]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d115      	bne.n	8006dc8 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006d9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006da0:	2202      	movs	r2, #2
 8006da2:	2181      	movs	r1, #129	@ 0x81
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f001 fe82 	bl	8008aae <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2201      	movs	r2, #1
 8006dae:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006db0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006db4:	2202      	movs	r2, #2
 8006db6:	2101      	movs	r1, #1
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f001 fe78 	bl	8008aae <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8006dc6:	e012      	b.n	8006dee <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006dc8:	2340      	movs	r3, #64	@ 0x40
 8006dca:	2202      	movs	r2, #2
 8006dcc:	2181      	movs	r1, #129	@ 0x81
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f001 fe6d 	bl	8008aae <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006dda:	2340      	movs	r3, #64	@ 0x40
 8006ddc:	2202      	movs	r2, #2
 8006dde:	2101      	movs	r1, #1
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f001 fe64 	bl	8008aae <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2201      	movs	r2, #1
 8006dea:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006dee:	2308      	movs	r3, #8
 8006df0:	2203      	movs	r2, #3
 8006df2:	2182      	movs	r1, #130	@ 0x82
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f001 fe5a 	bl	8008aae <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006e00:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006e04:	f001 ff7a 	bl	8008cfc <USBD_static_malloc>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d102      	bne.n	8006e20 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	73fb      	strb	r3, [r7, #15]
 8006e1e:	e026      	b.n	8006e6e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e26:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	7c1b      	ldrb	r3, [r3, #16]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d109      	bne.n	8006e5e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006e50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006e54:	2101      	movs	r1, #1
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f001 ff19 	bl	8008c8e <USBD_LL_PrepareReceive>
 8006e5c:	e007      	b.n	8006e6e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006e64:	2340      	movs	r3, #64	@ 0x40
 8006e66:	2101      	movs	r1, #1
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f001 ff10 	bl	8008c8e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3710      	adds	r7, #16
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	460b      	mov	r3, r1
 8006e82:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006e84:	2300      	movs	r3, #0
 8006e86:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006e88:	2181      	movs	r1, #129	@ 0x81
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f001 fe35 	bl	8008afa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006e96:	2101      	movs	r1, #1
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f001 fe2e 	bl	8008afa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006ea6:	2182      	movs	r1, #130	@ 0x82
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f001 fe26 	bl	8008afa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00e      	beq.n	8006edc <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f001 ff20 	bl	8008d14 <USBD_static_free>
    pdev->pClassData = NULL;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8006edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b086      	sub	sp, #24
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
 8006eee:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ef6:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006efc:	2300      	movs	r3, #0
 8006efe:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006f00:	2300      	movs	r3, #0
 8006f02:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d039      	beq.n	8006f84 <USBD_CDC_Setup+0x9e>
 8006f10:	2b20      	cmp	r3, #32
 8006f12:	d17f      	bne.n	8007014 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	88db      	ldrh	r3, [r3, #6]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d029      	beq.n	8006f70 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	b25b      	sxtb	r3, r3
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	da11      	bge.n	8006f4a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	683a      	ldr	r2, [r7, #0]
 8006f30:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006f32:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006f34:	683a      	ldr	r2, [r7, #0]
 8006f36:	88d2      	ldrh	r2, [r2, #6]
 8006f38:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006f3a:	6939      	ldr	r1, [r7, #16]
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	88db      	ldrh	r3, [r3, #6]
 8006f40:	461a      	mov	r2, r3
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f001 fa06 	bl	8008354 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006f48:	e06b      	b.n	8007022 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	785a      	ldrb	r2, [r3, #1]
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	88db      	ldrh	r3, [r3, #6]
 8006f58:	b2da      	uxtb	r2, r3
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006f60:	6939      	ldr	r1, [r7, #16]
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	88db      	ldrh	r3, [r3, #6]
 8006f66:	461a      	mov	r2, r3
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f001 fa21 	bl	80083b0 <USBD_CtlPrepareRx>
      break;
 8006f6e:	e058      	b.n	8007022 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	683a      	ldr	r2, [r7, #0]
 8006f7a:	7850      	ldrb	r0, [r2, #1]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	6839      	ldr	r1, [r7, #0]
 8006f80:	4798      	blx	r3
      break;
 8006f82:	e04e      	b.n	8007022 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	785b      	ldrb	r3, [r3, #1]
 8006f88:	2b0b      	cmp	r3, #11
 8006f8a:	d02e      	beq.n	8006fea <USBD_CDC_Setup+0x104>
 8006f8c:	2b0b      	cmp	r3, #11
 8006f8e:	dc38      	bgt.n	8007002 <USBD_CDC_Setup+0x11c>
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d002      	beq.n	8006f9a <USBD_CDC_Setup+0xb4>
 8006f94:	2b0a      	cmp	r3, #10
 8006f96:	d014      	beq.n	8006fc2 <USBD_CDC_Setup+0xdc>
 8006f98:	e033      	b.n	8007002 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fa0:	2b03      	cmp	r3, #3
 8006fa2:	d107      	bne.n	8006fb4 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006fa4:	f107 030c 	add.w	r3, r7, #12
 8006fa8:	2202      	movs	r2, #2
 8006faa:	4619      	mov	r1, r3
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f001 f9d1 	bl	8008354 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006fb2:	e02e      	b.n	8007012 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006fb4:	6839      	ldr	r1, [r7, #0]
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f001 f962 	bl	8008280 <USBD_CtlError>
            ret = USBD_FAIL;
 8006fbc:	2302      	movs	r3, #2
 8006fbe:	75fb      	strb	r3, [r7, #23]
          break;
 8006fc0:	e027      	b.n	8007012 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fc8:	2b03      	cmp	r3, #3
 8006fca:	d107      	bne.n	8006fdc <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006fcc:	f107 030f 	add.w	r3, r7, #15
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f001 f9bd 	bl	8008354 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006fda:	e01a      	b.n	8007012 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006fdc:	6839      	ldr	r1, [r7, #0]
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f001 f94e 	bl	8008280 <USBD_CtlError>
            ret = USBD_FAIL;
 8006fe4:	2302      	movs	r3, #2
 8006fe6:	75fb      	strb	r3, [r7, #23]
          break;
 8006fe8:	e013      	b.n	8007012 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ff0:	2b03      	cmp	r3, #3
 8006ff2:	d00d      	beq.n	8007010 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006ff4:	6839      	ldr	r1, [r7, #0]
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f001 f942 	bl	8008280 <USBD_CtlError>
            ret = USBD_FAIL;
 8006ffc:	2302      	movs	r3, #2
 8006ffe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007000:	e006      	b.n	8007010 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007002:	6839      	ldr	r1, [r7, #0]
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f001 f93b 	bl	8008280 <USBD_CtlError>
          ret = USBD_FAIL;
 800700a:	2302      	movs	r3, #2
 800700c:	75fb      	strb	r3, [r7, #23]
          break;
 800700e:	e000      	b.n	8007012 <USBD_CDC_Setup+0x12c>
          break;
 8007010:	bf00      	nop
      }
      break;
 8007012:	e006      	b.n	8007022 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007014:	6839      	ldr	r1, [r7, #0]
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f001 f932 	bl	8008280 <USBD_CtlError>
      ret = USBD_FAIL;
 800701c:	2302      	movs	r3, #2
 800701e:	75fb      	strb	r3, [r7, #23]
      break;
 8007020:	bf00      	nop
  }

  return ret;
 8007022:	7dfb      	ldrb	r3, [r7, #23]
}
 8007024:	4618      	mov	r0, r3
 8007026:	3718      	adds	r7, #24
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	460b      	mov	r3, r1
 8007036:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800703e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007046:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800704e:	2b00      	cmp	r3, #0
 8007050:	d03a      	beq.n	80070c8 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007052:	78fa      	ldrb	r2, [r7, #3]
 8007054:	6879      	ldr	r1, [r7, #4]
 8007056:	4613      	mov	r3, r2
 8007058:	009b      	lsls	r3, r3, #2
 800705a:	4413      	add	r3, r2
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	440b      	add	r3, r1
 8007060:	331c      	adds	r3, #28
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d029      	beq.n	80070bc <USBD_CDC_DataIn+0x90>
 8007068:	78fa      	ldrb	r2, [r7, #3]
 800706a:	6879      	ldr	r1, [r7, #4]
 800706c:	4613      	mov	r3, r2
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	4413      	add	r3, r2
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	440b      	add	r3, r1
 8007076:	331c      	adds	r3, #28
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	78f9      	ldrb	r1, [r7, #3]
 800707c:	68b8      	ldr	r0, [r7, #8]
 800707e:	460b      	mov	r3, r1
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	440b      	add	r3, r1
 8007084:	00db      	lsls	r3, r3, #3
 8007086:	4403      	add	r3, r0
 8007088:	3320      	adds	r3, #32
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007090:	fb01 f303 	mul.w	r3, r1, r3
 8007094:	1ad3      	subs	r3, r2, r3
 8007096:	2b00      	cmp	r3, #0
 8007098:	d110      	bne.n	80070bc <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800709a:	78fa      	ldrb	r2, [r7, #3]
 800709c:	6879      	ldr	r1, [r7, #4]
 800709e:	4613      	mov	r3, r2
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	4413      	add	r3, r2
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	440b      	add	r3, r1
 80070a8:	331c      	adds	r3, #28
 80070aa:	2200      	movs	r2, #0
 80070ac:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80070ae:	78f9      	ldrb	r1, [r7, #3]
 80070b0:	2300      	movs	r3, #0
 80070b2:	2200      	movs	r2, #0
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f001 fdc7 	bl	8008c48 <USBD_LL_Transmit>
 80070ba:	e003      	b.n	80070c4 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2200      	movs	r2, #0
 80070c0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 80070c4:	2300      	movs	r3, #0
 80070c6:	e000      	b.n	80070ca <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80070c8:	2302      	movs	r3, #2
  }
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3710      	adds	r7, #16
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b084      	sub	sp, #16
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
 80070da:	460b      	mov	r3, r1
 80070dc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070e4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80070e6:	78fb      	ldrb	r3, [r7, #3]
 80070e8:	4619      	mov	r1, r3
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f001 fdf2 	bl	8008cd4 <USBD_LL_GetRxDataSize>
 80070f0:	4602      	mov	r2, r0
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d00d      	beq.n	800711e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	68fa      	ldr	r2, [r7, #12]
 800710c:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007116:	4611      	mov	r1, r2
 8007118:	4798      	blx	r3

    return USBD_OK;
 800711a:	2300      	movs	r3, #0
 800711c:	e000      	b.n	8007120 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800711e:	2302      	movs	r3, #2
  }
}
 8007120:	4618      	mov	r0, r3
 8007122:	3710      	adds	r7, #16
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007136:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800713e:	2b00      	cmp	r3, #0
 8007140:	d014      	beq.n	800716c <USBD_CDC_EP0_RxReady+0x44>
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007148:	2bff      	cmp	r3, #255	@ 0xff
 800714a:	d00f      	beq.n	800716c <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800715a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007162:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	22ff      	movs	r2, #255	@ 0xff
 8007168:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800716c:	2300      	movs	r3, #0
}
 800716e:	4618      	mov	r0, r3
 8007170:	3710      	adds	r7, #16
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
	...

08007178 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2243      	movs	r2, #67	@ 0x43
 8007184:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007186:	4b03      	ldr	r3, [pc, #12]	@ (8007194 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007188:	4618      	mov	r0, r3
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	bc80      	pop	{r7}
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop
 8007194:	20000098 	.word	0x20000098

08007198 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2243      	movs	r2, #67	@ 0x43
 80071a4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80071a6:	4b03      	ldr	r3, [pc, #12]	@ (80071b4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	370c      	adds	r7, #12
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bc80      	pop	{r7}
 80071b0:	4770      	bx	lr
 80071b2:	bf00      	nop
 80071b4:	20000054 	.word	0x20000054

080071b8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2243      	movs	r2, #67	@ 0x43
 80071c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80071c6:	4b03      	ldr	r3, [pc, #12]	@ (80071d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	370c      	adds	r7, #12
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bc80      	pop	{r7}
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	200000dc 	.word	0x200000dc

080071d8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	220a      	movs	r2, #10
 80071e4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80071e6:	4b03      	ldr	r3, [pc, #12]	@ (80071f4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	370c      	adds	r7, #12
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bc80      	pop	{r7}
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	20000010 	.word	0x20000010

080071f8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b085      	sub	sp, #20
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007202:	2302      	movs	r3, #2
 8007204:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d005      	beq.n	8007218 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	683a      	ldr	r2, [r7, #0]
 8007210:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8007214:	2300      	movs	r3, #0
 8007216:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007218:	7bfb      	ldrb	r3, [r7, #15]
}
 800721a:	4618      	mov	r0, r3
 800721c:	3714      	adds	r7, #20
 800721e:	46bd      	mov	sp, r7
 8007220:	bc80      	pop	{r7}
 8007222:	4770      	bx	lr

08007224 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007224:	b480      	push	{r7}
 8007226:	b087      	sub	sp, #28
 8007228:	af00      	add	r7, sp, #0
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	4613      	mov	r3, r2
 8007230:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007238:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	68ba      	ldr	r2, [r7, #8]
 800723e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007242:	88fa      	ldrh	r2, [r7, #6]
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800724a:	2300      	movs	r3, #0
}
 800724c:	4618      	mov	r0, r3
 800724e:	371c      	adds	r7, #28
 8007250:	46bd      	mov	sp, r7
 8007252:	bc80      	pop	{r7}
 8007254:	4770      	bx	lr

08007256 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007256:	b480      	push	{r7}
 8007258:	b085      	sub	sp, #20
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
 800725e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007266:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	683a      	ldr	r2, [r7, #0]
 800726c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	3714      	adds	r7, #20
 8007276:	46bd      	mov	sp, r7
 8007278:	bc80      	pop	{r7}
 800727a:	4770      	bx	lr

0800727c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800728a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007292:	2b00      	cmp	r3, #0
 8007294:	d01c      	beq.n	80072d0 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800729c:	2b00      	cmp	r3, #0
 800729e:	d115      	bne.n	80072cc <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80072be:	b29b      	uxth	r3, r3
 80072c0:	2181      	movs	r1, #129	@ 0x81
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f001 fcc0 	bl	8008c48 <USBD_LL_Transmit>

      return USBD_OK;
 80072c8:	2300      	movs	r3, #0
 80072ca:	e002      	b.n	80072d2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80072cc:	2301      	movs	r3, #1
 80072ce:	e000      	b.n	80072d2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80072d0:	2302      	movs	r3, #2
  }
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3710      	adds	r7, #16
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}

080072da <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80072da:	b580      	push	{r7, lr}
 80072dc:	b084      	sub	sp, #16
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072e8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d017      	beq.n	8007324 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	7c1b      	ldrb	r3, [r3, #16]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d109      	bne.n	8007310 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007302:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007306:	2101      	movs	r1, #1
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f001 fcc0 	bl	8008c8e <USBD_LL_PrepareReceive>
 800730e:	e007      	b.n	8007320 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007316:	2340      	movs	r3, #64	@ 0x40
 8007318:	2101      	movs	r1, #1
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f001 fcb7 	bl	8008c8e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007320:	2300      	movs	r3, #0
 8007322:	e000      	b.n	8007326 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007324:	2302      	movs	r3, #2
  }
}
 8007326:	4618      	mov	r0, r3
 8007328:	3710      	adds	r7, #16
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}

0800732e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800732e:	b580      	push	{r7, lr}
 8007330:	b084      	sub	sp, #16
 8007332:	af00      	add	r7, sp, #0
 8007334:	60f8      	str	r0, [r7, #12]
 8007336:	60b9      	str	r1, [r7, #8]
 8007338:	4613      	mov	r3, r2
 800733a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d101      	bne.n	8007346 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007342:	2302      	movs	r3, #2
 8007344:	e01a      	b.n	800737c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800734c:	2b00      	cmp	r3, #0
 800734e:	d003      	beq.n	8007358 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2200      	movs	r2, #0
 8007354:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d003      	beq.n	8007366 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	68ba      	ldr	r2, [r7, #8]
 8007362:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2201      	movs	r2, #1
 800736a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	79fa      	ldrb	r2, [r7, #7]
 8007372:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007374:	68f8      	ldr	r0, [r7, #12]
 8007376:	f001 fb25 	bl	80089c4 <USBD_LL_Init>

  return USBD_OK;
 800737a:	2300      	movs	r3, #0
}
 800737c:	4618      	mov	r0, r3
 800737e:	3710      	adds	r7, #16
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007384:	b480      	push	{r7}
 8007386:	b085      	sub	sp, #20
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800738e:	2300      	movs	r3, #0
 8007390:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d006      	beq.n	80073a6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	683a      	ldr	r2, [r7, #0]
 800739c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80073a0:	2300      	movs	r3, #0
 80073a2:	73fb      	strb	r3, [r7, #15]
 80073a4:	e001      	b.n	80073aa <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80073a6:	2302      	movs	r3, #2
 80073a8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80073aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3714      	adds	r7, #20
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bc80      	pop	{r7}
 80073b4:	4770      	bx	lr

080073b6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b082      	sub	sp, #8
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f001 fb5a 	bl	8008a78 <USBD_LL_Start>

  return USBD_OK;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3708      	adds	r7, #8
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}

080073ce <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80073ce:	b480      	push	{r7}
 80073d0:	b083      	sub	sp, #12
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	370c      	adds	r7, #12
 80073dc:	46bd      	mov	sp, r7
 80073de:	bc80      	pop	{r7}
 80073e0:	4770      	bx	lr

080073e2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b084      	sub	sp, #16
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
 80073ea:	460b      	mov	r3, r1
 80073ec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80073ee:	2302      	movs	r3, #2
 80073f0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d00c      	beq.n	8007416 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	78fa      	ldrb	r2, [r7, #3]
 8007406:	4611      	mov	r1, r2
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	4798      	blx	r3
 800740c:	4603      	mov	r3, r0
 800740e:	2b00      	cmp	r3, #0
 8007410:	d101      	bne.n	8007416 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007412:	2300      	movs	r3, #0
 8007414:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007416:	7bfb      	ldrb	r3, [r7, #15]
}
 8007418:	4618      	mov	r0, r3
 800741a:	3710      	adds	r7, #16
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	460b      	mov	r3, r1
 800742a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	78fa      	ldrb	r2, [r7, #3]
 8007436:	4611      	mov	r1, r2
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	4798      	blx	r3

  return USBD_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	3708      	adds	r7, #8
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007446:	b580      	push	{r7, lr}
 8007448:	b082      	sub	sp, #8
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
 800744e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007456:	6839      	ldr	r1, [r7, #0]
 8007458:	4618      	mov	r0, r3
 800745a:	f000 fed8 	bl	800820e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2201      	movs	r2, #1
 8007462:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800746c:	461a      	mov	r2, r3
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800747a:	f003 031f 	and.w	r3, r3, #31
 800747e:	2b02      	cmp	r3, #2
 8007480:	d016      	beq.n	80074b0 <USBD_LL_SetupStage+0x6a>
 8007482:	2b02      	cmp	r3, #2
 8007484:	d81c      	bhi.n	80074c0 <USBD_LL_SetupStage+0x7a>
 8007486:	2b00      	cmp	r3, #0
 8007488:	d002      	beq.n	8007490 <USBD_LL_SetupStage+0x4a>
 800748a:	2b01      	cmp	r3, #1
 800748c:	d008      	beq.n	80074a0 <USBD_LL_SetupStage+0x5a>
 800748e:	e017      	b.n	80074c0 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007496:	4619      	mov	r1, r3
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 f9cb 	bl	8007834 <USBD_StdDevReq>
      break;
 800749e:	e01a      	b.n	80074d6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80074a6:	4619      	mov	r1, r3
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 fa2d 	bl	8007908 <USBD_StdItfReq>
      break;
 80074ae:	e012      	b.n	80074d6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80074b6:	4619      	mov	r1, r3
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 fa6d 	bl	8007998 <USBD_StdEPReq>
      break;
 80074be:	e00a      	b.n	80074d6 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80074c6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	4619      	mov	r1, r3
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f001 fb32 	bl	8008b38 <USBD_LL_StallEP>
      break;
 80074d4:	bf00      	nop
  }

  return USBD_OK;
 80074d6:	2300      	movs	r3, #0
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3708      	adds	r7, #8
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b086      	sub	sp, #24
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	460b      	mov	r3, r1
 80074ea:	607a      	str	r2, [r7, #4]
 80074ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80074ee:	7afb      	ldrb	r3, [r7, #11]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d14b      	bne.n	800758c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80074fa:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007502:	2b03      	cmp	r3, #3
 8007504:	d134      	bne.n	8007570 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	68da      	ldr	r2, [r3, #12]
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	429a      	cmp	r2, r3
 8007510:	d919      	bls.n	8007546 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	68da      	ldr	r2, [r3, #12]
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	691b      	ldr	r3, [r3, #16]
 800751a:	1ad2      	subs	r2, r2, r3
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	68da      	ldr	r2, [r3, #12]
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007528:	429a      	cmp	r2, r3
 800752a:	d203      	bcs.n	8007534 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007530:	b29b      	uxth	r3, r3
 8007532:	e002      	b.n	800753a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007538:	b29b      	uxth	r3, r3
 800753a:	461a      	mov	r2, r3
 800753c:	6879      	ldr	r1, [r7, #4]
 800753e:	68f8      	ldr	r0, [r7, #12]
 8007540:	f000 ff54 	bl	80083ec <USBD_CtlContinueRx>
 8007544:	e038      	b.n	80075b8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800754c:	691b      	ldr	r3, [r3, #16]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d00a      	beq.n	8007568 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007558:	2b03      	cmp	r3, #3
 800755a:	d105      	bne.n	8007568 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007562:	691b      	ldr	r3, [r3, #16]
 8007564:	68f8      	ldr	r0, [r7, #12]
 8007566:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007568:	68f8      	ldr	r0, [r7, #12]
 800756a:	f000 ff51 	bl	8008410 <USBD_CtlSendStatus>
 800756e:	e023      	b.n	80075b8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007576:	2b05      	cmp	r3, #5
 8007578:	d11e      	bne.n	80075b8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2200      	movs	r2, #0
 800757e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007582:	2100      	movs	r1, #0
 8007584:	68f8      	ldr	r0, [r7, #12]
 8007586:	f001 fad7 	bl	8008b38 <USBD_LL_StallEP>
 800758a:	e015      	b.n	80075b8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007592:	699b      	ldr	r3, [r3, #24]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00d      	beq.n	80075b4 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800759e:	2b03      	cmp	r3, #3
 80075a0:	d108      	bne.n	80075b4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075a8:	699b      	ldr	r3, [r3, #24]
 80075aa:	7afa      	ldrb	r2, [r7, #11]
 80075ac:	4611      	mov	r1, r2
 80075ae:	68f8      	ldr	r0, [r7, #12]
 80075b0:	4798      	blx	r3
 80075b2:	e001      	b.n	80075b8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80075b4:	2302      	movs	r3, #2
 80075b6:	e000      	b.n	80075ba <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3718      	adds	r7, #24
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b086      	sub	sp, #24
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	60f8      	str	r0, [r7, #12]
 80075ca:	460b      	mov	r3, r1
 80075cc:	607a      	str	r2, [r7, #4]
 80075ce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80075d0:	7afb      	ldrb	r3, [r7, #11]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d17f      	bne.n	80076d6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	3314      	adds	r3, #20
 80075da:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	d15c      	bne.n	80076a0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	68da      	ldr	r2, [r3, #12]
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	691b      	ldr	r3, [r3, #16]
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d915      	bls.n	800761e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	68da      	ldr	r2, [r3, #12]
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	691b      	ldr	r3, [r3, #16]
 80075fa:	1ad2      	subs	r2, r2, r3
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	b29b      	uxth	r3, r3
 8007606:	461a      	mov	r2, r3
 8007608:	6879      	ldr	r1, [r7, #4]
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	f000 febe 	bl	800838c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007610:	2300      	movs	r3, #0
 8007612:	2200      	movs	r2, #0
 8007614:	2100      	movs	r1, #0
 8007616:	68f8      	ldr	r0, [r7, #12]
 8007618:	f001 fb39 	bl	8008c8e <USBD_LL_PrepareReceive>
 800761c:	e04e      	b.n	80076bc <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	697a      	ldr	r2, [r7, #20]
 8007624:	6912      	ldr	r2, [r2, #16]
 8007626:	fbb3 f1f2 	udiv	r1, r3, r2
 800762a:	fb01 f202 	mul.w	r2, r1, r2
 800762e:	1a9b      	subs	r3, r3, r2
 8007630:	2b00      	cmp	r3, #0
 8007632:	d11c      	bne.n	800766e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	689a      	ldr	r2, [r3, #8]
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800763c:	429a      	cmp	r2, r3
 800763e:	d316      	bcc.n	800766e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	689a      	ldr	r2, [r3, #8]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800764a:	429a      	cmp	r2, r3
 800764c:	d20f      	bcs.n	800766e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800764e:	2200      	movs	r2, #0
 8007650:	2100      	movs	r1, #0
 8007652:	68f8      	ldr	r0, [r7, #12]
 8007654:	f000 fe9a 	bl	800838c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2200      	movs	r2, #0
 800765c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007660:	2300      	movs	r3, #0
 8007662:	2200      	movs	r2, #0
 8007664:	2100      	movs	r1, #0
 8007666:	68f8      	ldr	r0, [r7, #12]
 8007668:	f001 fb11 	bl	8008c8e <USBD_LL_PrepareReceive>
 800766c:	e026      	b.n	80076bc <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00a      	beq.n	8007690 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007680:	2b03      	cmp	r3, #3
 8007682:	d105      	bne.n	8007690 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007690:	2180      	movs	r1, #128	@ 0x80
 8007692:	68f8      	ldr	r0, [r7, #12]
 8007694:	f001 fa50 	bl	8008b38 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007698:	68f8      	ldr	r0, [r7, #12]
 800769a:	f000 fecc 	bl	8008436 <USBD_CtlReceiveStatus>
 800769e:	e00d      	b.n	80076bc <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80076a6:	2b04      	cmp	r3, #4
 80076a8:	d004      	beq.n	80076b4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d103      	bne.n	80076bc <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80076b4:	2180      	movs	r1, #128	@ 0x80
 80076b6:	68f8      	ldr	r0, [r7, #12]
 80076b8:	f001 fa3e 	bl	8008b38 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d11d      	bne.n	8007702 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80076c6:	68f8      	ldr	r0, [r7, #12]
 80076c8:	f7ff fe81 	bl	80073ce <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2200      	movs	r2, #0
 80076d0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80076d4:	e015      	b.n	8007702 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076dc:	695b      	ldr	r3, [r3, #20]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00d      	beq.n	80076fe <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80076e8:	2b03      	cmp	r3, #3
 80076ea:	d108      	bne.n	80076fe <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076f2:	695b      	ldr	r3, [r3, #20]
 80076f4:	7afa      	ldrb	r2, [r7, #11]
 80076f6:	4611      	mov	r1, r2
 80076f8:	68f8      	ldr	r0, [r7, #12]
 80076fa:	4798      	blx	r3
 80076fc:	e001      	b.n	8007702 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80076fe:	2302      	movs	r3, #2
 8007700:	e000      	b.n	8007704 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007702:	2300      	movs	r3, #0
}
 8007704:	4618      	mov	r0, r3
 8007706:	3718      	adds	r7, #24
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b082      	sub	sp, #8
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007714:	2340      	movs	r3, #64	@ 0x40
 8007716:	2200      	movs	r2, #0
 8007718:	2100      	movs	r1, #0
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f001 f9c7 	bl	8008aae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2240      	movs	r2, #64	@ 0x40
 800772c:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007730:	2340      	movs	r3, #64	@ 0x40
 8007732:	2200      	movs	r2, #0
 8007734:	2180      	movs	r1, #128	@ 0x80
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f001 f9b9 	bl	8008aae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2201      	movs	r2, #1
 8007740:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2240      	movs	r2, #64	@ 0x40
 8007746:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2201      	movs	r2, #1
 800774c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800776c:	2b00      	cmp	r3, #0
 800776e:	d009      	beq.n	8007784 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	6852      	ldr	r2, [r2, #4]
 800777c:	b2d2      	uxtb	r2, r2
 800777e:	4611      	mov	r1, r2
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	4798      	blx	r3
  }

  return USBD_OK;
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	3708      	adds	r7, #8
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}

0800778e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800778e:	b480      	push	{r7}
 8007790:	b083      	sub	sp, #12
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
 8007796:	460b      	mov	r3, r1
 8007798:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	78fa      	ldrb	r2, [r7, #3]
 800779e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	370c      	adds	r7, #12
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bc80      	pop	{r7}
 80077aa:	4770      	bx	lr

080077ac <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2204      	movs	r2, #4
 80077c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80077c8:	2300      	movs	r3, #0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	370c      	adds	r7, #12
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bc80      	pop	{r7}
 80077d2:	4770      	bx	lr

080077d4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b083      	sub	sp, #12
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077e2:	2b04      	cmp	r3, #4
 80077e4:	d105      	bne.n	80077f2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80077f2:	2300      	movs	r3, #0
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	370c      	adds	r7, #12
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bc80      	pop	{r7}
 80077fc:	4770      	bx	lr

080077fe <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80077fe:	b580      	push	{r7, lr}
 8007800:	b082      	sub	sp, #8
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800780c:	2b03      	cmp	r3, #3
 800780e:	d10b      	bne.n	8007828 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007816:	69db      	ldr	r3, [r3, #28]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d005      	beq.n	8007828 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007822:	69db      	ldr	r3, [r3, #28]
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007828:	2300      	movs	r3, #0
}
 800782a:	4618      	mov	r0, r3
 800782c:	3708      	adds	r7, #8
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
	...

08007834 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800783e:	2300      	movs	r3, #0
 8007840:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800784a:	2b40      	cmp	r3, #64	@ 0x40
 800784c:	d005      	beq.n	800785a <USBD_StdDevReq+0x26>
 800784e:	2b40      	cmp	r3, #64	@ 0x40
 8007850:	d84f      	bhi.n	80078f2 <USBD_StdDevReq+0xbe>
 8007852:	2b00      	cmp	r3, #0
 8007854:	d009      	beq.n	800786a <USBD_StdDevReq+0x36>
 8007856:	2b20      	cmp	r3, #32
 8007858:	d14b      	bne.n	80078f2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	6839      	ldr	r1, [r7, #0]
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	4798      	blx	r3
      break;
 8007868:	e048      	b.n	80078fc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	785b      	ldrb	r3, [r3, #1]
 800786e:	2b09      	cmp	r3, #9
 8007870:	d839      	bhi.n	80078e6 <USBD_StdDevReq+0xb2>
 8007872:	a201      	add	r2, pc, #4	@ (adr r2, 8007878 <USBD_StdDevReq+0x44>)
 8007874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007878:	080078c9 	.word	0x080078c9
 800787c:	080078dd 	.word	0x080078dd
 8007880:	080078e7 	.word	0x080078e7
 8007884:	080078d3 	.word	0x080078d3
 8007888:	080078e7 	.word	0x080078e7
 800788c:	080078ab 	.word	0x080078ab
 8007890:	080078a1 	.word	0x080078a1
 8007894:	080078e7 	.word	0x080078e7
 8007898:	080078bf 	.word	0x080078bf
 800789c:	080078b5 	.word	0x080078b5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80078a0:	6839      	ldr	r1, [r7, #0]
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f9dc 	bl	8007c60 <USBD_GetDescriptor>
          break;
 80078a8:	e022      	b.n	80078f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80078aa:	6839      	ldr	r1, [r7, #0]
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 fb3f 	bl	8007f30 <USBD_SetAddress>
          break;
 80078b2:	e01d      	b.n	80078f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80078b4:	6839      	ldr	r1, [r7, #0]
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 fb7e 	bl	8007fb8 <USBD_SetConfig>
          break;
 80078bc:	e018      	b.n	80078f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80078be:	6839      	ldr	r1, [r7, #0]
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 fc07 	bl	80080d4 <USBD_GetConfig>
          break;
 80078c6:	e013      	b.n	80078f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80078c8:	6839      	ldr	r1, [r7, #0]
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 fc37 	bl	800813e <USBD_GetStatus>
          break;
 80078d0:	e00e      	b.n	80078f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80078d2:	6839      	ldr	r1, [r7, #0]
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 fc65 	bl	80081a4 <USBD_SetFeature>
          break;
 80078da:	e009      	b.n	80078f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80078dc:	6839      	ldr	r1, [r7, #0]
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 fc74 	bl	80081cc <USBD_ClrFeature>
          break;
 80078e4:	e004      	b.n	80078f0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80078e6:	6839      	ldr	r1, [r7, #0]
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 fcc9 	bl	8008280 <USBD_CtlError>
          break;
 80078ee:	bf00      	nop
      }
      break;
 80078f0:	e004      	b.n	80078fc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80078f2:	6839      	ldr	r1, [r7, #0]
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 fcc3 	bl	8008280 <USBD_CtlError>
      break;
 80078fa:	bf00      	nop
  }

  return ret;
 80078fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3710      	adds	r7, #16
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop

08007908 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007912:	2300      	movs	r3, #0
 8007914:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800791e:	2b40      	cmp	r3, #64	@ 0x40
 8007920:	d005      	beq.n	800792e <USBD_StdItfReq+0x26>
 8007922:	2b40      	cmp	r3, #64	@ 0x40
 8007924:	d82e      	bhi.n	8007984 <USBD_StdItfReq+0x7c>
 8007926:	2b00      	cmp	r3, #0
 8007928:	d001      	beq.n	800792e <USBD_StdItfReq+0x26>
 800792a:	2b20      	cmp	r3, #32
 800792c:	d12a      	bne.n	8007984 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007934:	3b01      	subs	r3, #1
 8007936:	2b02      	cmp	r3, #2
 8007938:	d81d      	bhi.n	8007976 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	889b      	ldrh	r3, [r3, #4]
 800793e:	b2db      	uxtb	r3, r3
 8007940:	2b01      	cmp	r3, #1
 8007942:	d813      	bhi.n	800796c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	6839      	ldr	r1, [r7, #0]
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	4798      	blx	r3
 8007952:	4603      	mov	r3, r0
 8007954:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	88db      	ldrh	r3, [r3, #6]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d110      	bne.n	8007980 <USBD_StdItfReq+0x78>
 800795e:	7bfb      	ldrb	r3, [r7, #15]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d10d      	bne.n	8007980 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 fd53 	bl	8008410 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800796a:	e009      	b.n	8007980 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800796c:	6839      	ldr	r1, [r7, #0]
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 fc86 	bl	8008280 <USBD_CtlError>
          break;
 8007974:	e004      	b.n	8007980 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007976:	6839      	ldr	r1, [r7, #0]
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 fc81 	bl	8008280 <USBD_CtlError>
          break;
 800797e:	e000      	b.n	8007982 <USBD_StdItfReq+0x7a>
          break;
 8007980:	bf00      	nop
      }
      break;
 8007982:	e004      	b.n	800798e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007984:	6839      	ldr	r1, [r7, #0]
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 fc7a 	bl	8008280 <USBD_CtlError>
      break;
 800798c:	bf00      	nop
  }

  return USBD_OK;
 800798e:	2300      	movs	r3, #0
}
 8007990:	4618      	mov	r0, r3
 8007992:	3710      	adds	r7, #16
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80079a2:	2300      	movs	r3, #0
 80079a4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	889b      	ldrh	r3, [r3, #4]
 80079aa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80079b4:	2b40      	cmp	r3, #64	@ 0x40
 80079b6:	d007      	beq.n	80079c8 <USBD_StdEPReq+0x30>
 80079b8:	2b40      	cmp	r3, #64	@ 0x40
 80079ba:	f200 8146 	bhi.w	8007c4a <USBD_StdEPReq+0x2b2>
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d00a      	beq.n	80079d8 <USBD_StdEPReq+0x40>
 80079c2:	2b20      	cmp	r3, #32
 80079c4:	f040 8141 	bne.w	8007c4a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	6839      	ldr	r1, [r7, #0]
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	4798      	blx	r3
      break;
 80079d6:	e13d      	b.n	8007c54 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80079e0:	2b20      	cmp	r3, #32
 80079e2:	d10a      	bne.n	80079fa <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	6839      	ldr	r1, [r7, #0]
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	4798      	blx	r3
 80079f2:	4603      	mov	r3, r0
 80079f4:	73fb      	strb	r3, [r7, #15]

        return ret;
 80079f6:	7bfb      	ldrb	r3, [r7, #15]
 80079f8:	e12d      	b.n	8007c56 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	785b      	ldrb	r3, [r3, #1]
 80079fe:	2b03      	cmp	r3, #3
 8007a00:	d007      	beq.n	8007a12 <USBD_StdEPReq+0x7a>
 8007a02:	2b03      	cmp	r3, #3
 8007a04:	f300 811b 	bgt.w	8007c3e <USBD_StdEPReq+0x2a6>
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d072      	beq.n	8007af2 <USBD_StdEPReq+0x15a>
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d03a      	beq.n	8007a86 <USBD_StdEPReq+0xee>
 8007a10:	e115      	b.n	8007c3e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a18:	2b02      	cmp	r3, #2
 8007a1a:	d002      	beq.n	8007a22 <USBD_StdEPReq+0x8a>
 8007a1c:	2b03      	cmp	r3, #3
 8007a1e:	d015      	beq.n	8007a4c <USBD_StdEPReq+0xb4>
 8007a20:	e02b      	b.n	8007a7a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a22:	7bbb      	ldrb	r3, [r7, #14]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d00c      	beq.n	8007a42 <USBD_StdEPReq+0xaa>
 8007a28:	7bbb      	ldrb	r3, [r7, #14]
 8007a2a:	2b80      	cmp	r3, #128	@ 0x80
 8007a2c:	d009      	beq.n	8007a42 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007a2e:	7bbb      	ldrb	r3, [r7, #14]
 8007a30:	4619      	mov	r1, r3
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f001 f880 	bl	8008b38 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007a38:	2180      	movs	r1, #128	@ 0x80
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f001 f87c 	bl	8008b38 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a40:	e020      	b.n	8007a84 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007a42:	6839      	ldr	r1, [r7, #0]
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 fc1b 	bl	8008280 <USBD_CtlError>
              break;
 8007a4a:	e01b      	b.n	8007a84 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	885b      	ldrh	r3, [r3, #2]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d10e      	bne.n	8007a72 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007a54:	7bbb      	ldrb	r3, [r7, #14]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00b      	beq.n	8007a72 <USBD_StdEPReq+0xda>
 8007a5a:	7bbb      	ldrb	r3, [r7, #14]
 8007a5c:	2b80      	cmp	r3, #128	@ 0x80
 8007a5e:	d008      	beq.n	8007a72 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	88db      	ldrh	r3, [r3, #6]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d104      	bne.n	8007a72 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007a68:	7bbb      	ldrb	r3, [r7, #14]
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f001 f863 	bl	8008b38 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 fccc 	bl	8008410 <USBD_CtlSendStatus>

              break;
 8007a78:	e004      	b.n	8007a84 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007a7a:	6839      	ldr	r1, [r7, #0]
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 fbff 	bl	8008280 <USBD_CtlError>
              break;
 8007a82:	bf00      	nop
          }
          break;
 8007a84:	e0e0      	b.n	8007c48 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a8c:	2b02      	cmp	r3, #2
 8007a8e:	d002      	beq.n	8007a96 <USBD_StdEPReq+0xfe>
 8007a90:	2b03      	cmp	r3, #3
 8007a92:	d015      	beq.n	8007ac0 <USBD_StdEPReq+0x128>
 8007a94:	e026      	b.n	8007ae4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a96:	7bbb      	ldrb	r3, [r7, #14]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d00c      	beq.n	8007ab6 <USBD_StdEPReq+0x11e>
 8007a9c:	7bbb      	ldrb	r3, [r7, #14]
 8007a9e:	2b80      	cmp	r3, #128	@ 0x80
 8007aa0:	d009      	beq.n	8007ab6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007aa2:	7bbb      	ldrb	r3, [r7, #14]
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f001 f846 	bl	8008b38 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007aac:	2180      	movs	r1, #128	@ 0x80
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f001 f842 	bl	8008b38 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ab4:	e01c      	b.n	8007af0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007ab6:	6839      	ldr	r1, [r7, #0]
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 fbe1 	bl	8008280 <USBD_CtlError>
              break;
 8007abe:	e017      	b.n	8007af0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	885b      	ldrh	r3, [r3, #2]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d112      	bne.n	8007aee <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007ac8:	7bbb      	ldrb	r3, [r7, #14]
 8007aca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d004      	beq.n	8007adc <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007ad2:	7bbb      	ldrb	r3, [r7, #14]
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f001 f84d 	bl	8008b76 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 fc97 	bl	8008410 <USBD_CtlSendStatus>
              }
              break;
 8007ae2:	e004      	b.n	8007aee <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007ae4:	6839      	ldr	r1, [r7, #0]
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 fbca 	bl	8008280 <USBD_CtlError>
              break;
 8007aec:	e000      	b.n	8007af0 <USBD_StdEPReq+0x158>
              break;
 8007aee:	bf00      	nop
          }
          break;
 8007af0:	e0aa      	b.n	8007c48 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007af8:	2b02      	cmp	r3, #2
 8007afa:	d002      	beq.n	8007b02 <USBD_StdEPReq+0x16a>
 8007afc:	2b03      	cmp	r3, #3
 8007afe:	d032      	beq.n	8007b66 <USBD_StdEPReq+0x1ce>
 8007b00:	e097      	b.n	8007c32 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b02:	7bbb      	ldrb	r3, [r7, #14]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d007      	beq.n	8007b18 <USBD_StdEPReq+0x180>
 8007b08:	7bbb      	ldrb	r3, [r7, #14]
 8007b0a:	2b80      	cmp	r3, #128	@ 0x80
 8007b0c:	d004      	beq.n	8007b18 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007b0e:	6839      	ldr	r1, [r7, #0]
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 fbb5 	bl	8008280 <USBD_CtlError>
                break;
 8007b16:	e091      	b.n	8007c3c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	da0b      	bge.n	8007b38 <USBD_StdEPReq+0x1a0>
 8007b20:	7bbb      	ldrb	r3, [r7, #14]
 8007b22:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007b26:	4613      	mov	r3, r2
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	4413      	add	r3, r2
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	3310      	adds	r3, #16
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	4413      	add	r3, r2
 8007b34:	3304      	adds	r3, #4
 8007b36:	e00b      	b.n	8007b50 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b38:	7bbb      	ldrb	r3, [r7, #14]
 8007b3a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b3e:	4613      	mov	r3, r2
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	4413      	add	r3, r2
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	4413      	add	r3, r2
 8007b4e:	3304      	adds	r3, #4
 8007b50:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	2200      	movs	r2, #0
 8007b56:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	2202      	movs	r2, #2
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 fbf8 	bl	8008354 <USBD_CtlSendData>
              break;
 8007b64:	e06a      	b.n	8007c3c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007b66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	da11      	bge.n	8007b92 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007b6e:	7bbb      	ldrb	r3, [r7, #14]
 8007b70:	f003 020f 	and.w	r2, r3, #15
 8007b74:	6879      	ldr	r1, [r7, #4]
 8007b76:	4613      	mov	r3, r2
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	4413      	add	r3, r2
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	440b      	add	r3, r1
 8007b80:	3318      	adds	r3, #24
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d117      	bne.n	8007bb8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007b88:	6839      	ldr	r1, [r7, #0]
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 fb78 	bl	8008280 <USBD_CtlError>
                  break;
 8007b90:	e054      	b.n	8007c3c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007b92:	7bbb      	ldrb	r3, [r7, #14]
 8007b94:	f003 020f 	and.w	r2, r3, #15
 8007b98:	6879      	ldr	r1, [r7, #4]
 8007b9a:	4613      	mov	r3, r2
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	4413      	add	r3, r2
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	440b      	add	r3, r1
 8007ba4:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d104      	bne.n	8007bb8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007bae:	6839      	ldr	r1, [r7, #0]
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 fb65 	bl	8008280 <USBD_CtlError>
                  break;
 8007bb6:	e041      	b.n	8007c3c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	da0b      	bge.n	8007bd8 <USBD_StdEPReq+0x240>
 8007bc0:	7bbb      	ldrb	r3, [r7, #14]
 8007bc2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007bc6:	4613      	mov	r3, r2
 8007bc8:	009b      	lsls	r3, r3, #2
 8007bca:	4413      	add	r3, r2
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	3310      	adds	r3, #16
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	4413      	add	r3, r2
 8007bd4:	3304      	adds	r3, #4
 8007bd6:	e00b      	b.n	8007bf0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007bd8:	7bbb      	ldrb	r3, [r7, #14]
 8007bda:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bde:	4613      	mov	r3, r2
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	4413      	add	r3, r2
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007bea:	687a      	ldr	r2, [r7, #4]
 8007bec:	4413      	add	r3, r2
 8007bee:	3304      	adds	r3, #4
 8007bf0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007bf2:	7bbb      	ldrb	r3, [r7, #14]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d002      	beq.n	8007bfe <USBD_StdEPReq+0x266>
 8007bf8:	7bbb      	ldrb	r3, [r7, #14]
 8007bfa:	2b80      	cmp	r3, #128	@ 0x80
 8007bfc:	d103      	bne.n	8007c06 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	2200      	movs	r2, #0
 8007c02:	601a      	str	r2, [r3, #0]
 8007c04:	e00e      	b.n	8007c24 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007c06:	7bbb      	ldrb	r3, [r7, #14]
 8007c08:	4619      	mov	r1, r3
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 ffd2 	bl	8008bb4 <USBD_LL_IsStallEP>
 8007c10:	4603      	mov	r3, r0
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d003      	beq.n	8007c1e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	2201      	movs	r2, #1
 8007c1a:	601a      	str	r2, [r3, #0]
 8007c1c:	e002      	b.n	8007c24 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	2200      	movs	r2, #0
 8007c22:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	2202      	movs	r2, #2
 8007c28:	4619      	mov	r1, r3
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 fb92 	bl	8008354 <USBD_CtlSendData>
              break;
 8007c30:	e004      	b.n	8007c3c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007c32:	6839      	ldr	r1, [r7, #0]
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 fb23 	bl	8008280 <USBD_CtlError>
              break;
 8007c3a:	bf00      	nop
          }
          break;
 8007c3c:	e004      	b.n	8007c48 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007c3e:	6839      	ldr	r1, [r7, #0]
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 fb1d 	bl	8008280 <USBD_CtlError>
          break;
 8007c46:	bf00      	nop
      }
      break;
 8007c48:	e004      	b.n	8007c54 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007c4a:	6839      	ldr	r1, [r7, #0]
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 fb17 	bl	8008280 <USBD_CtlError>
      break;
 8007c52:	bf00      	nop
  }

  return ret;
 8007c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
	...

08007c60 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007c72:	2300      	movs	r3, #0
 8007c74:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	885b      	ldrh	r3, [r3, #2]
 8007c7a:	0a1b      	lsrs	r3, r3, #8
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	3b01      	subs	r3, #1
 8007c80:	2b06      	cmp	r3, #6
 8007c82:	f200 8128 	bhi.w	8007ed6 <USBD_GetDescriptor+0x276>
 8007c86:	a201      	add	r2, pc, #4	@ (adr r2, 8007c8c <USBD_GetDescriptor+0x2c>)
 8007c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c8c:	08007ca9 	.word	0x08007ca9
 8007c90:	08007cc1 	.word	0x08007cc1
 8007c94:	08007d01 	.word	0x08007d01
 8007c98:	08007ed7 	.word	0x08007ed7
 8007c9c:	08007ed7 	.word	0x08007ed7
 8007ca0:	08007e77 	.word	0x08007e77
 8007ca4:	08007ea3 	.word	0x08007ea3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	7c12      	ldrb	r2, [r2, #16]
 8007cb4:	f107 0108 	add.w	r1, r7, #8
 8007cb8:	4610      	mov	r0, r2
 8007cba:	4798      	blx	r3
 8007cbc:	60f8      	str	r0, [r7, #12]
      break;
 8007cbe:	e112      	b.n	8007ee6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	7c1b      	ldrb	r3, [r3, #16]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d10d      	bne.n	8007ce4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cd0:	f107 0208 	add.w	r2, r7, #8
 8007cd4:	4610      	mov	r0, r2
 8007cd6:	4798      	blx	r3
 8007cd8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	3301      	adds	r3, #1
 8007cde:	2202      	movs	r2, #2
 8007ce0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007ce2:	e100      	b.n	8007ee6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cec:	f107 0208 	add.w	r2, r7, #8
 8007cf0:	4610      	mov	r0, r2
 8007cf2:	4798      	blx	r3
 8007cf4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	3301      	adds	r3, #1
 8007cfa:	2202      	movs	r2, #2
 8007cfc:	701a      	strb	r2, [r3, #0]
      break;
 8007cfe:	e0f2      	b.n	8007ee6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	885b      	ldrh	r3, [r3, #2]
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	2b05      	cmp	r3, #5
 8007d08:	f200 80ac 	bhi.w	8007e64 <USBD_GetDescriptor+0x204>
 8007d0c:	a201      	add	r2, pc, #4	@ (adr r2, 8007d14 <USBD_GetDescriptor+0xb4>)
 8007d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d12:	bf00      	nop
 8007d14:	08007d2d 	.word	0x08007d2d
 8007d18:	08007d61 	.word	0x08007d61
 8007d1c:	08007d95 	.word	0x08007d95
 8007d20:	08007dc9 	.word	0x08007dc9
 8007d24:	08007dfd 	.word	0x08007dfd
 8007d28:	08007e31 	.word	0x08007e31
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d00b      	beq.n	8007d50 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	7c12      	ldrb	r2, [r2, #16]
 8007d44:	f107 0108 	add.w	r1, r7, #8
 8007d48:	4610      	mov	r0, r2
 8007d4a:	4798      	blx	r3
 8007d4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d4e:	e091      	b.n	8007e74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d50:	6839      	ldr	r1, [r7, #0]
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 fa94 	bl	8008280 <USBD_CtlError>
            err++;
 8007d58:	7afb      	ldrb	r3, [r7, #11]
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	72fb      	strb	r3, [r7, #11]
          break;
 8007d5e:	e089      	b.n	8007e74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00b      	beq.n	8007d84 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	7c12      	ldrb	r2, [r2, #16]
 8007d78:	f107 0108 	add.w	r1, r7, #8
 8007d7c:	4610      	mov	r0, r2
 8007d7e:	4798      	blx	r3
 8007d80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d82:	e077      	b.n	8007e74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d84:	6839      	ldr	r1, [r7, #0]
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 fa7a 	bl	8008280 <USBD_CtlError>
            err++;
 8007d8c:	7afb      	ldrb	r3, [r7, #11]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	72fb      	strb	r3, [r7, #11]
          break;
 8007d92:	e06f      	b.n	8007e74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d00b      	beq.n	8007db8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	7c12      	ldrb	r2, [r2, #16]
 8007dac:	f107 0108 	add.w	r1, r7, #8
 8007db0:	4610      	mov	r0, r2
 8007db2:	4798      	blx	r3
 8007db4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007db6:	e05d      	b.n	8007e74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007db8:	6839      	ldr	r1, [r7, #0]
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 fa60 	bl	8008280 <USBD_CtlError>
            err++;
 8007dc0:	7afb      	ldrb	r3, [r7, #11]
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	72fb      	strb	r3, [r7, #11]
          break;
 8007dc6:	e055      	b.n	8007e74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007dce:	691b      	ldr	r3, [r3, #16]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d00b      	beq.n	8007dec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007dda:	691b      	ldr	r3, [r3, #16]
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	7c12      	ldrb	r2, [r2, #16]
 8007de0:	f107 0108 	add.w	r1, r7, #8
 8007de4:	4610      	mov	r0, r2
 8007de6:	4798      	blx	r3
 8007de8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dea:	e043      	b.n	8007e74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007dec:	6839      	ldr	r1, [r7, #0]
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 fa46 	bl	8008280 <USBD_CtlError>
            err++;
 8007df4:	7afb      	ldrb	r3, [r7, #11]
 8007df6:	3301      	adds	r3, #1
 8007df8:	72fb      	strb	r3, [r7, #11]
          break;
 8007dfa:	e03b      	b.n	8007e74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007e02:	695b      	ldr	r3, [r3, #20]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d00b      	beq.n	8007e20 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007e0e:	695b      	ldr	r3, [r3, #20]
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	7c12      	ldrb	r2, [r2, #16]
 8007e14:	f107 0108 	add.w	r1, r7, #8
 8007e18:	4610      	mov	r0, r2
 8007e1a:	4798      	blx	r3
 8007e1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e1e:	e029      	b.n	8007e74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e20:	6839      	ldr	r1, [r7, #0]
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 fa2c 	bl	8008280 <USBD_CtlError>
            err++;
 8007e28:	7afb      	ldrb	r3, [r7, #11]
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	72fb      	strb	r3, [r7, #11]
          break;
 8007e2e:	e021      	b.n	8007e74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007e36:	699b      	ldr	r3, [r3, #24]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d00b      	beq.n	8007e54 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007e42:	699b      	ldr	r3, [r3, #24]
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	7c12      	ldrb	r2, [r2, #16]
 8007e48:	f107 0108 	add.w	r1, r7, #8
 8007e4c:	4610      	mov	r0, r2
 8007e4e:	4798      	blx	r3
 8007e50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e52:	e00f      	b.n	8007e74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e54:	6839      	ldr	r1, [r7, #0]
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 fa12 	bl	8008280 <USBD_CtlError>
            err++;
 8007e5c:	7afb      	ldrb	r3, [r7, #11]
 8007e5e:	3301      	adds	r3, #1
 8007e60:	72fb      	strb	r3, [r7, #11]
          break;
 8007e62:	e007      	b.n	8007e74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007e64:	6839      	ldr	r1, [r7, #0]
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 fa0a 	bl	8008280 <USBD_CtlError>
          err++;
 8007e6c:	7afb      	ldrb	r3, [r7, #11]
 8007e6e:	3301      	adds	r3, #1
 8007e70:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007e72:	e038      	b.n	8007ee6 <USBD_GetDescriptor+0x286>
 8007e74:	e037      	b.n	8007ee6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	7c1b      	ldrb	r3, [r3, #16]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d109      	bne.n	8007e92 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e86:	f107 0208 	add.w	r2, r7, #8
 8007e8a:	4610      	mov	r0, r2
 8007e8c:	4798      	blx	r3
 8007e8e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e90:	e029      	b.n	8007ee6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007e92:	6839      	ldr	r1, [r7, #0]
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 f9f3 	bl	8008280 <USBD_CtlError>
        err++;
 8007e9a:	7afb      	ldrb	r3, [r7, #11]
 8007e9c:	3301      	adds	r3, #1
 8007e9e:	72fb      	strb	r3, [r7, #11]
      break;
 8007ea0:	e021      	b.n	8007ee6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	7c1b      	ldrb	r3, [r3, #16]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d10d      	bne.n	8007ec6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007eb2:	f107 0208 	add.w	r2, r7, #8
 8007eb6:	4610      	mov	r0, r2
 8007eb8:	4798      	blx	r3
 8007eba:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	3301      	adds	r3, #1
 8007ec0:	2207      	movs	r2, #7
 8007ec2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ec4:	e00f      	b.n	8007ee6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007ec6:	6839      	ldr	r1, [r7, #0]
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f000 f9d9 	bl	8008280 <USBD_CtlError>
        err++;
 8007ece:	7afb      	ldrb	r3, [r7, #11]
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	72fb      	strb	r3, [r7, #11]
      break;
 8007ed4:	e007      	b.n	8007ee6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007ed6:	6839      	ldr	r1, [r7, #0]
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 f9d1 	bl	8008280 <USBD_CtlError>
      err++;
 8007ede:	7afb      	ldrb	r3, [r7, #11]
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	72fb      	strb	r3, [r7, #11]
      break;
 8007ee4:	bf00      	nop
  }

  if (err != 0U)
 8007ee6:	7afb      	ldrb	r3, [r7, #11]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d11c      	bne.n	8007f26 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007eec:	893b      	ldrh	r3, [r7, #8]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d011      	beq.n	8007f16 <USBD_GetDescriptor+0x2b6>
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	88db      	ldrh	r3, [r3, #6]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d00d      	beq.n	8007f16 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	88da      	ldrh	r2, [r3, #6]
 8007efe:	893b      	ldrh	r3, [r7, #8]
 8007f00:	4293      	cmp	r3, r2
 8007f02:	bf28      	it	cs
 8007f04:	4613      	movcs	r3, r2
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007f0a:	893b      	ldrh	r3, [r7, #8]
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	68f9      	ldr	r1, [r7, #12]
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 fa1f 	bl	8008354 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	88db      	ldrh	r3, [r3, #6]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d104      	bne.n	8007f28 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 fa76 	bl	8008410 <USBD_CtlSendStatus>
 8007f24:	e000      	b.n	8007f28 <USBD_GetDescriptor+0x2c8>
    return;
 8007f26:	bf00      	nop
    }
  }
}
 8007f28:	3710      	adds	r7, #16
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	bf00      	nop

08007f30 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	889b      	ldrh	r3, [r3, #4]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d130      	bne.n	8007fa4 <USBD_SetAddress+0x74>
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	88db      	ldrh	r3, [r3, #6]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d12c      	bne.n	8007fa4 <USBD_SetAddress+0x74>
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	885b      	ldrh	r3, [r3, #2]
 8007f4e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007f50:	d828      	bhi.n	8007fa4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	885b      	ldrh	r3, [r3, #2]
 8007f56:	b2db      	uxtb	r3, r3
 8007f58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f5c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f64:	2b03      	cmp	r3, #3
 8007f66:	d104      	bne.n	8007f72 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007f68:	6839      	ldr	r1, [r7, #0]
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 f988 	bl	8008280 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f70:	e01d      	b.n	8007fae <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	7bfa      	ldrb	r2, [r7, #15]
 8007f76:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007f7a:	7bfb      	ldrb	r3, [r7, #15]
 8007f7c:	4619      	mov	r1, r3
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 fe43 	bl	8008c0a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 fa43 	bl	8008410 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007f8a:	7bfb      	ldrb	r3, [r7, #15]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d004      	beq.n	8007f9a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2202      	movs	r2, #2
 8007f94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f98:	e009      	b.n	8007fae <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fa2:	e004      	b.n	8007fae <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007fa4:	6839      	ldr	r1, [r7, #0]
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 f96a 	bl	8008280 <USBD_CtlError>
  }
}
 8007fac:	bf00      	nop
 8007fae:	bf00      	nop
 8007fb0:	3710      	adds	r7, #16
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
	...

08007fb8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b082      	sub	sp, #8
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	885b      	ldrh	r3, [r3, #2]
 8007fc6:	b2da      	uxtb	r2, r3
 8007fc8:	4b41      	ldr	r3, [pc, #260]	@ (80080d0 <USBD_SetConfig+0x118>)
 8007fca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007fcc:	4b40      	ldr	r3, [pc, #256]	@ (80080d0 <USBD_SetConfig+0x118>)
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d904      	bls.n	8007fde <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007fd4:	6839      	ldr	r1, [r7, #0]
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 f952 	bl	8008280 <USBD_CtlError>
 8007fdc:	e075      	b.n	80080ca <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fe4:	2b02      	cmp	r3, #2
 8007fe6:	d002      	beq.n	8007fee <USBD_SetConfig+0x36>
 8007fe8:	2b03      	cmp	r3, #3
 8007fea:	d023      	beq.n	8008034 <USBD_SetConfig+0x7c>
 8007fec:	e062      	b.n	80080b4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007fee:	4b38      	ldr	r3, [pc, #224]	@ (80080d0 <USBD_SetConfig+0x118>)
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d01a      	beq.n	800802c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007ff6:	4b36      	ldr	r3, [pc, #216]	@ (80080d0 <USBD_SetConfig+0x118>)
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2203      	movs	r2, #3
 8008004:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008008:	4b31      	ldr	r3, [pc, #196]	@ (80080d0 <USBD_SetConfig+0x118>)
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	4619      	mov	r1, r3
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f7ff f9e7 	bl	80073e2 <USBD_SetClassConfig>
 8008014:	4603      	mov	r3, r0
 8008016:	2b02      	cmp	r3, #2
 8008018:	d104      	bne.n	8008024 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800801a:	6839      	ldr	r1, [r7, #0]
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 f92f 	bl	8008280 <USBD_CtlError>
            return;
 8008022:	e052      	b.n	80080ca <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 f9f3 	bl	8008410 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800802a:	e04e      	b.n	80080ca <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 f9ef 	bl	8008410 <USBD_CtlSendStatus>
        break;
 8008032:	e04a      	b.n	80080ca <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008034:	4b26      	ldr	r3, [pc, #152]	@ (80080d0 <USBD_SetConfig+0x118>)
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d112      	bne.n	8008062 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2202      	movs	r2, #2
 8008040:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8008044:	4b22      	ldr	r3, [pc, #136]	@ (80080d0 <USBD_SetConfig+0x118>)
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	461a      	mov	r2, r3
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800804e:	4b20      	ldr	r3, [pc, #128]	@ (80080d0 <USBD_SetConfig+0x118>)
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	4619      	mov	r1, r3
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f7ff f9e3 	bl	8007420 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 f9d8 	bl	8008410 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008060:	e033      	b.n	80080ca <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008062:	4b1b      	ldr	r3, [pc, #108]	@ (80080d0 <USBD_SetConfig+0x118>)
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	461a      	mov	r2, r3
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	429a      	cmp	r2, r3
 800806e:	d01d      	beq.n	80080ac <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	b2db      	uxtb	r3, r3
 8008076:	4619      	mov	r1, r3
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f7ff f9d1 	bl	8007420 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800807e:	4b14      	ldr	r3, [pc, #80]	@ (80080d0 <USBD_SetConfig+0x118>)
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	461a      	mov	r2, r3
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008088:	4b11      	ldr	r3, [pc, #68]	@ (80080d0 <USBD_SetConfig+0x118>)
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	4619      	mov	r1, r3
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f7ff f9a7 	bl	80073e2 <USBD_SetClassConfig>
 8008094:	4603      	mov	r3, r0
 8008096:	2b02      	cmp	r3, #2
 8008098:	d104      	bne.n	80080a4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800809a:	6839      	ldr	r1, [r7, #0]
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f000 f8ef 	bl	8008280 <USBD_CtlError>
            return;
 80080a2:	e012      	b.n	80080ca <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 f9b3 	bl	8008410 <USBD_CtlSendStatus>
        break;
 80080aa:	e00e      	b.n	80080ca <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 f9af 	bl	8008410 <USBD_CtlSendStatus>
        break;
 80080b2:	e00a      	b.n	80080ca <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80080b4:	6839      	ldr	r1, [r7, #0]
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 f8e2 	bl	8008280 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80080bc:	4b04      	ldr	r3, [pc, #16]	@ (80080d0 <USBD_SetConfig+0x118>)
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	4619      	mov	r1, r3
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f7ff f9ac 	bl	8007420 <USBD_ClrClassConfig>
        break;
 80080c8:	bf00      	nop
    }
  }
}
 80080ca:	3708      	adds	r7, #8
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}
 80080d0:	20000250 	.word	0x20000250

080080d4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	88db      	ldrh	r3, [r3, #6]
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d004      	beq.n	80080f0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80080e6:	6839      	ldr	r1, [r7, #0]
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 f8c9 	bl	8008280 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80080ee:	e022      	b.n	8008136 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080f6:	2b02      	cmp	r3, #2
 80080f8:	dc02      	bgt.n	8008100 <USBD_GetConfig+0x2c>
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	dc03      	bgt.n	8008106 <USBD_GetConfig+0x32>
 80080fe:	e015      	b.n	800812c <USBD_GetConfig+0x58>
 8008100:	2b03      	cmp	r3, #3
 8008102:	d00b      	beq.n	800811c <USBD_GetConfig+0x48>
 8008104:	e012      	b.n	800812c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	3308      	adds	r3, #8
 8008110:	2201      	movs	r2, #1
 8008112:	4619      	mov	r1, r3
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 f91d 	bl	8008354 <USBD_CtlSendData>
        break;
 800811a:	e00c      	b.n	8008136 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	3304      	adds	r3, #4
 8008120:	2201      	movs	r2, #1
 8008122:	4619      	mov	r1, r3
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 f915 	bl	8008354 <USBD_CtlSendData>
        break;
 800812a:	e004      	b.n	8008136 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800812c:	6839      	ldr	r1, [r7, #0]
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 f8a6 	bl	8008280 <USBD_CtlError>
        break;
 8008134:	bf00      	nop
}
 8008136:	bf00      	nop
 8008138:	3708      	adds	r7, #8
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}

0800813e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800813e:	b580      	push	{r7, lr}
 8008140:	b082      	sub	sp, #8
 8008142:	af00      	add	r7, sp, #0
 8008144:	6078      	str	r0, [r7, #4]
 8008146:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800814e:	3b01      	subs	r3, #1
 8008150:	2b02      	cmp	r3, #2
 8008152:	d81e      	bhi.n	8008192 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	88db      	ldrh	r3, [r3, #6]
 8008158:	2b02      	cmp	r3, #2
 800815a:	d004      	beq.n	8008166 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800815c:	6839      	ldr	r1, [r7, #0]
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 f88e 	bl	8008280 <USBD_CtlError>
        break;
 8008164:	e01a      	b.n	800819c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2201      	movs	r2, #1
 800816a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008172:	2b00      	cmp	r3, #0
 8008174:	d005      	beq.n	8008182 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	68db      	ldr	r3, [r3, #12]
 800817a:	f043 0202 	orr.w	r2, r3, #2
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	330c      	adds	r3, #12
 8008186:	2202      	movs	r2, #2
 8008188:	4619      	mov	r1, r3
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 f8e2 	bl	8008354 <USBD_CtlSendData>
      break;
 8008190:	e004      	b.n	800819c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008192:	6839      	ldr	r1, [r7, #0]
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 f873 	bl	8008280 <USBD_CtlError>
      break;
 800819a:	bf00      	nop
  }
}
 800819c:	bf00      	nop
 800819e:	3708      	adds	r7, #8
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	885b      	ldrh	r3, [r3, #2]
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	d106      	bne.n	80081c4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2201      	movs	r2, #1
 80081ba:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 f926 	bl	8008410 <USBD_CtlSendStatus>
  }
}
 80081c4:	bf00      	nop
 80081c6:	3708      	adds	r7, #8
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b082      	sub	sp, #8
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081dc:	3b01      	subs	r3, #1
 80081de:	2b02      	cmp	r3, #2
 80081e0:	d80b      	bhi.n	80081fa <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	885b      	ldrh	r3, [r3, #2]
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d10c      	bne.n	8008204 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 f90c 	bl	8008410 <USBD_CtlSendStatus>
      }
      break;
 80081f8:	e004      	b.n	8008204 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80081fa:	6839      	ldr	r1, [r7, #0]
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 f83f 	bl	8008280 <USBD_CtlError>
      break;
 8008202:	e000      	b.n	8008206 <USBD_ClrFeature+0x3a>
      break;
 8008204:	bf00      	nop
  }
}
 8008206:	bf00      	nop
 8008208:	3708      	adds	r7, #8
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}

0800820e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800820e:	b480      	push	{r7}
 8008210:	b083      	sub	sp, #12
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
 8008216:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	781a      	ldrb	r2, [r3, #0]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	785a      	ldrb	r2, [r3, #1]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	3302      	adds	r3, #2
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	461a      	mov	r2, r3
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	3303      	adds	r3, #3
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	021b      	lsls	r3, r3, #8
 8008238:	b29b      	uxth	r3, r3
 800823a:	4413      	add	r3, r2
 800823c:	b29a      	uxth	r2, r3
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	3304      	adds	r3, #4
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	461a      	mov	r2, r3
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	3305      	adds	r3, #5
 800824e:	781b      	ldrb	r3, [r3, #0]
 8008250:	021b      	lsls	r3, r3, #8
 8008252:	b29b      	uxth	r3, r3
 8008254:	4413      	add	r3, r2
 8008256:	b29a      	uxth	r2, r3
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	3306      	adds	r3, #6
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	461a      	mov	r2, r3
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	3307      	adds	r3, #7
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	021b      	lsls	r3, r3, #8
 800826c:	b29b      	uxth	r3, r3
 800826e:	4413      	add	r3, r2
 8008270:	b29a      	uxth	r2, r3
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	80da      	strh	r2, [r3, #6]

}
 8008276:	bf00      	nop
 8008278:	370c      	adds	r7, #12
 800827a:	46bd      	mov	sp, r7
 800827c:	bc80      	pop	{r7}
 800827e:	4770      	bx	lr

08008280 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800828a:	2180      	movs	r1, #128	@ 0x80
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 fc53 	bl	8008b38 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008292:	2100      	movs	r1, #0
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 fc4f 	bl	8008b38 <USBD_LL_StallEP>
}
 800829a:	bf00      	nop
 800829c:	3708      	adds	r7, #8
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}

080082a2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80082a2:	b580      	push	{r7, lr}
 80082a4:	b086      	sub	sp, #24
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	60f8      	str	r0, [r7, #12]
 80082aa:	60b9      	str	r1, [r7, #8]
 80082ac:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80082ae:	2300      	movs	r3, #0
 80082b0:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d032      	beq.n	800831e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80082b8:	68f8      	ldr	r0, [r7, #12]
 80082ba:	f000 f834 	bl	8008326 <USBD_GetLen>
 80082be:	4603      	mov	r3, r0
 80082c0:	3301      	adds	r3, #1
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	005b      	lsls	r3, r3, #1
 80082c6:	b29a      	uxth	r2, r3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80082cc:	7dfb      	ldrb	r3, [r7, #23]
 80082ce:	1c5a      	adds	r2, r3, #1
 80082d0:	75fa      	strb	r2, [r7, #23]
 80082d2:	461a      	mov	r2, r3
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	4413      	add	r3, r2
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	7812      	ldrb	r2, [r2, #0]
 80082dc:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80082de:	7dfb      	ldrb	r3, [r7, #23]
 80082e0:	1c5a      	adds	r2, r3, #1
 80082e2:	75fa      	strb	r2, [r7, #23]
 80082e4:	461a      	mov	r2, r3
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	4413      	add	r3, r2
 80082ea:	2203      	movs	r2, #3
 80082ec:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80082ee:	e012      	b.n	8008316 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	1c5a      	adds	r2, r3, #1
 80082f4:	60fa      	str	r2, [r7, #12]
 80082f6:	7dfa      	ldrb	r2, [r7, #23]
 80082f8:	1c51      	adds	r1, r2, #1
 80082fa:	75f9      	strb	r1, [r7, #23]
 80082fc:	4611      	mov	r1, r2
 80082fe:	68ba      	ldr	r2, [r7, #8]
 8008300:	440a      	add	r2, r1
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008306:	7dfb      	ldrb	r3, [r7, #23]
 8008308:	1c5a      	adds	r2, r3, #1
 800830a:	75fa      	strb	r2, [r7, #23]
 800830c:	461a      	mov	r2, r3
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	4413      	add	r3, r2
 8008312:	2200      	movs	r2, #0
 8008314:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d1e8      	bne.n	80082f0 <USBD_GetString+0x4e>
    }
  }
}
 800831e:	bf00      	nop
 8008320:	3718      	adds	r7, #24
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008326:	b480      	push	{r7}
 8008328:	b085      	sub	sp, #20
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800832e:	2300      	movs	r3, #0
 8008330:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008332:	e005      	b.n	8008340 <USBD_GetLen+0x1a>
  {
    len++;
 8008334:	7bfb      	ldrb	r3, [r7, #15]
 8008336:	3301      	adds	r3, #1
 8008338:	73fb      	strb	r3, [r7, #15]
    buf++;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	3301      	adds	r3, #1
 800833e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d1f5      	bne.n	8008334 <USBD_GetLen+0xe>
  }

  return len;
 8008348:	7bfb      	ldrb	r3, [r7, #15]
}
 800834a:	4618      	mov	r0, r3
 800834c:	3714      	adds	r7, #20
 800834e:	46bd      	mov	sp, r7
 8008350:	bc80      	pop	{r7}
 8008352:	4770      	bx	lr

08008354 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b084      	sub	sp, #16
 8008358:	af00      	add	r7, sp, #0
 800835a:	60f8      	str	r0, [r7, #12]
 800835c:	60b9      	str	r1, [r7, #8]
 800835e:	4613      	mov	r3, r2
 8008360:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2202      	movs	r2, #2
 8008366:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800836a:	88fa      	ldrh	r2, [r7, #6]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008370:	88fa      	ldrh	r2, [r7, #6]
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008376:	88fb      	ldrh	r3, [r7, #6]
 8008378:	68ba      	ldr	r2, [r7, #8]
 800837a:	2100      	movs	r1, #0
 800837c:	68f8      	ldr	r0, [r7, #12]
 800837e:	f000 fc63 	bl	8008c48 <USBD_LL_Transmit>

  return USBD_OK;
 8008382:	2300      	movs	r3, #0
}
 8008384:	4618      	mov	r0, r3
 8008386:	3710      	adds	r7, #16
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	60b9      	str	r1, [r7, #8]
 8008396:	4613      	mov	r3, r2
 8008398:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800839a:	88fb      	ldrh	r3, [r7, #6]
 800839c:	68ba      	ldr	r2, [r7, #8]
 800839e:	2100      	movs	r1, #0
 80083a0:	68f8      	ldr	r0, [r7, #12]
 80083a2:	f000 fc51 	bl	8008c48 <USBD_LL_Transmit>

  return USBD_OK;
 80083a6:	2300      	movs	r3, #0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3710      	adds	r7, #16
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	4613      	mov	r3, r2
 80083bc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2203      	movs	r2, #3
 80083c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80083c6:	88fa      	ldrh	r2, [r7, #6]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 80083ce:	88fa      	ldrh	r2, [r7, #6]
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80083d6:	88fb      	ldrh	r3, [r7, #6]
 80083d8:	68ba      	ldr	r2, [r7, #8]
 80083da:	2100      	movs	r1, #0
 80083dc:	68f8      	ldr	r0, [r7, #12]
 80083de:	f000 fc56 	bl	8008c8e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083e2:	2300      	movs	r3, #0
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3710      	adds	r7, #16
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	60b9      	str	r1, [r7, #8]
 80083f6:	4613      	mov	r3, r2
 80083f8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80083fa:	88fb      	ldrh	r3, [r7, #6]
 80083fc:	68ba      	ldr	r2, [r7, #8]
 80083fe:	2100      	movs	r1, #0
 8008400:	68f8      	ldr	r0, [r7, #12]
 8008402:	f000 fc44 	bl	8008c8e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008406:	2300      	movs	r3, #0
}
 8008408:	4618      	mov	r0, r3
 800840a:	3710      	adds	r7, #16
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}

08008410 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b082      	sub	sp, #8
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2204      	movs	r2, #4
 800841c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008420:	2300      	movs	r3, #0
 8008422:	2200      	movs	r2, #0
 8008424:	2100      	movs	r1, #0
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 fc0e 	bl	8008c48 <USBD_LL_Transmit>

  return USBD_OK;
 800842c:	2300      	movs	r3, #0
}
 800842e:	4618      	mov	r0, r3
 8008430:	3708      	adds	r7, #8
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}

08008436 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008436:	b580      	push	{r7, lr}
 8008438:	b082      	sub	sp, #8
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2205      	movs	r2, #5
 8008442:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008446:	2300      	movs	r3, #0
 8008448:	2200      	movs	r2, #0
 800844a:	2100      	movs	r1, #0
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 fc1e 	bl	8008c8e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008452:	2300      	movs	r3, #0
}
 8008454:	4618      	mov	r0, r3
 8008456:	3708      	adds	r7, #8
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008460:	2200      	movs	r2, #0
 8008462:	4912      	ldr	r1, [pc, #72]	@ (80084ac <MX_USB_DEVICE_Init+0x50>)
 8008464:	4812      	ldr	r0, [pc, #72]	@ (80084b0 <MX_USB_DEVICE_Init+0x54>)
 8008466:	f7fe ff62 	bl	800732e <USBD_Init>
 800846a:	4603      	mov	r3, r0
 800846c:	2b00      	cmp	r3, #0
 800846e:	d001      	beq.n	8008474 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008470:	f7f8 f81c 	bl	80004ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008474:	490f      	ldr	r1, [pc, #60]	@ (80084b4 <MX_USB_DEVICE_Init+0x58>)
 8008476:	480e      	ldr	r0, [pc, #56]	@ (80084b0 <MX_USB_DEVICE_Init+0x54>)
 8008478:	f7fe ff84 	bl	8007384 <USBD_RegisterClass>
 800847c:	4603      	mov	r3, r0
 800847e:	2b00      	cmp	r3, #0
 8008480:	d001      	beq.n	8008486 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008482:	f7f8 f813 	bl	80004ac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008486:	490c      	ldr	r1, [pc, #48]	@ (80084b8 <MX_USB_DEVICE_Init+0x5c>)
 8008488:	4809      	ldr	r0, [pc, #36]	@ (80084b0 <MX_USB_DEVICE_Init+0x54>)
 800848a:	f7fe feb5 	bl	80071f8 <USBD_CDC_RegisterInterface>
 800848e:	4603      	mov	r3, r0
 8008490:	2b00      	cmp	r3, #0
 8008492:	d001      	beq.n	8008498 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008494:	f7f8 f80a 	bl	80004ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008498:	4805      	ldr	r0, [pc, #20]	@ (80084b0 <MX_USB_DEVICE_Init+0x54>)
 800849a:	f7fe ff8c 	bl	80073b6 <USBD_Start>
 800849e:	4603      	mov	r3, r0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d001      	beq.n	80084a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80084a4:	f7f8 f802 	bl	80004ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80084a8:	bf00      	nop
 80084aa:	bd80      	pop	{r7, pc}
 80084ac:	20000130 	.word	0x20000130
 80084b0:	20000254 	.word	0x20000254
 80084b4:	2000001c 	.word	0x2000001c
 80084b8:	20000120 	.word	0x20000120

080084bc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80084c0:	2200      	movs	r2, #0
 80084c2:	4905      	ldr	r1, [pc, #20]	@ (80084d8 <CDC_Init_FS+0x1c>)
 80084c4:	4805      	ldr	r0, [pc, #20]	@ (80084dc <CDC_Init_FS+0x20>)
 80084c6:	f7fe fead 	bl	8007224 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80084ca:	4905      	ldr	r1, [pc, #20]	@ (80084e0 <CDC_Init_FS+0x24>)
 80084cc:	4803      	ldr	r0, [pc, #12]	@ (80084dc <CDC_Init_FS+0x20>)
 80084ce:	f7fe fec2 	bl	8007256 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80084d2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	bd80      	pop	{r7, pc}
 80084d8:	20000918 	.word	0x20000918
 80084dc:	20000254 	.word	0x20000254
 80084e0:	20000518 	.word	0x20000518

080084e4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80084e4:	b480      	push	{r7}
 80084e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80084e8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bc80      	pop	{r7}
 80084f0:	4770      	bx	lr
	...

080084f4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	4603      	mov	r3, r0
 80084fc:	6039      	str	r1, [r7, #0]
 80084fe:	71fb      	strb	r3, [r7, #7]
 8008500:	4613      	mov	r3, r2
 8008502:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008504:	79fb      	ldrb	r3, [r7, #7]
 8008506:	2b23      	cmp	r3, #35	@ 0x23
 8008508:	d84a      	bhi.n	80085a0 <CDC_Control_FS+0xac>
 800850a:	a201      	add	r2, pc, #4	@ (adr r2, 8008510 <CDC_Control_FS+0x1c>)
 800850c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008510:	080085a1 	.word	0x080085a1
 8008514:	080085a1 	.word	0x080085a1
 8008518:	080085a1 	.word	0x080085a1
 800851c:	080085a1 	.word	0x080085a1
 8008520:	080085a1 	.word	0x080085a1
 8008524:	080085a1 	.word	0x080085a1
 8008528:	080085a1 	.word	0x080085a1
 800852c:	080085a1 	.word	0x080085a1
 8008530:	080085a1 	.word	0x080085a1
 8008534:	080085a1 	.word	0x080085a1
 8008538:	080085a1 	.word	0x080085a1
 800853c:	080085a1 	.word	0x080085a1
 8008540:	080085a1 	.word	0x080085a1
 8008544:	080085a1 	.word	0x080085a1
 8008548:	080085a1 	.word	0x080085a1
 800854c:	080085a1 	.word	0x080085a1
 8008550:	080085a1 	.word	0x080085a1
 8008554:	080085a1 	.word	0x080085a1
 8008558:	080085a1 	.word	0x080085a1
 800855c:	080085a1 	.word	0x080085a1
 8008560:	080085a1 	.word	0x080085a1
 8008564:	080085a1 	.word	0x080085a1
 8008568:	080085a1 	.word	0x080085a1
 800856c:	080085a1 	.word	0x080085a1
 8008570:	080085a1 	.word	0x080085a1
 8008574:	080085a1 	.word	0x080085a1
 8008578:	080085a1 	.word	0x080085a1
 800857c:	080085a1 	.word	0x080085a1
 8008580:	080085a1 	.word	0x080085a1
 8008584:	080085a1 	.word	0x080085a1
 8008588:	080085a1 	.word	0x080085a1
 800858c:	080085a1 	.word	0x080085a1
 8008590:	080085a1 	.word	0x080085a1
 8008594:	080085a1 	.word	0x080085a1
 8008598:	080085a1 	.word	0x080085a1
 800859c:	080085a1 	.word	0x080085a1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80085a0:	bf00      	nop
  }

  return (USBD_OK);
 80085a2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	370c      	adds	r7, #12
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bc80      	pop	{r7}
 80085ac:	4770      	bx	lr
 80085ae:	bf00      	nop

080085b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b082      	sub	sp, #8
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80085ba:	6879      	ldr	r1, [r7, #4]
 80085bc:	4805      	ldr	r0, [pc, #20]	@ (80085d4 <CDC_Receive_FS+0x24>)
 80085be:	f7fe fe4a 	bl	8007256 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80085c2:	4804      	ldr	r0, [pc, #16]	@ (80085d4 <CDC_Receive_FS+0x24>)
 80085c4:	f7fe fe89 	bl	80072da <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80085c8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3708      	adds	r7, #8
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	bf00      	nop
 80085d4:	20000254 	.word	0x20000254

080085d8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	460b      	mov	r3, r1
 80085e2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80085e4:	2300      	movs	r3, #0
 80085e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80085e8:	4b0d      	ldr	r3, [pc, #52]	@ (8008620 <CDC_Transmit_FS+0x48>)
 80085ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085ee:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d001      	beq.n	80085fe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80085fa:	2301      	movs	r3, #1
 80085fc:	e00b      	b.n	8008616 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80085fe:	887b      	ldrh	r3, [r7, #2]
 8008600:	461a      	mov	r2, r3
 8008602:	6879      	ldr	r1, [r7, #4]
 8008604:	4806      	ldr	r0, [pc, #24]	@ (8008620 <CDC_Transmit_FS+0x48>)
 8008606:	f7fe fe0d 	bl	8007224 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800860a:	4805      	ldr	r0, [pc, #20]	@ (8008620 <CDC_Transmit_FS+0x48>)
 800860c:	f7fe fe36 	bl	800727c <USBD_CDC_TransmitPacket>
 8008610:	4603      	mov	r3, r0
 8008612:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008614:	7bfb      	ldrb	r3, [r7, #15]
}
 8008616:	4618      	mov	r0, r3
 8008618:	3710      	adds	r7, #16
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
 800861e:	bf00      	nop
 8008620:	20000254 	.word	0x20000254

08008624 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008624:	b480      	push	{r7}
 8008626:	b083      	sub	sp, #12
 8008628:	af00      	add	r7, sp, #0
 800862a:	4603      	mov	r3, r0
 800862c:	6039      	str	r1, [r7, #0]
 800862e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	2212      	movs	r2, #18
 8008634:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008636:	4b03      	ldr	r3, [pc, #12]	@ (8008644 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008638:	4618      	mov	r0, r3
 800863a:	370c      	adds	r7, #12
 800863c:	46bd      	mov	sp, r7
 800863e:	bc80      	pop	{r7}
 8008640:	4770      	bx	lr
 8008642:	bf00      	nop
 8008644:	2000014c 	.word	0x2000014c

08008648 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008648:	b480      	push	{r7}
 800864a:	b083      	sub	sp, #12
 800864c:	af00      	add	r7, sp, #0
 800864e:	4603      	mov	r3, r0
 8008650:	6039      	str	r1, [r7, #0]
 8008652:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	2204      	movs	r2, #4
 8008658:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800865a:	4b03      	ldr	r3, [pc, #12]	@ (8008668 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800865c:	4618      	mov	r0, r3
 800865e:	370c      	adds	r7, #12
 8008660:	46bd      	mov	sp, r7
 8008662:	bc80      	pop	{r7}
 8008664:	4770      	bx	lr
 8008666:	bf00      	nop
 8008668:	20000160 	.word	0x20000160

0800866c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b082      	sub	sp, #8
 8008670:	af00      	add	r7, sp, #0
 8008672:	4603      	mov	r3, r0
 8008674:	6039      	str	r1, [r7, #0]
 8008676:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008678:	79fb      	ldrb	r3, [r7, #7]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d105      	bne.n	800868a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800867e:	683a      	ldr	r2, [r7, #0]
 8008680:	4907      	ldr	r1, [pc, #28]	@ (80086a0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008682:	4808      	ldr	r0, [pc, #32]	@ (80086a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008684:	f7ff fe0d 	bl	80082a2 <USBD_GetString>
 8008688:	e004      	b.n	8008694 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800868a:	683a      	ldr	r2, [r7, #0]
 800868c:	4904      	ldr	r1, [pc, #16]	@ (80086a0 <USBD_FS_ProductStrDescriptor+0x34>)
 800868e:	4805      	ldr	r0, [pc, #20]	@ (80086a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008690:	f7ff fe07 	bl	80082a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008694:	4b02      	ldr	r3, [pc, #8]	@ (80086a0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008696:	4618      	mov	r0, r3
 8008698:	3708      	adds	r7, #8
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
 800869e:	bf00      	nop
 80086a0:	20000d18 	.word	0x20000d18
 80086a4:	080097e8 	.word	0x080097e8

080086a8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	4603      	mov	r3, r0
 80086b0:	6039      	str	r1, [r7, #0]
 80086b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80086b4:	683a      	ldr	r2, [r7, #0]
 80086b6:	4904      	ldr	r1, [pc, #16]	@ (80086c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80086b8:	4804      	ldr	r0, [pc, #16]	@ (80086cc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80086ba:	f7ff fdf2 	bl	80082a2 <USBD_GetString>
  return USBD_StrDesc;
 80086be:	4b02      	ldr	r3, [pc, #8]	@ (80086c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3708      	adds	r7, #8
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	20000d18 	.word	0x20000d18
 80086cc:	08009800 	.word	0x08009800

080086d0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b082      	sub	sp, #8
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	4603      	mov	r3, r0
 80086d8:	6039      	str	r1, [r7, #0]
 80086da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	221a      	movs	r2, #26
 80086e0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80086e2:	f000 f843 	bl	800876c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80086e6:	4b02      	ldr	r3, [pc, #8]	@ (80086f0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3708      	adds	r7, #8
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}
 80086f0:	20000164 	.word	0x20000164

080086f4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b082      	sub	sp, #8
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	4603      	mov	r3, r0
 80086fc:	6039      	str	r1, [r7, #0]
 80086fe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008700:	79fb      	ldrb	r3, [r7, #7]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d105      	bne.n	8008712 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008706:	683a      	ldr	r2, [r7, #0]
 8008708:	4907      	ldr	r1, [pc, #28]	@ (8008728 <USBD_FS_ConfigStrDescriptor+0x34>)
 800870a:	4808      	ldr	r0, [pc, #32]	@ (800872c <USBD_FS_ConfigStrDescriptor+0x38>)
 800870c:	f7ff fdc9 	bl	80082a2 <USBD_GetString>
 8008710:	e004      	b.n	800871c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008712:	683a      	ldr	r2, [r7, #0]
 8008714:	4904      	ldr	r1, [pc, #16]	@ (8008728 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008716:	4805      	ldr	r0, [pc, #20]	@ (800872c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008718:	f7ff fdc3 	bl	80082a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800871c:	4b02      	ldr	r3, [pc, #8]	@ (8008728 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800871e:	4618      	mov	r0, r3
 8008720:	3708      	adds	r7, #8
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop
 8008728:	20000d18 	.word	0x20000d18
 800872c:	08009814 	.word	0x08009814

08008730 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af00      	add	r7, sp, #0
 8008736:	4603      	mov	r3, r0
 8008738:	6039      	str	r1, [r7, #0]
 800873a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800873c:	79fb      	ldrb	r3, [r7, #7]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d105      	bne.n	800874e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008742:	683a      	ldr	r2, [r7, #0]
 8008744:	4907      	ldr	r1, [pc, #28]	@ (8008764 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008746:	4808      	ldr	r0, [pc, #32]	@ (8008768 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008748:	f7ff fdab 	bl	80082a2 <USBD_GetString>
 800874c:	e004      	b.n	8008758 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800874e:	683a      	ldr	r2, [r7, #0]
 8008750:	4904      	ldr	r1, [pc, #16]	@ (8008764 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008752:	4805      	ldr	r0, [pc, #20]	@ (8008768 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008754:	f7ff fda5 	bl	80082a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008758:	4b02      	ldr	r3, [pc, #8]	@ (8008764 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800875a:	4618      	mov	r0, r3
 800875c:	3708      	adds	r7, #8
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop
 8008764:	20000d18 	.word	0x20000d18
 8008768:	08009820 	.word	0x08009820

0800876c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008772:	4b0f      	ldr	r3, [pc, #60]	@ (80087b0 <Get_SerialNum+0x44>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008778:	4b0e      	ldr	r3, [pc, #56]	@ (80087b4 <Get_SerialNum+0x48>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800877e:	4b0e      	ldr	r3, [pc, #56]	@ (80087b8 <Get_SerialNum+0x4c>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008784:	68fa      	ldr	r2, [r7, #12]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	4413      	add	r3, r2
 800878a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d009      	beq.n	80087a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008792:	2208      	movs	r2, #8
 8008794:	4909      	ldr	r1, [pc, #36]	@ (80087bc <Get_SerialNum+0x50>)
 8008796:	68f8      	ldr	r0, [r7, #12]
 8008798:	f000 f814 	bl	80087c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800879c:	2204      	movs	r2, #4
 800879e:	4908      	ldr	r1, [pc, #32]	@ (80087c0 <Get_SerialNum+0x54>)
 80087a0:	68b8      	ldr	r0, [r7, #8]
 80087a2:	f000 f80f 	bl	80087c4 <IntToUnicode>
  }
}
 80087a6:	bf00      	nop
 80087a8:	3710      	adds	r7, #16
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	bf00      	nop
 80087b0:	1ffff7e8 	.word	0x1ffff7e8
 80087b4:	1ffff7ec 	.word	0x1ffff7ec
 80087b8:	1ffff7f0 	.word	0x1ffff7f0
 80087bc:	20000166 	.word	0x20000166
 80087c0:	20000176 	.word	0x20000176

080087c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b087      	sub	sp, #28
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	60f8      	str	r0, [r7, #12]
 80087cc:	60b9      	str	r1, [r7, #8]
 80087ce:	4613      	mov	r3, r2
 80087d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80087d2:	2300      	movs	r3, #0
 80087d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80087d6:	2300      	movs	r3, #0
 80087d8:	75fb      	strb	r3, [r7, #23]
 80087da:	e027      	b.n	800882c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	0f1b      	lsrs	r3, r3, #28
 80087e0:	2b09      	cmp	r3, #9
 80087e2:	d80b      	bhi.n	80087fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	0f1b      	lsrs	r3, r3, #28
 80087e8:	b2da      	uxtb	r2, r3
 80087ea:	7dfb      	ldrb	r3, [r7, #23]
 80087ec:	005b      	lsls	r3, r3, #1
 80087ee:	4619      	mov	r1, r3
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	440b      	add	r3, r1
 80087f4:	3230      	adds	r2, #48	@ 0x30
 80087f6:	b2d2      	uxtb	r2, r2
 80087f8:	701a      	strb	r2, [r3, #0]
 80087fa:	e00a      	b.n	8008812 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	0f1b      	lsrs	r3, r3, #28
 8008800:	b2da      	uxtb	r2, r3
 8008802:	7dfb      	ldrb	r3, [r7, #23]
 8008804:	005b      	lsls	r3, r3, #1
 8008806:	4619      	mov	r1, r3
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	440b      	add	r3, r1
 800880c:	3237      	adds	r2, #55	@ 0x37
 800880e:	b2d2      	uxtb	r2, r2
 8008810:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	011b      	lsls	r3, r3, #4
 8008816:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008818:	7dfb      	ldrb	r3, [r7, #23]
 800881a:	005b      	lsls	r3, r3, #1
 800881c:	3301      	adds	r3, #1
 800881e:	68ba      	ldr	r2, [r7, #8]
 8008820:	4413      	add	r3, r2
 8008822:	2200      	movs	r2, #0
 8008824:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008826:	7dfb      	ldrb	r3, [r7, #23]
 8008828:	3301      	adds	r3, #1
 800882a:	75fb      	strb	r3, [r7, #23]
 800882c:	7dfa      	ldrb	r2, [r7, #23]
 800882e:	79fb      	ldrb	r3, [r7, #7]
 8008830:	429a      	cmp	r2, r3
 8008832:	d3d3      	bcc.n	80087dc <IntToUnicode+0x18>
  }
}
 8008834:	bf00      	nop
 8008836:	bf00      	nop
 8008838:	371c      	adds	r7, #28
 800883a:	46bd      	mov	sp, r7
 800883c:	bc80      	pop	{r7}
 800883e:	4770      	bx	lr

08008840 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b084      	sub	sp, #16
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a0d      	ldr	r2, [pc, #52]	@ (8008884 <HAL_PCD_MspInit+0x44>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d113      	bne.n	800887a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008852:	4b0d      	ldr	r3, [pc, #52]	@ (8008888 <HAL_PCD_MspInit+0x48>)
 8008854:	69db      	ldr	r3, [r3, #28]
 8008856:	4a0c      	ldr	r2, [pc, #48]	@ (8008888 <HAL_PCD_MspInit+0x48>)
 8008858:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800885c:	61d3      	str	r3, [r2, #28]
 800885e:	4b0a      	ldr	r3, [pc, #40]	@ (8008888 <HAL_PCD_MspInit+0x48>)
 8008860:	69db      	ldr	r3, [r3, #28]
 8008862:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008866:	60fb      	str	r3, [r7, #12]
 8008868:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800886a:	2200      	movs	r2, #0
 800886c:	2100      	movs	r1, #0
 800886e:	2014      	movs	r0, #20
 8008870:	f7f8 f9bb 	bl	8000bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008874:	2014      	movs	r0, #20
 8008876:	f7f8 f9d4 	bl	8000c22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800887a:	bf00      	nop
 800887c:	3710      	adds	r7, #16
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
 8008882:	bf00      	nop
 8008884:	40005c00 	.word	0x40005c00
 8008888:	40021000 	.word	0x40021000

0800888c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b082      	sub	sp, #8
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80088a0:	4619      	mov	r1, r3
 80088a2:	4610      	mov	r0, r2
 80088a4:	f7fe fdcf 	bl	8007446 <USBD_LL_SetupStage>
}
 80088a8:	bf00      	nop
 80088aa:	3708      	adds	r7, #8
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b082      	sub	sp, #8
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	460b      	mov	r3, r1
 80088ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80088c2:	78fa      	ldrb	r2, [r7, #3]
 80088c4:	6879      	ldr	r1, [r7, #4]
 80088c6:	4613      	mov	r3, r2
 80088c8:	009b      	lsls	r3, r3, #2
 80088ca:	4413      	add	r3, r2
 80088cc:	00db      	lsls	r3, r3, #3
 80088ce:	440b      	add	r3, r1
 80088d0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80088d4:	681a      	ldr	r2, [r3, #0]
 80088d6:	78fb      	ldrb	r3, [r7, #3]
 80088d8:	4619      	mov	r1, r3
 80088da:	f7fe fe01 	bl	80074e0 <USBD_LL_DataOutStage>
}
 80088de:	bf00      	nop
 80088e0:	3708      	adds	r7, #8
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}

080088e6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088e6:	b580      	push	{r7, lr}
 80088e8:	b082      	sub	sp, #8
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	6078      	str	r0, [r7, #4]
 80088ee:	460b      	mov	r3, r1
 80088f0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80088f8:	78fa      	ldrb	r2, [r7, #3]
 80088fa:	6879      	ldr	r1, [r7, #4]
 80088fc:	4613      	mov	r3, r2
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	4413      	add	r3, r2
 8008902:	00db      	lsls	r3, r3, #3
 8008904:	440b      	add	r3, r1
 8008906:	3324      	adds	r3, #36	@ 0x24
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	78fb      	ldrb	r3, [r7, #3]
 800890c:	4619      	mov	r1, r3
 800890e:	f7fe fe58 	bl	80075c2 <USBD_LL_DataInStage>
}
 8008912:	bf00      	nop
 8008914:	3708      	adds	r7, #8
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}

0800891a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800891a:	b580      	push	{r7, lr}
 800891c:	b082      	sub	sp, #8
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008928:	4618      	mov	r0, r3
 800892a:	f7fe ff68 	bl	80077fe <USBD_LL_SOF>
}
 800892e:	bf00      	nop
 8008930:	3708      	adds	r7, #8
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}

08008936 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008936:	b580      	push	{r7, lr}
 8008938:	b084      	sub	sp, #16
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800893e:	2301      	movs	r3, #1
 8008940:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	799b      	ldrb	r3, [r3, #6]
 8008946:	2b02      	cmp	r3, #2
 8008948:	d001      	beq.n	800894e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800894a:	f7f7 fdaf 	bl	80004ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008954:	7bfa      	ldrb	r2, [r7, #15]
 8008956:	4611      	mov	r1, r2
 8008958:	4618      	mov	r0, r3
 800895a:	f7fe ff18 	bl	800778e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008964:	4618      	mov	r0, r3
 8008966:	f7fe fed1 	bl	800770c <USBD_LL_Reset>
}
 800896a:	bf00      	nop
 800896c:	3710      	adds	r7, #16
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
	...

08008974 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b082      	sub	sp, #8
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008982:	4618      	mov	r0, r3
 8008984:	f7fe ff12 	bl	80077ac <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	7a9b      	ldrb	r3, [r3, #10]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d005      	beq.n	800899c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008990:	4b04      	ldr	r3, [pc, #16]	@ (80089a4 <HAL_PCD_SuspendCallback+0x30>)
 8008992:	691b      	ldr	r3, [r3, #16]
 8008994:	4a03      	ldr	r2, [pc, #12]	@ (80089a4 <HAL_PCD_SuspendCallback+0x30>)
 8008996:	f043 0306 	orr.w	r3, r3, #6
 800899a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800899c:	bf00      	nop
 800899e:	3708      	adds	r7, #8
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}
 80089a4:	e000ed00 	.word	0xe000ed00

080089a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b082      	sub	sp, #8
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80089b6:	4618      	mov	r0, r3
 80089b8:	f7fe ff0c 	bl	80077d4 <USBD_LL_Resume>
}
 80089bc:	bf00      	nop
 80089be:	3708      	adds	r7, #8
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b082      	sub	sp, #8
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80089cc:	4a28      	ldr	r2, [pc, #160]	@ (8008a70 <USBD_LL_Init+0xac>)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	4a26      	ldr	r2, [pc, #152]	@ (8008a70 <USBD_LL_Init+0xac>)
 80089d8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 80089dc:	4b24      	ldr	r3, [pc, #144]	@ (8008a70 <USBD_LL_Init+0xac>)
 80089de:	4a25      	ldr	r2, [pc, #148]	@ (8008a74 <USBD_LL_Init+0xb0>)
 80089e0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80089e2:	4b23      	ldr	r3, [pc, #140]	@ (8008a70 <USBD_LL_Init+0xac>)
 80089e4:	2208      	movs	r2, #8
 80089e6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80089e8:	4b21      	ldr	r3, [pc, #132]	@ (8008a70 <USBD_LL_Init+0xac>)
 80089ea:	2202      	movs	r2, #2
 80089ec:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80089ee:	4b20      	ldr	r3, [pc, #128]	@ (8008a70 <USBD_LL_Init+0xac>)
 80089f0:	2200      	movs	r2, #0
 80089f2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80089f4:	4b1e      	ldr	r3, [pc, #120]	@ (8008a70 <USBD_LL_Init+0xac>)
 80089f6:	2200      	movs	r2, #0
 80089f8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80089fa:	4b1d      	ldr	r3, [pc, #116]	@ (8008a70 <USBD_LL_Init+0xac>)
 80089fc:	2200      	movs	r2, #0
 80089fe:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008a00:	481b      	ldr	r0, [pc, #108]	@ (8008a70 <USBD_LL_Init+0xac>)
 8008a02:	f7f9 fc16 	bl	8002232 <HAL_PCD_Init>
 8008a06:	4603      	mov	r3, r0
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d001      	beq.n	8008a10 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008a0c:	f7f7 fd4e 	bl	80004ac <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008a16:	2318      	movs	r3, #24
 8008a18:	2200      	movs	r2, #0
 8008a1a:	2100      	movs	r1, #0
 8008a1c:	f7fb f927 	bl	8003c6e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008a26:	2358      	movs	r3, #88	@ 0x58
 8008a28:	2200      	movs	r2, #0
 8008a2a:	2180      	movs	r1, #128	@ 0x80
 8008a2c:	f7fb f91f 	bl	8003c6e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008a36:	23c0      	movs	r3, #192	@ 0xc0
 8008a38:	2200      	movs	r2, #0
 8008a3a:	2181      	movs	r1, #129	@ 0x81
 8008a3c:	f7fb f917 	bl	8003c6e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008a46:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	2101      	movs	r1, #1
 8008a4e:	f7fb f90e 	bl	8003c6e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008a58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	2182      	movs	r1, #130	@ 0x82
 8008a60:	f7fb f905 	bl	8003c6e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008a64:	2300      	movs	r3, #0
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3708      	adds	r7, #8
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
 8008a6e:	bf00      	nop
 8008a70:	20000f18 	.word	0x20000f18
 8008a74:	40005c00 	.word	0x40005c00

08008a78 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b084      	sub	sp, #16
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a80:	2300      	movs	r3, #0
 8008a82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a84:	2300      	movs	r3, #0
 8008a86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f7f9 fcc5 	bl	800241e <HAL_PCD_Start>
 8008a94:	4603      	mov	r3, r0
 8008a96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a98:	7bfb      	ldrb	r3, [r7, #15]
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f000 f94e 	bl	8008d3c <USBD_Get_USB_Status>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008aa4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3710      	adds	r7, #16
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}

08008aae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008aae:	b580      	push	{r7, lr}
 8008ab0:	b084      	sub	sp, #16
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
 8008ab6:	4608      	mov	r0, r1
 8008ab8:	4611      	mov	r1, r2
 8008aba:	461a      	mov	r2, r3
 8008abc:	4603      	mov	r3, r0
 8008abe:	70fb      	strb	r3, [r7, #3]
 8008ac0:	460b      	mov	r3, r1
 8008ac2:	70bb      	strb	r3, [r7, #2]
 8008ac4:	4613      	mov	r3, r2
 8008ac6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008acc:	2300      	movs	r3, #0
 8008ace:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008ad6:	78bb      	ldrb	r3, [r7, #2]
 8008ad8:	883a      	ldrh	r2, [r7, #0]
 8008ada:	78f9      	ldrb	r1, [r7, #3]
 8008adc:	f7f9 fe19 	bl	8002712 <HAL_PCD_EP_Open>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ae4:	7bfb      	ldrb	r3, [r7, #15]
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f000 f928 	bl	8008d3c <USBD_Get_USB_Status>
 8008aec:	4603      	mov	r3, r0
 8008aee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008af0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3710      	adds	r7, #16
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}

08008afa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008afa:	b580      	push	{r7, lr}
 8008afc:	b084      	sub	sp, #16
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	6078      	str	r0, [r7, #4]
 8008b02:	460b      	mov	r3, r1
 8008b04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b06:	2300      	movs	r3, #0
 8008b08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008b14:	78fa      	ldrb	r2, [r7, #3]
 8008b16:	4611      	mov	r1, r2
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f7f9 fe57 	bl	80027cc <HAL_PCD_EP_Close>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b22:	7bfb      	ldrb	r3, [r7, #15]
 8008b24:	4618      	mov	r0, r3
 8008b26:	f000 f909 	bl	8008d3c <USBD_Get_USB_Status>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3710      	adds	r7, #16
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	460b      	mov	r3, r1
 8008b42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b44:	2300      	movs	r3, #0
 8008b46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008b52:	78fa      	ldrb	r2, [r7, #3]
 8008b54:	4611      	mov	r1, r2
 8008b56:	4618      	mov	r0, r3
 8008b58:	f7f9 feff 	bl	800295a <HAL_PCD_EP_SetStall>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b60:	7bfb      	ldrb	r3, [r7, #15]
 8008b62:	4618      	mov	r0, r3
 8008b64:	f000 f8ea 	bl	8008d3c <USBD_Get_USB_Status>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3710      	adds	r7, #16
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}

08008b76 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b76:	b580      	push	{r7, lr}
 8008b78:	b084      	sub	sp, #16
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]
 8008b7e:	460b      	mov	r3, r1
 8008b80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b82:	2300      	movs	r3, #0
 8008b84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b86:	2300      	movs	r3, #0
 8008b88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008b90:	78fa      	ldrb	r2, [r7, #3]
 8008b92:	4611      	mov	r1, r2
 8008b94:	4618      	mov	r0, r3
 8008b96:	f7f9 ff40 	bl	8002a1a <HAL_PCD_EP_ClrStall>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b9e:	7bfb      	ldrb	r3, [r7, #15]
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f000 f8cb 	bl	8008d3c <USBD_Get_USB_Status>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008baa:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3710      	adds	r7, #16
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b085      	sub	sp, #20
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	460b      	mov	r3, r1
 8008bbe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008bc6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008bc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	da0b      	bge.n	8008be8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008bd0:	78fb      	ldrb	r3, [r7, #3]
 8008bd2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008bd6:	68f9      	ldr	r1, [r7, #12]
 8008bd8:	4613      	mov	r3, r2
 8008bda:	009b      	lsls	r3, r3, #2
 8008bdc:	4413      	add	r3, r2
 8008bde:	00db      	lsls	r3, r3, #3
 8008be0:	440b      	add	r3, r1
 8008be2:	3312      	adds	r3, #18
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	e00b      	b.n	8008c00 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008be8:	78fb      	ldrb	r3, [r7, #3]
 8008bea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008bee:	68f9      	ldr	r1, [r7, #12]
 8008bf0:	4613      	mov	r3, r2
 8008bf2:	009b      	lsls	r3, r3, #2
 8008bf4:	4413      	add	r3, r2
 8008bf6:	00db      	lsls	r3, r3, #3
 8008bf8:	440b      	add	r3, r1
 8008bfa:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8008bfe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3714      	adds	r7, #20
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bc80      	pop	{r7}
 8008c08:	4770      	bx	lr

08008c0a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008c0a:	b580      	push	{r7, lr}
 8008c0c:	b084      	sub	sp, #16
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	6078      	str	r0, [r7, #4]
 8008c12:	460b      	mov	r3, r1
 8008c14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c16:	2300      	movs	r3, #0
 8008c18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008c24:	78fa      	ldrb	r2, [r7, #3]
 8008c26:	4611      	mov	r1, r2
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f7f9 fd4e 	bl	80026ca <HAL_PCD_SetAddress>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c32:	7bfb      	ldrb	r3, [r7, #15]
 8008c34:	4618      	mov	r0, r3
 8008c36:	f000 f881 	bl	8008d3c <USBD_Get_USB_Status>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3710      	adds	r7, #16
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b086      	sub	sp, #24
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	60f8      	str	r0, [r7, #12]
 8008c50:	607a      	str	r2, [r7, #4]
 8008c52:	461a      	mov	r2, r3
 8008c54:	460b      	mov	r3, r1
 8008c56:	72fb      	strb	r3, [r7, #11]
 8008c58:	4613      	mov	r3, r2
 8008c5a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c60:	2300      	movs	r3, #0
 8008c62:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008c6a:	893b      	ldrh	r3, [r7, #8]
 8008c6c:	7af9      	ldrb	r1, [r7, #11]
 8008c6e:	687a      	ldr	r2, [r7, #4]
 8008c70:	f7f9 fe3c 	bl	80028ec <HAL_PCD_EP_Transmit>
 8008c74:	4603      	mov	r3, r0
 8008c76:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c78:	7dfb      	ldrb	r3, [r7, #23]
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f000 f85e 	bl	8008d3c <USBD_Get_USB_Status>
 8008c80:	4603      	mov	r3, r0
 8008c82:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008c84:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3718      	adds	r7, #24
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}

08008c8e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008c8e:	b580      	push	{r7, lr}
 8008c90:	b086      	sub	sp, #24
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	60f8      	str	r0, [r7, #12]
 8008c96:	607a      	str	r2, [r7, #4]
 8008c98:	461a      	mov	r2, r3
 8008c9a:	460b      	mov	r3, r1
 8008c9c:	72fb      	strb	r3, [r7, #11]
 8008c9e:	4613      	mov	r3, r2
 8008ca0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008cb0:	893b      	ldrh	r3, [r7, #8]
 8008cb2:	7af9      	ldrb	r1, [r7, #11]
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	f7f9 fdd1 	bl	800285c <HAL_PCD_EP_Receive>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cbe:	7dfb      	ldrb	r3, [r7, #23]
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f000 f83b 	bl	8008d3c <USBD_Get_USB_Status>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008cca:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3718      	adds	r7, #24
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b082      	sub	sp, #8
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	460b      	mov	r3, r1
 8008cde:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008ce6:	78fa      	ldrb	r2, [r7, #3]
 8008ce8:	4611      	mov	r1, r2
 8008cea:	4618      	mov	r0, r3
 8008cec:	f7f9 fde7 	bl	80028be <HAL_PCD_EP_GetRxCount>
 8008cf0:	4603      	mov	r3, r0
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3708      	adds	r7, #8
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}
	...

08008cfc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008d04:	4b02      	ldr	r3, [pc, #8]	@ (8008d10 <USBD_static_malloc+0x14>)
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	370c      	adds	r7, #12
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bc80      	pop	{r7}
 8008d0e:	4770      	bx	lr
 8008d10:	200011f0 	.word	0x200011f0

08008d14 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b083      	sub	sp, #12
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]

}
 8008d1c:	bf00      	nop
 8008d1e:	370c      	adds	r7, #12
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bc80      	pop	{r7}
 8008d24:	4770      	bx	lr

08008d26 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d26:	b480      	push	{r7}
 8008d28:	b083      	sub	sp, #12
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	6078      	str	r0, [r7, #4]
 8008d2e:	460b      	mov	r3, r1
 8008d30:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008d32:	bf00      	nop
 8008d34:	370c      	adds	r7, #12
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bc80      	pop	{r7}
 8008d3a:	4770      	bx	lr

08008d3c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b085      	sub	sp, #20
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	4603      	mov	r3, r0
 8008d44:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d46:	2300      	movs	r3, #0
 8008d48:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008d4a:	79fb      	ldrb	r3, [r7, #7]
 8008d4c:	2b03      	cmp	r3, #3
 8008d4e:	d817      	bhi.n	8008d80 <USBD_Get_USB_Status+0x44>
 8008d50:	a201      	add	r2, pc, #4	@ (adr r2, 8008d58 <USBD_Get_USB_Status+0x1c>)
 8008d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d56:	bf00      	nop
 8008d58:	08008d69 	.word	0x08008d69
 8008d5c:	08008d6f 	.word	0x08008d6f
 8008d60:	08008d75 	.word	0x08008d75
 8008d64:	08008d7b 	.word	0x08008d7b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	73fb      	strb	r3, [r7, #15]
    break;
 8008d6c:	e00b      	b.n	8008d86 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d6e:	2302      	movs	r3, #2
 8008d70:	73fb      	strb	r3, [r7, #15]
    break;
 8008d72:	e008      	b.n	8008d86 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d74:	2301      	movs	r3, #1
 8008d76:	73fb      	strb	r3, [r7, #15]
    break;
 8008d78:	e005      	b.n	8008d86 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d7a:	2302      	movs	r3, #2
 8008d7c:	73fb      	strb	r3, [r7, #15]
    break;
 8008d7e:	e002      	b.n	8008d86 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008d80:	2302      	movs	r3, #2
 8008d82:	73fb      	strb	r3, [r7, #15]
    break;
 8008d84:	bf00      	nop
  }
  return usb_status;
 8008d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3714      	adds	r7, #20
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bc80      	pop	{r7}
 8008d90:	4770      	bx	lr
 8008d92:	bf00      	nop

08008d94 <sniprintf>:
 8008d94:	b40c      	push	{r2, r3}
 8008d96:	b530      	push	{r4, r5, lr}
 8008d98:	4b18      	ldr	r3, [pc, #96]	@ (8008dfc <sniprintf+0x68>)
 8008d9a:	1e0c      	subs	r4, r1, #0
 8008d9c:	681d      	ldr	r5, [r3, #0]
 8008d9e:	b09d      	sub	sp, #116	@ 0x74
 8008da0:	da08      	bge.n	8008db4 <sniprintf+0x20>
 8008da2:	238b      	movs	r3, #139	@ 0x8b
 8008da4:	f04f 30ff 	mov.w	r0, #4294967295
 8008da8:	602b      	str	r3, [r5, #0]
 8008daa:	b01d      	add	sp, #116	@ 0x74
 8008dac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008db0:	b002      	add	sp, #8
 8008db2:	4770      	bx	lr
 8008db4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008db8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008dbc:	f04f 0300 	mov.w	r3, #0
 8008dc0:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008dc2:	bf0c      	ite	eq
 8008dc4:	4623      	moveq	r3, r4
 8008dc6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008dca:	9304      	str	r3, [sp, #16]
 8008dcc:	9307      	str	r3, [sp, #28]
 8008dce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008dd2:	9002      	str	r0, [sp, #8]
 8008dd4:	9006      	str	r0, [sp, #24]
 8008dd6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008dda:	4628      	mov	r0, r5
 8008ddc:	ab21      	add	r3, sp, #132	@ 0x84
 8008dde:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008de0:	a902      	add	r1, sp, #8
 8008de2:	9301      	str	r3, [sp, #4]
 8008de4:	f000 f9a0 	bl	8009128 <_svfiprintf_r>
 8008de8:	1c43      	adds	r3, r0, #1
 8008dea:	bfbc      	itt	lt
 8008dec:	238b      	movlt	r3, #139	@ 0x8b
 8008dee:	602b      	strlt	r3, [r5, #0]
 8008df0:	2c00      	cmp	r4, #0
 8008df2:	d0da      	beq.n	8008daa <sniprintf+0x16>
 8008df4:	2200      	movs	r2, #0
 8008df6:	9b02      	ldr	r3, [sp, #8]
 8008df8:	701a      	strb	r2, [r3, #0]
 8008dfa:	e7d6      	b.n	8008daa <sniprintf+0x16>
 8008dfc:	20000180 	.word	0x20000180

08008e00 <memset>:
 8008e00:	4603      	mov	r3, r0
 8008e02:	4402      	add	r2, r0
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d100      	bne.n	8008e0a <memset+0xa>
 8008e08:	4770      	bx	lr
 8008e0a:	f803 1b01 	strb.w	r1, [r3], #1
 8008e0e:	e7f9      	b.n	8008e04 <memset+0x4>

08008e10 <__errno>:
 8008e10:	4b01      	ldr	r3, [pc, #4]	@ (8008e18 <__errno+0x8>)
 8008e12:	6818      	ldr	r0, [r3, #0]
 8008e14:	4770      	bx	lr
 8008e16:	bf00      	nop
 8008e18:	20000180 	.word	0x20000180

08008e1c <__libc_init_array>:
 8008e1c:	b570      	push	{r4, r5, r6, lr}
 8008e1e:	2600      	movs	r6, #0
 8008e20:	4d0c      	ldr	r5, [pc, #48]	@ (8008e54 <__libc_init_array+0x38>)
 8008e22:	4c0d      	ldr	r4, [pc, #52]	@ (8008e58 <__libc_init_array+0x3c>)
 8008e24:	1b64      	subs	r4, r4, r5
 8008e26:	10a4      	asrs	r4, r4, #2
 8008e28:	42a6      	cmp	r6, r4
 8008e2a:	d109      	bne.n	8008e40 <__libc_init_array+0x24>
 8008e2c:	f000 fc76 	bl	800971c <_init>
 8008e30:	2600      	movs	r6, #0
 8008e32:	4d0a      	ldr	r5, [pc, #40]	@ (8008e5c <__libc_init_array+0x40>)
 8008e34:	4c0a      	ldr	r4, [pc, #40]	@ (8008e60 <__libc_init_array+0x44>)
 8008e36:	1b64      	subs	r4, r4, r5
 8008e38:	10a4      	asrs	r4, r4, #2
 8008e3a:	42a6      	cmp	r6, r4
 8008e3c:	d105      	bne.n	8008e4a <__libc_init_array+0x2e>
 8008e3e:	bd70      	pop	{r4, r5, r6, pc}
 8008e40:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e44:	4798      	blx	r3
 8008e46:	3601      	adds	r6, #1
 8008e48:	e7ee      	b.n	8008e28 <__libc_init_array+0xc>
 8008e4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e4e:	4798      	blx	r3
 8008e50:	3601      	adds	r6, #1
 8008e52:	e7f2      	b.n	8008e3a <__libc_init_array+0x1e>
 8008e54:	08009898 	.word	0x08009898
 8008e58:	08009898 	.word	0x08009898
 8008e5c:	08009898 	.word	0x08009898
 8008e60:	0800989c 	.word	0x0800989c

08008e64 <__retarget_lock_acquire_recursive>:
 8008e64:	4770      	bx	lr

08008e66 <__retarget_lock_release_recursive>:
 8008e66:	4770      	bx	lr

08008e68 <memcpy>:
 8008e68:	440a      	add	r2, r1
 8008e6a:	4291      	cmp	r1, r2
 8008e6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e70:	d100      	bne.n	8008e74 <memcpy+0xc>
 8008e72:	4770      	bx	lr
 8008e74:	b510      	push	{r4, lr}
 8008e76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e7a:	4291      	cmp	r1, r2
 8008e7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e80:	d1f9      	bne.n	8008e76 <memcpy+0xe>
 8008e82:	bd10      	pop	{r4, pc}

08008e84 <_free_r>:
 8008e84:	b538      	push	{r3, r4, r5, lr}
 8008e86:	4605      	mov	r5, r0
 8008e88:	2900      	cmp	r1, #0
 8008e8a:	d040      	beq.n	8008f0e <_free_r+0x8a>
 8008e8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e90:	1f0c      	subs	r4, r1, #4
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	bfb8      	it	lt
 8008e96:	18e4      	addlt	r4, r4, r3
 8008e98:	f000 f8de 	bl	8009058 <__malloc_lock>
 8008e9c:	4a1c      	ldr	r2, [pc, #112]	@ (8008f10 <_free_r+0x8c>)
 8008e9e:	6813      	ldr	r3, [r2, #0]
 8008ea0:	b933      	cbnz	r3, 8008eb0 <_free_r+0x2c>
 8008ea2:	6063      	str	r3, [r4, #4]
 8008ea4:	6014      	str	r4, [r2, #0]
 8008ea6:	4628      	mov	r0, r5
 8008ea8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008eac:	f000 b8da 	b.w	8009064 <__malloc_unlock>
 8008eb0:	42a3      	cmp	r3, r4
 8008eb2:	d908      	bls.n	8008ec6 <_free_r+0x42>
 8008eb4:	6820      	ldr	r0, [r4, #0]
 8008eb6:	1821      	adds	r1, r4, r0
 8008eb8:	428b      	cmp	r3, r1
 8008eba:	bf01      	itttt	eq
 8008ebc:	6819      	ldreq	r1, [r3, #0]
 8008ebe:	685b      	ldreq	r3, [r3, #4]
 8008ec0:	1809      	addeq	r1, r1, r0
 8008ec2:	6021      	streq	r1, [r4, #0]
 8008ec4:	e7ed      	b.n	8008ea2 <_free_r+0x1e>
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	b10b      	cbz	r3, 8008ed0 <_free_r+0x4c>
 8008ecc:	42a3      	cmp	r3, r4
 8008ece:	d9fa      	bls.n	8008ec6 <_free_r+0x42>
 8008ed0:	6811      	ldr	r1, [r2, #0]
 8008ed2:	1850      	adds	r0, r2, r1
 8008ed4:	42a0      	cmp	r0, r4
 8008ed6:	d10b      	bne.n	8008ef0 <_free_r+0x6c>
 8008ed8:	6820      	ldr	r0, [r4, #0]
 8008eda:	4401      	add	r1, r0
 8008edc:	1850      	adds	r0, r2, r1
 8008ede:	4283      	cmp	r3, r0
 8008ee0:	6011      	str	r1, [r2, #0]
 8008ee2:	d1e0      	bne.n	8008ea6 <_free_r+0x22>
 8008ee4:	6818      	ldr	r0, [r3, #0]
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	4408      	add	r0, r1
 8008eea:	6010      	str	r0, [r2, #0]
 8008eec:	6053      	str	r3, [r2, #4]
 8008eee:	e7da      	b.n	8008ea6 <_free_r+0x22>
 8008ef0:	d902      	bls.n	8008ef8 <_free_r+0x74>
 8008ef2:	230c      	movs	r3, #12
 8008ef4:	602b      	str	r3, [r5, #0]
 8008ef6:	e7d6      	b.n	8008ea6 <_free_r+0x22>
 8008ef8:	6820      	ldr	r0, [r4, #0]
 8008efa:	1821      	adds	r1, r4, r0
 8008efc:	428b      	cmp	r3, r1
 8008efe:	bf01      	itttt	eq
 8008f00:	6819      	ldreq	r1, [r3, #0]
 8008f02:	685b      	ldreq	r3, [r3, #4]
 8008f04:	1809      	addeq	r1, r1, r0
 8008f06:	6021      	streq	r1, [r4, #0]
 8008f08:	6063      	str	r3, [r4, #4]
 8008f0a:	6054      	str	r4, [r2, #4]
 8008f0c:	e7cb      	b.n	8008ea6 <_free_r+0x22>
 8008f0e:	bd38      	pop	{r3, r4, r5, pc}
 8008f10:	20001554 	.word	0x20001554

08008f14 <sbrk_aligned>:
 8008f14:	b570      	push	{r4, r5, r6, lr}
 8008f16:	4e0f      	ldr	r6, [pc, #60]	@ (8008f54 <sbrk_aligned+0x40>)
 8008f18:	460c      	mov	r4, r1
 8008f1a:	6831      	ldr	r1, [r6, #0]
 8008f1c:	4605      	mov	r5, r0
 8008f1e:	b911      	cbnz	r1, 8008f26 <sbrk_aligned+0x12>
 8008f20:	f000 fba8 	bl	8009674 <_sbrk_r>
 8008f24:	6030      	str	r0, [r6, #0]
 8008f26:	4621      	mov	r1, r4
 8008f28:	4628      	mov	r0, r5
 8008f2a:	f000 fba3 	bl	8009674 <_sbrk_r>
 8008f2e:	1c43      	adds	r3, r0, #1
 8008f30:	d103      	bne.n	8008f3a <sbrk_aligned+0x26>
 8008f32:	f04f 34ff 	mov.w	r4, #4294967295
 8008f36:	4620      	mov	r0, r4
 8008f38:	bd70      	pop	{r4, r5, r6, pc}
 8008f3a:	1cc4      	adds	r4, r0, #3
 8008f3c:	f024 0403 	bic.w	r4, r4, #3
 8008f40:	42a0      	cmp	r0, r4
 8008f42:	d0f8      	beq.n	8008f36 <sbrk_aligned+0x22>
 8008f44:	1a21      	subs	r1, r4, r0
 8008f46:	4628      	mov	r0, r5
 8008f48:	f000 fb94 	bl	8009674 <_sbrk_r>
 8008f4c:	3001      	adds	r0, #1
 8008f4e:	d1f2      	bne.n	8008f36 <sbrk_aligned+0x22>
 8008f50:	e7ef      	b.n	8008f32 <sbrk_aligned+0x1e>
 8008f52:	bf00      	nop
 8008f54:	20001550 	.word	0x20001550

08008f58 <_malloc_r>:
 8008f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f5c:	1ccd      	adds	r5, r1, #3
 8008f5e:	f025 0503 	bic.w	r5, r5, #3
 8008f62:	3508      	adds	r5, #8
 8008f64:	2d0c      	cmp	r5, #12
 8008f66:	bf38      	it	cc
 8008f68:	250c      	movcc	r5, #12
 8008f6a:	2d00      	cmp	r5, #0
 8008f6c:	4606      	mov	r6, r0
 8008f6e:	db01      	blt.n	8008f74 <_malloc_r+0x1c>
 8008f70:	42a9      	cmp	r1, r5
 8008f72:	d904      	bls.n	8008f7e <_malloc_r+0x26>
 8008f74:	230c      	movs	r3, #12
 8008f76:	6033      	str	r3, [r6, #0]
 8008f78:	2000      	movs	r0, #0
 8008f7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009054 <_malloc_r+0xfc>
 8008f82:	f000 f869 	bl	8009058 <__malloc_lock>
 8008f86:	f8d8 3000 	ldr.w	r3, [r8]
 8008f8a:	461c      	mov	r4, r3
 8008f8c:	bb44      	cbnz	r4, 8008fe0 <_malloc_r+0x88>
 8008f8e:	4629      	mov	r1, r5
 8008f90:	4630      	mov	r0, r6
 8008f92:	f7ff ffbf 	bl	8008f14 <sbrk_aligned>
 8008f96:	1c43      	adds	r3, r0, #1
 8008f98:	4604      	mov	r4, r0
 8008f9a:	d158      	bne.n	800904e <_malloc_r+0xf6>
 8008f9c:	f8d8 4000 	ldr.w	r4, [r8]
 8008fa0:	4627      	mov	r7, r4
 8008fa2:	2f00      	cmp	r7, #0
 8008fa4:	d143      	bne.n	800902e <_malloc_r+0xd6>
 8008fa6:	2c00      	cmp	r4, #0
 8008fa8:	d04b      	beq.n	8009042 <_malloc_r+0xea>
 8008faa:	6823      	ldr	r3, [r4, #0]
 8008fac:	4639      	mov	r1, r7
 8008fae:	4630      	mov	r0, r6
 8008fb0:	eb04 0903 	add.w	r9, r4, r3
 8008fb4:	f000 fb5e 	bl	8009674 <_sbrk_r>
 8008fb8:	4581      	cmp	r9, r0
 8008fba:	d142      	bne.n	8009042 <_malloc_r+0xea>
 8008fbc:	6821      	ldr	r1, [r4, #0]
 8008fbe:	4630      	mov	r0, r6
 8008fc0:	1a6d      	subs	r5, r5, r1
 8008fc2:	4629      	mov	r1, r5
 8008fc4:	f7ff ffa6 	bl	8008f14 <sbrk_aligned>
 8008fc8:	3001      	adds	r0, #1
 8008fca:	d03a      	beq.n	8009042 <_malloc_r+0xea>
 8008fcc:	6823      	ldr	r3, [r4, #0]
 8008fce:	442b      	add	r3, r5
 8008fd0:	6023      	str	r3, [r4, #0]
 8008fd2:	f8d8 3000 	ldr.w	r3, [r8]
 8008fd6:	685a      	ldr	r2, [r3, #4]
 8008fd8:	bb62      	cbnz	r2, 8009034 <_malloc_r+0xdc>
 8008fda:	f8c8 7000 	str.w	r7, [r8]
 8008fde:	e00f      	b.n	8009000 <_malloc_r+0xa8>
 8008fe0:	6822      	ldr	r2, [r4, #0]
 8008fe2:	1b52      	subs	r2, r2, r5
 8008fe4:	d420      	bmi.n	8009028 <_malloc_r+0xd0>
 8008fe6:	2a0b      	cmp	r2, #11
 8008fe8:	d917      	bls.n	800901a <_malloc_r+0xc2>
 8008fea:	1961      	adds	r1, r4, r5
 8008fec:	42a3      	cmp	r3, r4
 8008fee:	6025      	str	r5, [r4, #0]
 8008ff0:	bf18      	it	ne
 8008ff2:	6059      	strne	r1, [r3, #4]
 8008ff4:	6863      	ldr	r3, [r4, #4]
 8008ff6:	bf08      	it	eq
 8008ff8:	f8c8 1000 	streq.w	r1, [r8]
 8008ffc:	5162      	str	r2, [r4, r5]
 8008ffe:	604b      	str	r3, [r1, #4]
 8009000:	4630      	mov	r0, r6
 8009002:	f000 f82f 	bl	8009064 <__malloc_unlock>
 8009006:	f104 000b 	add.w	r0, r4, #11
 800900a:	1d23      	adds	r3, r4, #4
 800900c:	f020 0007 	bic.w	r0, r0, #7
 8009010:	1ac2      	subs	r2, r0, r3
 8009012:	bf1c      	itt	ne
 8009014:	1a1b      	subne	r3, r3, r0
 8009016:	50a3      	strne	r3, [r4, r2]
 8009018:	e7af      	b.n	8008f7a <_malloc_r+0x22>
 800901a:	6862      	ldr	r2, [r4, #4]
 800901c:	42a3      	cmp	r3, r4
 800901e:	bf0c      	ite	eq
 8009020:	f8c8 2000 	streq.w	r2, [r8]
 8009024:	605a      	strne	r2, [r3, #4]
 8009026:	e7eb      	b.n	8009000 <_malloc_r+0xa8>
 8009028:	4623      	mov	r3, r4
 800902a:	6864      	ldr	r4, [r4, #4]
 800902c:	e7ae      	b.n	8008f8c <_malloc_r+0x34>
 800902e:	463c      	mov	r4, r7
 8009030:	687f      	ldr	r7, [r7, #4]
 8009032:	e7b6      	b.n	8008fa2 <_malloc_r+0x4a>
 8009034:	461a      	mov	r2, r3
 8009036:	685b      	ldr	r3, [r3, #4]
 8009038:	42a3      	cmp	r3, r4
 800903a:	d1fb      	bne.n	8009034 <_malloc_r+0xdc>
 800903c:	2300      	movs	r3, #0
 800903e:	6053      	str	r3, [r2, #4]
 8009040:	e7de      	b.n	8009000 <_malloc_r+0xa8>
 8009042:	230c      	movs	r3, #12
 8009044:	4630      	mov	r0, r6
 8009046:	6033      	str	r3, [r6, #0]
 8009048:	f000 f80c 	bl	8009064 <__malloc_unlock>
 800904c:	e794      	b.n	8008f78 <_malloc_r+0x20>
 800904e:	6005      	str	r5, [r0, #0]
 8009050:	e7d6      	b.n	8009000 <_malloc_r+0xa8>
 8009052:	bf00      	nop
 8009054:	20001554 	.word	0x20001554

08009058 <__malloc_lock>:
 8009058:	4801      	ldr	r0, [pc, #4]	@ (8009060 <__malloc_lock+0x8>)
 800905a:	f7ff bf03 	b.w	8008e64 <__retarget_lock_acquire_recursive>
 800905e:	bf00      	nop
 8009060:	2000154c 	.word	0x2000154c

08009064 <__malloc_unlock>:
 8009064:	4801      	ldr	r0, [pc, #4]	@ (800906c <__malloc_unlock+0x8>)
 8009066:	f7ff befe 	b.w	8008e66 <__retarget_lock_release_recursive>
 800906a:	bf00      	nop
 800906c:	2000154c 	.word	0x2000154c

08009070 <__ssputs_r>:
 8009070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009074:	461f      	mov	r7, r3
 8009076:	688e      	ldr	r6, [r1, #8]
 8009078:	4682      	mov	sl, r0
 800907a:	42be      	cmp	r6, r7
 800907c:	460c      	mov	r4, r1
 800907e:	4690      	mov	r8, r2
 8009080:	680b      	ldr	r3, [r1, #0]
 8009082:	d82d      	bhi.n	80090e0 <__ssputs_r+0x70>
 8009084:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009088:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800908c:	d026      	beq.n	80090dc <__ssputs_r+0x6c>
 800908e:	6965      	ldr	r5, [r4, #20]
 8009090:	6909      	ldr	r1, [r1, #16]
 8009092:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009096:	eba3 0901 	sub.w	r9, r3, r1
 800909a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800909e:	1c7b      	adds	r3, r7, #1
 80090a0:	444b      	add	r3, r9
 80090a2:	106d      	asrs	r5, r5, #1
 80090a4:	429d      	cmp	r5, r3
 80090a6:	bf38      	it	cc
 80090a8:	461d      	movcc	r5, r3
 80090aa:	0553      	lsls	r3, r2, #21
 80090ac:	d527      	bpl.n	80090fe <__ssputs_r+0x8e>
 80090ae:	4629      	mov	r1, r5
 80090b0:	f7ff ff52 	bl	8008f58 <_malloc_r>
 80090b4:	4606      	mov	r6, r0
 80090b6:	b360      	cbz	r0, 8009112 <__ssputs_r+0xa2>
 80090b8:	464a      	mov	r2, r9
 80090ba:	6921      	ldr	r1, [r4, #16]
 80090bc:	f7ff fed4 	bl	8008e68 <memcpy>
 80090c0:	89a3      	ldrh	r3, [r4, #12]
 80090c2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80090c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090ca:	81a3      	strh	r3, [r4, #12]
 80090cc:	6126      	str	r6, [r4, #16]
 80090ce:	444e      	add	r6, r9
 80090d0:	6026      	str	r6, [r4, #0]
 80090d2:	463e      	mov	r6, r7
 80090d4:	6165      	str	r5, [r4, #20]
 80090d6:	eba5 0509 	sub.w	r5, r5, r9
 80090da:	60a5      	str	r5, [r4, #8]
 80090dc:	42be      	cmp	r6, r7
 80090de:	d900      	bls.n	80090e2 <__ssputs_r+0x72>
 80090e0:	463e      	mov	r6, r7
 80090e2:	4632      	mov	r2, r6
 80090e4:	4641      	mov	r1, r8
 80090e6:	6820      	ldr	r0, [r4, #0]
 80090e8:	f000 faaa 	bl	8009640 <memmove>
 80090ec:	2000      	movs	r0, #0
 80090ee:	68a3      	ldr	r3, [r4, #8]
 80090f0:	1b9b      	subs	r3, r3, r6
 80090f2:	60a3      	str	r3, [r4, #8]
 80090f4:	6823      	ldr	r3, [r4, #0]
 80090f6:	4433      	add	r3, r6
 80090f8:	6023      	str	r3, [r4, #0]
 80090fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090fe:	462a      	mov	r2, r5
 8009100:	f000 fad6 	bl	80096b0 <_realloc_r>
 8009104:	4606      	mov	r6, r0
 8009106:	2800      	cmp	r0, #0
 8009108:	d1e0      	bne.n	80090cc <__ssputs_r+0x5c>
 800910a:	4650      	mov	r0, sl
 800910c:	6921      	ldr	r1, [r4, #16]
 800910e:	f7ff feb9 	bl	8008e84 <_free_r>
 8009112:	230c      	movs	r3, #12
 8009114:	f8ca 3000 	str.w	r3, [sl]
 8009118:	89a3      	ldrh	r3, [r4, #12]
 800911a:	f04f 30ff 	mov.w	r0, #4294967295
 800911e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009122:	81a3      	strh	r3, [r4, #12]
 8009124:	e7e9      	b.n	80090fa <__ssputs_r+0x8a>
	...

08009128 <_svfiprintf_r>:
 8009128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800912c:	4698      	mov	r8, r3
 800912e:	898b      	ldrh	r3, [r1, #12]
 8009130:	4607      	mov	r7, r0
 8009132:	061b      	lsls	r3, r3, #24
 8009134:	460d      	mov	r5, r1
 8009136:	4614      	mov	r4, r2
 8009138:	b09d      	sub	sp, #116	@ 0x74
 800913a:	d510      	bpl.n	800915e <_svfiprintf_r+0x36>
 800913c:	690b      	ldr	r3, [r1, #16]
 800913e:	b973      	cbnz	r3, 800915e <_svfiprintf_r+0x36>
 8009140:	2140      	movs	r1, #64	@ 0x40
 8009142:	f7ff ff09 	bl	8008f58 <_malloc_r>
 8009146:	6028      	str	r0, [r5, #0]
 8009148:	6128      	str	r0, [r5, #16]
 800914a:	b930      	cbnz	r0, 800915a <_svfiprintf_r+0x32>
 800914c:	230c      	movs	r3, #12
 800914e:	603b      	str	r3, [r7, #0]
 8009150:	f04f 30ff 	mov.w	r0, #4294967295
 8009154:	b01d      	add	sp, #116	@ 0x74
 8009156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800915a:	2340      	movs	r3, #64	@ 0x40
 800915c:	616b      	str	r3, [r5, #20]
 800915e:	2300      	movs	r3, #0
 8009160:	9309      	str	r3, [sp, #36]	@ 0x24
 8009162:	2320      	movs	r3, #32
 8009164:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009168:	2330      	movs	r3, #48	@ 0x30
 800916a:	f04f 0901 	mov.w	r9, #1
 800916e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009172:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800930c <_svfiprintf_r+0x1e4>
 8009176:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800917a:	4623      	mov	r3, r4
 800917c:	469a      	mov	sl, r3
 800917e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009182:	b10a      	cbz	r2, 8009188 <_svfiprintf_r+0x60>
 8009184:	2a25      	cmp	r2, #37	@ 0x25
 8009186:	d1f9      	bne.n	800917c <_svfiprintf_r+0x54>
 8009188:	ebba 0b04 	subs.w	fp, sl, r4
 800918c:	d00b      	beq.n	80091a6 <_svfiprintf_r+0x7e>
 800918e:	465b      	mov	r3, fp
 8009190:	4622      	mov	r2, r4
 8009192:	4629      	mov	r1, r5
 8009194:	4638      	mov	r0, r7
 8009196:	f7ff ff6b 	bl	8009070 <__ssputs_r>
 800919a:	3001      	adds	r0, #1
 800919c:	f000 80a7 	beq.w	80092ee <_svfiprintf_r+0x1c6>
 80091a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091a2:	445a      	add	r2, fp
 80091a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80091a6:	f89a 3000 	ldrb.w	r3, [sl]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	f000 809f 	beq.w	80092ee <_svfiprintf_r+0x1c6>
 80091b0:	2300      	movs	r3, #0
 80091b2:	f04f 32ff 	mov.w	r2, #4294967295
 80091b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091ba:	f10a 0a01 	add.w	sl, sl, #1
 80091be:	9304      	str	r3, [sp, #16]
 80091c0:	9307      	str	r3, [sp, #28]
 80091c2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80091c6:	931a      	str	r3, [sp, #104]	@ 0x68
 80091c8:	4654      	mov	r4, sl
 80091ca:	2205      	movs	r2, #5
 80091cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091d0:	484e      	ldr	r0, [pc, #312]	@ (800930c <_svfiprintf_r+0x1e4>)
 80091d2:	f000 fa5f 	bl	8009694 <memchr>
 80091d6:	9a04      	ldr	r2, [sp, #16]
 80091d8:	b9d8      	cbnz	r0, 8009212 <_svfiprintf_r+0xea>
 80091da:	06d0      	lsls	r0, r2, #27
 80091dc:	bf44      	itt	mi
 80091de:	2320      	movmi	r3, #32
 80091e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091e4:	0711      	lsls	r1, r2, #28
 80091e6:	bf44      	itt	mi
 80091e8:	232b      	movmi	r3, #43	@ 0x2b
 80091ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091ee:	f89a 3000 	ldrb.w	r3, [sl]
 80091f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80091f4:	d015      	beq.n	8009222 <_svfiprintf_r+0xfa>
 80091f6:	4654      	mov	r4, sl
 80091f8:	2000      	movs	r0, #0
 80091fa:	f04f 0c0a 	mov.w	ip, #10
 80091fe:	9a07      	ldr	r2, [sp, #28]
 8009200:	4621      	mov	r1, r4
 8009202:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009206:	3b30      	subs	r3, #48	@ 0x30
 8009208:	2b09      	cmp	r3, #9
 800920a:	d94b      	bls.n	80092a4 <_svfiprintf_r+0x17c>
 800920c:	b1b0      	cbz	r0, 800923c <_svfiprintf_r+0x114>
 800920e:	9207      	str	r2, [sp, #28]
 8009210:	e014      	b.n	800923c <_svfiprintf_r+0x114>
 8009212:	eba0 0308 	sub.w	r3, r0, r8
 8009216:	fa09 f303 	lsl.w	r3, r9, r3
 800921a:	4313      	orrs	r3, r2
 800921c:	46a2      	mov	sl, r4
 800921e:	9304      	str	r3, [sp, #16]
 8009220:	e7d2      	b.n	80091c8 <_svfiprintf_r+0xa0>
 8009222:	9b03      	ldr	r3, [sp, #12]
 8009224:	1d19      	adds	r1, r3, #4
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	9103      	str	r1, [sp, #12]
 800922a:	2b00      	cmp	r3, #0
 800922c:	bfbb      	ittet	lt
 800922e:	425b      	neglt	r3, r3
 8009230:	f042 0202 	orrlt.w	r2, r2, #2
 8009234:	9307      	strge	r3, [sp, #28]
 8009236:	9307      	strlt	r3, [sp, #28]
 8009238:	bfb8      	it	lt
 800923a:	9204      	strlt	r2, [sp, #16]
 800923c:	7823      	ldrb	r3, [r4, #0]
 800923e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009240:	d10a      	bne.n	8009258 <_svfiprintf_r+0x130>
 8009242:	7863      	ldrb	r3, [r4, #1]
 8009244:	2b2a      	cmp	r3, #42	@ 0x2a
 8009246:	d132      	bne.n	80092ae <_svfiprintf_r+0x186>
 8009248:	9b03      	ldr	r3, [sp, #12]
 800924a:	3402      	adds	r4, #2
 800924c:	1d1a      	adds	r2, r3, #4
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	9203      	str	r2, [sp, #12]
 8009252:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009256:	9305      	str	r3, [sp, #20]
 8009258:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009310 <_svfiprintf_r+0x1e8>
 800925c:	2203      	movs	r2, #3
 800925e:	4650      	mov	r0, sl
 8009260:	7821      	ldrb	r1, [r4, #0]
 8009262:	f000 fa17 	bl	8009694 <memchr>
 8009266:	b138      	cbz	r0, 8009278 <_svfiprintf_r+0x150>
 8009268:	2240      	movs	r2, #64	@ 0x40
 800926a:	9b04      	ldr	r3, [sp, #16]
 800926c:	eba0 000a 	sub.w	r0, r0, sl
 8009270:	4082      	lsls	r2, r0
 8009272:	4313      	orrs	r3, r2
 8009274:	3401      	adds	r4, #1
 8009276:	9304      	str	r3, [sp, #16]
 8009278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800927c:	2206      	movs	r2, #6
 800927e:	4825      	ldr	r0, [pc, #148]	@ (8009314 <_svfiprintf_r+0x1ec>)
 8009280:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009284:	f000 fa06 	bl	8009694 <memchr>
 8009288:	2800      	cmp	r0, #0
 800928a:	d036      	beq.n	80092fa <_svfiprintf_r+0x1d2>
 800928c:	4b22      	ldr	r3, [pc, #136]	@ (8009318 <_svfiprintf_r+0x1f0>)
 800928e:	bb1b      	cbnz	r3, 80092d8 <_svfiprintf_r+0x1b0>
 8009290:	9b03      	ldr	r3, [sp, #12]
 8009292:	3307      	adds	r3, #7
 8009294:	f023 0307 	bic.w	r3, r3, #7
 8009298:	3308      	adds	r3, #8
 800929a:	9303      	str	r3, [sp, #12]
 800929c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800929e:	4433      	add	r3, r6
 80092a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80092a2:	e76a      	b.n	800917a <_svfiprintf_r+0x52>
 80092a4:	460c      	mov	r4, r1
 80092a6:	2001      	movs	r0, #1
 80092a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80092ac:	e7a8      	b.n	8009200 <_svfiprintf_r+0xd8>
 80092ae:	2300      	movs	r3, #0
 80092b0:	f04f 0c0a 	mov.w	ip, #10
 80092b4:	4619      	mov	r1, r3
 80092b6:	3401      	adds	r4, #1
 80092b8:	9305      	str	r3, [sp, #20]
 80092ba:	4620      	mov	r0, r4
 80092bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092c0:	3a30      	subs	r2, #48	@ 0x30
 80092c2:	2a09      	cmp	r2, #9
 80092c4:	d903      	bls.n	80092ce <_svfiprintf_r+0x1a6>
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d0c6      	beq.n	8009258 <_svfiprintf_r+0x130>
 80092ca:	9105      	str	r1, [sp, #20]
 80092cc:	e7c4      	b.n	8009258 <_svfiprintf_r+0x130>
 80092ce:	4604      	mov	r4, r0
 80092d0:	2301      	movs	r3, #1
 80092d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80092d6:	e7f0      	b.n	80092ba <_svfiprintf_r+0x192>
 80092d8:	ab03      	add	r3, sp, #12
 80092da:	9300      	str	r3, [sp, #0]
 80092dc:	462a      	mov	r2, r5
 80092de:	4638      	mov	r0, r7
 80092e0:	4b0e      	ldr	r3, [pc, #56]	@ (800931c <_svfiprintf_r+0x1f4>)
 80092e2:	a904      	add	r1, sp, #16
 80092e4:	f3af 8000 	nop.w
 80092e8:	1c42      	adds	r2, r0, #1
 80092ea:	4606      	mov	r6, r0
 80092ec:	d1d6      	bne.n	800929c <_svfiprintf_r+0x174>
 80092ee:	89ab      	ldrh	r3, [r5, #12]
 80092f0:	065b      	lsls	r3, r3, #25
 80092f2:	f53f af2d 	bmi.w	8009150 <_svfiprintf_r+0x28>
 80092f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80092f8:	e72c      	b.n	8009154 <_svfiprintf_r+0x2c>
 80092fa:	ab03      	add	r3, sp, #12
 80092fc:	9300      	str	r3, [sp, #0]
 80092fe:	462a      	mov	r2, r5
 8009300:	4638      	mov	r0, r7
 8009302:	4b06      	ldr	r3, [pc, #24]	@ (800931c <_svfiprintf_r+0x1f4>)
 8009304:	a904      	add	r1, sp, #16
 8009306:	f000 f87d 	bl	8009404 <_printf_i>
 800930a:	e7ed      	b.n	80092e8 <_svfiprintf_r+0x1c0>
 800930c:	0800985a 	.word	0x0800985a
 8009310:	08009860 	.word	0x08009860
 8009314:	08009864 	.word	0x08009864
 8009318:	00000000 	.word	0x00000000
 800931c:	08009071 	.word	0x08009071

08009320 <_printf_common>:
 8009320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009324:	4616      	mov	r6, r2
 8009326:	4698      	mov	r8, r3
 8009328:	688a      	ldr	r2, [r1, #8]
 800932a:	690b      	ldr	r3, [r1, #16]
 800932c:	4607      	mov	r7, r0
 800932e:	4293      	cmp	r3, r2
 8009330:	bfb8      	it	lt
 8009332:	4613      	movlt	r3, r2
 8009334:	6033      	str	r3, [r6, #0]
 8009336:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800933a:	460c      	mov	r4, r1
 800933c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009340:	b10a      	cbz	r2, 8009346 <_printf_common+0x26>
 8009342:	3301      	adds	r3, #1
 8009344:	6033      	str	r3, [r6, #0]
 8009346:	6823      	ldr	r3, [r4, #0]
 8009348:	0699      	lsls	r1, r3, #26
 800934a:	bf42      	ittt	mi
 800934c:	6833      	ldrmi	r3, [r6, #0]
 800934e:	3302      	addmi	r3, #2
 8009350:	6033      	strmi	r3, [r6, #0]
 8009352:	6825      	ldr	r5, [r4, #0]
 8009354:	f015 0506 	ands.w	r5, r5, #6
 8009358:	d106      	bne.n	8009368 <_printf_common+0x48>
 800935a:	f104 0a19 	add.w	sl, r4, #25
 800935e:	68e3      	ldr	r3, [r4, #12]
 8009360:	6832      	ldr	r2, [r6, #0]
 8009362:	1a9b      	subs	r3, r3, r2
 8009364:	42ab      	cmp	r3, r5
 8009366:	dc2b      	bgt.n	80093c0 <_printf_common+0xa0>
 8009368:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800936c:	6822      	ldr	r2, [r4, #0]
 800936e:	3b00      	subs	r3, #0
 8009370:	bf18      	it	ne
 8009372:	2301      	movne	r3, #1
 8009374:	0692      	lsls	r2, r2, #26
 8009376:	d430      	bmi.n	80093da <_printf_common+0xba>
 8009378:	4641      	mov	r1, r8
 800937a:	4638      	mov	r0, r7
 800937c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009380:	47c8      	blx	r9
 8009382:	3001      	adds	r0, #1
 8009384:	d023      	beq.n	80093ce <_printf_common+0xae>
 8009386:	6823      	ldr	r3, [r4, #0]
 8009388:	6922      	ldr	r2, [r4, #16]
 800938a:	f003 0306 	and.w	r3, r3, #6
 800938e:	2b04      	cmp	r3, #4
 8009390:	bf14      	ite	ne
 8009392:	2500      	movne	r5, #0
 8009394:	6833      	ldreq	r3, [r6, #0]
 8009396:	f04f 0600 	mov.w	r6, #0
 800939a:	bf08      	it	eq
 800939c:	68e5      	ldreq	r5, [r4, #12]
 800939e:	f104 041a 	add.w	r4, r4, #26
 80093a2:	bf08      	it	eq
 80093a4:	1aed      	subeq	r5, r5, r3
 80093a6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80093aa:	bf08      	it	eq
 80093ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80093b0:	4293      	cmp	r3, r2
 80093b2:	bfc4      	itt	gt
 80093b4:	1a9b      	subgt	r3, r3, r2
 80093b6:	18ed      	addgt	r5, r5, r3
 80093b8:	42b5      	cmp	r5, r6
 80093ba:	d11a      	bne.n	80093f2 <_printf_common+0xd2>
 80093bc:	2000      	movs	r0, #0
 80093be:	e008      	b.n	80093d2 <_printf_common+0xb2>
 80093c0:	2301      	movs	r3, #1
 80093c2:	4652      	mov	r2, sl
 80093c4:	4641      	mov	r1, r8
 80093c6:	4638      	mov	r0, r7
 80093c8:	47c8      	blx	r9
 80093ca:	3001      	adds	r0, #1
 80093cc:	d103      	bne.n	80093d6 <_printf_common+0xb6>
 80093ce:	f04f 30ff 	mov.w	r0, #4294967295
 80093d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093d6:	3501      	adds	r5, #1
 80093d8:	e7c1      	b.n	800935e <_printf_common+0x3e>
 80093da:	2030      	movs	r0, #48	@ 0x30
 80093dc:	18e1      	adds	r1, r4, r3
 80093de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80093e2:	1c5a      	adds	r2, r3, #1
 80093e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80093e8:	4422      	add	r2, r4
 80093ea:	3302      	adds	r3, #2
 80093ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80093f0:	e7c2      	b.n	8009378 <_printf_common+0x58>
 80093f2:	2301      	movs	r3, #1
 80093f4:	4622      	mov	r2, r4
 80093f6:	4641      	mov	r1, r8
 80093f8:	4638      	mov	r0, r7
 80093fa:	47c8      	blx	r9
 80093fc:	3001      	adds	r0, #1
 80093fe:	d0e6      	beq.n	80093ce <_printf_common+0xae>
 8009400:	3601      	adds	r6, #1
 8009402:	e7d9      	b.n	80093b8 <_printf_common+0x98>

08009404 <_printf_i>:
 8009404:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009408:	7e0f      	ldrb	r7, [r1, #24]
 800940a:	4691      	mov	r9, r2
 800940c:	2f78      	cmp	r7, #120	@ 0x78
 800940e:	4680      	mov	r8, r0
 8009410:	460c      	mov	r4, r1
 8009412:	469a      	mov	sl, r3
 8009414:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009416:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800941a:	d807      	bhi.n	800942c <_printf_i+0x28>
 800941c:	2f62      	cmp	r7, #98	@ 0x62
 800941e:	d80a      	bhi.n	8009436 <_printf_i+0x32>
 8009420:	2f00      	cmp	r7, #0
 8009422:	f000 80d1 	beq.w	80095c8 <_printf_i+0x1c4>
 8009426:	2f58      	cmp	r7, #88	@ 0x58
 8009428:	f000 80b8 	beq.w	800959c <_printf_i+0x198>
 800942c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009430:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009434:	e03a      	b.n	80094ac <_printf_i+0xa8>
 8009436:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800943a:	2b15      	cmp	r3, #21
 800943c:	d8f6      	bhi.n	800942c <_printf_i+0x28>
 800943e:	a101      	add	r1, pc, #4	@ (adr r1, 8009444 <_printf_i+0x40>)
 8009440:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009444:	0800949d 	.word	0x0800949d
 8009448:	080094b1 	.word	0x080094b1
 800944c:	0800942d 	.word	0x0800942d
 8009450:	0800942d 	.word	0x0800942d
 8009454:	0800942d 	.word	0x0800942d
 8009458:	0800942d 	.word	0x0800942d
 800945c:	080094b1 	.word	0x080094b1
 8009460:	0800942d 	.word	0x0800942d
 8009464:	0800942d 	.word	0x0800942d
 8009468:	0800942d 	.word	0x0800942d
 800946c:	0800942d 	.word	0x0800942d
 8009470:	080095af 	.word	0x080095af
 8009474:	080094db 	.word	0x080094db
 8009478:	08009569 	.word	0x08009569
 800947c:	0800942d 	.word	0x0800942d
 8009480:	0800942d 	.word	0x0800942d
 8009484:	080095d1 	.word	0x080095d1
 8009488:	0800942d 	.word	0x0800942d
 800948c:	080094db 	.word	0x080094db
 8009490:	0800942d 	.word	0x0800942d
 8009494:	0800942d 	.word	0x0800942d
 8009498:	08009571 	.word	0x08009571
 800949c:	6833      	ldr	r3, [r6, #0]
 800949e:	1d1a      	adds	r2, r3, #4
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	6032      	str	r2, [r6, #0]
 80094a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80094a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80094ac:	2301      	movs	r3, #1
 80094ae:	e09c      	b.n	80095ea <_printf_i+0x1e6>
 80094b0:	6833      	ldr	r3, [r6, #0]
 80094b2:	6820      	ldr	r0, [r4, #0]
 80094b4:	1d19      	adds	r1, r3, #4
 80094b6:	6031      	str	r1, [r6, #0]
 80094b8:	0606      	lsls	r6, r0, #24
 80094ba:	d501      	bpl.n	80094c0 <_printf_i+0xbc>
 80094bc:	681d      	ldr	r5, [r3, #0]
 80094be:	e003      	b.n	80094c8 <_printf_i+0xc4>
 80094c0:	0645      	lsls	r5, r0, #25
 80094c2:	d5fb      	bpl.n	80094bc <_printf_i+0xb8>
 80094c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80094c8:	2d00      	cmp	r5, #0
 80094ca:	da03      	bge.n	80094d4 <_printf_i+0xd0>
 80094cc:	232d      	movs	r3, #45	@ 0x2d
 80094ce:	426d      	negs	r5, r5
 80094d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80094d4:	230a      	movs	r3, #10
 80094d6:	4858      	ldr	r0, [pc, #352]	@ (8009638 <_printf_i+0x234>)
 80094d8:	e011      	b.n	80094fe <_printf_i+0xfa>
 80094da:	6821      	ldr	r1, [r4, #0]
 80094dc:	6833      	ldr	r3, [r6, #0]
 80094de:	0608      	lsls	r0, r1, #24
 80094e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80094e4:	d402      	bmi.n	80094ec <_printf_i+0xe8>
 80094e6:	0649      	lsls	r1, r1, #25
 80094e8:	bf48      	it	mi
 80094ea:	b2ad      	uxthmi	r5, r5
 80094ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80094ee:	6033      	str	r3, [r6, #0]
 80094f0:	bf14      	ite	ne
 80094f2:	230a      	movne	r3, #10
 80094f4:	2308      	moveq	r3, #8
 80094f6:	4850      	ldr	r0, [pc, #320]	@ (8009638 <_printf_i+0x234>)
 80094f8:	2100      	movs	r1, #0
 80094fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80094fe:	6866      	ldr	r6, [r4, #4]
 8009500:	2e00      	cmp	r6, #0
 8009502:	60a6      	str	r6, [r4, #8]
 8009504:	db05      	blt.n	8009512 <_printf_i+0x10e>
 8009506:	6821      	ldr	r1, [r4, #0]
 8009508:	432e      	orrs	r6, r5
 800950a:	f021 0104 	bic.w	r1, r1, #4
 800950e:	6021      	str	r1, [r4, #0]
 8009510:	d04b      	beq.n	80095aa <_printf_i+0x1a6>
 8009512:	4616      	mov	r6, r2
 8009514:	fbb5 f1f3 	udiv	r1, r5, r3
 8009518:	fb03 5711 	mls	r7, r3, r1, r5
 800951c:	5dc7      	ldrb	r7, [r0, r7]
 800951e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009522:	462f      	mov	r7, r5
 8009524:	42bb      	cmp	r3, r7
 8009526:	460d      	mov	r5, r1
 8009528:	d9f4      	bls.n	8009514 <_printf_i+0x110>
 800952a:	2b08      	cmp	r3, #8
 800952c:	d10b      	bne.n	8009546 <_printf_i+0x142>
 800952e:	6823      	ldr	r3, [r4, #0]
 8009530:	07df      	lsls	r7, r3, #31
 8009532:	d508      	bpl.n	8009546 <_printf_i+0x142>
 8009534:	6923      	ldr	r3, [r4, #16]
 8009536:	6861      	ldr	r1, [r4, #4]
 8009538:	4299      	cmp	r1, r3
 800953a:	bfde      	ittt	le
 800953c:	2330      	movle	r3, #48	@ 0x30
 800953e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009542:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009546:	1b92      	subs	r2, r2, r6
 8009548:	6122      	str	r2, [r4, #16]
 800954a:	464b      	mov	r3, r9
 800954c:	4621      	mov	r1, r4
 800954e:	4640      	mov	r0, r8
 8009550:	f8cd a000 	str.w	sl, [sp]
 8009554:	aa03      	add	r2, sp, #12
 8009556:	f7ff fee3 	bl	8009320 <_printf_common>
 800955a:	3001      	adds	r0, #1
 800955c:	d14a      	bne.n	80095f4 <_printf_i+0x1f0>
 800955e:	f04f 30ff 	mov.w	r0, #4294967295
 8009562:	b004      	add	sp, #16
 8009564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009568:	6823      	ldr	r3, [r4, #0]
 800956a:	f043 0320 	orr.w	r3, r3, #32
 800956e:	6023      	str	r3, [r4, #0]
 8009570:	2778      	movs	r7, #120	@ 0x78
 8009572:	4832      	ldr	r0, [pc, #200]	@ (800963c <_printf_i+0x238>)
 8009574:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009578:	6823      	ldr	r3, [r4, #0]
 800957a:	6831      	ldr	r1, [r6, #0]
 800957c:	061f      	lsls	r7, r3, #24
 800957e:	f851 5b04 	ldr.w	r5, [r1], #4
 8009582:	d402      	bmi.n	800958a <_printf_i+0x186>
 8009584:	065f      	lsls	r7, r3, #25
 8009586:	bf48      	it	mi
 8009588:	b2ad      	uxthmi	r5, r5
 800958a:	6031      	str	r1, [r6, #0]
 800958c:	07d9      	lsls	r1, r3, #31
 800958e:	bf44      	itt	mi
 8009590:	f043 0320 	orrmi.w	r3, r3, #32
 8009594:	6023      	strmi	r3, [r4, #0]
 8009596:	b11d      	cbz	r5, 80095a0 <_printf_i+0x19c>
 8009598:	2310      	movs	r3, #16
 800959a:	e7ad      	b.n	80094f8 <_printf_i+0xf4>
 800959c:	4826      	ldr	r0, [pc, #152]	@ (8009638 <_printf_i+0x234>)
 800959e:	e7e9      	b.n	8009574 <_printf_i+0x170>
 80095a0:	6823      	ldr	r3, [r4, #0]
 80095a2:	f023 0320 	bic.w	r3, r3, #32
 80095a6:	6023      	str	r3, [r4, #0]
 80095a8:	e7f6      	b.n	8009598 <_printf_i+0x194>
 80095aa:	4616      	mov	r6, r2
 80095ac:	e7bd      	b.n	800952a <_printf_i+0x126>
 80095ae:	6833      	ldr	r3, [r6, #0]
 80095b0:	6825      	ldr	r5, [r4, #0]
 80095b2:	1d18      	adds	r0, r3, #4
 80095b4:	6961      	ldr	r1, [r4, #20]
 80095b6:	6030      	str	r0, [r6, #0]
 80095b8:	062e      	lsls	r6, r5, #24
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	d501      	bpl.n	80095c2 <_printf_i+0x1be>
 80095be:	6019      	str	r1, [r3, #0]
 80095c0:	e002      	b.n	80095c8 <_printf_i+0x1c4>
 80095c2:	0668      	lsls	r0, r5, #25
 80095c4:	d5fb      	bpl.n	80095be <_printf_i+0x1ba>
 80095c6:	8019      	strh	r1, [r3, #0]
 80095c8:	2300      	movs	r3, #0
 80095ca:	4616      	mov	r6, r2
 80095cc:	6123      	str	r3, [r4, #16]
 80095ce:	e7bc      	b.n	800954a <_printf_i+0x146>
 80095d0:	6833      	ldr	r3, [r6, #0]
 80095d2:	2100      	movs	r1, #0
 80095d4:	1d1a      	adds	r2, r3, #4
 80095d6:	6032      	str	r2, [r6, #0]
 80095d8:	681e      	ldr	r6, [r3, #0]
 80095da:	6862      	ldr	r2, [r4, #4]
 80095dc:	4630      	mov	r0, r6
 80095de:	f000 f859 	bl	8009694 <memchr>
 80095e2:	b108      	cbz	r0, 80095e8 <_printf_i+0x1e4>
 80095e4:	1b80      	subs	r0, r0, r6
 80095e6:	6060      	str	r0, [r4, #4]
 80095e8:	6863      	ldr	r3, [r4, #4]
 80095ea:	6123      	str	r3, [r4, #16]
 80095ec:	2300      	movs	r3, #0
 80095ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80095f2:	e7aa      	b.n	800954a <_printf_i+0x146>
 80095f4:	4632      	mov	r2, r6
 80095f6:	4649      	mov	r1, r9
 80095f8:	4640      	mov	r0, r8
 80095fa:	6923      	ldr	r3, [r4, #16]
 80095fc:	47d0      	blx	sl
 80095fe:	3001      	adds	r0, #1
 8009600:	d0ad      	beq.n	800955e <_printf_i+0x15a>
 8009602:	6823      	ldr	r3, [r4, #0]
 8009604:	079b      	lsls	r3, r3, #30
 8009606:	d413      	bmi.n	8009630 <_printf_i+0x22c>
 8009608:	68e0      	ldr	r0, [r4, #12]
 800960a:	9b03      	ldr	r3, [sp, #12]
 800960c:	4298      	cmp	r0, r3
 800960e:	bfb8      	it	lt
 8009610:	4618      	movlt	r0, r3
 8009612:	e7a6      	b.n	8009562 <_printf_i+0x15e>
 8009614:	2301      	movs	r3, #1
 8009616:	4632      	mov	r2, r6
 8009618:	4649      	mov	r1, r9
 800961a:	4640      	mov	r0, r8
 800961c:	47d0      	blx	sl
 800961e:	3001      	adds	r0, #1
 8009620:	d09d      	beq.n	800955e <_printf_i+0x15a>
 8009622:	3501      	adds	r5, #1
 8009624:	68e3      	ldr	r3, [r4, #12]
 8009626:	9903      	ldr	r1, [sp, #12]
 8009628:	1a5b      	subs	r3, r3, r1
 800962a:	42ab      	cmp	r3, r5
 800962c:	dcf2      	bgt.n	8009614 <_printf_i+0x210>
 800962e:	e7eb      	b.n	8009608 <_printf_i+0x204>
 8009630:	2500      	movs	r5, #0
 8009632:	f104 0619 	add.w	r6, r4, #25
 8009636:	e7f5      	b.n	8009624 <_printf_i+0x220>
 8009638:	0800986b 	.word	0x0800986b
 800963c:	0800987c 	.word	0x0800987c

08009640 <memmove>:
 8009640:	4288      	cmp	r0, r1
 8009642:	b510      	push	{r4, lr}
 8009644:	eb01 0402 	add.w	r4, r1, r2
 8009648:	d902      	bls.n	8009650 <memmove+0x10>
 800964a:	4284      	cmp	r4, r0
 800964c:	4623      	mov	r3, r4
 800964e:	d807      	bhi.n	8009660 <memmove+0x20>
 8009650:	1e43      	subs	r3, r0, #1
 8009652:	42a1      	cmp	r1, r4
 8009654:	d008      	beq.n	8009668 <memmove+0x28>
 8009656:	f811 2b01 	ldrb.w	r2, [r1], #1
 800965a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800965e:	e7f8      	b.n	8009652 <memmove+0x12>
 8009660:	4601      	mov	r1, r0
 8009662:	4402      	add	r2, r0
 8009664:	428a      	cmp	r2, r1
 8009666:	d100      	bne.n	800966a <memmove+0x2a>
 8009668:	bd10      	pop	{r4, pc}
 800966a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800966e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009672:	e7f7      	b.n	8009664 <memmove+0x24>

08009674 <_sbrk_r>:
 8009674:	b538      	push	{r3, r4, r5, lr}
 8009676:	2300      	movs	r3, #0
 8009678:	4d05      	ldr	r5, [pc, #20]	@ (8009690 <_sbrk_r+0x1c>)
 800967a:	4604      	mov	r4, r0
 800967c:	4608      	mov	r0, r1
 800967e:	602b      	str	r3, [r5, #0]
 8009680:	f7f6 ffe2 	bl	8000648 <_sbrk>
 8009684:	1c43      	adds	r3, r0, #1
 8009686:	d102      	bne.n	800968e <_sbrk_r+0x1a>
 8009688:	682b      	ldr	r3, [r5, #0]
 800968a:	b103      	cbz	r3, 800968e <_sbrk_r+0x1a>
 800968c:	6023      	str	r3, [r4, #0]
 800968e:	bd38      	pop	{r3, r4, r5, pc}
 8009690:	20001548 	.word	0x20001548

08009694 <memchr>:
 8009694:	4603      	mov	r3, r0
 8009696:	b510      	push	{r4, lr}
 8009698:	b2c9      	uxtb	r1, r1
 800969a:	4402      	add	r2, r0
 800969c:	4293      	cmp	r3, r2
 800969e:	4618      	mov	r0, r3
 80096a0:	d101      	bne.n	80096a6 <memchr+0x12>
 80096a2:	2000      	movs	r0, #0
 80096a4:	e003      	b.n	80096ae <memchr+0x1a>
 80096a6:	7804      	ldrb	r4, [r0, #0]
 80096a8:	3301      	adds	r3, #1
 80096aa:	428c      	cmp	r4, r1
 80096ac:	d1f6      	bne.n	800969c <memchr+0x8>
 80096ae:	bd10      	pop	{r4, pc}

080096b0 <_realloc_r>:
 80096b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096b4:	4607      	mov	r7, r0
 80096b6:	4614      	mov	r4, r2
 80096b8:	460d      	mov	r5, r1
 80096ba:	b921      	cbnz	r1, 80096c6 <_realloc_r+0x16>
 80096bc:	4611      	mov	r1, r2
 80096be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096c2:	f7ff bc49 	b.w	8008f58 <_malloc_r>
 80096c6:	b92a      	cbnz	r2, 80096d4 <_realloc_r+0x24>
 80096c8:	f7ff fbdc 	bl	8008e84 <_free_r>
 80096cc:	4625      	mov	r5, r4
 80096ce:	4628      	mov	r0, r5
 80096d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096d4:	f000 f81a 	bl	800970c <_malloc_usable_size_r>
 80096d8:	4284      	cmp	r4, r0
 80096da:	4606      	mov	r6, r0
 80096dc:	d802      	bhi.n	80096e4 <_realloc_r+0x34>
 80096de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80096e2:	d8f4      	bhi.n	80096ce <_realloc_r+0x1e>
 80096e4:	4621      	mov	r1, r4
 80096e6:	4638      	mov	r0, r7
 80096e8:	f7ff fc36 	bl	8008f58 <_malloc_r>
 80096ec:	4680      	mov	r8, r0
 80096ee:	b908      	cbnz	r0, 80096f4 <_realloc_r+0x44>
 80096f0:	4645      	mov	r5, r8
 80096f2:	e7ec      	b.n	80096ce <_realloc_r+0x1e>
 80096f4:	42b4      	cmp	r4, r6
 80096f6:	4622      	mov	r2, r4
 80096f8:	4629      	mov	r1, r5
 80096fa:	bf28      	it	cs
 80096fc:	4632      	movcs	r2, r6
 80096fe:	f7ff fbb3 	bl	8008e68 <memcpy>
 8009702:	4629      	mov	r1, r5
 8009704:	4638      	mov	r0, r7
 8009706:	f7ff fbbd 	bl	8008e84 <_free_r>
 800970a:	e7f1      	b.n	80096f0 <_realloc_r+0x40>

0800970c <_malloc_usable_size_r>:
 800970c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009710:	1f18      	subs	r0, r3, #4
 8009712:	2b00      	cmp	r3, #0
 8009714:	bfbc      	itt	lt
 8009716:	580b      	ldrlt	r3, [r1, r0]
 8009718:	18c0      	addlt	r0, r0, r3
 800971a:	4770      	bx	lr

0800971c <_init>:
 800971c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800971e:	bf00      	nop
 8009720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009722:	bc08      	pop	{r3}
 8009724:	469e      	mov	lr, r3
 8009726:	4770      	bx	lr

08009728 <_fini>:
 8009728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800972a:	bf00      	nop
 800972c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800972e:	bc08      	pop	{r3}
 8009730:	469e      	mov	lr, r3
 8009732:	4770      	bx	lr
