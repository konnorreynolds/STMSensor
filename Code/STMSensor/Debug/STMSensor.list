
STMSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009624  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08009730  08009730  0000a730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800989c  0800989c  0000b1d0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800989c  0800989c  0000a89c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080098a4  080098a4  0000b1d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098a4  080098a4  0000a8a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080098a8  080098a8  0000a8a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d0  20000000  080098ac  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001388  200001d0  08009a7c  0000b1d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001558  08009a7c  0000b558  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f99a  00000000  00000000  0000b1f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030fc  00000000  00000000  0001ab93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  0001dc90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a3a  00000000  00000000  0001ea40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a02b  00000000  00000000  0001f47a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000139fb  00000000  00000000  000394a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087733  00000000  00000000  0004cea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d45d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b5c  00000000  00000000  000d4618  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000d8174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001d0 	.word	0x200001d0
 8000128:	00000000 	.word	0x00000000
 800012c:	08009718 	.word	0x08009718

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001d4 	.word	0x200001d4
 8000148:	08009718 	.word	0x08009718

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fbe3 	bl	800092c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f8c5 	bl	80002f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f94b 	bl	8000404 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800016e:	f008 f973 	bl	8008458 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8000172:	f000 f919 	bl	80003a8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* Attempt to initialize the VL53L0X sensor on I2C bus 1
  * This checks if sensor is connected and responding with correct ID (0xEE) */
  if (VL53L0X_Init(&hi2c1) == HAL_OK) {
 8000176:	4851      	ldr	r0, [pc, #324]	@ (80002bc <main+0x160>)
 8000178:	f000 fb32 	bl	80007e0 <VL53L0X_Init>
 800017c:	4603      	mov	r3, r0
 800017e:	2b00      	cmp	r3, #0
 8000180:	d106      	bne.n	8000190 <main+0x34>
	 /* Sensor found and initialized successfully */
	 SendMessageUSB("VL53L0X Sensor Initialize Success...\n\0");
 8000182:	484f      	ldr	r0, [pc, #316]	@ (80002c0 <main+0x164>)
 8000184:	f000 fac6 	bl	8000714 <SendMessageUSB>
	 sensorOK = 1; // Sensor is detected online.
 8000188:	4b4e      	ldr	r3, [pc, #312]	@ (80002c4 <main+0x168>)
 800018a:	2201      	movs	r2, #1
 800018c:	701a      	strb	r2, [r3, #0]
 800018e:	e005      	b.n	800019c <main+0x40>
  } else {
	 /* Sensor initialization failed - either not connected, wrong wiring,
	  * or not a VL53L0X sensor (wrong ID) */
	 SendMessageUSB("VL53L0X Sensor Initialize Fail...\n\0");
 8000190:	484d      	ldr	r0, [pc, #308]	@ (80002c8 <main+0x16c>)
 8000192:	f000 fabf 	bl	8000714 <SendMessageUSB>
	 initError = 1;  // Set error flag to track initialization failure
 8000196:	4b4d      	ldr	r3, [pc, #308]	@ (80002cc <main+0x170>)
 8000198:	2201      	movs	r2, #1
 800019a:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* Check initial sensor state from initialization */
	  if (initError) {
 800019c:	4b4b      	ldr	r3, [pc, #300]	@ (80002cc <main+0x170>)
 800019e:	781b      	ldrb	r3, [r3, #0]
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d002      	beq.n	80001aa <main+0x4e>
	     sensorOK = 0;  // Sensor failed during init
 80001a4:	4b47      	ldr	r3, [pc, #284]	@ (80002c4 <main+0x168>)
 80001a6:	2200      	movs	r2, #0
 80001a8:	701a      	strb	r2, [r3, #0]
	  }

	  /* Attempt sensor reconnection every ~1 second if it's not working */
	  if (!sensorOK) {
 80001aa:	4b46      	ldr	r3, [pc, #280]	@ (80002c4 <main+0x168>)
 80001ac:	781b      	ldrb	r3, [r3, #0]
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d126      	bne.n	8000200 <main+0xa4>
	     reconnectTimer++;
 80001b2:	4b47      	ldr	r3, [pc, #284]	@ (80002d0 <main+0x174>)
 80001b4:	781b      	ldrb	r3, [r3, #0]
 80001b6:	3301      	adds	r3, #1
 80001b8:	b2da      	uxtb	r2, r3
 80001ba:	4b45      	ldr	r3, [pc, #276]	@ (80002d0 <main+0x174>)
 80001bc:	701a      	strb	r2, [r3, #0]
	     if (reconnectTimer >= 50) {  // 50 loops * 20ms = 1 second
 80001be:	4b44      	ldr	r3, [pc, #272]	@ (80002d0 <main+0x174>)
 80001c0:	781b      	ldrb	r3, [r3, #0]
 80001c2:	2b31      	cmp	r3, #49	@ 0x31
 80001c4:	d91c      	bls.n	8000200 <main+0xa4>
	         reconnectTimer = 0; // Reset reconnectTimer
 80001c6:	4b42      	ldr	r3, [pc, #264]	@ (80002d0 <main+0x174>)
 80001c8:	2200      	movs	r2, #0
 80001ca:	701a      	strb	r2, [r3, #0]

	         /* Reset I2C bus before trying to reconnect
	                  * This clears any stuck I2C conditions */
	                 HAL_I2C_DeInit(&hi2c1);
 80001cc:	483b      	ldr	r0, [pc, #236]	@ (80002bc <main+0x160>)
 80001ce:	f001 f8dd 	bl	800138c <HAL_I2C_DeInit>
	                 HAL_Delay(10);
 80001d2:	200a      	movs	r0, #10
 80001d4:	f000 fc0c 	bl	80009f0 <HAL_Delay>
	                 MX_I2C1_Init();  // Reinitialize I2C peripheral
 80001d8:	f000 f8e6 	bl	80003a8 <MX_I2C1_Init>
	                 HAL_Delay(10);
 80001dc:	200a      	movs	r0, #10
 80001de:	f000 fc07 	bl	80009f0 <HAL_Delay>

	         /* Try to initialize sensor again */
	         if (VL53L0X_Init(&hi2c1) == HAL_OK) {
 80001e2:	4836      	ldr	r0, [pc, #216]	@ (80002bc <main+0x160>)
 80001e4:	f000 fafc 	bl	80007e0 <VL53L0X_Init>
 80001e8:	4603      	mov	r3, r0
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d108      	bne.n	8000200 <main+0xa4>
	             sensorOK = 1;  // Sensor is back online
 80001ee:	4b35      	ldr	r3, [pc, #212]	@ (80002c4 <main+0x168>)
 80001f0:	2201      	movs	r2, #1
 80001f2:	701a      	strb	r2, [r3, #0]
	             initError = 0;
 80001f4:	4b35      	ldr	r3, [pc, #212]	@ (80002cc <main+0x170>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	701a      	strb	r2, [r3, #0]
	             SendMessageUSB("Sensor reconnected\n\0");
 80001fa:	4836      	ldr	r0, [pc, #216]	@ (80002d4 <main+0x178>)
 80001fc:	f000 fa8a 	bl	8000714 <SendMessageUSB>
	         }
	     }
	  }

	  /* Read and transmit sensor data if sensor is working */
	  if (sensorOK) {
 8000200:	4b30      	ldr	r3, [pc, #192]	@ (80002c4 <main+0x168>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d01e      	beq.n	8000246 <main+0xea>
	     uint16_t distance = VL53L0X_ReadDistance(&hi2c1);
 8000208:	482c      	ldr	r0, [pc, #176]	@ (80002bc <main+0x160>)
 800020a:	f000 fb09 	bl	8000820 <VL53L0X_ReadDistance>
 800020e:	4603      	mov	r3, r0
 8000210:	80fb      	strh	r3, [r7, #6]

	     if (distance != DISTANCE_ERROR) {
 8000212:	88fb      	ldrh	r3, [r7, #6]
 8000214:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000218:	4293      	cmp	r3, r2
 800021a:	d00e      	beq.n	800023a <main+0xde>
	         /* Valid reading - try to send over USB */
	         if (SendSensorUSB(distance) != USBD_OK) {
 800021c:	88fb      	ldrh	r3, [r7, #6]
 800021e:	4618      	mov	r0, r3
 8000220:	f000 faa8 	bl	8000774 <SendSensorUSB>
 8000224:	4603      	mov	r3, r0
 8000226:	2b00      	cmp	r3, #0
 8000228:	d003      	beq.n	8000232 <main+0xd6>
	             usbOK = 0;  // USB transmission failed
 800022a:	4b2b      	ldr	r3, [pc, #172]	@ (80002d8 <main+0x17c>)
 800022c:	2200      	movs	r2, #0
 800022e:	701a      	strb	r2, [r3, #0]
 8000230:	e009      	b.n	8000246 <main+0xea>
	         } else {
	             usbOK = 1;  // USB working fine
 8000232:	4b29      	ldr	r3, [pc, #164]	@ (80002d8 <main+0x17c>)
 8000234:	2201      	movs	r2, #1
 8000236:	701a      	strb	r2, [r3, #0]
 8000238:	e005      	b.n	8000246 <main+0xea>
	         }
	         // TODO Add CAN Imple
	     } else {
	         /* Sensor read failed - mark as not working */
	         sensorOK = 0;
 800023a:	4b22      	ldr	r3, [pc, #136]	@ (80002c4 <main+0x168>)
 800023c:	2200      	movs	r2, #0
 800023e:	701a      	strb	r2, [r3, #0]
	         SendMessageUSB("Sensor read failed\n\0");
 8000240:	4826      	ldr	r0, [pc, #152]	@ (80002dc <main+0x180>)
 8000242:	f000 fa67 	bl	8000714 <SendMessageUSB>
	     }
	  }

	  /* Check USB connection health (optional - implement based on your USB stack) */
	  if (USBStatus() != USBD_OK) {
 8000246:	f000 fac1 	bl	80007cc <USBStatus>
 800024a:	4603      	mov	r3, r0
 800024c:	2b00      	cmp	r3, #0
 800024e:	d002      	beq.n	8000256 <main+0xfa>
	     usbOK = 0;  // USB disconnected or not ready
 8000250:	4b21      	ldr	r3, [pc, #132]	@ (80002d8 <main+0x17c>)
 8000252:	2200      	movs	r2, #0
 8000254:	701a      	strb	r2, [r3, #0]

	  /* LED Status Indicator (Pull-Up: LOW = ON, HIGH = OFF)
	  * Different patterns for different states:
	  * - All OK: LED ON (solid)
	  * - Any error: LED OFF */
	  if (sensorOK && usbOK && canOK) {
 8000256:	4b1b      	ldr	r3, [pc, #108]	@ (80002c4 <main+0x168>)
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	2b00      	cmp	r3, #0
 800025c:	d00e      	beq.n	800027c <main+0x120>
 800025e:	4b1e      	ldr	r3, [pc, #120]	@ (80002d8 <main+0x17c>)
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b00      	cmp	r3, #0
 8000264:	d00a      	beq.n	800027c <main+0x120>
 8000266:	4b1e      	ldr	r3, [pc, #120]	@ (80002e0 <main+0x184>)
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	2b00      	cmp	r3, #0
 800026c:	d006      	beq.n	800027c <main+0x120>
	     /* Everything working - LED ON */
	     HAL_GPIO_WritePin(LED_BUILTIN, GPIO_PIN_RESET);
 800026e:	2200      	movs	r2, #0
 8000270:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000274:	481b      	ldr	r0, [pc, #108]	@ (80002e4 <main+0x188>)
 8000276:	f000 ff2d 	bl	80010d4 <HAL_GPIO_WritePin>
 800027a:	e01a      	b.n	80002b2 <main+0x156>
	  } else {
	     /* Something has failed - LED OFF
	      * Could expand this to blink patterns for specific errors */
	     HAL_GPIO_WritePin(LED_BUILTIN, GPIO_PIN_SET);
 800027c:	2201      	movs	r2, #1
 800027e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000282:	4818      	ldr	r0, [pc, #96]	@ (80002e4 <main+0x188>)
 8000284:	f000 ff26 	bl	80010d4 <HAL_GPIO_WritePin>

	     /* Print which system failed for debugging */
	     if (!sensorOK) SendMessageUSB("ERROR: Sensor\n\0");
 8000288:	4b0e      	ldr	r3, [pc, #56]	@ (80002c4 <main+0x168>)
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	2b00      	cmp	r3, #0
 800028e:	d102      	bne.n	8000296 <main+0x13a>
 8000290:	4815      	ldr	r0, [pc, #84]	@ (80002e8 <main+0x18c>)
 8000292:	f000 fa3f 	bl	8000714 <SendMessageUSB>
	     if (!usbOK)    SendMessageUSB("ERROR: USB\n\0");
 8000296:	4b10      	ldr	r3, [pc, #64]	@ (80002d8 <main+0x17c>)
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d102      	bne.n	80002a4 <main+0x148>
 800029e:	4813      	ldr	r0, [pc, #76]	@ (80002ec <main+0x190>)
 80002a0:	f000 fa38 	bl	8000714 <SendMessageUSB>
	     if (!canOK)    SendMessageUSB("ERROR: CAN\n\0");
 80002a4:	4b0e      	ldr	r3, [pc, #56]	@ (80002e0 <main+0x184>)
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d102      	bne.n	80002b2 <main+0x156>
 80002ac:	4810      	ldr	r0, [pc, #64]	@ (80002f0 <main+0x194>)
 80002ae:	f000 fa31 	bl	8000714 <SendMessageUSB>
	  }

	  /* Wait 20ms before next loop iteration
	  * This matches FRC CAN bus update period (50Hz) */
	  HAL_Delay(20);
 80002b2:	2014      	movs	r0, #20
 80002b4:	f000 fb9c 	bl	80009f0 <HAL_Delay>
	  if (initError) {
 80002b8:	e770      	b.n	800019c <main+0x40>
 80002ba:	bf00      	nop
 80002bc:	200001ec 	.word	0x200001ec
 80002c0:	08009730 	.word	0x08009730
 80002c4:	20000241 	.word	0x20000241
 80002c8:	08009758 	.word	0x08009758
 80002cc:	20000240 	.word	0x20000240
 80002d0:	20000242 	.word	0x20000242
 80002d4:	0800977c 	.word	0x0800977c
 80002d8:	20000000 	.word	0x20000000
 80002dc:	08009794 	.word	0x08009794
 80002e0:	20000001 	.word	0x20000001
 80002e4:	40011000 	.word	0x40011000
 80002e8:	080097ac 	.word	0x080097ac
 80002ec:	080097bc 	.word	0x080097bc
 80002f0:	080097cc 	.word	0x080097cc

080002f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b094      	sub	sp, #80	@ 0x50
 80002f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80002fe:	2228      	movs	r2, #40	@ 0x28
 8000300:	2100      	movs	r1, #0
 8000302:	4618      	mov	r0, r3
 8000304:	f008 fd7a 	bl	8008dfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000308:	f107 0314 	add.w	r3, r7, #20
 800030c:	2200      	movs	r2, #0
 800030e:	601a      	str	r2, [r3, #0]
 8000310:	605a      	str	r2, [r3, #4]
 8000312:	609a      	str	r2, [r3, #8]
 8000314:	60da      	str	r2, [r3, #12]
 8000316:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000318:	1d3b      	adds	r3, r7, #4
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	605a      	str	r2, [r3, #4]
 8000320:	609a      	str	r2, [r3, #8]
 8000322:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000324:	2301      	movs	r3, #1
 8000326:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000328:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800032c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800032e:	2300      	movs	r3, #0
 8000330:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000332:	2301      	movs	r3, #1
 8000334:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000336:	2302      	movs	r3, #2
 8000338:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800033a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800033e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000340:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000344:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000346:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800034a:	4618      	mov	r0, r3
 800034c:	f003 fcd0 	bl	8003cf0 <HAL_RCC_OscConfig>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000356:	f000 f8ad 	bl	80004b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800035a:	230f      	movs	r3, #15
 800035c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800035e:	2302      	movs	r3, #2
 8000360:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000362:	2300      	movs	r3, #0
 8000364:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000366:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800036a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800036c:	2300      	movs	r3, #0
 800036e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000370:	f107 0314 	add.w	r3, r7, #20
 8000374:	2102      	movs	r1, #2
 8000376:	4618      	mov	r0, r3
 8000378:	f003 ff3c 	bl	80041f4 <HAL_RCC_ClockConfig>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000382:	f000 f897 	bl	80004b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000386:	2310      	movs	r3, #16
 8000388:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800038a:	2300      	movs	r3, #0
 800038c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800038e:	1d3b      	adds	r3, r7, #4
 8000390:	4618      	mov	r0, r3
 8000392:	f004 f8a9 	bl	80044e8 <HAL_RCCEx_PeriphCLKConfig>
 8000396:	4603      	mov	r3, r0
 8000398:	2b00      	cmp	r3, #0
 800039a:	d001      	beq.n	80003a0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800039c:	f000 f88a 	bl	80004b4 <Error_Handler>
  }
}
 80003a0:	bf00      	nop
 80003a2:	3750      	adds	r7, #80	@ 0x50
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}

080003a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003ac:	4b12      	ldr	r3, [pc, #72]	@ (80003f8 <MX_I2C1_Init+0x50>)
 80003ae:	4a13      	ldr	r2, [pc, #76]	@ (80003fc <MX_I2C1_Init+0x54>)
 80003b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80003b2:	4b11      	ldr	r3, [pc, #68]	@ (80003f8 <MX_I2C1_Init+0x50>)
 80003b4:	4a12      	ldr	r2, [pc, #72]	@ (8000400 <MX_I2C1_Init+0x58>)
 80003b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003b8:	4b0f      	ldr	r3, [pc, #60]	@ (80003f8 <MX_I2C1_Init+0x50>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80003be:	4b0e      	ldr	r3, [pc, #56]	@ (80003f8 <MX_I2C1_Init+0x50>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003c4:	4b0c      	ldr	r3, [pc, #48]	@ (80003f8 <MX_I2C1_Init+0x50>)
 80003c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80003ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003cc:	4b0a      	ldr	r3, [pc, #40]	@ (80003f8 <MX_I2C1_Init+0x50>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80003d2:	4b09      	ldr	r3, [pc, #36]	@ (80003f8 <MX_I2C1_Init+0x50>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003d8:	4b07      	ldr	r3, [pc, #28]	@ (80003f8 <MX_I2C1_Init+0x50>)
 80003da:	2200      	movs	r2, #0
 80003dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003de:	4b06      	ldr	r3, [pc, #24]	@ (80003f8 <MX_I2C1_Init+0x50>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003e4:	4804      	ldr	r0, [pc, #16]	@ (80003f8 <MX_I2C1_Init+0x50>)
 80003e6:	f000 fe8d 	bl	8001104 <HAL_I2C_Init>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80003f0:	f000 f860 	bl	80004b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003f4:	bf00      	nop
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	200001ec 	.word	0x200001ec
 80003fc:	40005400 	.word	0x40005400
 8000400:	000186a0 	.word	0x000186a0

08000404 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b088      	sub	sp, #32
 8000408:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040a:	f107 0310 	add.w	r3, r7, #16
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
 8000412:	605a      	str	r2, [r3, #4]
 8000414:	609a      	str	r2, [r3, #8]
 8000416:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000418:	4b24      	ldr	r3, [pc, #144]	@ (80004ac <MX_GPIO_Init+0xa8>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	4a23      	ldr	r2, [pc, #140]	@ (80004ac <MX_GPIO_Init+0xa8>)
 800041e:	f043 0310 	orr.w	r3, r3, #16
 8000422:	6193      	str	r3, [r2, #24]
 8000424:	4b21      	ldr	r3, [pc, #132]	@ (80004ac <MX_GPIO_Init+0xa8>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	f003 0310 	and.w	r3, r3, #16
 800042c:	60fb      	str	r3, [r7, #12]
 800042e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000430:	4b1e      	ldr	r3, [pc, #120]	@ (80004ac <MX_GPIO_Init+0xa8>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	4a1d      	ldr	r2, [pc, #116]	@ (80004ac <MX_GPIO_Init+0xa8>)
 8000436:	f043 0320 	orr.w	r3, r3, #32
 800043a:	6193      	str	r3, [r2, #24]
 800043c:	4b1b      	ldr	r3, [pc, #108]	@ (80004ac <MX_GPIO_Init+0xa8>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	f003 0320 	and.w	r3, r3, #32
 8000444:	60bb      	str	r3, [r7, #8]
 8000446:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000448:	4b18      	ldr	r3, [pc, #96]	@ (80004ac <MX_GPIO_Init+0xa8>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	4a17      	ldr	r2, [pc, #92]	@ (80004ac <MX_GPIO_Init+0xa8>)
 800044e:	f043 0304 	orr.w	r3, r3, #4
 8000452:	6193      	str	r3, [r2, #24]
 8000454:	4b15      	ldr	r3, [pc, #84]	@ (80004ac <MX_GPIO_Init+0xa8>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	f003 0304 	and.w	r3, r3, #4
 800045c:	607b      	str	r3, [r7, #4]
 800045e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000460:	4b12      	ldr	r3, [pc, #72]	@ (80004ac <MX_GPIO_Init+0xa8>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	4a11      	ldr	r2, [pc, #68]	@ (80004ac <MX_GPIO_Init+0xa8>)
 8000466:	f043 0308 	orr.w	r3, r3, #8
 800046a:	6193      	str	r3, [r2, #24]
 800046c:	4b0f      	ldr	r3, [pc, #60]	@ (80004ac <MX_GPIO_Init+0xa8>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	f003 0308 	and.w	r3, r3, #8
 8000474:	603b      	str	r3, [r7, #0]
 8000476:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Status_LED_GPIO_Port, Status_LED_Pin, GPIO_PIN_RESET);
 8000478:	2200      	movs	r2, #0
 800047a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800047e:	480c      	ldr	r0, [pc, #48]	@ (80004b0 <MX_GPIO_Init+0xac>)
 8000480:	f000 fe28 	bl	80010d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Status_LED_Pin */
  GPIO_InitStruct.Pin = Status_LED_Pin;
 8000484:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000488:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800048a:	2301      	movs	r3, #1
 800048c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800048e:	2301      	movs	r3, #1
 8000490:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000492:	2303      	movs	r3, #3
 8000494:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Status_LED_GPIO_Port, &GPIO_InitStruct);
 8000496:	f107 0310 	add.w	r3, r7, #16
 800049a:	4619      	mov	r1, r3
 800049c:	4804      	ldr	r0, [pc, #16]	@ (80004b0 <MX_GPIO_Init+0xac>)
 800049e:	f000 fbd9 	bl	8000c54 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80004a2:	bf00      	nop
 80004a4:	3720      	adds	r7, #32
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	40021000 	.word	0x40021000
 80004b0:	40011000 	.word	0x40011000

080004b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004b8:	b672      	cpsid	i
}
 80004ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004bc:	bf00      	nop
 80004be:	e7fd      	b.n	80004bc <Error_Handler+0x8>

080004c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004c6:	4b15      	ldr	r3, [pc, #84]	@ (800051c <HAL_MspInit+0x5c>)
 80004c8:	699b      	ldr	r3, [r3, #24]
 80004ca:	4a14      	ldr	r2, [pc, #80]	@ (800051c <HAL_MspInit+0x5c>)
 80004cc:	f043 0301 	orr.w	r3, r3, #1
 80004d0:	6193      	str	r3, [r2, #24]
 80004d2:	4b12      	ldr	r3, [pc, #72]	@ (800051c <HAL_MspInit+0x5c>)
 80004d4:	699b      	ldr	r3, [r3, #24]
 80004d6:	f003 0301 	and.w	r3, r3, #1
 80004da:	60bb      	str	r3, [r7, #8]
 80004dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004de:	4b0f      	ldr	r3, [pc, #60]	@ (800051c <HAL_MspInit+0x5c>)
 80004e0:	69db      	ldr	r3, [r3, #28]
 80004e2:	4a0e      	ldr	r2, [pc, #56]	@ (800051c <HAL_MspInit+0x5c>)
 80004e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004e8:	61d3      	str	r3, [r2, #28]
 80004ea:	4b0c      	ldr	r3, [pc, #48]	@ (800051c <HAL_MspInit+0x5c>)
 80004ec:	69db      	ldr	r3, [r3, #28]
 80004ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80004f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000520 <HAL_MspInit+0x60>)
 80004f8:	685b      	ldr	r3, [r3, #4]
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000502:	60fb      	str	r3, [r7, #12]
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	4a04      	ldr	r2, [pc, #16]	@ (8000520 <HAL_MspInit+0x60>)
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000512:	bf00      	nop
 8000514:	3714      	adds	r7, #20
 8000516:	46bd      	mov	sp, r7
 8000518:	bc80      	pop	{r7}
 800051a:	4770      	bx	lr
 800051c:	40021000 	.word	0x40021000
 8000520:	40010000 	.word	0x40010000

08000524 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b088      	sub	sp, #32
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052c:	f107 0310 	add.w	r3, r7, #16
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4a15      	ldr	r2, [pc, #84]	@ (8000594 <HAL_I2C_MspInit+0x70>)
 8000540:	4293      	cmp	r3, r2
 8000542:	d123      	bne.n	800058c <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000544:	4b14      	ldr	r3, [pc, #80]	@ (8000598 <HAL_I2C_MspInit+0x74>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	4a13      	ldr	r2, [pc, #76]	@ (8000598 <HAL_I2C_MspInit+0x74>)
 800054a:	f043 0308 	orr.w	r3, r3, #8
 800054e:	6193      	str	r3, [r2, #24]
 8000550:	4b11      	ldr	r3, [pc, #68]	@ (8000598 <HAL_I2C_MspInit+0x74>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	f003 0308 	and.w	r3, r3, #8
 8000558:	60fb      	str	r3, [r7, #12]
 800055a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800055c:	23c0      	movs	r3, #192	@ 0xc0
 800055e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000560:	2312      	movs	r3, #18
 8000562:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000564:	2303      	movs	r3, #3
 8000566:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000568:	f107 0310 	add.w	r3, r7, #16
 800056c:	4619      	mov	r1, r3
 800056e:	480b      	ldr	r0, [pc, #44]	@ (800059c <HAL_I2C_MspInit+0x78>)
 8000570:	f000 fb70 	bl	8000c54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000574:	4b08      	ldr	r3, [pc, #32]	@ (8000598 <HAL_I2C_MspInit+0x74>)
 8000576:	69db      	ldr	r3, [r3, #28]
 8000578:	4a07      	ldr	r2, [pc, #28]	@ (8000598 <HAL_I2C_MspInit+0x74>)
 800057a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800057e:	61d3      	str	r3, [r2, #28]
 8000580:	4b05      	ldr	r3, [pc, #20]	@ (8000598 <HAL_I2C_MspInit+0x74>)
 8000582:	69db      	ldr	r3, [r3, #28]
 8000584:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000588:	60bb      	str	r3, [r7, #8]
 800058a:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800058c:	bf00      	nop
 800058e:	3720      	adds	r7, #32
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	40005400 	.word	0x40005400
 8000598:	40021000 	.word	0x40021000
 800059c:	40010c00 	.word	0x40010c00

080005a0 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a0a      	ldr	r2, [pc, #40]	@ (80005d8 <HAL_I2C_MspDeInit+0x38>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d10d      	bne.n	80005ce <HAL_I2C_MspDeInit+0x2e>
  {
    /* USER CODE BEGIN I2C1_MspDeInit 0 */

    /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80005b2:	4b0a      	ldr	r3, [pc, #40]	@ (80005dc <HAL_I2C_MspDeInit+0x3c>)
 80005b4:	69db      	ldr	r3, [r3, #28]
 80005b6:	4a09      	ldr	r2, [pc, #36]	@ (80005dc <HAL_I2C_MspDeInit+0x3c>)
 80005b8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80005bc:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80005be:	2140      	movs	r1, #64	@ 0x40
 80005c0:	4807      	ldr	r0, [pc, #28]	@ (80005e0 <HAL_I2C_MspDeInit+0x40>)
 80005c2:	f000 fccb 	bl	8000f5c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80005c6:	2180      	movs	r1, #128	@ 0x80
 80005c8:	4805      	ldr	r0, [pc, #20]	@ (80005e0 <HAL_I2C_MspDeInit+0x40>)
 80005ca:	f000 fcc7 	bl	8000f5c <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C1_MspDeInit 1 */

    /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40005400 	.word	0x40005400
 80005dc:	40021000 	.word	0x40021000
 80005e0:	40010c00 	.word	0x40010c00

080005e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005e8:	bf00      	nop
 80005ea:	e7fd      	b.n	80005e8 <NMI_Handler+0x4>

080005ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005f0:	bf00      	nop
 80005f2:	e7fd      	b.n	80005f0 <HardFault_Handler+0x4>

080005f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005f8:	bf00      	nop
 80005fa:	e7fd      	b.n	80005f8 <MemManage_Handler+0x4>

080005fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000600:	bf00      	nop
 8000602:	e7fd      	b.n	8000600 <BusFault_Handler+0x4>

08000604 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000608:	bf00      	nop
 800060a:	e7fd      	b.n	8000608 <UsageFault_Handler+0x4>

0800060c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr

08000618 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	bc80      	pop	{r7}
 8000622:	4770      	bx	lr

08000624 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000628:	bf00      	nop
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr

08000630 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000634:	f000 f9c0 	bl	80009b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}

0800063c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000640:	4802      	ldr	r0, [pc, #8]	@ (800064c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000642:	f001 ff10 	bl	8002466 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000f18 	.word	0x20000f18

08000650 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000658:	4a14      	ldr	r2, [pc, #80]	@ (80006ac <_sbrk+0x5c>)
 800065a:	4b15      	ldr	r3, [pc, #84]	@ (80006b0 <_sbrk+0x60>)
 800065c:	1ad3      	subs	r3, r2, r3
 800065e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000664:	4b13      	ldr	r3, [pc, #76]	@ (80006b4 <_sbrk+0x64>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d102      	bne.n	8000672 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800066c:	4b11      	ldr	r3, [pc, #68]	@ (80006b4 <_sbrk+0x64>)
 800066e:	4a12      	ldr	r2, [pc, #72]	@ (80006b8 <_sbrk+0x68>)
 8000670:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000672:	4b10      	ldr	r3, [pc, #64]	@ (80006b4 <_sbrk+0x64>)
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	4413      	add	r3, r2
 800067a:	693a      	ldr	r2, [r7, #16]
 800067c:	429a      	cmp	r2, r3
 800067e:	d207      	bcs.n	8000690 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000680:	f008 fbc4 	bl	8008e0c <__errno>
 8000684:	4603      	mov	r3, r0
 8000686:	220c      	movs	r2, #12
 8000688:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800068a:	f04f 33ff 	mov.w	r3, #4294967295
 800068e:	e009      	b.n	80006a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000690:	4b08      	ldr	r3, [pc, #32]	@ (80006b4 <_sbrk+0x64>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000696:	4b07      	ldr	r3, [pc, #28]	@ (80006b4 <_sbrk+0x64>)
 8000698:	681a      	ldr	r2, [r3, #0]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4413      	add	r3, r2
 800069e:	4a05      	ldr	r2, [pc, #20]	@ (80006b4 <_sbrk+0x64>)
 80006a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006a2:	68fb      	ldr	r3, [r7, #12]
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3718      	adds	r7, #24
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20005000 	.word	0x20005000
 80006b0:	00000400 	.word	0x00000400
 80006b4:	20000244 	.word	0x20000244
 80006b8:	20001558 	.word	0x20001558

080006bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr

080006c8 <USBWrite>:
 * @return USBD_OK if successful, USBD_FAIL if error
 *
 * NOTE: Uses strlen() to determine length, so txData must end with '\0'
 *       The '\0' itself is NOT sent over USB
 */
USBD_StatusTypeDef USBWrite(uint8_t *txData) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
   uint16_t len = strlen((char*)txData);  // Get length of string to send
 80006d0:	6878      	ldr	r0, [r7, #4]
 80006d2:	f7ff fd3b 	bl	800014c <strlen>
 80006d6:	4603      	mov	r3, r0
 80006d8:	81fb      	strh	r3, [r7, #14]

   /* Keep trying to send until USB is not busy */
   do {
       status = CDC_Transmit_FS(txData, len);  // Attempt to transmit
 80006da:	89fb      	ldrh	r3, [r7, #14]
 80006dc:	4619      	mov	r1, r3
 80006de:	6878      	ldr	r0, [r7, #4]
 80006e0:	f007 ff78 	bl	80085d4 <CDC_Transmit_FS>
 80006e4:	4603      	mov	r3, r0
 80006e6:	461a      	mov	r2, r3
 80006e8:	4b09      	ldr	r3, [pc, #36]	@ (8000710 <USBWrite+0x48>)
 80006ea:	701a      	strb	r2, [r3, #0]
       if (status == USBD_BUSY) {
 80006ec:	4b08      	ldr	r3, [pc, #32]	@ (8000710 <USBWrite+0x48>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d102      	bne.n	80006fa <USBWrite+0x32>
           HAL_Delay(10);  // Small delay before retrying (10ms)
 80006f4:	200a      	movs	r0, #10
 80006f6:	f000 f97b 	bl	80009f0 <HAL_Delay>
       }
   } while (status == USBD_BUSY);  // Loop while USB is busy
 80006fa:	4b05      	ldr	r3, [pc, #20]	@ (8000710 <USBWrite+0x48>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d0eb      	beq.n	80006da <USBWrite+0x12>

   /* Return the final status (could be USBD_OK or USBD_FAIL) */
   return status;
 8000702:	4b03      	ldr	r3, [pc, #12]	@ (8000710 <USBWrite+0x48>)
 8000704:	781b      	ldrb	r3, [r3, #0]
}
 8000706:	4618      	mov	r0, r3
 8000708:	3710      	adds	r7, #16
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000248 	.word	0x20000248

08000714 <SendMessageUSB>:
 * @return USBD_OK if successful, USBD_FAIL if error
 *
 * NOTE: Uses strlen() to determine length, so msg must end with '\0'
 *       The '\0' itself is NOT sent over USB
 */
USBD_StatusTypeDef SendMessageUSB(const char *msg) {
 8000714:	b580      	push	{r7, lr}
 8000716:	b0c4      	sub	sp, #272	@ 0x110
 8000718:	af00      	add	r7, sp, #0
 800071a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800071e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000722:	6018      	str	r0, [r3, #0]
   uint8_t buffer[256];           // Local buffer for message
   size_t msgLen = strlen(msg);   // Get message length
 8000724:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000728:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800072c:	6818      	ldr	r0, [r3, #0]
 800072e:	f7ff fd0d 	bl	800014c <strlen>
 8000732:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
   memcpy(buffer, msg, msgLen);   // Copy message to buffer
 8000736:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800073a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800073e:	f107 000c 	add.w	r0, r7, #12
 8000742:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8000746:	6819      	ldr	r1, [r3, #0]
 8000748:	f008 fb8c 	bl	8008e64 <memcpy>
   buffer[msgLen] = '\0';         // Ensure null termination
 800074c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000750:	f5a3 7282 	sub.w	r2, r3, #260	@ 0x104
 8000754:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000758:	4413      	add	r3, r2
 800075a:	2200      	movs	r2, #0
 800075c:	701a      	strb	r2, [r3, #0]

   return USBWrite(buffer);       // Send the buffer over USB
 800075e:	f107 030c 	add.w	r3, r7, #12
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff ffb0 	bl	80006c8 <USBWrite>
 8000768:	4603      	mov	r3, r0
}
 800076a:	4618      	mov	r0, r3
 800076c:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <SendSensorUSB>:
 * @param  distance: Distance value in mm (0-65535)
 * @return USBD_OK if successful, USBD_FAIL if error
 *
 * Sends "Distance: XXXmm\r\n" over USB (without '\0')
 */
USBD_StatusTypeDef SendSensorUSB(uint16_t distance) {
 8000774:	b580      	push	{r7, lr}
 8000776:	b0c6      	sub	sp, #280	@ 0x118
 8000778:	af00      	add	r7, sp, #0
 800077a:	4602      	mov	r2, r0
 800077c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000780:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 8000784:	801a      	strh	r2, [r3, #0]
   uint8_t buffer[256];        // Buffer for formatted message
   char distance_str[10];      // Temporary string for distance value

   /* Convert distance (uint16_t) to string */
   snprintf(distance_str, sizeof(distance_str), "%u", distance);
 8000786:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800078a:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 800078e:	881b      	ldrh	r3, [r3, #0]
 8000790:	f107 000c 	add.w	r0, r7, #12
 8000794:	4a0b      	ldr	r2, [pc, #44]	@ (80007c4 <SendSensorUSB+0x50>)
 8000796:	210a      	movs	r1, #10
 8000798:	f008 fafa 	bl	8008d90 <sniprintf>

   /* Create full formatted message */
   snprintf((char*)buffer, sizeof(buffer), "Distance: %smm\r\n", distance_str);
 800079c:	f107 030c 	add.w	r3, r7, #12
 80007a0:	f107 0018 	add.w	r0, r7, #24
 80007a4:	4a08      	ldr	r2, [pc, #32]	@ (80007c8 <SendSensorUSB+0x54>)
 80007a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007aa:	f008 faf1 	bl	8008d90 <sniprintf>

   return USBWrite(buffer);    // Send formatted message over USB
 80007ae:	f107 0318 	add.w	r3, r7, #24
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff ff88 	bl	80006c8 <USBWrite>
 80007b8:	4603      	mov	r3, r0
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	080097dc 	.word	0x080097dc
 80007c8:	080097e0 	.word	0x080097e0

080007cc <USBStatus>:
* @brief  Get the last USB operation status
* @return Last USB status code
*
* Returns the global status variable from the most recent USB operation
*/
USBD_StatusTypeDef USBStatus() {
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
   return status;
 80007d0:	4b02      	ldr	r3, [pc, #8]	@ (80007dc <USBStatus+0x10>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr
 80007dc:	20000248 	.word	0x20000248

080007e0 <VL53L0X_Init>:
 * @return HAL_OK if sensor found, HAL_ERROR if something's wrong
 * 
 * We ask the sensor for its ID number to make sure it's really there
 * and that it's the right type of sensor (VL53L0X always returns 0xEE)
 */
HAL_StatusTypeDef VL53L0X_Init(I2C_HandleTypeDef *hi2c) {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b088      	sub	sp, #32
 80007e4:	af04      	add	r7, sp, #16
 80007e6:	6078      	str	r0, [r7, #4]
    uint8_t sensor_id;  // Variable to store the ID we read from sensor
    
    /* Read the sensor's ID register at address 0xC0 */
    if (HAL_I2C_Mem_Read(hi2c,                    // Use this I2C bus
 80007e8:	2364      	movs	r3, #100	@ 0x64
 80007ea:	9302      	str	r3, [sp, #8]
 80007ec:	2301      	movs	r3, #1
 80007ee:	9301      	str	r3, [sp, #4]
 80007f0:	f107 030f 	add.w	r3, r7, #15
 80007f4:	9300      	str	r3, [sp, #0]
 80007f6:	2301      	movs	r3, #1
 80007f8:	22c0      	movs	r2, #192	@ 0xc0
 80007fa:	2152      	movs	r1, #82	@ 0x52
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f000 feef 	bl	80015e0 <HAL_I2C_Mem_Read>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <VL53L0X_Init+0x2c>
                         &sensor_id,               // Store the ID here
                         1,                        // Read 1 byte
                         I2C_TIMEOUT_MS) != HAL_OK) {  // Wait max 100ms
        
        /* If we can't read the ID, sensor is probably not connected */
        return HAL_ERROR;  
 8000808:	2301      	movs	r3, #1
 800080a:	e005      	b.n	8000818 <VL53L0X_Init+0x38>
    }
    
    /* Check if the ID matches what we expect (0xEE)
     * All genuine VL53L0X sensors have this same ID */
    if (sensor_id != VL53L0X_EXPECTED_ID) {
 800080c:	7bfb      	ldrb	r3, [r7, #15]
 800080e:	2bee      	cmp	r3, #238	@ 0xee
 8000810:	d001      	beq.n	8000816 <VL53L0X_Init+0x36>
        /* Wrong ID means it's not a VL53L0X sensor */
        return HAL_ERROR;  
 8000812:	2301      	movs	r3, #1
 8000814:	e000      	b.n	8000818 <VL53L0X_Init+0x38>
    }
    
    /* Sensor found and responding correctly */
    return HAL_OK;  
 8000816:	2300      	movs	r3, #0
}
 8000818:	4618      	mov	r0, r3
 800081a:	3710      	adds	r7, #16
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <VL53L0X_ReadDistance>:
 * The measurement process:
 * 1. Tell sensor to take a measurement
 * 2. Wait for it to finish (check status register)
 * 3. Read the 16-bit result from the distance register
 */
uint16_t VL53L0X_ReadDistance(I2C_HandleTypeDef *hi2c) {
 8000820:	b580      	push	{r7, lr}
 8000822:	b08a      	sub	sp, #40	@ 0x28
 8000824:	af04      	add	r7, sp, #16
 8000826:	6078      	str	r0, [r7, #4]
    uint8_t distance_bytes[2];  // Array to store the 2-byte distance value
    uint8_t command;            // Command byte to send to sensor
    uint8_t status;             // Sensor's status byte
    uint32_t wait_loops = 0;    // Counter to prevent waiting forever
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
    
    /* Tell sensor to start a measurement by writing 0x01 to register 0x00 */
    command = START_SINGLE_MEASURE;  // 0x01 = take one measurement
 800082c:	2301      	movs	r3, #1
 800082e:	73fb      	strb	r3, [r7, #15]
    
    if (HAL_I2C_Mem_Write(hi2c,                   // Use this I2C bus
 8000830:	2364      	movs	r3, #100	@ 0x64
 8000832:	9302      	str	r3, [sp, #8]
 8000834:	2301      	movs	r3, #1
 8000836:	9301      	str	r3, [sp, #4]
 8000838:	f107 030f 	add.w	r3, r7, #15
 800083c:	9300      	str	r3, [sp, #0]
 800083e:	2301      	movs	r3, #1
 8000840:	2200      	movs	r2, #0
 8000842:	2152      	movs	r1, #82	@ 0x52
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f000 fdd1 	bl	80013ec <HAL_I2C_Mem_Write>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d002      	beq.n	8000856 <VL53L0X_ReadDistance+0x36>
                          &command,                // Send this command (0x01)
                          1,                       // Send 1 byte
                          I2C_TIMEOUT_MS) != HAL_OK) {  // Wait max 100ms
        
        /* Couldn't send command to sensor */
        return DISTANCE_ERROR;  // Return error value (0xFFFF)
 8000850:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000854:	e040      	b.n	80008d8 <VL53L0X_ReadDistance+0xb8>
    /* Wait for measurement to complete
     * The sensor sets bit 0 of the status register to 1 when done
     * We keep checking this bit until it becomes 1 */
    do {
        /* Read the status register at address 0x14 */
        if (HAL_I2C_Mem_Read(hi2c,                    // Use this I2C bus
 8000856:	2364      	movs	r3, #100	@ 0x64
 8000858:	9302      	str	r3, [sp, #8]
 800085a:	2301      	movs	r3, #1
 800085c:	9301      	str	r3, [sp, #4]
 800085e:	f107 030e 	add.w	r3, r7, #14
 8000862:	9300      	str	r3, [sp, #0]
 8000864:	2301      	movs	r3, #1
 8000866:	2214      	movs	r2, #20
 8000868:	2152      	movs	r1, #82	@ 0x52
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f000 feb8 	bl	80015e0 <HAL_I2C_Mem_Read>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d002      	beq.n	800087c <VL53L0X_ReadDistance+0x5c>
                             &status,                  // Store status here
                             1,                        // Read 1 byte
                             I2C_TIMEOUT_MS) != HAL_OK) {  // Wait max 100ms
            
            /* Couldn't read status */
            return DISTANCE_ERROR;  
 8000876:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800087a:	e02d      	b.n	80008d8 <VL53L0X_ReadDistance+0xb8>
        }
        
        /* Check if we've been waiting too long (>100ms is unusual) */
        wait_loops++;
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	3301      	adds	r3, #1
 8000880:	617b      	str	r3, [r7, #20]
        if (wait_loops > MEASUREMENT_TIMEOUT_MS) {
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	2b64      	cmp	r3, #100	@ 0x64
 8000886:	d902      	bls.n	800088e <VL53L0X_ReadDistance+0x6e>
            /* Sensor is taking too long, something's wrong */
            return DISTANCE_ERROR;
 8000888:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800088c:	e024      	b.n	80008d8 <VL53L0X_ReadDistance+0xb8>
        }
        
        /* Wait 1 millisecond before checking again */
        HAL_Delay(1);
 800088e:	2001      	movs	r0, #1
 8000890:	f000 f8ae 	bl	80009f0 <HAL_Delay>
        
        /* Keep looping while bit 0 is still 0 (not ready) */
    } while ((status & MEASUREMENT_READY_BIT) == 0);
 8000894:	7bbb      	ldrb	r3, [r7, #14]
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	2b00      	cmp	r3, #0
 800089c:	d0db      	beq.n	8000856 <VL53L0X_ReadDistance+0x36>
    
    /* Measurement is ready! Read the distance value (2 bytes at address 0x1E) */
    if (HAL_I2C_Mem_Read(hi2c,                    // Use this I2C bus
 800089e:	2364      	movs	r3, #100	@ 0x64
 80008a0:	9302      	str	r3, [sp, #8]
 80008a2:	2302      	movs	r3, #2
 80008a4:	9301      	str	r3, [sp, #4]
 80008a6:	f107 0310 	add.w	r3, r7, #16
 80008aa:	9300      	str	r3, [sp, #0]
 80008ac:	2301      	movs	r3, #1
 80008ae:	221e      	movs	r2, #30
 80008b0:	2152      	movs	r1, #82	@ 0x52
 80008b2:	6878      	ldr	r0, [r7, #4]
 80008b4:	f000 fe94 	bl	80015e0 <HAL_I2C_Mem_Read>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d002      	beq.n	80008c4 <VL53L0X_ReadDistance+0xa4>
                         distance_bytes,           // Store 2 bytes here
                         2,                        // Read 2 bytes
                         I2C_TIMEOUT_MS) != HAL_OK) {  // Wait max 100ms
        
        /* Couldn't read the distance */
        return DISTANCE_ERROR;
 80008be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80008c2:	e009      	b.n	80008d8 <VL53L0X_ReadDistance+0xb8>
    
    /* Combine the 2 bytes into one 16-bit number
     * First byte is the high byte (multiply by 256)
     * Second byte is the low byte
     * Example: if bytes are [0x01, 0x2C], distance = (1 * 256) + 44 = 300mm */
    uint16_t distance = (distance_bytes[0] << 8) | distance_bytes[1];
 80008c4:	7c3b      	ldrb	r3, [r7, #16]
 80008c6:	b21b      	sxth	r3, r3
 80008c8:	021b      	lsls	r3, r3, #8
 80008ca:	b21a      	sxth	r2, r3
 80008cc:	7c7b      	ldrb	r3, [r7, #17]
 80008ce:	b21b      	sxth	r3, r3
 80008d0:	4313      	orrs	r3, r2
 80008d2:	b21b      	sxth	r3, r3
 80008d4:	827b      	strh	r3, [r7, #18]
    
    /* Return the distance in millimeters */
    return distance;
 80008d6:	8a7b      	ldrh	r3, [r7, #18]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3718      	adds	r7, #24
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008e0:	f7ff feec 	bl	80006bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008e4:	480b      	ldr	r0, [pc, #44]	@ (8000914 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008e6:	490c      	ldr	r1, [pc, #48]	@ (8000918 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008e8:	4a0c      	ldr	r2, [pc, #48]	@ (800091c <LoopFillZerobss+0x16>)
  movs r3, #0
 80008ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008ec:	e002      	b.n	80008f4 <LoopCopyDataInit>

080008ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008f2:	3304      	adds	r3, #4

080008f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f8:	d3f9      	bcc.n	80008ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008fa:	4a09      	ldr	r2, [pc, #36]	@ (8000920 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008fc:	4c09      	ldr	r4, [pc, #36]	@ (8000924 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000900:	e001      	b.n	8000906 <LoopFillZerobss>

08000902 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000902:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000904:	3204      	adds	r2, #4

08000906 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000906:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000908:	d3fb      	bcc.n	8000902 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800090a:	f008 fa85 	bl	8008e18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800090e:	f7ff fc25 	bl	800015c <main>
  bx lr
 8000912:	4770      	bx	lr
  ldr r0, =_sdata
 8000914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000918:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 800091c:	080098ac 	.word	0x080098ac
  ldr r2, =_sbss
 8000920:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8000924:	20001558 	.word	0x20001558

08000928 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000928:	e7fe      	b.n	8000928 <ADC1_2_IRQHandler>
	...

0800092c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000930:	4b08      	ldr	r3, [pc, #32]	@ (8000954 <HAL_Init+0x28>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a07      	ldr	r2, [pc, #28]	@ (8000954 <HAL_Init+0x28>)
 8000936:	f043 0310 	orr.w	r3, r3, #16
 800093a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800093c:	2003      	movs	r0, #3
 800093e:	f000 f947 	bl	8000bd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000942:	200f      	movs	r0, #15
 8000944:	f000 f808 	bl	8000958 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000948:	f7ff fdba 	bl	80004c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800094c:	2300      	movs	r3, #0
}
 800094e:	4618      	mov	r0, r3
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40022000 	.word	0x40022000

08000958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000960:	4b12      	ldr	r3, [pc, #72]	@ (80009ac <HAL_InitTick+0x54>)
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	4b12      	ldr	r3, [pc, #72]	@ (80009b0 <HAL_InitTick+0x58>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	4619      	mov	r1, r3
 800096a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800096e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000972:	fbb2 f3f3 	udiv	r3, r2, r3
 8000976:	4618      	mov	r0, r3
 8000978:	f000 f95f 	bl	8000c3a <HAL_SYSTICK_Config>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000982:	2301      	movs	r3, #1
 8000984:	e00e      	b.n	80009a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2b0f      	cmp	r3, #15
 800098a:	d80a      	bhi.n	80009a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800098c:	2200      	movs	r2, #0
 800098e:	6879      	ldr	r1, [r7, #4]
 8000990:	f04f 30ff 	mov.w	r0, #4294967295
 8000994:	f000 f927 	bl	8000be6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000998:	4a06      	ldr	r2, [pc, #24]	@ (80009b4 <HAL_InitTick+0x5c>)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800099e:	2300      	movs	r3, #0
 80009a0:	e000      	b.n	80009a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000004 	.word	0x20000004
 80009b0:	2000000c 	.word	0x2000000c
 80009b4:	20000008 	.word	0x20000008

080009b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009bc:	4b05      	ldr	r3, [pc, #20]	@ (80009d4 <HAL_IncTick+0x1c>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	461a      	mov	r2, r3
 80009c2:	4b05      	ldr	r3, [pc, #20]	@ (80009d8 <HAL_IncTick+0x20>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4413      	add	r3, r2
 80009c8:	4a03      	ldr	r2, [pc, #12]	@ (80009d8 <HAL_IncTick+0x20>)
 80009ca:	6013      	str	r3, [r2, #0]
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr
 80009d4:	2000000c 	.word	0x2000000c
 80009d8:	2000024c 	.word	0x2000024c

080009dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  return uwTick;
 80009e0:	4b02      	ldr	r3, [pc, #8]	@ (80009ec <HAL_GetTick+0x10>)
 80009e2:	681b      	ldr	r3, [r3, #0]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr
 80009ec:	2000024c 	.word	0x2000024c

080009f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009f8:	f7ff fff0 	bl	80009dc <HAL_GetTick>
 80009fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a08:	d005      	beq.n	8000a16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a34 <HAL_Delay+0x44>)
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	461a      	mov	r2, r3
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	4413      	add	r3, r2
 8000a14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a16:	bf00      	nop
 8000a18:	f7ff ffe0 	bl	80009dc <HAL_GetTick>
 8000a1c:	4602      	mov	r2, r0
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	1ad3      	subs	r3, r2, r3
 8000a22:	68fa      	ldr	r2, [r7, #12]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d8f7      	bhi.n	8000a18 <HAL_Delay+0x28>
  {
  }
}
 8000a28:	bf00      	nop
 8000a2a:	bf00      	nop
 8000a2c:	3710      	adds	r7, #16
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	2000000c 	.word	0x2000000c

08000a38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f003 0307 	and.w	r3, r3, #7
 8000a46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a48:	4b0c      	ldr	r3, [pc, #48]	@ (8000a7c <__NVIC_SetPriorityGrouping+0x44>)
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a4e:	68ba      	ldr	r2, [r7, #8]
 8000a50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a54:	4013      	ands	r3, r2
 8000a56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a6a:	4a04      	ldr	r2, [pc, #16]	@ (8000a7c <__NVIC_SetPriorityGrouping+0x44>)
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	60d3      	str	r3, [r2, #12]
}
 8000a70:	bf00      	nop
 8000a72:	3714      	adds	r7, #20
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bc80      	pop	{r7}
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a84:	4b04      	ldr	r3, [pc, #16]	@ (8000a98 <__NVIC_GetPriorityGrouping+0x18>)
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	0a1b      	lsrs	r3, r3, #8
 8000a8a:	f003 0307 	and.w	r3, r3, #7
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bc80      	pop	{r7}
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	db0b      	blt.n	8000ac6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	f003 021f 	and.w	r2, r3, #31
 8000ab4:	4906      	ldr	r1, [pc, #24]	@ (8000ad0 <__NVIC_EnableIRQ+0x34>)
 8000ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aba:	095b      	lsrs	r3, r3, #5
 8000abc:	2001      	movs	r0, #1
 8000abe:	fa00 f202 	lsl.w	r2, r0, r2
 8000ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ac6:	bf00      	nop
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr
 8000ad0:	e000e100 	.word	0xe000e100

08000ad4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	6039      	str	r1, [r7, #0]
 8000ade:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	db0a      	blt.n	8000afe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	490c      	ldr	r1, [pc, #48]	@ (8000b20 <__NVIC_SetPriority+0x4c>)
 8000aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af2:	0112      	lsls	r2, r2, #4
 8000af4:	b2d2      	uxtb	r2, r2
 8000af6:	440b      	add	r3, r1
 8000af8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000afc:	e00a      	b.n	8000b14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	b2da      	uxtb	r2, r3
 8000b02:	4908      	ldr	r1, [pc, #32]	@ (8000b24 <__NVIC_SetPriority+0x50>)
 8000b04:	79fb      	ldrb	r3, [r7, #7]
 8000b06:	f003 030f 	and.w	r3, r3, #15
 8000b0a:	3b04      	subs	r3, #4
 8000b0c:	0112      	lsls	r2, r2, #4
 8000b0e:	b2d2      	uxtb	r2, r2
 8000b10:	440b      	add	r3, r1
 8000b12:	761a      	strb	r2, [r3, #24]
}
 8000b14:	bf00      	nop
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bc80      	pop	{r7}
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	e000e100 	.word	0xe000e100
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b089      	sub	sp, #36	@ 0x24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	f003 0307 	and.w	r3, r3, #7
 8000b3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b3c:	69fb      	ldr	r3, [r7, #28]
 8000b3e:	f1c3 0307 	rsb	r3, r3, #7
 8000b42:	2b04      	cmp	r3, #4
 8000b44:	bf28      	it	cs
 8000b46:	2304      	movcs	r3, #4
 8000b48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	3304      	adds	r3, #4
 8000b4e:	2b06      	cmp	r3, #6
 8000b50:	d902      	bls.n	8000b58 <NVIC_EncodePriority+0x30>
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	3b03      	subs	r3, #3
 8000b56:	e000      	b.n	8000b5a <NVIC_EncodePriority+0x32>
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b60:	69bb      	ldr	r3, [r7, #24]
 8000b62:	fa02 f303 	lsl.w	r3, r2, r3
 8000b66:	43da      	mvns	r2, r3
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	401a      	ands	r2, r3
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b70:	f04f 31ff 	mov.w	r1, #4294967295
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7a:	43d9      	mvns	r1, r3
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b80:	4313      	orrs	r3, r2
         );
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3724      	adds	r7, #36	@ 0x24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr

08000b8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	3b01      	subs	r3, #1
 8000b98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b9c:	d301      	bcc.n	8000ba2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e00f      	b.n	8000bc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ba2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bcc <SysTick_Config+0x40>)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000baa:	210f      	movs	r1, #15
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	f7ff ff90 	bl	8000ad4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bb4:	4b05      	ldr	r3, [pc, #20]	@ (8000bcc <SysTick_Config+0x40>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bba:	4b04      	ldr	r3, [pc, #16]	@ (8000bcc <SysTick_Config+0x40>)
 8000bbc:	2207      	movs	r2, #7
 8000bbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bc0:	2300      	movs	r3, #0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	e000e010 	.word	0xe000e010

08000bd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f7ff ff2d 	bl	8000a38 <__NVIC_SetPriorityGrouping>
}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b086      	sub	sp, #24
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	4603      	mov	r3, r0
 8000bee:	60b9      	str	r1, [r7, #8]
 8000bf0:	607a      	str	r2, [r7, #4]
 8000bf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bf8:	f7ff ff42 	bl	8000a80 <__NVIC_GetPriorityGrouping>
 8000bfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	68b9      	ldr	r1, [r7, #8]
 8000c02:	6978      	ldr	r0, [r7, #20]
 8000c04:	f7ff ff90 	bl	8000b28 <NVIC_EncodePriority>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c0e:	4611      	mov	r1, r2
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff ff5f 	bl	8000ad4 <__NVIC_SetPriority>
}
 8000c16:	bf00      	nop
 8000c18:	3718      	adds	r7, #24
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b082      	sub	sp, #8
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	4603      	mov	r3, r0
 8000c26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff ff35 	bl	8000a9c <__NVIC_EnableIRQ>
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b082      	sub	sp, #8
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f7ff ffa2 	bl	8000b8c <SysTick_Config>
 8000c48:	4603      	mov	r3, r0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
	...

08000c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b08b      	sub	sp, #44	@ 0x2c
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c62:	2300      	movs	r3, #0
 8000c64:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c66:	e169      	b.n	8000f3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c68:	2201      	movs	r2, #1
 8000c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	69fa      	ldr	r2, [r7, #28]
 8000c78:	4013      	ands	r3, r2
 8000c7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	f040 8158 	bne.w	8000f36 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	4a9a      	ldr	r2, [pc, #616]	@ (8000ef4 <HAL_GPIO_Init+0x2a0>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d05e      	beq.n	8000d4e <HAL_GPIO_Init+0xfa>
 8000c90:	4a98      	ldr	r2, [pc, #608]	@ (8000ef4 <HAL_GPIO_Init+0x2a0>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d875      	bhi.n	8000d82 <HAL_GPIO_Init+0x12e>
 8000c96:	4a98      	ldr	r2, [pc, #608]	@ (8000ef8 <HAL_GPIO_Init+0x2a4>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d058      	beq.n	8000d4e <HAL_GPIO_Init+0xfa>
 8000c9c:	4a96      	ldr	r2, [pc, #600]	@ (8000ef8 <HAL_GPIO_Init+0x2a4>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d86f      	bhi.n	8000d82 <HAL_GPIO_Init+0x12e>
 8000ca2:	4a96      	ldr	r2, [pc, #600]	@ (8000efc <HAL_GPIO_Init+0x2a8>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d052      	beq.n	8000d4e <HAL_GPIO_Init+0xfa>
 8000ca8:	4a94      	ldr	r2, [pc, #592]	@ (8000efc <HAL_GPIO_Init+0x2a8>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d869      	bhi.n	8000d82 <HAL_GPIO_Init+0x12e>
 8000cae:	4a94      	ldr	r2, [pc, #592]	@ (8000f00 <HAL_GPIO_Init+0x2ac>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d04c      	beq.n	8000d4e <HAL_GPIO_Init+0xfa>
 8000cb4:	4a92      	ldr	r2, [pc, #584]	@ (8000f00 <HAL_GPIO_Init+0x2ac>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d863      	bhi.n	8000d82 <HAL_GPIO_Init+0x12e>
 8000cba:	4a92      	ldr	r2, [pc, #584]	@ (8000f04 <HAL_GPIO_Init+0x2b0>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d046      	beq.n	8000d4e <HAL_GPIO_Init+0xfa>
 8000cc0:	4a90      	ldr	r2, [pc, #576]	@ (8000f04 <HAL_GPIO_Init+0x2b0>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d85d      	bhi.n	8000d82 <HAL_GPIO_Init+0x12e>
 8000cc6:	2b12      	cmp	r3, #18
 8000cc8:	d82a      	bhi.n	8000d20 <HAL_GPIO_Init+0xcc>
 8000cca:	2b12      	cmp	r3, #18
 8000ccc:	d859      	bhi.n	8000d82 <HAL_GPIO_Init+0x12e>
 8000cce:	a201      	add	r2, pc, #4	@ (adr r2, 8000cd4 <HAL_GPIO_Init+0x80>)
 8000cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cd4:	08000d4f 	.word	0x08000d4f
 8000cd8:	08000d29 	.word	0x08000d29
 8000cdc:	08000d3b 	.word	0x08000d3b
 8000ce0:	08000d7d 	.word	0x08000d7d
 8000ce4:	08000d83 	.word	0x08000d83
 8000ce8:	08000d83 	.word	0x08000d83
 8000cec:	08000d83 	.word	0x08000d83
 8000cf0:	08000d83 	.word	0x08000d83
 8000cf4:	08000d83 	.word	0x08000d83
 8000cf8:	08000d83 	.word	0x08000d83
 8000cfc:	08000d83 	.word	0x08000d83
 8000d00:	08000d83 	.word	0x08000d83
 8000d04:	08000d83 	.word	0x08000d83
 8000d08:	08000d83 	.word	0x08000d83
 8000d0c:	08000d83 	.word	0x08000d83
 8000d10:	08000d83 	.word	0x08000d83
 8000d14:	08000d83 	.word	0x08000d83
 8000d18:	08000d31 	.word	0x08000d31
 8000d1c:	08000d45 	.word	0x08000d45
 8000d20:	4a79      	ldr	r2, [pc, #484]	@ (8000f08 <HAL_GPIO_Init+0x2b4>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d013      	beq.n	8000d4e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d26:	e02c      	b.n	8000d82 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	623b      	str	r3, [r7, #32]
          break;
 8000d2e:	e029      	b.n	8000d84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	3304      	adds	r3, #4
 8000d36:	623b      	str	r3, [r7, #32]
          break;
 8000d38:	e024      	b.n	8000d84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	68db      	ldr	r3, [r3, #12]
 8000d3e:	3308      	adds	r3, #8
 8000d40:	623b      	str	r3, [r7, #32]
          break;
 8000d42:	e01f      	b.n	8000d84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	330c      	adds	r3, #12
 8000d4a:	623b      	str	r3, [r7, #32]
          break;
 8000d4c:	e01a      	b.n	8000d84 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	689b      	ldr	r3, [r3, #8]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d102      	bne.n	8000d5c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d56:	2304      	movs	r3, #4
 8000d58:	623b      	str	r3, [r7, #32]
          break;
 8000d5a:	e013      	b.n	8000d84 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d105      	bne.n	8000d70 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d64:	2308      	movs	r3, #8
 8000d66:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	69fa      	ldr	r2, [r7, #28]
 8000d6c:	611a      	str	r2, [r3, #16]
          break;
 8000d6e:	e009      	b.n	8000d84 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d70:	2308      	movs	r3, #8
 8000d72:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	69fa      	ldr	r2, [r7, #28]
 8000d78:	615a      	str	r2, [r3, #20]
          break;
 8000d7a:	e003      	b.n	8000d84 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	623b      	str	r3, [r7, #32]
          break;
 8000d80:	e000      	b.n	8000d84 <HAL_GPIO_Init+0x130>
          break;
 8000d82:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	2bff      	cmp	r3, #255	@ 0xff
 8000d88:	d801      	bhi.n	8000d8e <HAL_GPIO_Init+0x13a>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	e001      	b.n	8000d92 <HAL_GPIO_Init+0x13e>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	3304      	adds	r3, #4
 8000d92:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	2bff      	cmp	r3, #255	@ 0xff
 8000d98:	d802      	bhi.n	8000da0 <HAL_GPIO_Init+0x14c>
 8000d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	e002      	b.n	8000da6 <HAL_GPIO_Init+0x152>
 8000da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000da2:	3b08      	subs	r3, #8
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	210f      	movs	r1, #15
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	fa01 f303 	lsl.w	r3, r1, r3
 8000db4:	43db      	mvns	r3, r3
 8000db6:	401a      	ands	r2, r3
 8000db8:	6a39      	ldr	r1, [r7, #32]
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc0:	431a      	orrs	r2, r3
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	f000 80b1 	beq.w	8000f36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000dd4:	4b4d      	ldr	r3, [pc, #308]	@ (8000f0c <HAL_GPIO_Init+0x2b8>)
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	4a4c      	ldr	r2, [pc, #304]	@ (8000f0c <HAL_GPIO_Init+0x2b8>)
 8000dda:	f043 0301 	orr.w	r3, r3, #1
 8000dde:	6193      	str	r3, [r2, #24]
 8000de0:	4b4a      	ldr	r3, [pc, #296]	@ (8000f0c <HAL_GPIO_Init+0x2b8>)
 8000de2:	699b      	ldr	r3, [r3, #24]
 8000de4:	f003 0301 	and.w	r3, r3, #1
 8000de8:	60bb      	str	r3, [r7, #8]
 8000dea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000dec:	4a48      	ldr	r2, [pc, #288]	@ (8000f10 <HAL_GPIO_Init+0x2bc>)
 8000dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000df0:	089b      	lsrs	r3, r3, #2
 8000df2:	3302      	adds	r3, #2
 8000df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dfc:	f003 0303 	and.w	r3, r3, #3
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	220f      	movs	r2, #15
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	68fa      	ldr	r2, [r7, #12]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4a40      	ldr	r2, [pc, #256]	@ (8000f14 <HAL_GPIO_Init+0x2c0>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d013      	beq.n	8000e40 <HAL_GPIO_Init+0x1ec>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	4a3f      	ldr	r2, [pc, #252]	@ (8000f18 <HAL_GPIO_Init+0x2c4>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d00d      	beq.n	8000e3c <HAL_GPIO_Init+0x1e8>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4a3e      	ldr	r2, [pc, #248]	@ (8000f1c <HAL_GPIO_Init+0x2c8>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d007      	beq.n	8000e38 <HAL_GPIO_Init+0x1e4>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4a3d      	ldr	r2, [pc, #244]	@ (8000f20 <HAL_GPIO_Init+0x2cc>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d101      	bne.n	8000e34 <HAL_GPIO_Init+0x1e0>
 8000e30:	2303      	movs	r3, #3
 8000e32:	e006      	b.n	8000e42 <HAL_GPIO_Init+0x1ee>
 8000e34:	2304      	movs	r3, #4
 8000e36:	e004      	b.n	8000e42 <HAL_GPIO_Init+0x1ee>
 8000e38:	2302      	movs	r3, #2
 8000e3a:	e002      	b.n	8000e42 <HAL_GPIO_Init+0x1ee>
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	e000      	b.n	8000e42 <HAL_GPIO_Init+0x1ee>
 8000e40:	2300      	movs	r3, #0
 8000e42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e44:	f002 0203 	and.w	r2, r2, #3
 8000e48:	0092      	lsls	r2, r2, #2
 8000e4a:	4093      	lsls	r3, r2
 8000e4c:	68fa      	ldr	r2, [r7, #12]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e52:	492f      	ldr	r1, [pc, #188]	@ (8000f10 <HAL_GPIO_Init+0x2bc>)
 8000e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e56:	089b      	lsrs	r3, r3, #2
 8000e58:	3302      	adds	r3, #2
 8000e5a:	68fa      	ldr	r2, [r7, #12]
 8000e5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d006      	beq.n	8000e7a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e6c:	4b2d      	ldr	r3, [pc, #180]	@ (8000f24 <HAL_GPIO_Init+0x2d0>)
 8000e6e:	689a      	ldr	r2, [r3, #8]
 8000e70:	492c      	ldr	r1, [pc, #176]	@ (8000f24 <HAL_GPIO_Init+0x2d0>)
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	608b      	str	r3, [r1, #8]
 8000e78:	e006      	b.n	8000e88 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e7a:	4b2a      	ldr	r3, [pc, #168]	@ (8000f24 <HAL_GPIO_Init+0x2d0>)
 8000e7c:	689a      	ldr	r2, [r3, #8]
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	43db      	mvns	r3, r3
 8000e82:	4928      	ldr	r1, [pc, #160]	@ (8000f24 <HAL_GPIO_Init+0x2d0>)
 8000e84:	4013      	ands	r3, r2
 8000e86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d006      	beq.n	8000ea2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e94:	4b23      	ldr	r3, [pc, #140]	@ (8000f24 <HAL_GPIO_Init+0x2d0>)
 8000e96:	68da      	ldr	r2, [r3, #12]
 8000e98:	4922      	ldr	r1, [pc, #136]	@ (8000f24 <HAL_GPIO_Init+0x2d0>)
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	60cb      	str	r3, [r1, #12]
 8000ea0:	e006      	b.n	8000eb0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ea2:	4b20      	ldr	r3, [pc, #128]	@ (8000f24 <HAL_GPIO_Init+0x2d0>)
 8000ea4:	68da      	ldr	r2, [r3, #12]
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	491e      	ldr	r1, [pc, #120]	@ (8000f24 <HAL_GPIO_Init+0x2d0>)
 8000eac:	4013      	ands	r3, r2
 8000eae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d006      	beq.n	8000eca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ebc:	4b19      	ldr	r3, [pc, #100]	@ (8000f24 <HAL_GPIO_Init+0x2d0>)
 8000ebe:	685a      	ldr	r2, [r3, #4]
 8000ec0:	4918      	ldr	r1, [pc, #96]	@ (8000f24 <HAL_GPIO_Init+0x2d0>)
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	604b      	str	r3, [r1, #4]
 8000ec8:	e006      	b.n	8000ed8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000eca:	4b16      	ldr	r3, [pc, #88]	@ (8000f24 <HAL_GPIO_Init+0x2d0>)
 8000ecc:	685a      	ldr	r2, [r3, #4]
 8000ece:	69bb      	ldr	r3, [r7, #24]
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	4914      	ldr	r1, [pc, #80]	@ (8000f24 <HAL_GPIO_Init+0x2d0>)
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d021      	beq.n	8000f28 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f24 <HAL_GPIO_Init+0x2d0>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	490e      	ldr	r1, [pc, #56]	@ (8000f24 <HAL_GPIO_Init+0x2d0>)
 8000eea:	69bb      	ldr	r3, [r7, #24]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	600b      	str	r3, [r1, #0]
 8000ef0:	e021      	b.n	8000f36 <HAL_GPIO_Init+0x2e2>
 8000ef2:	bf00      	nop
 8000ef4:	10320000 	.word	0x10320000
 8000ef8:	10310000 	.word	0x10310000
 8000efc:	10220000 	.word	0x10220000
 8000f00:	10210000 	.word	0x10210000
 8000f04:	10120000 	.word	0x10120000
 8000f08:	10110000 	.word	0x10110000
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	40010000 	.word	0x40010000
 8000f14:	40010800 	.word	0x40010800
 8000f18:	40010c00 	.word	0x40010c00
 8000f1c:	40011000 	.word	0x40011000
 8000f20:	40011400 	.word	0x40011400
 8000f24:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f28:	4b0b      	ldr	r3, [pc, #44]	@ (8000f58 <HAL_GPIO_Init+0x304>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	4909      	ldr	r1, [pc, #36]	@ (8000f58 <HAL_GPIO_Init+0x304>)
 8000f32:	4013      	ands	r3, r2
 8000f34:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f38:	3301      	adds	r3, #1
 8000f3a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f42:	fa22 f303 	lsr.w	r3, r2, r3
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	f47f ae8e 	bne.w	8000c68 <HAL_GPIO_Init+0x14>
  }
}
 8000f4c:	bf00      	nop
 8000f4e:	bf00      	nop
 8000f50:	372c      	adds	r7, #44	@ 0x2c
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr
 8000f58:	40010400 	.word	0x40010400

08000f5c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b089      	sub	sp, #36	@ 0x24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8000f6a:	e09a      	b.n	80010a2 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	683a      	ldr	r2, [r7, #0]
 8000f76:	4013      	ands	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	f000 808d 	beq.w	800109c <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8000f82:	4a4e      	ldr	r2, [pc, #312]	@ (80010bc <HAL_GPIO_DeInit+0x160>)
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	089b      	lsrs	r3, r3, #2
 8000f88:	3302      	adds	r3, #2
 8000f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f8e:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	f003 0303 	and.w	r3, r3, #3
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	220f      	movs	r2, #15
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	697a      	ldr	r2, [r7, #20]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4a46      	ldr	r2, [pc, #280]	@ (80010c0 <HAL_GPIO_DeInit+0x164>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d013      	beq.n	8000fd4 <HAL_GPIO_DeInit+0x78>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4a45      	ldr	r2, [pc, #276]	@ (80010c4 <HAL_GPIO_DeInit+0x168>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d00d      	beq.n	8000fd0 <HAL_GPIO_DeInit+0x74>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4a44      	ldr	r2, [pc, #272]	@ (80010c8 <HAL_GPIO_DeInit+0x16c>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d007      	beq.n	8000fcc <HAL_GPIO_DeInit+0x70>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4a43      	ldr	r2, [pc, #268]	@ (80010cc <HAL_GPIO_DeInit+0x170>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d101      	bne.n	8000fc8 <HAL_GPIO_DeInit+0x6c>
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	e006      	b.n	8000fd6 <HAL_GPIO_DeInit+0x7a>
 8000fc8:	2304      	movs	r3, #4
 8000fca:	e004      	b.n	8000fd6 <HAL_GPIO_DeInit+0x7a>
 8000fcc:	2302      	movs	r3, #2
 8000fce:	e002      	b.n	8000fd6 <HAL_GPIO_DeInit+0x7a>
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e000      	b.n	8000fd6 <HAL_GPIO_DeInit+0x7a>
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	69fa      	ldr	r2, [r7, #28]
 8000fd8:	f002 0203 	and.w	r2, r2, #3
 8000fdc:	0092      	lsls	r2, r2, #2
 8000fde:	4093      	lsls	r3, r2
 8000fe0:	697a      	ldr	r2, [r7, #20]
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	d132      	bne.n	800104c <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8000fe6:	4b3a      	ldr	r3, [pc, #232]	@ (80010d0 <HAL_GPIO_DeInit+0x174>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	43db      	mvns	r3, r3
 8000fee:	4938      	ldr	r1, [pc, #224]	@ (80010d0 <HAL_GPIO_DeInit+0x174>)
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8000ff4:	4b36      	ldr	r3, [pc, #216]	@ (80010d0 <HAL_GPIO_DeInit+0x174>)
 8000ff6:	685a      	ldr	r2, [r3, #4]
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	4934      	ldr	r1, [pc, #208]	@ (80010d0 <HAL_GPIO_DeInit+0x174>)
 8000ffe:	4013      	ands	r3, r2
 8001000:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8001002:	4b33      	ldr	r3, [pc, #204]	@ (80010d0 <HAL_GPIO_DeInit+0x174>)
 8001004:	68da      	ldr	r2, [r3, #12]
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	43db      	mvns	r3, r3
 800100a:	4931      	ldr	r1, [pc, #196]	@ (80010d0 <HAL_GPIO_DeInit+0x174>)
 800100c:	4013      	ands	r3, r2
 800100e:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8001010:	4b2f      	ldr	r3, [pc, #188]	@ (80010d0 <HAL_GPIO_DeInit+0x174>)
 8001012:	689a      	ldr	r2, [r3, #8]
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	43db      	mvns	r3, r3
 8001018:	492d      	ldr	r1, [pc, #180]	@ (80010d0 <HAL_GPIO_DeInit+0x174>)
 800101a:	4013      	ands	r3, r2
 800101c:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	f003 0303 	and.w	r3, r3, #3
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	220f      	movs	r2, #15
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800102e:	4a23      	ldr	r2, [pc, #140]	@ (80010bc <HAL_GPIO_DeInit+0x160>)
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	089b      	lsrs	r3, r3, #2
 8001034:	3302      	adds	r3, #2
 8001036:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	43da      	mvns	r2, r3
 800103e:	481f      	ldr	r0, [pc, #124]	@ (80010bc <HAL_GPIO_DeInit+0x160>)
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	089b      	lsrs	r3, r3, #2
 8001044:	400a      	ands	r2, r1
 8001046:	3302      	adds	r3, #2
 8001048:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	2bff      	cmp	r3, #255	@ 0xff
 8001050:	d801      	bhi.n	8001056 <HAL_GPIO_DeInit+0xfa>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	e001      	b.n	800105a <HAL_GPIO_DeInit+0xfe>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	3304      	adds	r3, #4
 800105a:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	2bff      	cmp	r3, #255	@ 0xff
 8001060:	d802      	bhi.n	8001068 <HAL_GPIO_DeInit+0x10c>
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	e002      	b.n	800106e <HAL_GPIO_DeInit+0x112>
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	3b08      	subs	r3, #8
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	210f      	movs	r1, #15
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	fa01 f303 	lsl.w	r3, r1, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	401a      	ands	r2, r3
 8001080:	2104      	movs	r1, #4
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	fa01 f303 	lsl.w	r3, r1, r3
 8001088:	431a      	orrs	r2, r3
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	68da      	ldr	r2, [r3, #12]
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	43db      	mvns	r3, r3
 8001096:	401a      	ands	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	60da      	str	r2, [r3, #12]
    }

    position++;
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	3301      	adds	r3, #1
 80010a0:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 80010a2:	683a      	ldr	r2, [r7, #0]
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	fa22 f303 	lsr.w	r3, r2, r3
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	f47f af5e 	bne.w	8000f6c <HAL_GPIO_DeInit+0x10>
  }
}
 80010b0:	bf00      	nop
 80010b2:	bf00      	nop
 80010b4:	3724      	adds	r7, #36	@ 0x24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr
 80010bc:	40010000 	.word	0x40010000
 80010c0:	40010800 	.word	0x40010800
 80010c4:	40010c00 	.word	0x40010c00
 80010c8:	40011000 	.word	0x40011000
 80010cc:	40011400 	.word	0x40011400
 80010d0:	40010400 	.word	0x40010400

080010d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	460b      	mov	r3, r1
 80010de:	807b      	strh	r3, [r7, #2]
 80010e0:	4613      	mov	r3, r2
 80010e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010e4:	787b      	ldrb	r3, [r7, #1]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d003      	beq.n	80010f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ea:	887a      	ldrh	r2, [r7, #2]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80010f0:	e003      	b.n	80010fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010f2:	887b      	ldrh	r3, [r7, #2]
 80010f4:	041a      	lsls	r2, r3, #16
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	611a      	str	r2, [r3, #16]
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr

08001104 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d101      	bne.n	8001116 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e12b      	b.n	800136e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2b00      	cmp	r3, #0
 8001120:	d106      	bne.n	8001130 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff f9fa 	bl	8000524 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2224      	movs	r2, #36	@ 0x24
 8001134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f022 0201 	bic.w	r2, r2, #1
 8001146:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001156:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001166:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001168:	f003 f98c 	bl	8004484 <HAL_RCC_GetPCLK1Freq>
 800116c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	4a81      	ldr	r2, [pc, #516]	@ (8001378 <HAL_I2C_Init+0x274>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d807      	bhi.n	8001188 <HAL_I2C_Init+0x84>
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	4a80      	ldr	r2, [pc, #512]	@ (800137c <HAL_I2C_Init+0x278>)
 800117c:	4293      	cmp	r3, r2
 800117e:	bf94      	ite	ls
 8001180:	2301      	movls	r3, #1
 8001182:	2300      	movhi	r3, #0
 8001184:	b2db      	uxtb	r3, r3
 8001186:	e006      	b.n	8001196 <HAL_I2C_Init+0x92>
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	4a7d      	ldr	r2, [pc, #500]	@ (8001380 <HAL_I2C_Init+0x27c>)
 800118c:	4293      	cmp	r3, r2
 800118e:	bf94      	ite	ls
 8001190:	2301      	movls	r3, #1
 8001192:	2300      	movhi	r3, #0
 8001194:	b2db      	uxtb	r3, r3
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e0e7      	b.n	800136e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	4a78      	ldr	r2, [pc, #480]	@ (8001384 <HAL_I2C_Init+0x280>)
 80011a2:	fba2 2303 	umull	r2, r3, r2, r3
 80011a6:	0c9b      	lsrs	r3, r3, #18
 80011a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	68ba      	ldr	r2, [r7, #8]
 80011ba:	430a      	orrs	r2, r1
 80011bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	6a1b      	ldr	r3, [r3, #32]
 80011c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	4a6a      	ldr	r2, [pc, #424]	@ (8001378 <HAL_I2C_Init+0x274>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d802      	bhi.n	80011d8 <HAL_I2C_Init+0xd4>
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	3301      	adds	r3, #1
 80011d6:	e009      	b.n	80011ec <HAL_I2C_Init+0xe8>
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80011de:	fb02 f303 	mul.w	r3, r2, r3
 80011e2:	4a69      	ldr	r2, [pc, #420]	@ (8001388 <HAL_I2C_Init+0x284>)
 80011e4:	fba2 2303 	umull	r2, r3, r2, r3
 80011e8:	099b      	lsrs	r3, r3, #6
 80011ea:	3301      	adds	r3, #1
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	6812      	ldr	r2, [r2, #0]
 80011f0:	430b      	orrs	r3, r1
 80011f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	69db      	ldr	r3, [r3, #28]
 80011fa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80011fe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	495c      	ldr	r1, [pc, #368]	@ (8001378 <HAL_I2C_Init+0x274>)
 8001208:	428b      	cmp	r3, r1
 800120a:	d819      	bhi.n	8001240 <HAL_I2C_Init+0x13c>
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	1e59      	subs	r1, r3, #1
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	fbb1 f3f3 	udiv	r3, r1, r3
 800121a:	1c59      	adds	r1, r3, #1
 800121c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001220:	400b      	ands	r3, r1
 8001222:	2b00      	cmp	r3, #0
 8001224:	d00a      	beq.n	800123c <HAL_I2C_Init+0x138>
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	1e59      	subs	r1, r3, #1
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	fbb1 f3f3 	udiv	r3, r1, r3
 8001234:	3301      	adds	r3, #1
 8001236:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800123a:	e051      	b.n	80012e0 <HAL_I2C_Init+0x1dc>
 800123c:	2304      	movs	r3, #4
 800123e:	e04f      	b.n	80012e0 <HAL_I2C_Init+0x1dc>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d111      	bne.n	800126c <HAL_I2C_Init+0x168>
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	1e58      	subs	r0, r3, #1
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6859      	ldr	r1, [r3, #4]
 8001250:	460b      	mov	r3, r1
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	440b      	add	r3, r1
 8001256:	fbb0 f3f3 	udiv	r3, r0, r3
 800125a:	3301      	adds	r3, #1
 800125c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001260:	2b00      	cmp	r3, #0
 8001262:	bf0c      	ite	eq
 8001264:	2301      	moveq	r3, #1
 8001266:	2300      	movne	r3, #0
 8001268:	b2db      	uxtb	r3, r3
 800126a:	e012      	b.n	8001292 <HAL_I2C_Init+0x18e>
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	1e58      	subs	r0, r3, #1
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6859      	ldr	r1, [r3, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	440b      	add	r3, r1
 800127a:	0099      	lsls	r1, r3, #2
 800127c:	440b      	add	r3, r1
 800127e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001282:	3301      	adds	r3, #1
 8001284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001288:	2b00      	cmp	r3, #0
 800128a:	bf0c      	ite	eq
 800128c:	2301      	moveq	r3, #1
 800128e:	2300      	movne	r3, #0
 8001290:	b2db      	uxtb	r3, r3
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <HAL_I2C_Init+0x196>
 8001296:	2301      	movs	r3, #1
 8001298:	e022      	b.n	80012e0 <HAL_I2C_Init+0x1dc>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d10e      	bne.n	80012c0 <HAL_I2C_Init+0x1bc>
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	1e58      	subs	r0, r3, #1
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6859      	ldr	r1, [r3, #4]
 80012aa:	460b      	mov	r3, r1
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	440b      	add	r3, r1
 80012b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80012b4:	3301      	adds	r3, #1
 80012b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80012be:	e00f      	b.n	80012e0 <HAL_I2C_Init+0x1dc>
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	1e58      	subs	r0, r3, #1
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6859      	ldr	r1, [r3, #4]
 80012c8:	460b      	mov	r3, r1
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	440b      	add	r3, r1
 80012ce:	0099      	lsls	r1, r3, #2
 80012d0:	440b      	add	r3, r1
 80012d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80012d6:	3301      	adds	r3, #1
 80012d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80012e0:	6879      	ldr	r1, [r7, #4]
 80012e2:	6809      	ldr	r1, [r1, #0]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	69da      	ldr	r2, [r3, #28]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6a1b      	ldr	r3, [r3, #32]
 80012fa:	431a      	orrs	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	430a      	orrs	r2, r1
 8001302:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800130e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	6911      	ldr	r1, [r2, #16]
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	68d2      	ldr	r2, [r2, #12]
 800131a:	4311      	orrs	r1, r2
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	6812      	ldr	r2, [r2, #0]
 8001320:	430b      	orrs	r3, r1
 8001322:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	695a      	ldr	r2, [r3, #20]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	699b      	ldr	r3, [r3, #24]
 8001336:	431a      	orrs	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	430a      	orrs	r2, r1
 800133e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f042 0201 	orr.w	r2, r2, #1
 800134e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2220      	movs	r2, #32
 800135a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	000186a0 	.word	0x000186a0
 800137c:	001e847f 	.word	0x001e847f
 8001380:	003d08ff 	.word	0x003d08ff
 8001384:	431bde83 	.word	0x431bde83
 8001388:	10624dd3 	.word	0x10624dd3

0800138c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e021      	b.n	80013e2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2224      	movs	r2, #36	@ 0x24
 80013a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f022 0201 	bic.w	r2, r2, #1
 80013b4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff f8f2 	bl	80005a0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
	...

080013ec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b088      	sub	sp, #32
 80013f0:	af02      	add	r7, sp, #8
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	4608      	mov	r0, r1
 80013f6:	4611      	mov	r1, r2
 80013f8:	461a      	mov	r2, r3
 80013fa:	4603      	mov	r3, r0
 80013fc:	817b      	strh	r3, [r7, #10]
 80013fe:	460b      	mov	r3, r1
 8001400:	813b      	strh	r3, [r7, #8]
 8001402:	4613      	mov	r3, r2
 8001404:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001406:	f7ff fae9 	bl	80009dc <HAL_GetTick>
 800140a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001412:	b2db      	uxtb	r3, r3
 8001414:	2b20      	cmp	r3, #32
 8001416:	f040 80d9 	bne.w	80015cc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	9300      	str	r3, [sp, #0]
 800141e:	2319      	movs	r3, #25
 8001420:	2201      	movs	r2, #1
 8001422:	496d      	ldr	r1, [pc, #436]	@ (80015d8 <HAL_I2C_Mem_Write+0x1ec>)
 8001424:	68f8      	ldr	r0, [r7, #12]
 8001426:	f000 fccd 	bl	8001dc4 <I2C_WaitOnFlagUntilTimeout>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001430:	2302      	movs	r3, #2
 8001432:	e0cc      	b.n	80015ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800143a:	2b01      	cmp	r3, #1
 800143c:	d101      	bne.n	8001442 <HAL_I2C_Mem_Write+0x56>
 800143e:	2302      	movs	r3, #2
 8001440:	e0c5      	b.n	80015ce <HAL_I2C_Mem_Write+0x1e2>
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	2201      	movs	r2, #1
 8001446:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	2b01      	cmp	r3, #1
 8001456:	d007      	beq.n	8001468 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f042 0201 	orr.w	r2, r2, #1
 8001466:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001476:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2221      	movs	r2, #33	@ 0x21
 800147c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2240      	movs	r2, #64	@ 0x40
 8001484:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2200      	movs	r2, #0
 800148c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	6a3a      	ldr	r2, [r7, #32]
 8001492:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001498:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800149e:	b29a      	uxth	r2, r3
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	4a4d      	ldr	r2, [pc, #308]	@ (80015dc <HAL_I2C_Mem_Write+0x1f0>)
 80014a8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80014aa:	88f8      	ldrh	r0, [r7, #6]
 80014ac:	893a      	ldrh	r2, [r7, #8]
 80014ae:	8979      	ldrh	r1, [r7, #10]
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	9301      	str	r3, [sp, #4]
 80014b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014b6:	9300      	str	r3, [sp, #0]
 80014b8:	4603      	mov	r3, r0
 80014ba:	68f8      	ldr	r0, [r7, #12]
 80014bc:	f000 fb04 	bl	8001ac8 <I2C_RequestMemoryWrite>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d052      	beq.n	800156c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e081      	b.n	80015ce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014ca:	697a      	ldr	r2, [r7, #20]
 80014cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80014ce:	68f8      	ldr	r0, [r7, #12]
 80014d0:	f000 fd92 	bl	8001ff8 <I2C_WaitOnTXEFlagUntilTimeout>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d00d      	beq.n	80014f6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014de:	2b04      	cmp	r3, #4
 80014e0:	d107      	bne.n	80014f2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80014f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e06b      	b.n	80015ce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014fa:	781a      	ldrb	r2, [r3, #0]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001506:	1c5a      	adds	r2, r3, #1
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001510:	3b01      	subs	r3, #1
 8001512:	b29a      	uxth	r2, r3
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800151c:	b29b      	uxth	r3, r3
 800151e:	3b01      	subs	r3, #1
 8001520:	b29a      	uxth	r2, r3
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	f003 0304 	and.w	r3, r3, #4
 8001530:	2b04      	cmp	r3, #4
 8001532:	d11b      	bne.n	800156c <HAL_I2C_Mem_Write+0x180>
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001538:	2b00      	cmp	r3, #0
 800153a:	d017      	beq.n	800156c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001540:	781a      	ldrb	r2, [r3, #0]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800154c:	1c5a      	adds	r2, r3, #1
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001556:	3b01      	subs	r3, #1
 8001558:	b29a      	uxth	r2, r3
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001562:	b29b      	uxth	r3, r3
 8001564:	3b01      	subs	r3, #1
 8001566:	b29a      	uxth	r2, r3
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001570:	2b00      	cmp	r3, #0
 8001572:	d1aa      	bne.n	80014ca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001574:	697a      	ldr	r2, [r7, #20]
 8001576:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001578:	68f8      	ldr	r0, [r7, #12]
 800157a:	f000 fd85 	bl	8002088 <I2C_WaitOnBTFFlagUntilTimeout>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d00d      	beq.n	80015a0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001588:	2b04      	cmp	r3, #4
 800158a:	d107      	bne.n	800159c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800159a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e016      	b.n	80015ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80015ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2220      	movs	r2, #32
 80015b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2200      	movs	r2, #0
 80015c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80015c8:	2300      	movs	r3, #0
 80015ca:	e000      	b.n	80015ce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80015cc:	2302      	movs	r3, #2
  }
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3718      	adds	r7, #24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	00100002 	.word	0x00100002
 80015dc:	ffff0000 	.word	0xffff0000

080015e0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08c      	sub	sp, #48	@ 0x30
 80015e4:	af02      	add	r7, sp, #8
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	4608      	mov	r0, r1
 80015ea:	4611      	mov	r1, r2
 80015ec:	461a      	mov	r2, r3
 80015ee:	4603      	mov	r3, r0
 80015f0:	817b      	strh	r3, [r7, #10]
 80015f2:	460b      	mov	r3, r1
 80015f4:	813b      	strh	r3, [r7, #8]
 80015f6:	4613      	mov	r3, r2
 80015f8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80015fa:	2300      	movs	r3, #0
 80015fc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80015fe:	f7ff f9ed 	bl	80009dc <HAL_GetTick>
 8001602:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800160a:	b2db      	uxtb	r3, r3
 800160c:	2b20      	cmp	r3, #32
 800160e:	f040 8250 	bne.w	8001ab2 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	2319      	movs	r3, #25
 8001618:	2201      	movs	r2, #1
 800161a:	4982      	ldr	r1, [pc, #520]	@ (8001824 <HAL_I2C_Mem_Read+0x244>)
 800161c:	68f8      	ldr	r0, [r7, #12]
 800161e:	f000 fbd1 	bl	8001dc4 <I2C_WaitOnFlagUntilTimeout>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001628:	2302      	movs	r3, #2
 800162a:	e243      	b.n	8001ab4 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001632:	2b01      	cmp	r3, #1
 8001634:	d101      	bne.n	800163a <HAL_I2C_Mem_Read+0x5a>
 8001636:	2302      	movs	r3, #2
 8001638:	e23c      	b.n	8001ab4 <HAL_I2C_Mem_Read+0x4d4>
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2201      	movs	r2, #1
 800163e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0301 	and.w	r3, r3, #1
 800164c:	2b01      	cmp	r3, #1
 800164e:	d007      	beq.n	8001660 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f042 0201 	orr.w	r2, r2, #1
 800165e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800166e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2222      	movs	r2, #34	@ 0x22
 8001674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2240      	movs	r2, #64	@ 0x40
 800167c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2200      	movs	r2, #0
 8001684:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800168a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001690:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001696:	b29a      	uxth	r2, r3
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4a62      	ldr	r2, [pc, #392]	@ (8001828 <HAL_I2C_Mem_Read+0x248>)
 80016a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80016a2:	88f8      	ldrh	r0, [r7, #6]
 80016a4:	893a      	ldrh	r2, [r7, #8]
 80016a6:	8979      	ldrh	r1, [r7, #10]
 80016a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016aa:	9301      	str	r3, [sp, #4]
 80016ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	4603      	mov	r3, r0
 80016b2:	68f8      	ldr	r0, [r7, #12]
 80016b4:	f000 fa9e 	bl	8001bf4 <I2C_RequestMemoryRead>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e1f8      	b.n	8001ab4 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d113      	bne.n	80016f2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	695b      	ldr	r3, [r3, #20]
 80016d4:	61fb      	str	r3, [r7, #28]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	61fb      	str	r3, [r7, #28]
 80016de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	e1cc      	b.n	8001a8c <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d11e      	bne.n	8001738 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001708:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800170a:	b672      	cpsid	i
}
 800170c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800170e:	2300      	movs	r3, #0
 8001710:	61bb      	str	r3, [r7, #24]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	695b      	ldr	r3, [r3, #20]
 8001718:	61bb      	str	r3, [r7, #24]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	61bb      	str	r3, [r7, #24]
 8001722:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001732:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001734:	b662      	cpsie	i
}
 8001736:	e035      	b.n	80017a4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800173c:	2b02      	cmp	r3, #2
 800173e:	d11e      	bne.n	800177e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800174e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001750:	b672      	cpsid	i
}
 8001752:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	617b      	str	r3, [r7, #20]
 8001768:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001778:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800177a:	b662      	cpsie	i
}
 800177c:	e012      	b.n	80017a4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800178c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800178e:	2300      	movs	r3, #0
 8001790:	613b      	str	r3, [r7, #16]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	695b      	ldr	r3, [r3, #20]
 8001798:	613b      	str	r3, [r7, #16]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	613b      	str	r3, [r7, #16]
 80017a2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80017a4:	e172      	b.n	8001a8c <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017aa:	2b03      	cmp	r3, #3
 80017ac:	f200 811f 	bhi.w	80019ee <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d123      	bne.n	8001800 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017ba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80017bc:	68f8      	ldr	r0, [r7, #12]
 80017be:	f000 fcab 	bl	8002118 <I2C_WaitOnRXNEFlagUntilTimeout>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e173      	b.n	8001ab4 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	691a      	ldr	r2, [r3, #16]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d6:	b2d2      	uxtb	r2, r2
 80017d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017de:	1c5a      	adds	r2, r3, #1
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017e8:	3b01      	subs	r3, #1
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	3b01      	subs	r3, #1
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80017fe:	e145      	b.n	8001a8c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001804:	2b02      	cmp	r3, #2
 8001806:	d152      	bne.n	80018ae <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800180e:	2200      	movs	r2, #0
 8001810:	4906      	ldr	r1, [pc, #24]	@ (800182c <HAL_I2C_Mem_Read+0x24c>)
 8001812:	68f8      	ldr	r0, [r7, #12]
 8001814:	f000 fad6 	bl	8001dc4 <I2C_WaitOnFlagUntilTimeout>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d008      	beq.n	8001830 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e148      	b.n	8001ab4 <HAL_I2C_Mem_Read+0x4d4>
 8001822:	bf00      	nop
 8001824:	00100002 	.word	0x00100002
 8001828:	ffff0000 	.word	0xffff0000
 800182c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001830:	b672      	cpsid	i
}
 8001832:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001842:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	691a      	ldr	r2, [r3, #16]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001856:	1c5a      	adds	r2, r3, #1
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001860:	3b01      	subs	r3, #1
 8001862:	b29a      	uxth	r2, r3
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800186c:	b29b      	uxth	r3, r3
 800186e:	3b01      	subs	r3, #1
 8001870:	b29a      	uxth	r2, r3
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001876:	b662      	cpsie	i
}
 8001878:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	691a      	ldr	r2, [r3, #16]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001884:	b2d2      	uxtb	r2, r2
 8001886:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800188c:	1c5a      	adds	r2, r3, #1
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001896:	3b01      	subs	r3, #1
 8001898:	b29a      	uxth	r2, r3
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	3b01      	subs	r3, #1
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80018ac:	e0ee      	b.n	8001a8c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80018ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018b4:	2200      	movs	r2, #0
 80018b6:	4981      	ldr	r1, [pc, #516]	@ (8001abc <HAL_I2C_Mem_Read+0x4dc>)
 80018b8:	68f8      	ldr	r0, [r7, #12]
 80018ba:	f000 fa83 	bl	8001dc4 <I2C_WaitOnFlagUntilTimeout>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e0f5      	b.n	8001ab4 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80018d6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80018d8:	b672      	cpsid	i
}
 80018da:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	691a      	ldr	r2, [r3, #16]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ee:	1c5a      	adds	r2, r3, #1
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018f8:	3b01      	subs	r3, #1
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001904:	b29b      	uxth	r3, r3
 8001906:	3b01      	subs	r3, #1
 8001908:	b29a      	uxth	r2, r3
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800190e:	4b6c      	ldr	r3, [pc, #432]	@ (8001ac0 <HAL_I2C_Mem_Read+0x4e0>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	08db      	lsrs	r3, r3, #3
 8001914:	4a6b      	ldr	r2, [pc, #428]	@ (8001ac4 <HAL_I2C_Mem_Read+0x4e4>)
 8001916:	fba2 2303 	umull	r2, r3, r2, r3
 800191a:	0a1a      	lsrs	r2, r3, #8
 800191c:	4613      	mov	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4413      	add	r3, r2
 8001922:	00da      	lsls	r2, r3, #3
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001928:	6a3b      	ldr	r3, [r7, #32]
 800192a:	3b01      	subs	r3, #1
 800192c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800192e:	6a3b      	ldr	r3, [r7, #32]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d118      	bne.n	8001966 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2200      	movs	r2, #0
 8001938:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2220      	movs	r2, #32
 800193e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194e:	f043 0220 	orr.w	r2, r3, #32
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001956:	b662      	cpsie	i
}
 8001958:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e0a6      	b.n	8001ab4 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	695b      	ldr	r3, [r3, #20]
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	2b04      	cmp	r3, #4
 8001972:	d1d9      	bne.n	8001928 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001982:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	691a      	ldr	r2, [r3, #16]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800198e:	b2d2      	uxtb	r2, r2
 8001990:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001996:	1c5a      	adds	r2, r3, #1
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019a0:	3b01      	subs	r3, #1
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	3b01      	subs	r3, #1
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80019b6:	b662      	cpsie	i
}
 80019b8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	691a      	ldr	r2, [r3, #16]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c4:	b2d2      	uxtb	r2, r2
 80019c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019cc:	1c5a      	adds	r2, r3, #1
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019d6:	3b01      	subs	r3, #1
 80019d8:	b29a      	uxth	r2, r3
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	3b01      	subs	r3, #1
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80019ec:	e04e      	b.n	8001a8c <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019f0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80019f2:	68f8      	ldr	r0, [r7, #12]
 80019f4:	f000 fb90 	bl	8002118 <I2C_WaitOnRXNEFlagUntilTimeout>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e058      	b.n	8001ab4 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	691a      	ldr	r2, [r3, #16]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a0c:	b2d2      	uxtb	r2, r2
 8001a0e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a14:	1c5a      	adds	r2, r3, #1
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	f003 0304 	and.w	r3, r3, #4
 8001a3e:	2b04      	cmp	r3, #4
 8001a40:	d124      	bne.n	8001a8c <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a46:	2b03      	cmp	r3, #3
 8001a48:	d107      	bne.n	8001a5a <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a58:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	691a      	ldr	r2, [r3, #16]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a6c:	1c5a      	adds	r2, r3, #1
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a76:	3b01      	subs	r3, #1
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	3b01      	subs	r3, #1
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f47f ae88 	bne.w	80017a6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2220      	movs	r2, #32
 8001a9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	e000      	b.n	8001ab4 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8001ab2:	2302      	movs	r3, #2
  }
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3728      	adds	r7, #40	@ 0x28
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	00010004 	.word	0x00010004
 8001ac0:	20000004 	.word	0x20000004
 8001ac4:	14f8b589 	.word	0x14f8b589

08001ac8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b088      	sub	sp, #32
 8001acc:	af02      	add	r7, sp, #8
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	4608      	mov	r0, r1
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	817b      	strh	r3, [r7, #10]
 8001ada:	460b      	mov	r3, r1
 8001adc:	813b      	strh	r3, [r7, #8]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001af0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	6a3b      	ldr	r3, [r7, #32]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001afe:	68f8      	ldr	r0, [r7, #12]
 8001b00:	f000 f960 	bl	8001dc4 <I2C_WaitOnFlagUntilTimeout>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d00d      	beq.n	8001b26 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b18:	d103      	bne.n	8001b22 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b20:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e05f      	b.n	8001be6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b26:	897b      	ldrh	r3, [r7, #10]
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001b34:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b38:	6a3a      	ldr	r2, [r7, #32]
 8001b3a:	492d      	ldr	r1, [pc, #180]	@ (8001bf0 <I2C_RequestMemoryWrite+0x128>)
 8001b3c:	68f8      	ldr	r0, [r7, #12]
 8001b3e:	f000 f9bb 	bl	8001eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e04c      	b.n	8001be6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	617b      	str	r3, [r7, #20]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	617b      	str	r3, [r7, #20]
 8001b60:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b64:	6a39      	ldr	r1, [r7, #32]
 8001b66:	68f8      	ldr	r0, [r7, #12]
 8001b68:	f000 fa46 	bl	8001ff8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d00d      	beq.n	8001b8e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	d107      	bne.n	8001b8a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b88:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e02b      	b.n	8001be6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b8e:	88fb      	ldrh	r3, [r7, #6]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d105      	bne.n	8001ba0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001b94:	893b      	ldrh	r3, [r7, #8]
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	611a      	str	r2, [r3, #16]
 8001b9e:	e021      	b.n	8001be4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001ba0:	893b      	ldrh	r3, [r7, #8]
 8001ba2:	0a1b      	lsrs	r3, r3, #8
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bb0:	6a39      	ldr	r1, [r7, #32]
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	f000 fa20 	bl	8001ff8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d00d      	beq.n	8001bda <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	d107      	bne.n	8001bd6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bd4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e005      	b.n	8001be6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001bda:	893b      	ldrh	r3, [r7, #8]
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3718      	adds	r7, #24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	00010002 	.word	0x00010002

08001bf4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b088      	sub	sp, #32
 8001bf8:	af02      	add	r7, sp, #8
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	4608      	mov	r0, r1
 8001bfe:	4611      	mov	r1, r2
 8001c00:	461a      	mov	r2, r3
 8001c02:	4603      	mov	r3, r0
 8001c04:	817b      	strh	r3, [r7, #10]
 8001c06:	460b      	mov	r3, r1
 8001c08:	813b      	strh	r3, [r7, #8]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001c1c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c2c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c30:	9300      	str	r3, [sp, #0]
 8001c32:	6a3b      	ldr	r3, [r7, #32]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	f000 f8c2 	bl	8001dc4 <I2C_WaitOnFlagUntilTimeout>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d00d      	beq.n	8001c62 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c54:	d103      	bne.n	8001c5e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c5c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e0aa      	b.n	8001db8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c62:	897b      	ldrh	r3, [r7, #10]
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	461a      	mov	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001c70:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c74:	6a3a      	ldr	r2, [r7, #32]
 8001c76:	4952      	ldr	r1, [pc, #328]	@ (8001dc0 <I2C_RequestMemoryRead+0x1cc>)
 8001c78:	68f8      	ldr	r0, [r7, #12]
 8001c7a:	f000 f91d 	bl	8001eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e097      	b.n	8001db8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	617b      	str	r3, [r7, #20]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	617b      	str	r3, [r7, #20]
 8001c9c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ca0:	6a39      	ldr	r1, [r7, #32]
 8001ca2:	68f8      	ldr	r0, [r7, #12]
 8001ca4:	f000 f9a8 	bl	8001ff8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00d      	beq.n	8001cca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	d107      	bne.n	8001cc6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cc4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e076      	b.n	8001db8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001cca:	88fb      	ldrh	r3, [r7, #6]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d105      	bne.n	8001cdc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001cd0:	893b      	ldrh	r3, [r7, #8]
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	611a      	str	r2, [r3, #16]
 8001cda:	e021      	b.n	8001d20 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001cdc:	893b      	ldrh	r3, [r7, #8]
 8001cde:	0a1b      	lsrs	r3, r3, #8
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cec:	6a39      	ldr	r1, [r7, #32]
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	f000 f982 	bl	8001ff8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00d      	beq.n	8001d16 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	d107      	bne.n	8001d12 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d10:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e050      	b.n	8001db8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d16:	893b      	ldrh	r3, [r7, #8]
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d22:	6a39      	ldr	r1, [r7, #32]
 8001d24:	68f8      	ldr	r0, [r7, #12]
 8001d26:	f000 f967 	bl	8001ff8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d00d      	beq.n	8001d4c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d34:	2b04      	cmp	r3, #4
 8001d36:	d107      	bne.n	8001d48 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d46:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e035      	b.n	8001db8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d5a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	6a3b      	ldr	r3, [r7, #32]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001d68:	68f8      	ldr	r0, [r7, #12]
 8001d6a:	f000 f82b 	bl	8001dc4 <I2C_WaitOnFlagUntilTimeout>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d00d      	beq.n	8001d90 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d82:	d103      	bne.n	8001d8c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d8a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e013      	b.n	8001db8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001d90:	897b      	ldrh	r3, [r7, #10]
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da2:	6a3a      	ldr	r2, [r7, #32]
 8001da4:	4906      	ldr	r1, [pc, #24]	@ (8001dc0 <I2C_RequestMemoryRead+0x1cc>)
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	f000 f886 	bl	8001eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e000      	b.n	8001db8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3718      	adds	r7, #24
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	00010002 	.word	0x00010002

08001dc4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	603b      	str	r3, [r7, #0]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dd4:	e048      	b.n	8001e68 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ddc:	d044      	beq.n	8001e68 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dde:	f7fe fdfd 	bl	80009dc <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d302      	bcc.n	8001df4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d139      	bne.n	8001e68 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	0c1b      	lsrs	r3, r3, #16
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d10d      	bne.n	8001e1a <I2C_WaitOnFlagUntilTimeout+0x56>
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	695b      	ldr	r3, [r3, #20]
 8001e04:	43da      	mvns	r2, r3
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	bf0c      	ite	eq
 8001e10:	2301      	moveq	r3, #1
 8001e12:	2300      	movne	r3, #0
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	461a      	mov	r2, r3
 8001e18:	e00c      	b.n	8001e34 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	43da      	mvns	r2, r3
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	4013      	ands	r3, r2
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	bf0c      	ite	eq
 8001e2c:	2301      	moveq	r3, #1
 8001e2e:	2300      	movne	r3, #0
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	461a      	mov	r2, r3
 8001e34:	79fb      	ldrb	r3, [r7, #7]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d116      	bne.n	8001e68 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2220      	movs	r2, #32
 8001e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e54:	f043 0220 	orr.w	r2, r3, #32
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e023      	b.n	8001eb0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	0c1b      	lsrs	r3, r3, #16
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d10d      	bne.n	8001e8e <I2C_WaitOnFlagUntilTimeout+0xca>
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	695b      	ldr	r3, [r3, #20]
 8001e78:	43da      	mvns	r2, r3
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	bf0c      	ite	eq
 8001e84:	2301      	moveq	r3, #1
 8001e86:	2300      	movne	r3, #0
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	e00c      	b.n	8001ea8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	43da      	mvns	r2, r3
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	bf0c      	ite	eq
 8001ea0:	2301      	moveq	r3, #1
 8001ea2:	2300      	movne	r3, #0
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d093      	beq.n	8001dd6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3710      	adds	r7, #16
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
 8001ec4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ec6:	e071      	b.n	8001fac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ed2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ed6:	d123      	bne.n	8001f20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ee6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001ef0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2220      	movs	r2, #32
 8001efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0c:	f043 0204 	orr.w	r2, r3, #4
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e067      	b.n	8001ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f26:	d041      	beq.n	8001fac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f28:	f7fe fd58 	bl	80009dc <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d302      	bcc.n	8001f3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d136      	bne.n	8001fac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	0c1b      	lsrs	r3, r3, #16
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d10c      	bne.n	8001f62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	43da      	mvns	r2, r3
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	4013      	ands	r3, r2
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	bf14      	ite	ne
 8001f5a:	2301      	movne	r3, #1
 8001f5c:	2300      	moveq	r3, #0
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	e00b      	b.n	8001f7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	43da      	mvns	r2, r3
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	bf14      	ite	ne
 8001f74:	2301      	movne	r3, #1
 8001f76:	2300      	moveq	r3, #0
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d016      	beq.n	8001fac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2220      	movs	r2, #32
 8001f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f98:	f043 0220 	orr.w	r2, r3, #32
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e021      	b.n	8001ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	0c1b      	lsrs	r3, r3, #16
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d10c      	bne.n	8001fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	695b      	ldr	r3, [r3, #20]
 8001fbc:	43da      	mvns	r2, r3
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	bf14      	ite	ne
 8001fc8:	2301      	movne	r3, #1
 8001fca:	2300      	moveq	r3, #0
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	e00b      	b.n	8001fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	43da      	mvns	r2, r3
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	bf14      	ite	ne
 8001fe2:	2301      	movne	r3, #1
 8001fe4:	2300      	moveq	r3, #0
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f47f af6d 	bne.w	8001ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002004:	e034      	b.n	8002070 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002006:	68f8      	ldr	r0, [r7, #12]
 8002008:	f000 f8e3 	bl	80021d2 <I2C_IsAcknowledgeFailed>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e034      	b.n	8002080 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800201c:	d028      	beq.n	8002070 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800201e:	f7fe fcdd 	bl	80009dc <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	68ba      	ldr	r2, [r7, #8]
 800202a:	429a      	cmp	r2, r3
 800202c:	d302      	bcc.n	8002034 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d11d      	bne.n	8002070 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800203e:	2b80      	cmp	r3, #128	@ 0x80
 8002040:	d016      	beq.n	8002070 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2220      	movs	r2, #32
 800204c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205c:	f043 0220 	orr.w	r2, r3, #32
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e007      	b.n	8002080 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800207a:	2b80      	cmp	r3, #128	@ 0x80
 800207c:	d1c3      	bne.n	8002006 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002094:	e034      	b.n	8002100 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f000 f89b 	bl	80021d2 <I2C_IsAcknowledgeFailed>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e034      	b.n	8002110 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ac:	d028      	beq.n	8002100 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020ae:	f7fe fc95 	bl	80009dc <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	68ba      	ldr	r2, [r7, #8]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d302      	bcc.n	80020c4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d11d      	bne.n	8002100 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	f003 0304 	and.w	r3, r3, #4
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	d016      	beq.n	8002100 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2220      	movs	r2, #32
 80020dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ec:	f043 0220 	orr.w	r2, r3, #32
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e007      	b.n	8002110 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	f003 0304 	and.w	r3, r3, #4
 800210a:	2b04      	cmp	r3, #4
 800210c:	d1c3      	bne.n	8002096 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002124:	e049      	b.n	80021ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	695b      	ldr	r3, [r3, #20]
 800212c:	f003 0310 	and.w	r3, r3, #16
 8002130:	2b10      	cmp	r3, #16
 8002132:	d119      	bne.n	8002168 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f06f 0210 	mvn.w	r2, #16
 800213c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2220      	movs	r2, #32
 8002148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e030      	b.n	80021ca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002168:	f7fe fc38 	bl	80009dc <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	429a      	cmp	r2, r3
 8002176:	d302      	bcc.n	800217e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d11d      	bne.n	80021ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	695b      	ldr	r3, [r3, #20]
 8002184:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002188:	2b40      	cmp	r3, #64	@ 0x40
 800218a:	d016      	beq.n	80021ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2220      	movs	r2, #32
 8002196:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a6:	f043 0220 	orr.w	r2, r3, #32
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e007      	b.n	80021ca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	695b      	ldr	r3, [r3, #20]
 80021c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021c4:	2b40      	cmp	r3, #64	@ 0x40
 80021c6:	d1ae      	bne.n	8002126 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b083      	sub	sp, #12
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021e8:	d11b      	bne.n	8002222 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80021f2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2220      	movs	r2, #32
 80021fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220e:	f043 0204 	orr.w	r2, r3, #4
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e000      	b.n	8002224 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	bc80      	pop	{r7}
 800222c:	4770      	bx	lr

0800222e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b084      	sub	sp, #16
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d101      	bne.n	8002240 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e0e8      	b.n	8002412 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002246:	b2db      	uxtb	r3, r3
 8002248:	2b00      	cmp	r3, #0
 800224a:	d106      	bne.n	800225a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f006 faf1 	bl	800883c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2203      	movs	r2, #3
 800225e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4618      	mov	r0, r3
 800226e:	f002 fa14 	bl	800469a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6818      	ldr	r0, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	3304      	adds	r3, #4
 800227a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800227c:	f002 f9ea 	bl	8004654 <USB_CoreInit>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d005      	beq.n	8002292 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2202      	movs	r2, #2
 800228a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e0bf      	b.n	8002412 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2100      	movs	r1, #0
 8002298:	4618      	mov	r0, r3
 800229a:	f002 fa18 	bl	80046ce <USB_SetCurrentMode>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d005      	beq.n	80022b0 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2202      	movs	r2, #2
 80022a8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e0b0      	b.n	8002412 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022b0:	2300      	movs	r3, #0
 80022b2:	73fb      	strb	r3, [r7, #15]
 80022b4:	e03e      	b.n	8002334 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022b6:	7bfa      	ldrb	r2, [r7, #15]
 80022b8:	6879      	ldr	r1, [r7, #4]
 80022ba:	4613      	mov	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4413      	add	r3, r2
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	440b      	add	r3, r1
 80022c4:	3311      	adds	r3, #17
 80022c6:	2201      	movs	r2, #1
 80022c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022ca:	7bfa      	ldrb	r2, [r7, #15]
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	440b      	add	r3, r1
 80022d8:	3310      	adds	r3, #16
 80022da:	7bfa      	ldrb	r2, [r7, #15]
 80022dc:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022de:	7bfa      	ldrb	r2, [r7, #15]
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	4613      	mov	r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	4413      	add	r3, r2
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	440b      	add	r3, r1
 80022ec:	3313      	adds	r3, #19
 80022ee:	2200      	movs	r2, #0
 80022f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022f2:	7bfa      	ldrb	r2, [r7, #15]
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	4613      	mov	r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4413      	add	r3, r2
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	440b      	add	r3, r1
 8002300:	3320      	adds	r3, #32
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002306:	7bfa      	ldrb	r2, [r7, #15]
 8002308:	6879      	ldr	r1, [r7, #4]
 800230a:	4613      	mov	r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4413      	add	r3, r2
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	440b      	add	r3, r1
 8002314:	3324      	adds	r3, #36	@ 0x24
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800231a:	7bfb      	ldrb	r3, [r7, #15]
 800231c:	6879      	ldr	r1, [r7, #4]
 800231e:	1c5a      	adds	r2, r3, #1
 8002320:	4613      	mov	r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4413      	add	r3, r2
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	440b      	add	r3, r1
 800232a:	2200      	movs	r2, #0
 800232c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800232e:	7bfb      	ldrb	r3, [r7, #15]
 8002330:	3301      	adds	r3, #1
 8002332:	73fb      	strb	r3, [r7, #15]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	791b      	ldrb	r3, [r3, #4]
 8002338:	7bfa      	ldrb	r2, [r7, #15]
 800233a:	429a      	cmp	r2, r3
 800233c:	d3bb      	bcc.n	80022b6 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800233e:	2300      	movs	r3, #0
 8002340:	73fb      	strb	r3, [r7, #15]
 8002342:	e044      	b.n	80023ce <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002344:	7bfa      	ldrb	r2, [r7, #15]
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	4613      	mov	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	440b      	add	r3, r1
 8002352:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002356:	2200      	movs	r2, #0
 8002358:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800235a:	7bfa      	ldrb	r2, [r7, #15]
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	4613      	mov	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	440b      	add	r3, r1
 8002368:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800236c:	7bfa      	ldrb	r2, [r7, #15]
 800236e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002370:	7bfa      	ldrb	r2, [r7, #15]
 8002372:	6879      	ldr	r1, [r7, #4]
 8002374:	4613      	mov	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4413      	add	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	440b      	add	r3, r1
 800237e:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002382:	2200      	movs	r2, #0
 8002384:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002386:	7bfa      	ldrb	r2, [r7, #15]
 8002388:	6879      	ldr	r1, [r7, #4]
 800238a:	4613      	mov	r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	4413      	add	r3, r2
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	440b      	add	r3, r1
 8002394:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800239c:	7bfa      	ldrb	r2, [r7, #15]
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	4613      	mov	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	440b      	add	r3, r1
 80023aa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023b2:	7bfa      	ldrb	r2, [r7, #15]
 80023b4:	6879      	ldr	r1, [r7, #4]
 80023b6:	4613      	mov	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4413      	add	r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	440b      	add	r3, r1
 80023c0:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023c8:	7bfb      	ldrb	r3, [r7, #15]
 80023ca:	3301      	adds	r3, #1
 80023cc:	73fb      	strb	r3, [r7, #15]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	791b      	ldrb	r3, [r3, #4]
 80023d2:	7bfa      	ldrb	r2, [r7, #15]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d3b5      	bcc.n	8002344 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6818      	ldr	r0, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3304      	adds	r3, #4
 80023e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023e2:	f002 f980 	bl	80046e6 <USB_DevInit>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d005      	beq.n	80023f8 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2202      	movs	r2, #2
 80023f0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e00c      	b.n	8002412 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2201      	movs	r2, #1
 8002402:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f004 fbff 	bl	8006c0e <USB_DevDisconnect>

  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b082      	sub	sp, #8
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002428:	2b01      	cmp	r3, #1
 800242a:	d101      	bne.n	8002430 <HAL_PCD_Start+0x16>
 800242c:	2302      	movs	r3, #2
 800242e:	e016      	b.n	800245e <HAL_PCD_Start+0x44>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4618      	mov	r0, r3
 800243e:	f002 f916 	bl	800466e <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002442:	2101      	movs	r1, #1
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f006 fc6c 	bl	8008d22 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f004 fbd3 	bl	8006bfa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b088      	sub	sp, #32
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f004 fbd5 	bl	8006c22 <USB_ReadInterrupts>
 8002478:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d003      	beq.n	800248c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 fb1a 	bl	8002abe <PCD_EP_ISR_Handler>

    return;
 800248a:	e119      	b.n	80026c0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002492:	2b00      	cmp	r3, #0
 8002494:	d013      	beq.n	80024be <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800249e:	b29a      	uxth	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024a8:	b292      	uxth	r2, r2
 80024aa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f006 fa3f 	bl	8008932 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80024b4:	2100      	movs	r1, #0
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 f905 	bl	80026c6 <HAL_PCD_SetAddress>

    return;
 80024bc:	e100      	b.n	80026c0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00c      	beq.n	80024e2 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80024da:	b292      	uxth	r2, r2
 80024dc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80024e0:	e0ee      	b.n	80026c0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00c      	beq.n	8002506 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80024fe:	b292      	uxth	r2, r2
 8002500:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002504:	e0dc      	b.n	80026c0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d027      	beq.n	8002560 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002518:	b29a      	uxth	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 0204 	bic.w	r2, r2, #4
 8002522:	b292      	uxth	r2, r2
 8002524:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002530:	b29a      	uxth	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 0208 	bic.w	r2, r2, #8
 800253a:	b292      	uxth	r2, r2
 800253c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f006 fa2f 	bl	80089a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800254e:	b29a      	uxth	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002558:	b292      	uxth	r2, r2
 800255a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800255e:	e0af      	b.n	80026c0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 8083 	beq.w	8002672 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800256c:	2300      	movs	r3, #0
 800256e:	77fb      	strb	r3, [r7, #31]
 8002570:	e010      	b.n	8002594 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	461a      	mov	r2, r3
 8002578:	7ffb      	ldrb	r3, [r7, #31]
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	441a      	add	r2, r3
 800257e:	7ffb      	ldrb	r3, [r7, #31]
 8002580:	8812      	ldrh	r2, [r2, #0]
 8002582:	b292      	uxth	r2, r2
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	3320      	adds	r3, #32
 8002588:	443b      	add	r3, r7
 800258a:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800258e:	7ffb      	ldrb	r3, [r7, #31]
 8002590:	3301      	adds	r3, #1
 8002592:	77fb      	strb	r3, [r7, #31]
 8002594:	7ffb      	ldrb	r3, [r7, #31]
 8002596:	2b07      	cmp	r3, #7
 8002598:	d9eb      	bls.n	8002572 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f042 0201 	orr.w	r2, r2, #1
 80025ac:	b292      	uxth	r2, r2
 80025ae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 0201 	bic.w	r2, r2, #1
 80025c4:	b292      	uxth	r2, r2
 80025c6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80025ca:	bf00      	nop
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d0f6      	beq.n	80025cc <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025f0:	b292      	uxth	r2, r2
 80025f2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80025f6:	2300      	movs	r3, #0
 80025f8:	77fb      	strb	r3, [r7, #31]
 80025fa:	e00f      	b.n	800261c <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80025fc:	7ffb      	ldrb	r3, [r7, #31]
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	6812      	ldr	r2, [r2, #0]
 8002602:	4611      	mov	r1, r2
 8002604:	7ffa      	ldrb	r2, [r7, #31]
 8002606:	0092      	lsls	r2, r2, #2
 8002608:	440a      	add	r2, r1
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	3320      	adds	r3, #32
 800260e:	443b      	add	r3, r7
 8002610:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002614:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002616:	7ffb      	ldrb	r3, [r7, #31]
 8002618:	3301      	adds	r3, #1
 800261a:	77fb      	strb	r3, [r7, #31]
 800261c:	7ffb      	ldrb	r3, [r7, #31]
 800261e:	2b07      	cmp	r3, #7
 8002620:	d9ec      	bls.n	80025fc <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800262a:	b29a      	uxth	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f042 0208 	orr.w	r2, r2, #8
 8002634:	b292      	uxth	r2, r2
 8002636:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002642:	b29a      	uxth	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800264c:	b292      	uxth	r2, r2
 800264e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800265a:	b29a      	uxth	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f042 0204 	orr.w	r2, r2, #4
 8002664:	b292      	uxth	r2, r2
 8002666:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f006 f980 	bl	8008970 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002670:	e026      	b.n	80026c0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00f      	beq.n	800269c <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002684:	b29a      	uxth	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800268e:	b292      	uxth	r2, r2
 8002690:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f006 f93e 	bl	8008916 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800269a:	e011      	b.n	80026c0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00c      	beq.n	80026c0 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026b8:	b292      	uxth	r2, r2
 80026ba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80026be:	bf00      	nop
  }
}
 80026c0:	3720      	adds	r7, #32
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b082      	sub	sp, #8
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
 80026ce:	460b      	mov	r3, r1
 80026d0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d101      	bne.n	80026e0 <HAL_PCD_SetAddress+0x1a>
 80026dc:	2302      	movs	r3, #2
 80026de:	e012      	b.n	8002706 <HAL_PCD_SetAddress+0x40>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	78fa      	ldrb	r2, [r7, #3]
 80026ec:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	78fa      	ldrb	r2, [r7, #3]
 80026f4:	4611      	mov	r1, r2
 80026f6:	4618      	mov	r0, r3
 80026f8:	f004 fa6c 	bl	8006bd4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b084      	sub	sp, #16
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
 8002716:	4608      	mov	r0, r1
 8002718:	4611      	mov	r1, r2
 800271a:	461a      	mov	r2, r3
 800271c:	4603      	mov	r3, r0
 800271e:	70fb      	strb	r3, [r7, #3]
 8002720:	460b      	mov	r3, r1
 8002722:	803b      	strh	r3, [r7, #0]
 8002724:	4613      	mov	r3, r2
 8002726:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002728:	2300      	movs	r3, #0
 800272a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800272c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002730:	2b00      	cmp	r3, #0
 8002732:	da0e      	bge.n	8002752 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002734:	78fb      	ldrb	r3, [r7, #3]
 8002736:	f003 0207 	and.w	r2, r3, #7
 800273a:	4613      	mov	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	4413      	add	r3, r2
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	3310      	adds	r3, #16
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	4413      	add	r3, r2
 8002748:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2201      	movs	r2, #1
 800274e:	705a      	strb	r2, [r3, #1]
 8002750:	e00e      	b.n	8002770 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002752:	78fb      	ldrb	r3, [r7, #3]
 8002754:	f003 0207 	and.w	r2, r3, #7
 8002758:	4613      	mov	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	4413      	add	r3, r2
 8002768:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002770:	78fb      	ldrb	r3, [r7, #3]
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	b2da      	uxtb	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800277c:	883a      	ldrh	r2, [r7, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	78ba      	ldrb	r2, [r7, #2]
 8002786:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002788:	78bb      	ldrb	r3, [r7, #2]
 800278a:	2b02      	cmp	r3, #2
 800278c:	d102      	bne.n	8002794 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800279a:	2b01      	cmp	r3, #1
 800279c:	d101      	bne.n	80027a2 <HAL_PCD_EP_Open+0x94>
 800279e:	2302      	movs	r3, #2
 80027a0:	e00e      	b.n	80027c0 <HAL_PCD_EP_Open+0xb2>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68f9      	ldr	r1, [r7, #12]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f001 ffb5 	bl	8004720 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80027be:	7afb      	ldrb	r3, [r7, #11]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	460b      	mov	r3, r1
 80027d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	da0e      	bge.n	80027fa <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027dc:	78fb      	ldrb	r3, [r7, #3]
 80027de:	f003 0207 	and.w	r2, r3, #7
 80027e2:	4613      	mov	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4413      	add	r3, r2
 80027e8:	00db      	lsls	r3, r3, #3
 80027ea:	3310      	adds	r3, #16
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	4413      	add	r3, r2
 80027f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2201      	movs	r2, #1
 80027f6:	705a      	strb	r2, [r3, #1]
 80027f8:	e00e      	b.n	8002818 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027fa:	78fb      	ldrb	r3, [r7, #3]
 80027fc:	f003 0207 	and.w	r2, r3, #7
 8002800:	4613      	mov	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	4413      	add	r3, r2
 8002810:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002818:	78fb      	ldrb	r3, [r7, #3]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	b2da      	uxtb	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800282a:	2b01      	cmp	r3, #1
 800282c:	d101      	bne.n	8002832 <HAL_PCD_EP_Close+0x6a>
 800282e:	2302      	movs	r3, #2
 8002830:	e00e      	b.n	8002850 <HAL_PCD_EP_Close+0x88>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68f9      	ldr	r1, [r7, #12]
 8002840:	4618      	mov	r0, r3
 8002842:	f002 fb2d 	bl	8004ea0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	607a      	str	r2, [r7, #4]
 8002862:	603b      	str	r3, [r7, #0]
 8002864:	460b      	mov	r3, r1
 8002866:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002868:	7afb      	ldrb	r3, [r7, #11]
 800286a:	f003 0207 	and.w	r2, r3, #7
 800286e:	4613      	mov	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	4413      	add	r3, r2
 800287e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	2200      	movs	r2, #0
 8002890:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	2200      	movs	r2, #0
 8002896:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002898:	7afb      	ldrb	r3, [r7, #11]
 800289a:	f003 0307 	and.w	r3, r3, #7
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6979      	ldr	r1, [r7, #20]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f002 fce4 	bl	8005278 <USB_EPStartXfer>

  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3718      	adds	r7, #24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
 80028c2:	460b      	mov	r3, r1
 80028c4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80028c6:	78fb      	ldrb	r3, [r7, #3]
 80028c8:	f003 0207 	and.w	r2, r3, #7
 80028cc:	6879      	ldr	r1, [r7, #4]
 80028ce:	4613      	mov	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4413      	add	r3, r2
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	440b      	add	r3, r1
 80028d8:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80028dc:	681b      	ldr	r3, [r3, #0]
}
 80028de:	4618      	mov	r0, r3
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bc80      	pop	{r7}
 80028e6:	4770      	bx	lr

080028e8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	607a      	str	r2, [r7, #4]
 80028f2:	603b      	str	r3, [r7, #0]
 80028f4:	460b      	mov	r3, r1
 80028f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028f8:	7afb      	ldrb	r3, [r7, #11]
 80028fa:	f003 0207 	and.w	r2, r3, #7
 80028fe:	4613      	mov	r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	4413      	add	r3, r2
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	3310      	adds	r3, #16
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	4413      	add	r3, r2
 800290c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	2200      	movs	r2, #0
 800292c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	2201      	movs	r2, #1
 8002932:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002934:	7afb      	ldrb	r3, [r7, #11]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	b2da      	uxtb	r2, r3
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6979      	ldr	r1, [r7, #20]
 8002946:	4618      	mov	r0, r3
 8002948:	f002 fc96 	bl	8005278 <USB_EPStartXfer>

  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3718      	adds	r7, #24
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b084      	sub	sp, #16
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
 800295e:	460b      	mov	r3, r1
 8002960:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002962:	78fb      	ldrb	r3, [r7, #3]
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	7912      	ldrb	r2, [r2, #4]
 800296c:	4293      	cmp	r3, r2
 800296e:	d901      	bls.n	8002974 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e04c      	b.n	8002a0e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002974:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002978:	2b00      	cmp	r3, #0
 800297a:	da0e      	bge.n	800299a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800297c:	78fb      	ldrb	r3, [r7, #3]
 800297e:	f003 0207 	and.w	r2, r3, #7
 8002982:	4613      	mov	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4413      	add	r3, r2
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	3310      	adds	r3, #16
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	4413      	add	r3, r2
 8002990:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2201      	movs	r2, #1
 8002996:	705a      	strb	r2, [r3, #1]
 8002998:	e00c      	b.n	80029b4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800299a:	78fa      	ldrb	r2, [r7, #3]
 800299c:	4613      	mov	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	4413      	add	r3, r2
 80029ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2201      	movs	r2, #1
 80029b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029ba:	78fb      	ldrb	r3, [r7, #3]
 80029bc:	f003 0307 	and.w	r3, r3, #7
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d101      	bne.n	80029d4 <HAL_PCD_EP_SetStall+0x7e>
 80029d0:	2302      	movs	r3, #2
 80029d2:	e01c      	b.n	8002a0e <HAL_PCD_EP_SetStall+0xb8>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68f9      	ldr	r1, [r7, #12]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f003 fff9 	bl	80069da <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029e8:	78fb      	ldrb	r3, [r7, #3]
 80029ea:	f003 0307 	and.w	r3, r3, #7
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d108      	bne.n	8002a04 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80029fc:	4619      	mov	r1, r3
 80029fe:	4610      	mov	r0, r2
 8002a00:	f004 f91e 	bl	8006c40 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b084      	sub	sp, #16
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
 8002a1e:	460b      	mov	r3, r1
 8002a20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002a22:	78fb      	ldrb	r3, [r7, #3]
 8002a24:	f003 030f 	and.w	r3, r3, #15
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	7912      	ldrb	r2, [r2, #4]
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d901      	bls.n	8002a34 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e040      	b.n	8002ab6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	da0e      	bge.n	8002a5a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a3c:	78fb      	ldrb	r3, [r7, #3]
 8002a3e:	f003 0207 	and.w	r2, r3, #7
 8002a42:	4613      	mov	r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	4413      	add	r3, r2
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	3310      	adds	r3, #16
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	4413      	add	r3, r2
 8002a50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2201      	movs	r2, #1
 8002a56:	705a      	strb	r2, [r3, #1]
 8002a58:	e00e      	b.n	8002a78 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a5a:	78fb      	ldrb	r3, [r7, #3]
 8002a5c:	f003 0207 	and.w	r2, r3, #7
 8002a60:	4613      	mov	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	4413      	add	r3, r2
 8002a70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a7e:	78fb      	ldrb	r3, [r7, #3]
 8002a80:	f003 0307 	and.w	r3, r3, #7
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d101      	bne.n	8002a98 <HAL_PCD_EP_ClrStall+0x82>
 8002a94:	2302      	movs	r3, #2
 8002a96:	e00e      	b.n	8002ab6 <HAL_PCD_EP_ClrStall+0xa0>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68f9      	ldr	r1, [r7, #12]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f003 ffe7 	bl	8006a7a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b096      	sub	sp, #88	@ 0x58
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002ac6:	e3bb      	b.n	8003240 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ad0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002ad4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8002ae2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f040 8175 	bne.w	8002dd6 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002aec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002af0:	f003 0310 	and.w	r3, r3, #16
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d14e      	bne.n	8002b96 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	881b      	ldrh	r3, [r3, #0]
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002b04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b08:	81fb      	strh	r3, [r7, #14]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	89fb      	ldrh	r3, [r7, #14]
 8002b10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	3310      	adds	r3, #16
 8002b20:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	4413      	add	r3, r2
 8002b36:	3302      	adds	r3, #2
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	6812      	ldr	r2, [r2, #0]
 8002b3e:	4413      	add	r3, r2
 8002b40:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002b44:	881b      	ldrh	r3, [r3, #0]
 8002b46:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b4c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002b4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b50:	695a      	ldr	r2, [r3, #20]
 8002b52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	441a      	add	r2, r3
 8002b58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b5a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f005 febf 	bl	80088e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	7b5b      	ldrb	r3, [r3, #13]
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f000 8368 	beq.w	8003240 <PCD_EP_ISR_Handler+0x782>
 8002b70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f040 8363 	bne.w	8003240 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	7b5b      	ldrb	r3, [r3, #13]
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	735a      	strb	r2, [r3, #13]
 8002b94:	e354      	b.n	8003240 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002b9c:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	881b      	ldrh	r3, [r3, #0]
 8002ba4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002ba8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002bac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d034      	beq.n	8002c1e <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	4413      	add	r3, r2
 8002bc8:	3306      	adds	r3, #6
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6812      	ldr	r2, [r2, #0]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002bd6:	881b      	ldrh	r3, [r3, #0]
 8002bd8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002bdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bde:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6818      	ldr	r0, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8002bea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bec:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002bee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bf0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	f004 f875 	bl	8006ce2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	881b      	ldrh	r3, [r3, #0]
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002c04:	4013      	ands	r3, r2
 8002c06:	823b      	strh	r3, [r7, #16]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	8a3a      	ldrh	r2, [r7, #16]
 8002c0e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002c12:	b292      	uxth	r2, r2
 8002c14:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f005 fe36 	bl	8008888 <HAL_PCD_SetupStageCallback>
 8002c1c:	e310      	b.n	8003240 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002c1e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f280 830c 	bge.w	8003240 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	881b      	ldrh	r3, [r3, #0]
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002c34:	4013      	ands	r3, r2
 8002c36:	83fb      	strh	r3, [r7, #30]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	8bfa      	ldrh	r2, [r7, #30]
 8002c3e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002c42:	b292      	uxth	r2, r2
 8002c44:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	461a      	mov	r2, r3
 8002c52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	4413      	add	r3, r2
 8002c5a:	3306      	adds	r3, #6
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	6812      	ldr	r2, [r2, #0]
 8002c62:	4413      	add	r3, r2
 8002c64:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002c68:	881b      	ldrh	r3, [r3, #0]
 8002c6a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c70:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002c72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d019      	beq.n	8002cae <PCD_EP_ISR_Handler+0x1f0>
 8002c7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d015      	beq.n	8002cae <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6818      	ldr	r0, [r3, #0]
 8002c86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c88:	6959      	ldr	r1, [r3, #20]
 8002c8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c8c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002c8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c90:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	f004 f825 	bl	8006ce2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002c98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c9a:	695a      	ldr	r2, [r3, #20]
 8002c9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c9e:	69db      	ldr	r3, [r3, #28]
 8002ca0:	441a      	add	r2, r3
 8002ca2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ca4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f005 fdff 	bl	80088ac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	881b      	ldrh	r3, [r3, #0]
 8002cb4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002cb8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002cbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f040 82bd 	bne.w	8003240 <PCD_EP_ISR_Handler+0x782>
 8002cc6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002cca:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002cce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002cd2:	f000 82b5 	beq.w	8003240 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	61bb      	str	r3, [r7, #24]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	4413      	add	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002cf4:	617b      	str	r3, [r7, #20]
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	881b      	ldrh	r3, [r3, #0]
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	801a      	strh	r2, [r3, #0]
 8002d06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	2b3e      	cmp	r3, #62	@ 0x3e
 8002d0c:	d91d      	bls.n	8002d4a <PCD_EP_ISR_Handler+0x28c>
 8002d0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	095b      	lsrs	r3, r3, #5
 8002d14:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	f003 031f 	and.w	r3, r3, #31
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d102      	bne.n	8002d28 <PCD_EP_ISR_Handler+0x26a>
 8002d22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d24:	3b01      	subs	r3, #1
 8002d26:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	881b      	ldrh	r3, [r3, #0]
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	029b      	lsls	r3, r3, #10
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	4313      	orrs	r3, r2
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	801a      	strh	r2, [r3, #0]
 8002d48:	e026      	b.n	8002d98 <PCD_EP_ISR_Handler+0x2da>
 8002d4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10a      	bne.n	8002d68 <PCD_EP_ISR_Handler+0x2aa>
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	881b      	ldrh	r3, [r3, #0]
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	801a      	strh	r2, [r3, #0]
 8002d66:	e017      	b.n	8002d98 <PCD_EP_ISR_Handler+0x2da>
 8002d68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	085b      	lsrs	r3, r3, #1
 8002d6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d002      	beq.n	8002d82 <PCD_EP_ISR_Handler+0x2c4>
 8002d7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d7e:	3301      	adds	r3, #1
 8002d80:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	881b      	ldrh	r3, [r3, #0]
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	029b      	lsls	r3, r3, #10
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	4313      	orrs	r3, r2
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	881b      	ldrh	r3, [r3, #0]
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002da4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002da8:	827b      	strh	r3, [r7, #18]
 8002daa:	8a7b      	ldrh	r3, [r7, #18]
 8002dac:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002db0:	827b      	strh	r3, [r7, #18]
 8002db2:	8a7b      	ldrh	r3, [r7, #18]
 8002db4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002db8:	827b      	strh	r3, [r7, #18]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	8a7b      	ldrh	r3, [r7, #18]
 8002dc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002dc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002dc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002dcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	8013      	strh	r3, [r2, #0]
 8002dd4:	e234      	b.n	8003240 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	461a      	mov	r2, r3
 8002ddc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	4413      	add	r3, r2
 8002de4:	881b      	ldrh	r3, [r3, #0]
 8002de6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002dea:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f280 80fc 	bge.w	8002fec <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	4413      	add	r3, r2
 8002e02:	881b      	ldrh	r3, [r3, #0]
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	461a      	mov	r2, r3
 8002e16:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4413      	add	r3, r2
 8002e1e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8002e22:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002e26:	b292      	uxth	r2, r2
 8002e28:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002e2a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002e2e:	4613      	mov	r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	4413      	add	r3, r2
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002e40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e42:	7b1b      	ldrb	r3, [r3, #12]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d125      	bne.n	8002e94 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	461a      	mov	r2, r3
 8002e54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	4413      	add	r3, r2
 8002e5c:	3306      	adds	r3, #6
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	6812      	ldr	r2, [r2, #0]
 8002e64:	4413      	add	r3, r2
 8002e66:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002e6a:	881b      	ldrh	r3, [r3, #0]
 8002e6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e70:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8002e74:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 8092 	beq.w	8002fa2 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6818      	ldr	r0, [r3, #0]
 8002e82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e84:	6959      	ldr	r1, [r3, #20]
 8002e86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e88:	88da      	ldrh	r2, [r3, #6]
 8002e8a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002e8e:	f003 ff28 	bl	8006ce2 <USB_ReadPMA>
 8002e92:	e086      	b.n	8002fa2 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002e94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e96:	78db      	ldrb	r3, [r3, #3]
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d10a      	bne.n	8002eb2 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002e9c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 f9d9 	bl	800325c <HAL_PCD_EP_DB_Receive>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8002eb0:	e077      	b.n	8002fa2 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	4413      	add	r3, r2
 8002ec0:	881b      	ldrh	r3, [r3, #0]
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002ec8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ecc:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	441a      	add	r2, r3
 8002ede:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002ee2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002ee6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002eea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002eee:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	461a      	mov	r2, r3
 8002efc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	4413      	add	r3, r2
 8002f04:	881b      	ldrh	r3, [r3, #0]
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d024      	beq.n	8002f5a <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	4413      	add	r3, r2
 8002f24:	3302      	adds	r3, #2
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	6812      	ldr	r2, [r2, #0]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002f32:	881b      	ldrh	r3, [r3, #0]
 8002f34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f38:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002f3c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d02e      	beq.n	8002fa2 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6818      	ldr	r0, [r3, #0]
 8002f48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f4a:	6959      	ldr	r1, [r3, #20]
 8002f4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f4e:	891a      	ldrh	r2, [r3, #8]
 8002f50:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002f54:	f003 fec5 	bl	8006ce2 <USB_ReadPMA>
 8002f58:	e023      	b.n	8002fa2 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	461a      	mov	r2, r3
 8002f66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	4413      	add	r3, r2
 8002f6e:	3306      	adds	r3, #6
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	6812      	ldr	r2, [r2, #0]
 8002f76:	4413      	add	r3, r2
 8002f78:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002f7c:	881b      	ldrh	r3, [r3, #0]
 8002f7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f82:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002f86:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d009      	beq.n	8002fa2 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6818      	ldr	r0, [r3, #0]
 8002f92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f94:	6959      	ldr	r1, [r3, #20]
 8002f96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f98:	895a      	ldrh	r2, [r3, #10]
 8002f9a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002f9e:	f003 fea0 	bl	8006ce2 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002fa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fa4:	69da      	ldr	r2, [r3, #28]
 8002fa6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002faa:	441a      	add	r2, r3
 8002fac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fae:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002fb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fb2:	695a      	ldr	r2, [r3, #20]
 8002fb4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002fb8:	441a      	add	r2, r3
 8002fba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fbc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002fbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d005      	beq.n	8002fd2 <PCD_EP_ISR_Handler+0x514>
 8002fc6:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002fca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d206      	bcs.n	8002fe0 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002fd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f005 fc67 	bl	80088ac <HAL_PCD_DataOutStageCallback>
 8002fde:	e005      	b.n	8002fec <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f002 f946 	bl	8005278 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002fec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002ff0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 8123 	beq.w	8003240 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8002ffa:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002ffe:	4613      	mov	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4413      	add	r3, r2
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	3310      	adds	r3, #16
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	4413      	add	r3, r2
 800300c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	461a      	mov	r2, r3
 8003014:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	4413      	add	r3, r2
 800301c:	881b      	ldrh	r3, [r3, #0]
 800301e:	b29b      	uxth	r3, r3
 8003020:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003024:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003028:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	461a      	mov	r2, r3
 8003032:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	441a      	add	r2, r3
 800303a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800303e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003042:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003046:	b29b      	uxth	r3, r3
 8003048:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800304a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800304c:	78db      	ldrb	r3, [r3, #3]
 800304e:	2b01      	cmp	r3, #1
 8003050:	f040 80a2 	bne.w	8003198 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8003054:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003056:	2200      	movs	r2, #0
 8003058:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800305a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800305c:	7b1b      	ldrb	r3, [r3, #12]
 800305e:	2b00      	cmp	r3, #0
 8003060:	f000 8093 	beq.w	800318a <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003064:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003068:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800306c:	2b00      	cmp	r3, #0
 800306e:	d046      	beq.n	80030fe <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003070:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003072:	785b      	ldrb	r3, [r3, #1]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d126      	bne.n	80030c6 <PCD_EP_ISR_Handler+0x608>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	627b      	str	r3, [r7, #36]	@ 0x24
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003086:	b29b      	uxth	r3, r3
 8003088:	461a      	mov	r2, r3
 800308a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800308c:	4413      	add	r3, r2
 800308e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003090:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	011a      	lsls	r2, r3, #4
 8003096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003098:	4413      	add	r3, r2
 800309a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800309e:	623b      	str	r3, [r7, #32]
 80030a0:	6a3b      	ldr	r3, [r7, #32]
 80030a2:	881b      	ldrh	r3, [r3, #0]
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	6a3b      	ldr	r3, [r7, #32]
 80030ae:	801a      	strh	r2, [r3, #0]
 80030b0:	6a3b      	ldr	r3, [r7, #32]
 80030b2:	881b      	ldrh	r3, [r3, #0]
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030be:	b29a      	uxth	r2, r3
 80030c0:	6a3b      	ldr	r3, [r7, #32]
 80030c2:	801a      	strh	r2, [r3, #0]
 80030c4:	e061      	b.n	800318a <PCD_EP_ISR_Handler+0x6cc>
 80030c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030c8:	785b      	ldrb	r3, [r3, #1]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d15d      	bne.n	800318a <PCD_EP_ISR_Handler+0x6cc>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030dc:	b29b      	uxth	r3, r3
 80030de:	461a      	mov	r2, r3
 80030e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030e2:	4413      	add	r3, r2
 80030e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	011a      	lsls	r2, r3, #4
 80030ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030ee:	4413      	add	r3, r2
 80030f0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80030f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030f8:	2200      	movs	r2, #0
 80030fa:	801a      	strh	r2, [r3, #0]
 80030fc:	e045      	b.n	800318a <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003104:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003106:	785b      	ldrb	r3, [r3, #1]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d126      	bne.n	800315a <PCD_EP_ISR_Handler+0x69c>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	637b      	str	r3, [r7, #52]	@ 0x34
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800311a:	b29b      	uxth	r3, r3
 800311c:	461a      	mov	r2, r3
 800311e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003120:	4413      	add	r3, r2
 8003122:	637b      	str	r3, [r7, #52]	@ 0x34
 8003124:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	011a      	lsls	r2, r3, #4
 800312a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800312c:	4413      	add	r3, r2
 800312e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003132:	633b      	str	r3, [r7, #48]	@ 0x30
 8003134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003136:	881b      	ldrh	r3, [r3, #0]
 8003138:	b29b      	uxth	r3, r3
 800313a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800313e:	b29a      	uxth	r2, r3
 8003140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003142:	801a      	strh	r2, [r3, #0]
 8003144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003146:	881b      	ldrh	r3, [r3, #0]
 8003148:	b29b      	uxth	r3, r3
 800314a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800314e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003152:	b29a      	uxth	r2, r3
 8003154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003156:	801a      	strh	r2, [r3, #0]
 8003158:	e017      	b.n	800318a <PCD_EP_ISR_Handler+0x6cc>
 800315a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800315c:	785b      	ldrb	r3, [r3, #1]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d113      	bne.n	800318a <PCD_EP_ISR_Handler+0x6cc>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800316a:	b29b      	uxth	r3, r3
 800316c:	461a      	mov	r2, r3
 800316e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003170:	4413      	add	r3, r2
 8003172:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003174:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	011a      	lsls	r2, r3, #4
 800317a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800317c:	4413      	add	r3, r2
 800317e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003182:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003186:	2200      	movs	r2, #0
 8003188:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800318a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	4619      	mov	r1, r3
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f005 fba6 	bl	80088e2 <HAL_PCD_DataInStageCallback>
 8003196:	e053      	b.n	8003240 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003198:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800319c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d146      	bne.n	8003232 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	461a      	mov	r2, r3
 80031b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	4413      	add	r3, r2
 80031b8:	3302      	adds	r3, #2
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	6812      	ldr	r2, [r2, #0]
 80031c0:	4413      	add	r3, r2
 80031c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80031c6:	881b      	ldrh	r3, [r3, #0]
 80031c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031cc:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80031d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031d2:	699a      	ldr	r2, [r3, #24]
 80031d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80031d8:	429a      	cmp	r2, r3
 80031da:	d907      	bls.n	80031ec <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 80031dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031de:	699a      	ldr	r2, [r3, #24]
 80031e0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80031e4:	1ad2      	subs	r2, r2, r3
 80031e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031e8:	619a      	str	r2, [r3, #24]
 80031ea:	e002      	b.n	80031f2 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 80031ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031ee:	2200      	movs	r2, #0
 80031f0:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80031f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d106      	bne.n	8003208 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80031fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	4619      	mov	r1, r3
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f005 fb6e 	bl	80088e2 <HAL_PCD_DataInStageCallback>
 8003206:	e01b      	b.n	8003240 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003208:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800320a:	695a      	ldr	r2, [r3, #20]
 800320c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003210:	441a      	add	r2, r3
 8003212:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003214:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003216:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003218:	69da      	ldr	r2, [r3, #28]
 800321a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800321e:	441a      	add	r2, r3
 8003220:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003222:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800322a:	4618      	mov	r0, r3
 800322c:	f002 f824 	bl	8005278 <USB_EPStartXfer>
 8003230:	e006      	b.n	8003240 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003232:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003236:	461a      	mov	r2, r3
 8003238:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 f91b 	bl	8003476 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003248:	b29b      	uxth	r3, r3
 800324a:	b21b      	sxth	r3, r3
 800324c:	2b00      	cmp	r3, #0
 800324e:	f6ff ac3b 	blt.w	8002ac8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3758      	adds	r7, #88	@ 0x58
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b088      	sub	sp, #32
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	4613      	mov	r3, r2
 8003268:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800326a:	88fb      	ldrh	r3, [r7, #6]
 800326c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d07e      	beq.n	8003372 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800327c:	b29b      	uxth	r3, r3
 800327e:	461a      	mov	r2, r3
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	00db      	lsls	r3, r3, #3
 8003286:	4413      	add	r3, r2
 8003288:	3302      	adds	r3, #2
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	6812      	ldr	r2, [r2, #0]
 8003290:	4413      	add	r3, r2
 8003292:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003296:	881b      	ldrh	r3, [r3, #0]
 8003298:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800329c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	699a      	ldr	r2, [r3, #24]
 80032a2:	8b7b      	ldrh	r3, [r7, #26]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d306      	bcc.n	80032b6 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	699a      	ldr	r2, [r3, #24]
 80032ac:	8b7b      	ldrh	r3, [r7, #26]
 80032ae:	1ad2      	subs	r2, r2, r3
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	619a      	str	r2, [r3, #24]
 80032b4:	e002      	b.n	80032bc <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	2200      	movs	r2, #0
 80032ba:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d123      	bne.n	800330c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	461a      	mov	r2, r3
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	4413      	add	r3, r2
 80032d2:	881b      	ldrh	r3, [r3, #0]
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80032da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032de:	833b      	strh	r3, [r7, #24]
 80032e0:	8b3b      	ldrh	r3, [r7, #24]
 80032e2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80032e6:	833b      	strh	r3, [r7, #24]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	461a      	mov	r2, r3
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	441a      	add	r2, r3
 80032f6:	8b3b      	ldrh	r3, [r7, #24]
 80032f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80032fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003300:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003304:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003308:	b29b      	uxth	r3, r3
 800330a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800330c:	88fb      	ldrh	r3, [r7, #6]
 800330e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003312:	2b00      	cmp	r3, #0
 8003314:	d01f      	beq.n	8003356 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	461a      	mov	r2, r3
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	4413      	add	r3, r2
 8003324:	881b      	ldrh	r3, [r3, #0]
 8003326:	b29b      	uxth	r3, r3
 8003328:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800332c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003330:	82fb      	strh	r3, [r7, #22]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	461a      	mov	r2, r3
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	441a      	add	r2, r3
 8003340:	8afb      	ldrh	r3, [r7, #22]
 8003342:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003346:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800334a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800334e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003352:	b29b      	uxth	r3, r3
 8003354:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003356:	8b7b      	ldrh	r3, [r7, #26]
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 8087 	beq.w	800346c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6818      	ldr	r0, [r3, #0]
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	6959      	ldr	r1, [r3, #20]
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	891a      	ldrh	r2, [r3, #8]
 800336a:	8b7b      	ldrh	r3, [r7, #26]
 800336c:	f003 fcb9 	bl	8006ce2 <USB_ReadPMA>
 8003370:	e07c      	b.n	800346c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800337a:	b29b      	uxth	r3, r3
 800337c:	461a      	mov	r2, r3
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	4413      	add	r3, r2
 8003386:	3306      	adds	r3, #6
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	6812      	ldr	r2, [r2, #0]
 800338e:	4413      	add	r3, r2
 8003390:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003394:	881b      	ldrh	r3, [r3, #0]
 8003396:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800339a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	699a      	ldr	r2, [r3, #24]
 80033a0:	8b7b      	ldrh	r3, [r7, #26]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d306      	bcc.n	80033b4 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	699a      	ldr	r2, [r3, #24]
 80033aa:	8b7b      	ldrh	r3, [r7, #26]
 80033ac:	1ad2      	subs	r2, r2, r3
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	619a      	str	r2, [r3, #24]
 80033b2:	e002      	b.n	80033ba <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	2200      	movs	r2, #0
 80033b8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d123      	bne.n	800340a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	461a      	mov	r2, r3
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	4413      	add	r3, r2
 80033d0:	881b      	ldrh	r3, [r3, #0]
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80033d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033dc:	83fb      	strh	r3, [r7, #30]
 80033de:	8bfb      	ldrh	r3, [r7, #30]
 80033e0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80033e4:	83fb      	strh	r3, [r7, #30]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	461a      	mov	r2, r3
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	441a      	add	r2, r3
 80033f4:	8bfb      	ldrh	r3, [r7, #30]
 80033f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80033fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80033fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003402:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003406:	b29b      	uxth	r3, r3
 8003408:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800340a:	88fb      	ldrh	r3, [r7, #6]
 800340c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003410:	2b00      	cmp	r3, #0
 8003412:	d11f      	bne.n	8003454 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	461a      	mov	r2, r3
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	881b      	ldrh	r3, [r3, #0]
 8003424:	b29b      	uxth	r3, r3
 8003426:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800342a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800342e:	83bb      	strh	r3, [r7, #28]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	461a      	mov	r2, r3
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	441a      	add	r2, r3
 800343e:	8bbb      	ldrh	r3, [r7, #28]
 8003440:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003444:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003448:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800344c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003450:	b29b      	uxth	r3, r3
 8003452:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003454:	8b7b      	ldrh	r3, [r7, #26]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d008      	beq.n	800346c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6818      	ldr	r0, [r3, #0]
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	6959      	ldr	r1, [r3, #20]
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	895a      	ldrh	r2, [r3, #10]
 8003466:	8b7b      	ldrh	r3, [r7, #26]
 8003468:	f003 fc3b 	bl	8006ce2 <USB_ReadPMA>
    }
  }

  return count;
 800346c:	8b7b      	ldrh	r3, [r7, #26]
}
 800346e:	4618      	mov	r0, r3
 8003470:	3720      	adds	r7, #32
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b0a4      	sub	sp, #144	@ 0x90
 800347a:	af00      	add	r7, sp, #0
 800347c:	60f8      	str	r0, [r7, #12]
 800347e:	60b9      	str	r1, [r7, #8]
 8003480:	4613      	mov	r3, r2
 8003482:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003484:	88fb      	ldrh	r3, [r7, #6]
 8003486:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800348a:	2b00      	cmp	r3, #0
 800348c:	f000 81dd 	beq.w	800384a <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003498:	b29b      	uxth	r3, r3
 800349a:	461a      	mov	r2, r3
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	4413      	add	r3, r2
 80034a4:	3302      	adds	r3, #2
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	6812      	ldr	r2, [r2, #0]
 80034ac:	4413      	add	r3, r2
 80034ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80034b2:	881b      	ldrh	r3, [r3, #0]
 80034b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034b8:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	699a      	ldr	r2, [r3, #24]
 80034c0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d907      	bls.n	80034d8 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	699a      	ldr	r2, [r3, #24]
 80034cc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80034d0:	1ad2      	subs	r2, r2, r3
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	619a      	str	r2, [r3, #24]
 80034d6:	e002      	b.n	80034de <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	2200      	movs	r2, #0
 80034dc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f040 80b9 	bne.w	800365a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	785b      	ldrb	r3, [r3, #1]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d126      	bne.n	800353e <HAL_PCD_EP_DB_Transmit+0xc8>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034fe:	b29b      	uxth	r3, r3
 8003500:	461a      	mov	r2, r3
 8003502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003504:	4413      	add	r3, r2
 8003506:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	011a      	lsls	r2, r3, #4
 800350e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003510:	4413      	add	r3, r2
 8003512:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003516:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800351a:	881b      	ldrh	r3, [r3, #0]
 800351c:	b29b      	uxth	r3, r3
 800351e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003522:	b29a      	uxth	r2, r3
 8003524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003526:	801a      	strh	r2, [r3, #0]
 8003528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800352a:	881b      	ldrh	r3, [r3, #0]
 800352c:	b29b      	uxth	r3, r3
 800352e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003532:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003536:	b29a      	uxth	r2, r3
 8003538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800353a:	801a      	strh	r2, [r3, #0]
 800353c:	e01a      	b.n	8003574 <HAL_PCD_EP_DB_Transmit+0xfe>
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	785b      	ldrb	r3, [r3, #1]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d116      	bne.n	8003574 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	637b      	str	r3, [r7, #52]	@ 0x34
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003554:	b29b      	uxth	r3, r3
 8003556:	461a      	mov	r2, r3
 8003558:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800355a:	4413      	add	r3, r2
 800355c:	637b      	str	r3, [r7, #52]	@ 0x34
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	011a      	lsls	r2, r3, #4
 8003564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003566:	4413      	add	r3, r2
 8003568:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800356c:	633b      	str	r3, [r7, #48]	@ 0x30
 800356e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003570:	2200      	movs	r2, #0
 8003572:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	627b      	str	r3, [r7, #36]	@ 0x24
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	785b      	ldrb	r3, [r3, #1]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d126      	bne.n	80035d0 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	61fb      	str	r3, [r7, #28]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003590:	b29b      	uxth	r3, r3
 8003592:	461a      	mov	r2, r3
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	4413      	add	r3, r2
 8003598:	61fb      	str	r3, [r7, #28]
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	011a      	lsls	r2, r3, #4
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	4413      	add	r3, r2
 80035a4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80035a8:	61bb      	str	r3, [r7, #24]
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	881b      	ldrh	r3, [r3, #0]
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	801a      	strh	r2, [r3, #0]
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	881b      	ldrh	r3, [r3, #0]
 80035be:	b29b      	uxth	r3, r3
 80035c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	801a      	strh	r2, [r3, #0]
 80035ce:	e017      	b.n	8003600 <HAL_PCD_EP_DB_Transmit+0x18a>
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	785b      	ldrb	r3, [r3, #1]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d113      	bne.n	8003600 <HAL_PCD_EP_DB_Transmit+0x18a>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	461a      	mov	r2, r3
 80035e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e6:	4413      	add	r3, r2
 80035e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	011a      	lsls	r2, r3, #4
 80035f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f2:	4413      	add	r3, r2
 80035f4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80035f8:	623b      	str	r3, [r7, #32]
 80035fa:	6a3b      	ldr	r3, [r7, #32]
 80035fc:	2200      	movs	r2, #0
 80035fe:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	4619      	mov	r1, r3
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	f005 f96b 	bl	80088e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800360c:	88fb      	ldrh	r3, [r7, #6]
 800360e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003612:	2b00      	cmp	r3, #0
 8003614:	f000 82fc 	beq.w	8003c10 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	461a      	mov	r2, r3
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	4413      	add	r3, r2
 8003626:	881b      	ldrh	r3, [r3, #0]
 8003628:	b29b      	uxth	r3, r3
 800362a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800362e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003632:	82fb      	strh	r3, [r7, #22]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	461a      	mov	r2, r3
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	441a      	add	r2, r3
 8003642:	8afb      	ldrh	r3, [r7, #22]
 8003644:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003648:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800364c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003650:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003654:	b29b      	uxth	r3, r3
 8003656:	8013      	strh	r3, [r2, #0]
 8003658:	e2da      	b.n	8003c10 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800365a:	88fb      	ldrh	r3, [r7, #6]
 800365c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d021      	beq.n	80036a8 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	461a      	mov	r2, r3
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	4413      	add	r3, r2
 8003672:	881b      	ldrh	r3, [r3, #0]
 8003674:	b29b      	uxth	r3, r3
 8003676:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800367a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800367e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	461a      	mov	r2, r3
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	441a      	add	r2, r3
 8003690:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003694:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003698:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800369c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80036a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	f040 82ae 	bne.w	8003c10 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	695a      	ldr	r2, [r3, #20]
 80036b8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80036bc:	441a      	add	r2, r3
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	69da      	ldr	r2, [r3, #28]
 80036c6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80036ca:	441a      	add	r2, r3
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	6a1a      	ldr	r2, [r3, #32]
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d30b      	bcc.n	80036f4 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	6a1a      	ldr	r2, [r3, #32]
 80036e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036ec:	1ad2      	subs	r2, r2, r3
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	621a      	str	r2, [r3, #32]
 80036f2:	e017      	b.n	8003724 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d108      	bne.n	800370e <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80036fc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003700:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800370c:	e00a      	b.n	8003724 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	2200      	movs	r2, #0
 8003722:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	785b      	ldrb	r3, [r3, #1]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d165      	bne.n	80037f8 <HAL_PCD_EP_DB_Transmit+0x382>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800373a:	b29b      	uxth	r3, r3
 800373c:	461a      	mov	r2, r3
 800373e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003740:	4413      	add	r3, r2
 8003742:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	011a      	lsls	r2, r3, #4
 800374a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800374c:	4413      	add	r3, r2
 800374e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003752:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003756:	881b      	ldrh	r3, [r3, #0]
 8003758:	b29b      	uxth	r3, r3
 800375a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800375e:	b29a      	uxth	r2, r3
 8003760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003762:	801a      	strh	r2, [r3, #0]
 8003764:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003768:	2b3e      	cmp	r3, #62	@ 0x3e
 800376a:	d91d      	bls.n	80037a8 <HAL_PCD_EP_DB_Transmit+0x332>
 800376c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003770:	095b      	lsrs	r3, r3, #5
 8003772:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003774:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003778:	f003 031f 	and.w	r3, r3, #31
 800377c:	2b00      	cmp	r3, #0
 800377e:	d102      	bne.n	8003786 <HAL_PCD_EP_DB_Transmit+0x310>
 8003780:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003782:	3b01      	subs	r3, #1
 8003784:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	b29a      	uxth	r2, r3
 800378c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800378e:	b29b      	uxth	r3, r3
 8003790:	029b      	lsls	r3, r3, #10
 8003792:	b29b      	uxth	r3, r3
 8003794:	4313      	orrs	r3, r2
 8003796:	b29b      	uxth	r3, r3
 8003798:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800379c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037a4:	801a      	strh	r2, [r3, #0]
 80037a6:	e044      	b.n	8003832 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80037a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10a      	bne.n	80037c6 <HAL_PCD_EP_DB_Transmit+0x350>
 80037b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037b2:	881b      	ldrh	r3, [r3, #0]
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037be:	b29a      	uxth	r2, r3
 80037c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037c2:	801a      	strh	r2, [r3, #0]
 80037c4:	e035      	b.n	8003832 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80037c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037ca:	085b      	lsrs	r3, r3, #1
 80037cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d002      	beq.n	80037e0 <HAL_PCD_EP_DB_Transmit+0x36a>
 80037da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037dc:	3301      	adds	r3, #1
 80037de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037e2:	881b      	ldrh	r3, [r3, #0]
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	029b      	lsls	r3, r3, #10
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	4313      	orrs	r3, r2
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037f4:	801a      	strh	r2, [r3, #0]
 80037f6:	e01c      	b.n	8003832 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	785b      	ldrb	r3, [r3, #1]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d118      	bne.n	8003832 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	647b      	str	r3, [r7, #68]	@ 0x44
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800380e:	b29b      	uxth	r3, r3
 8003810:	461a      	mov	r2, r3
 8003812:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003814:	4413      	add	r3, r2
 8003816:	647b      	str	r3, [r7, #68]	@ 0x44
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	011a      	lsls	r2, r3, #4
 800381e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003820:	4413      	add	r3, r2
 8003822:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003826:	643b      	str	r3, [r7, #64]	@ 0x40
 8003828:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800382c:	b29a      	uxth	r2, r3
 800382e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003830:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6818      	ldr	r0, [r3, #0]
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	6959      	ldr	r1, [r3, #20]
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	891a      	ldrh	r2, [r3, #8]
 800383e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003842:	b29b      	uxth	r3, r3
 8003844:	f003 fa07 	bl	8006c56 <USB_WritePMA>
 8003848:	e1e2      	b.n	8003c10 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003852:	b29b      	uxth	r3, r3
 8003854:	461a      	mov	r2, r3
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	4413      	add	r3, r2
 800385e:	3306      	adds	r3, #6
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	6812      	ldr	r2, [r2, #0]
 8003866:	4413      	add	r3, r2
 8003868:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800386c:	881b      	ldrh	r3, [r3, #0]
 800386e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003872:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	699a      	ldr	r2, [r3, #24]
 800387a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800387e:	429a      	cmp	r2, r3
 8003880:	d307      	bcc.n	8003892 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	699a      	ldr	r2, [r3, #24]
 8003886:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800388a:	1ad2      	subs	r2, r2, r3
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	619a      	str	r2, [r3, #24]
 8003890:	e002      	b.n	8003898 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	2200      	movs	r2, #0
 8003896:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	2b00      	cmp	r3, #0
 800389e:	f040 80c0 	bne.w	8003a22 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	785b      	ldrb	r3, [r3, #1]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d126      	bne.n	80038f8 <HAL_PCD_EP_DB_Transmit+0x482>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	461a      	mov	r2, r3
 80038bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80038be:	4413      	add	r3, r2
 80038c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	011a      	lsls	r2, r3, #4
 80038c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80038ca:	4413      	add	r3, r2
 80038cc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80038d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80038d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038d4:	881b      	ldrh	r3, [r3, #0]
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038dc:	b29a      	uxth	r2, r3
 80038de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038e0:	801a      	strh	r2, [r3, #0]
 80038e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038e4:	881b      	ldrh	r3, [r3, #0]
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038f4:	801a      	strh	r2, [r3, #0]
 80038f6:	e01a      	b.n	800392e <HAL_PCD_EP_DB_Transmit+0x4b8>
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	785b      	ldrb	r3, [r3, #1]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d116      	bne.n	800392e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	667b      	str	r3, [r7, #100]	@ 0x64
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800390e:	b29b      	uxth	r3, r3
 8003910:	461a      	mov	r2, r3
 8003912:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003914:	4413      	add	r3, r2
 8003916:	667b      	str	r3, [r7, #100]	@ 0x64
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	011a      	lsls	r2, r3, #4
 800391e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003920:	4413      	add	r3, r2
 8003922:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003926:	663b      	str	r3, [r7, #96]	@ 0x60
 8003928:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800392a:	2200      	movs	r2, #0
 800392c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	677b      	str	r3, [r7, #116]	@ 0x74
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	785b      	ldrb	r3, [r3, #1]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d12b      	bne.n	8003994 <HAL_PCD_EP_DB_Transmit+0x51e>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800394a:	b29b      	uxth	r3, r3
 800394c:	461a      	mov	r2, r3
 800394e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003950:	4413      	add	r3, r2
 8003952:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	011a      	lsls	r2, r3, #4
 800395a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800395c:	4413      	add	r3, r2
 800395e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003962:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003966:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800396a:	881b      	ldrh	r3, [r3, #0]
 800396c:	b29b      	uxth	r3, r3
 800396e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003972:	b29a      	uxth	r2, r3
 8003974:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003978:	801a      	strh	r2, [r3, #0]
 800397a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800397e:	881b      	ldrh	r3, [r3, #0]
 8003980:	b29b      	uxth	r3, r3
 8003982:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003986:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800398a:	b29a      	uxth	r2, r3
 800398c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003990:	801a      	strh	r2, [r3, #0]
 8003992:	e017      	b.n	80039c4 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	785b      	ldrb	r3, [r3, #1]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d113      	bne.n	80039c4 <HAL_PCD_EP_DB_Transmit+0x54e>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	461a      	mov	r2, r3
 80039a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039aa:	4413      	add	r3, r2
 80039ac:	677b      	str	r3, [r7, #116]	@ 0x74
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	011a      	lsls	r2, r3, #4
 80039b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039b6:	4413      	add	r3, r2
 80039b8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80039bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80039be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039c0:	2200      	movs	r2, #0
 80039c2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	4619      	mov	r1, r3
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f004 ff89 	bl	80088e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80039d0:	88fb      	ldrh	r3, [r7, #6]
 80039d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f040 811a 	bne.w	8003c10 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	461a      	mov	r2, r3
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	4413      	add	r3, r2
 80039ea:	881b      	ldrh	r3, [r3, #0]
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039f6:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	461a      	mov	r2, r3
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	441a      	add	r2, r3
 8003a08:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003a0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a14:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	8013      	strh	r3, [r2, #0]
 8003a20:	e0f6      	b.n	8003c10 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003a22:	88fb      	ldrh	r3, [r7, #6]
 8003a24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d121      	bne.n	8003a70 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	461a      	mov	r2, r3
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	4413      	add	r3, r2
 8003a3a:	881b      	ldrh	r3, [r3, #0]
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a46:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	441a      	add	r2, r3
 8003a58:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003a5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a64:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	f040 80ca 	bne.w	8003c10 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	695a      	ldr	r2, [r3, #20]
 8003a80:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003a84:	441a      	add	r2, r3
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	69da      	ldr	r2, [r3, #28]
 8003a8e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003a92:	441a      	add	r2, r3
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	6a1a      	ldr	r2, [r3, #32]
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d30b      	bcc.n	8003abc <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	6a1a      	ldr	r2, [r3, #32]
 8003ab0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ab4:	1ad2      	subs	r2, r2, r3
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	621a      	str	r2, [r3, #32]
 8003aba:	e017      	b.n	8003aec <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d108      	bne.n	8003ad6 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003ac4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003ac8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003ad4:	e00a      	b.n	8003aec <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	657b      	str	r3, [r7, #84]	@ 0x54
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	785b      	ldrb	r3, [r3, #1]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d165      	bne.n	8003bc6 <HAL_PCD_EP_DB_Transmit+0x750>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b0e:	4413      	add	r3, r2
 8003b10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	011a      	lsls	r2, r3, #4
 8003b18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b1a:	4413      	add	r3, r2
 8003b1c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003b20:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b24:	881b      	ldrh	r3, [r3, #0]
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b30:	801a      	strh	r2, [r3, #0]
 8003b32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b36:	2b3e      	cmp	r3, #62	@ 0x3e
 8003b38:	d91d      	bls.n	8003b76 <HAL_PCD_EP_DB_Transmit+0x700>
 8003b3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b3e:	095b      	lsrs	r3, r3, #5
 8003b40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b46:	f003 031f 	and.w	r3, r3, #31
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d102      	bne.n	8003b54 <HAL_PCD_EP_DB_Transmit+0x6de>
 8003b4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b50:	3b01      	subs	r3, #1
 8003b52:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b56:	881b      	ldrh	r3, [r3, #0]
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	029b      	lsls	r3, r3, #10
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	4313      	orrs	r3, r2
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b72:	801a      	strh	r2, [r3, #0]
 8003b74:	e041      	b.n	8003bfa <HAL_PCD_EP_DB_Transmit+0x784>
 8003b76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d10a      	bne.n	8003b94 <HAL_PCD_EP_DB_Transmit+0x71e>
 8003b7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b80:	881b      	ldrh	r3, [r3, #0]
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b90:	801a      	strh	r2, [r3, #0]
 8003b92:	e032      	b.n	8003bfa <HAL_PCD_EP_DB_Transmit+0x784>
 8003b94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b98:	085b      	lsrs	r3, r3, #1
 8003b9a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d002      	beq.n	8003bae <HAL_PCD_EP_DB_Transmit+0x738>
 8003ba8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003baa:	3301      	adds	r3, #1
 8003bac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003bae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bb0:	881b      	ldrh	r3, [r3, #0]
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	029b      	lsls	r3, r3, #10
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bc2:	801a      	strh	r2, [r3, #0]
 8003bc4:	e019      	b.n	8003bfa <HAL_PCD_EP_DB_Transmit+0x784>
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	785b      	ldrb	r3, [r3, #1]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d115      	bne.n	8003bfa <HAL_PCD_EP_DB_Transmit+0x784>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	461a      	mov	r2, r3
 8003bda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bdc:	4413      	add	r3, r2
 8003bde:	657b      	str	r3, [r7, #84]	@ 0x54
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	011a      	lsls	r2, r3, #4
 8003be6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003be8:	4413      	add	r3, r2
 8003bea:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003bee:	653b      	str	r3, [r7, #80]	@ 0x50
 8003bf0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bf8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6818      	ldr	r0, [r3, #0]
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	6959      	ldr	r1, [r3, #20]
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	895a      	ldrh	r2, [r3, #10]
 8003c06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	f003 f823 	bl	8006c56 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	461a      	mov	r2, r3
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	4413      	add	r3, r2
 8003c1e:	881b      	ldrh	r3, [r3, #0]
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c2a:	82bb      	strh	r3, [r7, #20]
 8003c2c:	8abb      	ldrh	r3, [r7, #20]
 8003c2e:	f083 0310 	eor.w	r3, r3, #16
 8003c32:	82bb      	strh	r3, [r7, #20]
 8003c34:	8abb      	ldrh	r3, [r7, #20]
 8003c36:	f083 0320 	eor.w	r3, r3, #32
 8003c3a:	82bb      	strh	r3, [r7, #20]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	461a      	mov	r2, r3
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	441a      	add	r2, r3
 8003c4a:	8abb      	ldrh	r3, [r7, #20]
 8003c4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3790      	adds	r7, #144	@ 0x90
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	b087      	sub	sp, #28
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	60f8      	str	r0, [r7, #12]
 8003c72:	607b      	str	r3, [r7, #4]
 8003c74:	460b      	mov	r3, r1
 8003c76:	817b      	strh	r3, [r7, #10]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003c7c:	897b      	ldrh	r3, [r7, #10]
 8003c7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00b      	beq.n	8003ca0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c88:	897b      	ldrh	r3, [r7, #10]
 8003c8a:	f003 0207 	and.w	r2, r3, #7
 8003c8e:	4613      	mov	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	4413      	add	r3, r2
 8003c94:	00db      	lsls	r3, r3, #3
 8003c96:	3310      	adds	r3, #16
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	617b      	str	r3, [r7, #20]
 8003c9e:	e009      	b.n	8003cb4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003ca0:	897a      	ldrh	r2, [r7, #10]
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	4413      	add	r3, r2
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003cb4:	893b      	ldrh	r3, [r7, #8]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d107      	bne.n	8003cca <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	80da      	strh	r2, [r3, #6]
 8003cc8:	e00b      	b.n	8003ce2 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	0c1b      	lsrs	r3, r3, #16
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	371c      	adds	r7, #28
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bc80      	pop	{r7}
 8003cec:	4770      	bx	lr
	...

08003cf0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d101      	bne.n	8003d02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e272      	b.n	80041e8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f000 8087 	beq.w	8003e1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d10:	4b92      	ldr	r3, [pc, #584]	@ (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f003 030c 	and.w	r3, r3, #12
 8003d18:	2b04      	cmp	r3, #4
 8003d1a:	d00c      	beq.n	8003d36 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d1c:	4b8f      	ldr	r3, [pc, #572]	@ (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f003 030c 	and.w	r3, r3, #12
 8003d24:	2b08      	cmp	r3, #8
 8003d26:	d112      	bne.n	8003d4e <HAL_RCC_OscConfig+0x5e>
 8003d28:	4b8c      	ldr	r3, [pc, #560]	@ (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d34:	d10b      	bne.n	8003d4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d36:	4b89      	ldr	r3, [pc, #548]	@ (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d06c      	beq.n	8003e1c <HAL_RCC_OscConfig+0x12c>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d168      	bne.n	8003e1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e24c      	b.n	80041e8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d56:	d106      	bne.n	8003d66 <HAL_RCC_OscConfig+0x76>
 8003d58:	4b80      	ldr	r3, [pc, #512]	@ (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a7f      	ldr	r2, [pc, #508]	@ (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003d5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d62:	6013      	str	r3, [r2, #0]
 8003d64:	e02e      	b.n	8003dc4 <HAL_RCC_OscConfig+0xd4>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d10c      	bne.n	8003d88 <HAL_RCC_OscConfig+0x98>
 8003d6e:	4b7b      	ldr	r3, [pc, #492]	@ (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a7a      	ldr	r2, [pc, #488]	@ (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003d74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d78:	6013      	str	r3, [r2, #0]
 8003d7a:	4b78      	ldr	r3, [pc, #480]	@ (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a77      	ldr	r2, [pc, #476]	@ (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003d80:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d84:	6013      	str	r3, [r2, #0]
 8003d86:	e01d      	b.n	8003dc4 <HAL_RCC_OscConfig+0xd4>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d90:	d10c      	bne.n	8003dac <HAL_RCC_OscConfig+0xbc>
 8003d92:	4b72      	ldr	r3, [pc, #456]	@ (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a71      	ldr	r2, [pc, #452]	@ (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003d98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d9c:	6013      	str	r3, [r2, #0]
 8003d9e:	4b6f      	ldr	r3, [pc, #444]	@ (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a6e      	ldr	r2, [pc, #440]	@ (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003da4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003da8:	6013      	str	r3, [r2, #0]
 8003daa:	e00b      	b.n	8003dc4 <HAL_RCC_OscConfig+0xd4>
 8003dac:	4b6b      	ldr	r3, [pc, #428]	@ (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a6a      	ldr	r2, [pc, #424]	@ (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003db2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003db6:	6013      	str	r3, [r2, #0]
 8003db8:	4b68      	ldr	r3, [pc, #416]	@ (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a67      	ldr	r2, [pc, #412]	@ (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003dbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dc2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d013      	beq.n	8003df4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dcc:	f7fc fe06 	bl	80009dc <HAL_GetTick>
 8003dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dd2:	e008      	b.n	8003de6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dd4:	f7fc fe02 	bl	80009dc <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b64      	cmp	r3, #100	@ 0x64
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e200      	b.n	80041e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003de6:	4b5d      	ldr	r3, [pc, #372]	@ (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d0f0      	beq.n	8003dd4 <HAL_RCC_OscConfig+0xe4>
 8003df2:	e014      	b.n	8003e1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df4:	f7fc fdf2 	bl	80009dc <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dfc:	f7fc fdee 	bl	80009dc <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b64      	cmp	r3, #100	@ 0x64
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e1ec      	b.n	80041e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e0e:	4b53      	ldr	r3, [pc, #332]	@ (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1f0      	bne.n	8003dfc <HAL_RCC_OscConfig+0x10c>
 8003e1a:	e000      	b.n	8003e1e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d063      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e2a:	4b4c      	ldr	r3, [pc, #304]	@ (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f003 030c 	and.w	r3, r3, #12
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00b      	beq.n	8003e4e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e36:	4b49      	ldr	r3, [pc, #292]	@ (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f003 030c 	and.w	r3, r3, #12
 8003e3e:	2b08      	cmp	r3, #8
 8003e40:	d11c      	bne.n	8003e7c <HAL_RCC_OscConfig+0x18c>
 8003e42:	4b46      	ldr	r3, [pc, #280]	@ (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d116      	bne.n	8003e7c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e4e:	4b43      	ldr	r3, [pc, #268]	@ (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d005      	beq.n	8003e66 <HAL_RCC_OscConfig+0x176>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d001      	beq.n	8003e66 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e1c0      	b.n	80041e8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e66:	4b3d      	ldr	r3, [pc, #244]	@ (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	4939      	ldr	r1, [pc, #228]	@ (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e7a:	e03a      	b.n	8003ef2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d020      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e84:	4b36      	ldr	r3, [pc, #216]	@ (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003e86:	2201      	movs	r2, #1
 8003e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e8a:	f7fc fda7 	bl	80009dc <HAL_GetTick>
 8003e8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e90:	e008      	b.n	8003ea4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e92:	f7fc fda3 	bl	80009dc <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e1a1      	b.n	80041e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ea4:	4b2d      	ldr	r3, [pc, #180]	@ (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d0f0      	beq.n	8003e92 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eb0:	4b2a      	ldr	r3, [pc, #168]	@ (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	695b      	ldr	r3, [r3, #20]
 8003ebc:	00db      	lsls	r3, r3, #3
 8003ebe:	4927      	ldr	r1, [pc, #156]	@ (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	600b      	str	r3, [r1, #0]
 8003ec4:	e015      	b.n	8003ef2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ec6:	4b26      	ldr	r3, [pc, #152]	@ (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ecc:	f7fc fd86 	bl	80009dc <HAL_GetTick>
 8003ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ed2:	e008      	b.n	8003ee6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ed4:	f7fc fd82 	bl	80009dc <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e180      	b.n	80041e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ee6:	4b1d      	ldr	r3, [pc, #116]	@ (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1f0      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0308 	and.w	r3, r3, #8
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d03a      	beq.n	8003f74 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d019      	beq.n	8003f3a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f06:	4b17      	ldr	r3, [pc, #92]	@ (8003f64 <HAL_RCC_OscConfig+0x274>)
 8003f08:	2201      	movs	r2, #1
 8003f0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f0c:	f7fc fd66 	bl	80009dc <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f14:	f7fc fd62 	bl	80009dc <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e160      	b.n	80041e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f26:	4b0d      	ldr	r3, [pc, #52]	@ (8003f5c <HAL_RCC_OscConfig+0x26c>)
 8003f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d0f0      	beq.n	8003f14 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003f32:	2001      	movs	r0, #1
 8003f34:	f000 faba 	bl	80044ac <RCC_Delay>
 8003f38:	e01c      	b.n	8003f74 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8003f64 <HAL_RCC_OscConfig+0x274>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f40:	f7fc fd4c 	bl	80009dc <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f46:	e00f      	b.n	8003f68 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f48:	f7fc fd48 	bl	80009dc <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d908      	bls.n	8003f68 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e146      	b.n	80041e8 <HAL_RCC_OscConfig+0x4f8>
 8003f5a:	bf00      	nop
 8003f5c:	40021000 	.word	0x40021000
 8003f60:	42420000 	.word	0x42420000
 8003f64:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f68:	4b92      	ldr	r3, [pc, #584]	@ (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f6c:	f003 0302 	and.w	r3, r3, #2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1e9      	bne.n	8003f48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0304 	and.w	r3, r3, #4
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 80a6 	beq.w	80040ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f82:	2300      	movs	r3, #0
 8003f84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f86:	4b8b      	ldr	r3, [pc, #556]	@ (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10d      	bne.n	8003fae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f92:	4b88      	ldr	r3, [pc, #544]	@ (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 8003f94:	69db      	ldr	r3, [r3, #28]
 8003f96:	4a87      	ldr	r2, [pc, #540]	@ (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 8003f98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f9c:	61d3      	str	r3, [r2, #28]
 8003f9e:	4b85      	ldr	r3, [pc, #532]	@ (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 8003fa0:	69db      	ldr	r3, [r3, #28]
 8003fa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fa6:	60bb      	str	r3, [r7, #8]
 8003fa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003faa:	2301      	movs	r3, #1
 8003fac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fae:	4b82      	ldr	r3, [pc, #520]	@ (80041b8 <HAL_RCC_OscConfig+0x4c8>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d118      	bne.n	8003fec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fba:	4b7f      	ldr	r3, [pc, #508]	@ (80041b8 <HAL_RCC_OscConfig+0x4c8>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a7e      	ldr	r2, [pc, #504]	@ (80041b8 <HAL_RCC_OscConfig+0x4c8>)
 8003fc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fc6:	f7fc fd09 	bl	80009dc <HAL_GetTick>
 8003fca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fcc:	e008      	b.n	8003fe0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fce:	f7fc fd05 	bl	80009dc <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b64      	cmp	r3, #100	@ 0x64
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e103      	b.n	80041e8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fe0:	4b75      	ldr	r3, [pc, #468]	@ (80041b8 <HAL_RCC_OscConfig+0x4c8>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d0f0      	beq.n	8003fce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d106      	bne.n	8004002 <HAL_RCC_OscConfig+0x312>
 8003ff4:	4b6f      	ldr	r3, [pc, #444]	@ (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 8003ff6:	6a1b      	ldr	r3, [r3, #32]
 8003ff8:	4a6e      	ldr	r2, [pc, #440]	@ (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 8003ffa:	f043 0301 	orr.w	r3, r3, #1
 8003ffe:	6213      	str	r3, [r2, #32]
 8004000:	e02d      	b.n	800405e <HAL_RCC_OscConfig+0x36e>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10c      	bne.n	8004024 <HAL_RCC_OscConfig+0x334>
 800400a:	4b6a      	ldr	r3, [pc, #424]	@ (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	4a69      	ldr	r2, [pc, #420]	@ (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 8004010:	f023 0301 	bic.w	r3, r3, #1
 8004014:	6213      	str	r3, [r2, #32]
 8004016:	4b67      	ldr	r3, [pc, #412]	@ (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	4a66      	ldr	r2, [pc, #408]	@ (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 800401c:	f023 0304 	bic.w	r3, r3, #4
 8004020:	6213      	str	r3, [r2, #32]
 8004022:	e01c      	b.n	800405e <HAL_RCC_OscConfig+0x36e>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	2b05      	cmp	r3, #5
 800402a:	d10c      	bne.n	8004046 <HAL_RCC_OscConfig+0x356>
 800402c:	4b61      	ldr	r3, [pc, #388]	@ (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 800402e:	6a1b      	ldr	r3, [r3, #32]
 8004030:	4a60      	ldr	r2, [pc, #384]	@ (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 8004032:	f043 0304 	orr.w	r3, r3, #4
 8004036:	6213      	str	r3, [r2, #32]
 8004038:	4b5e      	ldr	r3, [pc, #376]	@ (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 800403a:	6a1b      	ldr	r3, [r3, #32]
 800403c:	4a5d      	ldr	r2, [pc, #372]	@ (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 800403e:	f043 0301 	orr.w	r3, r3, #1
 8004042:	6213      	str	r3, [r2, #32]
 8004044:	e00b      	b.n	800405e <HAL_RCC_OscConfig+0x36e>
 8004046:	4b5b      	ldr	r3, [pc, #364]	@ (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 8004048:	6a1b      	ldr	r3, [r3, #32]
 800404a:	4a5a      	ldr	r2, [pc, #360]	@ (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 800404c:	f023 0301 	bic.w	r3, r3, #1
 8004050:	6213      	str	r3, [r2, #32]
 8004052:	4b58      	ldr	r3, [pc, #352]	@ (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	4a57      	ldr	r2, [pc, #348]	@ (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 8004058:	f023 0304 	bic.w	r3, r3, #4
 800405c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d015      	beq.n	8004092 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004066:	f7fc fcb9 	bl	80009dc <HAL_GetTick>
 800406a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800406c:	e00a      	b.n	8004084 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800406e:	f7fc fcb5 	bl	80009dc <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	f241 3288 	movw	r2, #5000	@ 0x1388
 800407c:	4293      	cmp	r3, r2
 800407e:	d901      	bls.n	8004084 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e0b1      	b.n	80041e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004084:	4b4b      	ldr	r3, [pc, #300]	@ (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 8004086:	6a1b      	ldr	r3, [r3, #32]
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d0ee      	beq.n	800406e <HAL_RCC_OscConfig+0x37e>
 8004090:	e014      	b.n	80040bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004092:	f7fc fca3 	bl	80009dc <HAL_GetTick>
 8004096:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004098:	e00a      	b.n	80040b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800409a:	f7fc fc9f 	bl	80009dc <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d901      	bls.n	80040b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e09b      	b.n	80041e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040b0:	4b40      	ldr	r3, [pc, #256]	@ (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 80040b2:	6a1b      	ldr	r3, [r3, #32]
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1ee      	bne.n	800409a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80040bc:	7dfb      	ldrb	r3, [r7, #23]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d105      	bne.n	80040ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040c2:	4b3c      	ldr	r3, [pc, #240]	@ (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	4a3b      	ldr	r2, [pc, #236]	@ (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 80040c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	69db      	ldr	r3, [r3, #28]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f000 8087 	beq.w	80041e6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040d8:	4b36      	ldr	r3, [pc, #216]	@ (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f003 030c 	and.w	r3, r3, #12
 80040e0:	2b08      	cmp	r3, #8
 80040e2:	d061      	beq.n	80041a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	69db      	ldr	r3, [r3, #28]
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d146      	bne.n	800417a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ec:	4b33      	ldr	r3, [pc, #204]	@ (80041bc <HAL_RCC_OscConfig+0x4cc>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f2:	f7fc fc73 	bl	80009dc <HAL_GetTick>
 80040f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040f8:	e008      	b.n	800410c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040fa:	f7fc fc6f 	bl	80009dc <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	2b02      	cmp	r3, #2
 8004106:	d901      	bls.n	800410c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e06d      	b.n	80041e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800410c:	4b29      	ldr	r3, [pc, #164]	@ (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1f0      	bne.n	80040fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004120:	d108      	bne.n	8004134 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004122:	4b24      	ldr	r3, [pc, #144]	@ (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	4921      	ldr	r1, [pc, #132]	@ (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 8004130:	4313      	orrs	r3, r2
 8004132:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004134:	4b1f      	ldr	r3, [pc, #124]	@ (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a19      	ldr	r1, [r3, #32]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004144:	430b      	orrs	r3, r1
 8004146:	491b      	ldr	r1, [pc, #108]	@ (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 8004148:	4313      	orrs	r3, r2
 800414a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800414c:	4b1b      	ldr	r3, [pc, #108]	@ (80041bc <HAL_RCC_OscConfig+0x4cc>)
 800414e:	2201      	movs	r2, #1
 8004150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004152:	f7fc fc43 	bl	80009dc <HAL_GetTick>
 8004156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004158:	e008      	b.n	800416c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800415a:	f7fc fc3f 	bl	80009dc <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	2b02      	cmp	r3, #2
 8004166:	d901      	bls.n	800416c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e03d      	b.n	80041e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800416c:	4b11      	ldr	r3, [pc, #68]	@ (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d0f0      	beq.n	800415a <HAL_RCC_OscConfig+0x46a>
 8004178:	e035      	b.n	80041e6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800417a:	4b10      	ldr	r3, [pc, #64]	@ (80041bc <HAL_RCC_OscConfig+0x4cc>)
 800417c:	2200      	movs	r2, #0
 800417e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004180:	f7fc fc2c 	bl	80009dc <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004188:	f7fc fc28 	bl	80009dc <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b02      	cmp	r3, #2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e026      	b.n	80041e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800419a:	4b06      	ldr	r3, [pc, #24]	@ (80041b4 <HAL_RCC_OscConfig+0x4c4>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1f0      	bne.n	8004188 <HAL_RCC_OscConfig+0x498>
 80041a6:	e01e      	b.n	80041e6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	69db      	ldr	r3, [r3, #28]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d107      	bne.n	80041c0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e019      	b.n	80041e8 <HAL_RCC_OscConfig+0x4f8>
 80041b4:	40021000 	.word	0x40021000
 80041b8:	40007000 	.word	0x40007000
 80041bc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80041c0:	4b0b      	ldr	r3, [pc, #44]	@ (80041f0 <HAL_RCC_OscConfig+0x500>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d106      	bne.n	80041e2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041de:	429a      	cmp	r2, r3
 80041e0:	d001      	beq.n	80041e6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e000      	b.n	80041e8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3718      	adds	r7, #24
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	40021000 	.word	0x40021000

080041f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e0d0      	b.n	80043aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004208:	4b6a      	ldr	r3, [pc, #424]	@ (80043b4 <HAL_RCC_ClockConfig+0x1c0>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0307 	and.w	r3, r3, #7
 8004210:	683a      	ldr	r2, [r7, #0]
 8004212:	429a      	cmp	r2, r3
 8004214:	d910      	bls.n	8004238 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004216:	4b67      	ldr	r3, [pc, #412]	@ (80043b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f023 0207 	bic.w	r2, r3, #7
 800421e:	4965      	ldr	r1, [pc, #404]	@ (80043b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	4313      	orrs	r3, r2
 8004224:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004226:	4b63      	ldr	r3, [pc, #396]	@ (80043b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0307 	and.w	r3, r3, #7
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	429a      	cmp	r2, r3
 8004232:	d001      	beq.n	8004238 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e0b8      	b.n	80043aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d020      	beq.n	8004286 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	2b00      	cmp	r3, #0
 800424e:	d005      	beq.n	800425c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004250:	4b59      	ldr	r3, [pc, #356]	@ (80043b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	4a58      	ldr	r2, [pc, #352]	@ (80043b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004256:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800425a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0308 	and.w	r3, r3, #8
 8004264:	2b00      	cmp	r3, #0
 8004266:	d005      	beq.n	8004274 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004268:	4b53      	ldr	r3, [pc, #332]	@ (80043b8 <HAL_RCC_ClockConfig+0x1c4>)
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	4a52      	ldr	r2, [pc, #328]	@ (80043b8 <HAL_RCC_ClockConfig+0x1c4>)
 800426e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004272:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004274:	4b50      	ldr	r3, [pc, #320]	@ (80043b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	494d      	ldr	r1, [pc, #308]	@ (80043b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004282:	4313      	orrs	r3, r2
 8004284:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b00      	cmp	r3, #0
 8004290:	d040      	beq.n	8004314 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d107      	bne.n	80042aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800429a:	4b47      	ldr	r3, [pc, #284]	@ (80043b8 <HAL_RCC_ClockConfig+0x1c4>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d115      	bne.n	80042d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e07f      	b.n	80043aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d107      	bne.n	80042c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042b2:	4b41      	ldr	r3, [pc, #260]	@ (80043b8 <HAL_RCC_ClockConfig+0x1c4>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d109      	bne.n	80042d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e073      	b.n	80043aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042c2:	4b3d      	ldr	r3, [pc, #244]	@ (80043b8 <HAL_RCC_ClockConfig+0x1c4>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e06b      	b.n	80043aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042d2:	4b39      	ldr	r3, [pc, #228]	@ (80043b8 <HAL_RCC_ClockConfig+0x1c4>)
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f023 0203 	bic.w	r2, r3, #3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	4936      	ldr	r1, [pc, #216]	@ (80043b8 <HAL_RCC_ClockConfig+0x1c4>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042e4:	f7fc fb7a 	bl	80009dc <HAL_GetTick>
 80042e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ea:	e00a      	b.n	8004302 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042ec:	f7fc fb76 	bl	80009dc <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e053      	b.n	80043aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004302:	4b2d      	ldr	r3, [pc, #180]	@ (80043b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f003 020c 	and.w	r2, r3, #12
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	429a      	cmp	r2, r3
 8004312:	d1eb      	bne.n	80042ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004314:	4b27      	ldr	r3, [pc, #156]	@ (80043b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0307 	and.w	r3, r3, #7
 800431c:	683a      	ldr	r2, [r7, #0]
 800431e:	429a      	cmp	r2, r3
 8004320:	d210      	bcs.n	8004344 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004322:	4b24      	ldr	r3, [pc, #144]	@ (80043b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f023 0207 	bic.w	r2, r3, #7
 800432a:	4922      	ldr	r1, [pc, #136]	@ (80043b4 <HAL_RCC_ClockConfig+0x1c0>)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	4313      	orrs	r3, r2
 8004330:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004332:	4b20      	ldr	r3, [pc, #128]	@ (80043b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0307 	and.w	r3, r3, #7
 800433a:	683a      	ldr	r2, [r7, #0]
 800433c:	429a      	cmp	r2, r3
 800433e:	d001      	beq.n	8004344 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e032      	b.n	80043aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0304 	and.w	r3, r3, #4
 800434c:	2b00      	cmp	r3, #0
 800434e:	d008      	beq.n	8004362 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004350:	4b19      	ldr	r3, [pc, #100]	@ (80043b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	4916      	ldr	r1, [pc, #88]	@ (80043b8 <HAL_RCC_ClockConfig+0x1c4>)
 800435e:	4313      	orrs	r3, r2
 8004360:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0308 	and.w	r3, r3, #8
 800436a:	2b00      	cmp	r3, #0
 800436c:	d009      	beq.n	8004382 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800436e:	4b12      	ldr	r3, [pc, #72]	@ (80043b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	00db      	lsls	r3, r3, #3
 800437c:	490e      	ldr	r1, [pc, #56]	@ (80043b8 <HAL_RCC_ClockConfig+0x1c4>)
 800437e:	4313      	orrs	r3, r2
 8004380:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004382:	f000 f821 	bl	80043c8 <HAL_RCC_GetSysClockFreq>
 8004386:	4602      	mov	r2, r0
 8004388:	4b0b      	ldr	r3, [pc, #44]	@ (80043b8 <HAL_RCC_ClockConfig+0x1c4>)
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	091b      	lsrs	r3, r3, #4
 800438e:	f003 030f 	and.w	r3, r3, #15
 8004392:	490a      	ldr	r1, [pc, #40]	@ (80043bc <HAL_RCC_ClockConfig+0x1c8>)
 8004394:	5ccb      	ldrb	r3, [r1, r3]
 8004396:	fa22 f303 	lsr.w	r3, r2, r3
 800439a:	4a09      	ldr	r2, [pc, #36]	@ (80043c0 <HAL_RCC_ClockConfig+0x1cc>)
 800439c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800439e:	4b09      	ldr	r3, [pc, #36]	@ (80043c4 <HAL_RCC_ClockConfig+0x1d0>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7fc fad8 	bl	8000958 <HAL_InitTick>

  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	40022000 	.word	0x40022000
 80043b8:	40021000 	.word	0x40021000
 80043bc:	0800983c 	.word	0x0800983c
 80043c0:	20000004 	.word	0x20000004
 80043c4:	20000008 	.word	0x20000008

080043c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b087      	sub	sp, #28
 80043cc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043ce:	2300      	movs	r3, #0
 80043d0:	60fb      	str	r3, [r7, #12]
 80043d2:	2300      	movs	r3, #0
 80043d4:	60bb      	str	r3, [r7, #8]
 80043d6:	2300      	movs	r3, #0
 80043d8:	617b      	str	r3, [r7, #20]
 80043da:	2300      	movs	r3, #0
 80043dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80043de:	2300      	movs	r3, #0
 80043e0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80043e2:	4b1e      	ldr	r3, [pc, #120]	@ (800445c <HAL_RCC_GetSysClockFreq+0x94>)
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f003 030c 	and.w	r3, r3, #12
 80043ee:	2b04      	cmp	r3, #4
 80043f0:	d002      	beq.n	80043f8 <HAL_RCC_GetSysClockFreq+0x30>
 80043f2:	2b08      	cmp	r3, #8
 80043f4:	d003      	beq.n	80043fe <HAL_RCC_GetSysClockFreq+0x36>
 80043f6:	e027      	b.n	8004448 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043f8:	4b19      	ldr	r3, [pc, #100]	@ (8004460 <HAL_RCC_GetSysClockFreq+0x98>)
 80043fa:	613b      	str	r3, [r7, #16]
      break;
 80043fc:	e027      	b.n	800444e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	0c9b      	lsrs	r3, r3, #18
 8004402:	f003 030f 	and.w	r3, r3, #15
 8004406:	4a17      	ldr	r2, [pc, #92]	@ (8004464 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004408:	5cd3      	ldrb	r3, [r2, r3]
 800440a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d010      	beq.n	8004438 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004416:	4b11      	ldr	r3, [pc, #68]	@ (800445c <HAL_RCC_GetSysClockFreq+0x94>)
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	0c5b      	lsrs	r3, r3, #17
 800441c:	f003 0301 	and.w	r3, r3, #1
 8004420:	4a11      	ldr	r2, [pc, #68]	@ (8004468 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004422:	5cd3      	ldrb	r3, [r2, r3]
 8004424:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a0d      	ldr	r2, [pc, #52]	@ (8004460 <HAL_RCC_GetSysClockFreq+0x98>)
 800442a:	fb03 f202 	mul.w	r2, r3, r2
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	fbb2 f3f3 	udiv	r3, r2, r3
 8004434:	617b      	str	r3, [r7, #20]
 8004436:	e004      	b.n	8004442 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a0c      	ldr	r2, [pc, #48]	@ (800446c <HAL_RCC_GetSysClockFreq+0xa4>)
 800443c:	fb02 f303 	mul.w	r3, r2, r3
 8004440:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	613b      	str	r3, [r7, #16]
      break;
 8004446:	e002      	b.n	800444e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004448:	4b05      	ldr	r3, [pc, #20]	@ (8004460 <HAL_RCC_GetSysClockFreq+0x98>)
 800444a:	613b      	str	r3, [r7, #16]
      break;
 800444c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800444e:	693b      	ldr	r3, [r7, #16]
}
 8004450:	4618      	mov	r0, r3
 8004452:	371c      	adds	r7, #28
 8004454:	46bd      	mov	sp, r7
 8004456:	bc80      	pop	{r7}
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	40021000 	.word	0x40021000
 8004460:	007a1200 	.word	0x007a1200
 8004464:	08009854 	.word	0x08009854
 8004468:	08009864 	.word	0x08009864
 800446c:	003d0900 	.word	0x003d0900

08004470 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004470:	b480      	push	{r7}
 8004472:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004474:	4b02      	ldr	r3, [pc, #8]	@ (8004480 <HAL_RCC_GetHCLKFreq+0x10>)
 8004476:	681b      	ldr	r3, [r3, #0]
}
 8004478:	4618      	mov	r0, r3
 800447a:	46bd      	mov	sp, r7
 800447c:	bc80      	pop	{r7}
 800447e:	4770      	bx	lr
 8004480:	20000004 	.word	0x20000004

08004484 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004488:	f7ff fff2 	bl	8004470 <HAL_RCC_GetHCLKFreq>
 800448c:	4602      	mov	r2, r0
 800448e:	4b05      	ldr	r3, [pc, #20]	@ (80044a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	0a1b      	lsrs	r3, r3, #8
 8004494:	f003 0307 	and.w	r3, r3, #7
 8004498:	4903      	ldr	r1, [pc, #12]	@ (80044a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800449a:	5ccb      	ldrb	r3, [r1, r3]
 800449c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	40021000 	.word	0x40021000
 80044a8:	0800984c 	.word	0x0800984c

080044ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80044b4:	4b0a      	ldr	r3, [pc, #40]	@ (80044e0 <RCC_Delay+0x34>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a0a      	ldr	r2, [pc, #40]	@ (80044e4 <RCC_Delay+0x38>)
 80044ba:	fba2 2303 	umull	r2, r3, r2, r3
 80044be:	0a5b      	lsrs	r3, r3, #9
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	fb02 f303 	mul.w	r3, r2, r3
 80044c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80044c8:	bf00      	nop
  }
  while (Delay --);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	1e5a      	subs	r2, r3, #1
 80044ce:	60fa      	str	r2, [r7, #12]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1f9      	bne.n	80044c8 <RCC_Delay+0x1c>
}
 80044d4:	bf00      	nop
 80044d6:	bf00      	nop
 80044d8:	3714      	adds	r7, #20
 80044da:	46bd      	mov	sp, r7
 80044dc:	bc80      	pop	{r7}
 80044de:	4770      	bx	lr
 80044e0:	20000004 	.word	0x20000004
 80044e4:	10624dd3 	.word	0x10624dd3

080044e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b086      	sub	sp, #24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80044f0:	2300      	movs	r3, #0
 80044f2:	613b      	str	r3, [r7, #16]
 80044f4:	2300      	movs	r3, #0
 80044f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0301 	and.w	r3, r3, #1
 8004500:	2b00      	cmp	r3, #0
 8004502:	d07d      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004504:	2300      	movs	r3, #0
 8004506:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004508:	4b4f      	ldr	r3, [pc, #316]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800450a:	69db      	ldr	r3, [r3, #28]
 800450c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10d      	bne.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004514:	4b4c      	ldr	r3, [pc, #304]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004516:	69db      	ldr	r3, [r3, #28]
 8004518:	4a4b      	ldr	r2, [pc, #300]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800451a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800451e:	61d3      	str	r3, [r2, #28]
 8004520:	4b49      	ldr	r3, [pc, #292]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004522:	69db      	ldr	r3, [r3, #28]
 8004524:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004528:	60bb      	str	r3, [r7, #8]
 800452a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800452c:	2301      	movs	r3, #1
 800452e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004530:	4b46      	ldr	r3, [pc, #280]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004538:	2b00      	cmp	r3, #0
 800453a:	d118      	bne.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800453c:	4b43      	ldr	r3, [pc, #268]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a42      	ldr	r2, [pc, #264]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004542:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004546:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004548:	f7fc fa48 	bl	80009dc <HAL_GetTick>
 800454c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800454e:	e008      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004550:	f7fc fa44 	bl	80009dc <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b64      	cmp	r3, #100	@ 0x64
 800455c:	d901      	bls.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e06d      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004562:	4b3a      	ldr	r3, [pc, #232]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800456a:	2b00      	cmp	r3, #0
 800456c:	d0f0      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800456e:	4b36      	ldr	r3, [pc, #216]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004576:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d02e      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	429a      	cmp	r2, r3
 800458a:	d027      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800458c:	4b2e      	ldr	r3, [pc, #184]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800458e:	6a1b      	ldr	r3, [r3, #32]
 8004590:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004594:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004596:	4b2e      	ldr	r3, [pc, #184]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004598:	2201      	movs	r2, #1
 800459a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800459c:	4b2c      	ldr	r3, [pc, #176]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800459e:	2200      	movs	r2, #0
 80045a0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80045a2:	4a29      	ldr	r2, [pc, #164]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d014      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b2:	f7fc fa13 	bl	80009dc <HAL_GetTick>
 80045b6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045b8:	e00a      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ba:	f7fc fa0f 	bl	80009dc <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d901      	bls.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e036      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d0:	4b1d      	ldr	r3, [pc, #116]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d0ee      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045dc:	4b1a      	ldr	r3, [pc, #104]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	4917      	ldr	r1, [pc, #92]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80045ee:	7dfb      	ldrb	r3, [r7, #23]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d105      	bne.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045f4:	4b14      	ldr	r3, [pc, #80]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045f6:	69db      	ldr	r3, [r3, #28]
 80045f8:	4a13      	ldr	r2, [pc, #76]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045fe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d008      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800460c:	4b0e      	ldr	r3, [pc, #56]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	490b      	ldr	r1, [pc, #44]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800461a:	4313      	orrs	r3, r2
 800461c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0310 	and.w	r3, r3, #16
 8004626:	2b00      	cmp	r3, #0
 8004628:	d008      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800462a:	4b07      	ldr	r3, [pc, #28]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	4904      	ldr	r1, [pc, #16]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004638:	4313      	orrs	r3, r2
 800463a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3718      	adds	r7, #24
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	40021000 	.word	0x40021000
 800464c:	40007000 	.word	0x40007000
 8004650:	42420440 	.word	0x42420440

08004654 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	4638      	mov	r0, r7
 800465e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004662:	2300      	movs	r3, #0
}
 8004664:	4618      	mov	r0, r3
 8004666:	3714      	adds	r7, #20
 8004668:	46bd      	mov	sp, r7
 800466a:	bc80      	pop	{r7}
 800466c:	4770      	bx	lr

0800466e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800466e:	b480      	push	{r7}
 8004670:	b085      	sub	sp, #20
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800467e:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004682:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	b29a      	uxth	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3714      	adds	r7, #20
 8004694:	46bd      	mov	sp, r7
 8004696:	bc80      	pop	{r7}
 8004698:	4770      	bx	lr

0800469a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800469a:	b480      	push	{r7}
 800469c:	b085      	sub	sp, #20
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80046a2:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80046a6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	43db      	mvns	r3, r3
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	4013      	ands	r3, r2
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3714      	adds	r7, #20
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bc80      	pop	{r7}
 80046cc:	4770      	bx	lr

080046ce <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b083      	sub	sp, #12
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
 80046d6:	460b      	mov	r3, r1
 80046d8:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	4618      	mov	r0, r3
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bc80      	pop	{r7}
 80046e4:	4770      	bx	lr

080046e6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80046e6:	b480      	push	{r7}
 80046e8:	b085      	sub	sp, #20
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	60f8      	str	r0, [r7, #12]
 80046ee:	4638      	mov	r0, r7
 80046f0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3714      	adds	r7, #20
 800471a:	46bd      	mov	sp, r7
 800471c:	bc80      	pop	{r7}
 800471e:	4770      	bx	lr

08004720 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004720:	b480      	push	{r7}
 8004722:	b09d      	sub	sp, #116	@ 0x74
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800472a:	2300      	movs	r3, #0
 800472c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	4413      	add	r3, r2
 800473a:	881b      	ldrh	r3, [r3, #0]
 800473c:	b29b      	uxth	r3, r3
 800473e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8004742:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004746:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	78db      	ldrb	r3, [r3, #3]
 800474e:	2b03      	cmp	r3, #3
 8004750:	d81f      	bhi.n	8004792 <USB_ActivateEndpoint+0x72>
 8004752:	a201      	add	r2, pc, #4	@ (adr r2, 8004758 <USB_ActivateEndpoint+0x38>)
 8004754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004758:	08004769 	.word	0x08004769
 800475c:	08004785 	.word	0x08004785
 8004760:	0800479b 	.word	0x0800479b
 8004764:	08004777 	.word	0x08004777
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004768:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800476c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004770:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004774:	e012      	b.n	800479c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004776:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800477a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800477e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004782:	e00b      	b.n	800479c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004784:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004788:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800478c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004790:	e004      	b.n	800479c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8004798:	e000      	b.n	800479c <USB_ActivateEndpoint+0x7c>
      break;
 800479a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	441a      	add	r2, r3
 80047a6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80047aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	4413      	add	r3, r2
 80047c8:	881b      	ldrh	r3, [r3, #0]
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	7812      	ldrb	r2, [r2, #0]
 80047da:	4313      	orrs	r3, r2
 80047dc:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	441a      	add	r2, r3
 80047ea:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80047ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047fe:	b29b      	uxth	r3, r3
 8004800:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	7b1b      	ldrb	r3, [r3, #12]
 8004806:	2b00      	cmp	r3, #0
 8004808:	f040 8178 	bne.w	8004afc <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	785b      	ldrb	r3, [r3, #1]
 8004810:	2b00      	cmp	r3, #0
 8004812:	f000 8084 	beq.w	800491e <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	61bb      	str	r3, [r7, #24]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004820:	b29b      	uxth	r3, r3
 8004822:	461a      	mov	r2, r3
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	4413      	add	r3, r2
 8004828:	61bb      	str	r3, [r7, #24]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	011a      	lsls	r2, r3, #4
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	4413      	add	r3, r2
 8004834:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004838:	617b      	str	r3, [r7, #20]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	88db      	ldrh	r3, [r3, #6]
 800483e:	085b      	lsrs	r3, r3, #1
 8004840:	b29b      	uxth	r3, r3
 8004842:	005b      	lsls	r3, r3, #1
 8004844:	b29a      	uxth	r2, r3
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	4413      	add	r3, r2
 8004854:	881b      	ldrh	r3, [r3, #0]
 8004856:	827b      	strh	r3, [r7, #18]
 8004858:	8a7b      	ldrh	r3, [r7, #18]
 800485a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800485e:	2b00      	cmp	r3, #0
 8004860:	d01b      	beq.n	800489a <USB_ActivateEndpoint+0x17a>
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4413      	add	r3, r2
 800486c:	881b      	ldrh	r3, [r3, #0]
 800486e:	b29b      	uxth	r3, r3
 8004870:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004874:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004878:	823b      	strh	r3, [r7, #16]
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	441a      	add	r2, r3
 8004884:	8a3b      	ldrh	r3, [r7, #16]
 8004886:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800488a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800488e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004892:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004896:	b29b      	uxth	r3, r3
 8004898:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	78db      	ldrb	r3, [r3, #3]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d020      	beq.n	80048e4 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4413      	add	r3, r2
 80048ac:	881b      	ldrh	r3, [r3, #0]
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048b8:	81bb      	strh	r3, [r7, #12]
 80048ba:	89bb      	ldrh	r3, [r7, #12]
 80048bc:	f083 0320 	eor.w	r3, r3, #32
 80048c0:	81bb      	strh	r3, [r7, #12]
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	441a      	add	r2, r3
 80048cc:	89bb      	ldrh	r3, [r7, #12]
 80048ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048de:	b29b      	uxth	r3, r3
 80048e0:	8013      	strh	r3, [r2, #0]
 80048e2:	e2d5      	b.n	8004e90 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	4413      	add	r3, r2
 80048ee:	881b      	ldrh	r3, [r3, #0]
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048fa:	81fb      	strh	r3, [r7, #14]
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	441a      	add	r2, r3
 8004906:	89fb      	ldrh	r3, [r7, #14]
 8004908:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800490c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004910:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004914:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004918:	b29b      	uxth	r3, r3
 800491a:	8013      	strh	r3, [r2, #0]
 800491c:	e2b8      	b.n	8004e90 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	633b      	str	r3, [r7, #48]	@ 0x30
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004928:	b29b      	uxth	r3, r3
 800492a:	461a      	mov	r2, r3
 800492c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800492e:	4413      	add	r3, r2
 8004930:	633b      	str	r3, [r7, #48]	@ 0x30
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	011a      	lsls	r2, r3, #4
 8004938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800493a:	4413      	add	r3, r2
 800493c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004940:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	88db      	ldrh	r3, [r3, #6]
 8004946:	085b      	lsrs	r3, r3, #1
 8004948:	b29b      	uxth	r3, r3
 800494a:	005b      	lsls	r3, r3, #1
 800494c:	b29a      	uxth	r2, r3
 800494e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004950:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800495c:	b29b      	uxth	r3, r3
 800495e:	461a      	mov	r2, r3
 8004960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004962:	4413      	add	r3, r2
 8004964:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	011a      	lsls	r2, r3, #4
 800496c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800496e:	4413      	add	r3, r2
 8004970:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004974:	627b      	str	r3, [r7, #36]	@ 0x24
 8004976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004978:	881b      	ldrh	r3, [r3, #0]
 800497a:	b29b      	uxth	r3, r3
 800497c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004980:	b29a      	uxth	r2, r3
 8004982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004984:	801a      	strh	r2, [r3, #0]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	2b3e      	cmp	r3, #62	@ 0x3e
 800498c:	d91d      	bls.n	80049ca <USB_ActivateEndpoint+0x2aa>
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	095b      	lsrs	r3, r3, #5
 8004994:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	f003 031f 	and.w	r3, r3, #31
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d102      	bne.n	80049a8 <USB_ActivateEndpoint+0x288>
 80049a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80049a4:	3b01      	subs	r3, #1
 80049a6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049aa:	881b      	ldrh	r3, [r3, #0]
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	029b      	lsls	r3, r3, #10
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	4313      	orrs	r3, r2
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c6:	801a      	strh	r2, [r3, #0]
 80049c8:	e026      	b.n	8004a18 <USB_ActivateEndpoint+0x2f8>
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d10a      	bne.n	80049e8 <USB_ActivateEndpoint+0x2c8>
 80049d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d4:	881b      	ldrh	r3, [r3, #0]
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e4:	801a      	strh	r2, [r3, #0]
 80049e6:	e017      	b.n	8004a18 <USB_ActivateEndpoint+0x2f8>
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	085b      	lsrs	r3, r3, #1
 80049ee:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d002      	beq.n	8004a02 <USB_ActivateEndpoint+0x2e2>
 80049fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80049fe:	3301      	adds	r3, #1
 8004a00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a04:	881b      	ldrh	r3, [r3, #0]
 8004a06:	b29a      	uxth	r2, r3
 8004a08:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	029b      	lsls	r3, r3, #10
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	4313      	orrs	r3, r2
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a16:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	4413      	add	r3, r2
 8004a22:	881b      	ldrh	r3, [r3, #0]
 8004a24:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004a26:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004a28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d01b      	beq.n	8004a68 <USB_ActivateEndpoint+0x348>
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	4413      	add	r3, r2
 8004a3a:	881b      	ldrh	r3, [r3, #0]
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a46:	843b      	strh	r3, [r7, #32]
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	441a      	add	r2, r3
 8004a52:	8c3b      	ldrh	r3, [r7, #32]
 8004a54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a5c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d124      	bne.n	8004aba <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	4413      	add	r3, r2
 8004a7a:	881b      	ldrh	r3, [r3, #0]
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a86:	83bb      	strh	r3, [r7, #28]
 8004a88:	8bbb      	ldrh	r3, [r7, #28]
 8004a8a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004a8e:	83bb      	strh	r3, [r7, #28]
 8004a90:	8bbb      	ldrh	r3, [r7, #28]
 8004a92:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004a96:	83bb      	strh	r3, [r7, #28]
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	441a      	add	r2, r3
 8004aa2:	8bbb      	ldrh	r3, [r7, #28]
 8004aa4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004aa8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004aac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ab0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	8013      	strh	r3, [r2, #0]
 8004ab8:	e1ea      	b.n	8004e90 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4413      	add	r3, r2
 8004ac4:	881b      	ldrh	r3, [r3, #0]
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004acc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ad0:	83fb      	strh	r3, [r7, #30]
 8004ad2:	8bfb      	ldrh	r3, [r7, #30]
 8004ad4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004ad8:	83fb      	strh	r3, [r7, #30]
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	441a      	add	r2, r3
 8004ae4:	8bfb      	ldrh	r3, [r7, #30]
 8004ae6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004aea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004aee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004af2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	8013      	strh	r3, [r2, #0]
 8004afa:	e1c9      	b.n	8004e90 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	78db      	ldrb	r3, [r3, #3]
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d11e      	bne.n	8004b42 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	4413      	add	r3, r2
 8004b0e:	881b      	ldrh	r3, [r3, #0]
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b1a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	441a      	add	r2, r3
 8004b28:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004b2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b34:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004b38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	8013      	strh	r3, [r2, #0]
 8004b40:	e01d      	b.n	8004b7e <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	4413      	add	r3, r2
 8004b4c:	881b      	ldrh	r3, [r3, #0]
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004b54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b58:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	441a      	add	r2, r3
 8004b66:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8004b6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b8e:	4413      	add	r3, r2
 8004b90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	011a      	lsls	r2, r3, #4
 8004b98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b9a:	4413      	add	r3, r2
 8004b9c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004ba0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	891b      	ldrh	r3, [r3, #8]
 8004ba6:	085b      	lsrs	r3, r3, #1
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	005b      	lsls	r3, r3, #1
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004bb0:	801a      	strh	r2, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	657b      	str	r3, [r7, #84]	@ 0x54
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bc2:	4413      	add	r3, r2
 8004bc4:	657b      	str	r3, [r7, #84]	@ 0x54
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	011a      	lsls	r2, r3, #4
 8004bcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bce:	4413      	add	r3, r2
 8004bd0:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004bd4:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	895b      	ldrh	r3, [r3, #10]
 8004bda:	085b      	lsrs	r3, r3, #1
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	005b      	lsls	r3, r3, #1
 8004be0:	b29a      	uxth	r2, r3
 8004be2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004be4:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	785b      	ldrb	r3, [r3, #1]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f040 8093 	bne.w	8004d16 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	4413      	add	r3, r2
 8004bfa:	881b      	ldrh	r3, [r3, #0]
 8004bfc:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8004c00:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004c04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d01b      	beq.n	8004c44 <USB_ActivateEndpoint+0x524>
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4413      	add	r3, r2
 8004c16:	881b      	ldrh	r3, [r3, #0]
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c22:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	441a      	add	r2, r3
 8004c2e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004c30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c38:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	4413      	add	r3, r2
 8004c4e:	881b      	ldrh	r3, [r3, #0]
 8004c50:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8004c52:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004c54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d01b      	beq.n	8004c94 <USB_ActivateEndpoint+0x574>
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	4413      	add	r3, r2
 8004c66:	881b      	ldrh	r3, [r3, #0]
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c72:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	441a      	add	r2, r3
 8004c7e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004c80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c8c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	4413      	add	r3, r2
 8004c9e:	881b      	ldrh	r3, [r3, #0]
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ca6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004caa:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004cac:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004cae:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004cb2:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004cb4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004cb6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004cba:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	441a      	add	r2, r3
 8004cc6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004cc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ccc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	4413      	add	r3, r2
 8004ce6:	881b      	ldrh	r3, [r3, #0]
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cf2:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	441a      	add	r2, r3
 8004cfe:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004d00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	8013      	strh	r3, [r2, #0]
 8004d14:	e0bc      	b.n	8004e90 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	4413      	add	r3, r2
 8004d20:	881b      	ldrh	r3, [r3, #0]
 8004d22:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004d26:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004d2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d01d      	beq.n	8004d6e <USB_ActivateEndpoint+0x64e>
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	4413      	add	r3, r2
 8004d3c:	881b      	ldrh	r3, [r3, #0]
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d48:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	441a      	add	r2, r3
 8004d56:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004d5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d62:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4413      	add	r3, r2
 8004d78:	881b      	ldrh	r3, [r3, #0]
 8004d7a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004d7e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004d82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d01d      	beq.n	8004dc6 <USB_ActivateEndpoint+0x6a6>
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	4413      	add	r3, r2
 8004d94:	881b      	ldrh	r3, [r3, #0]
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004da0:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	441a      	add	r2, r3
 8004dae:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004db2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004db6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004dba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004dbe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	78db      	ldrb	r3, [r3, #3]
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d024      	beq.n	8004e18 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	4413      	add	r3, r2
 8004dd8:	881b      	ldrh	r3, [r3, #0]
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004de0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004de4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004de8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004dec:	f083 0320 	eor.w	r3, r3, #32
 8004df0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	441a      	add	r2, r3
 8004dfe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004e02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	8013      	strh	r3, [r2, #0]
 8004e16:	e01d      	b.n	8004e54 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	881b      	ldrh	r3, [r3, #0]
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e2e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	441a      	add	r2, r3
 8004e3c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004e40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	4413      	add	r3, r2
 8004e5e:	881b      	ldrh	r3, [r3, #0]
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e6a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	441a      	add	r2, r3
 8004e78:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004e7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004e90:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3774      	adds	r7, #116	@ 0x74
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bc80      	pop	{r7}
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop

08004ea0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b08d      	sub	sp, #52	@ 0x34
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	7b1b      	ldrb	r3, [r3, #12]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	f040 808e 	bne.w	8004fd0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	785b      	ldrb	r3, [r3, #1]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d044      	beq.n	8004f46 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4413      	add	r3, r2
 8004ec6:	881b      	ldrh	r3, [r3, #0]
 8004ec8:	81bb      	strh	r3, [r7, #12]
 8004eca:	89bb      	ldrh	r3, [r7, #12]
 8004ecc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d01b      	beq.n	8004f0c <USB_DeactivateEndpoint+0x6c>
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	4413      	add	r3, r2
 8004ede:	881b      	ldrh	r3, [r3, #0]
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ee6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eea:	817b      	strh	r3, [r7, #10]
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	441a      	add	r2, r3
 8004ef6:	897b      	ldrh	r3, [r7, #10]
 8004ef8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004efc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f04:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	4413      	add	r3, r2
 8004f16:	881b      	ldrh	r3, [r3, #0]
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f22:	813b      	strh	r3, [r7, #8]
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	441a      	add	r2, r3
 8004f2e:	893b      	ldrh	r3, [r7, #8]
 8004f30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	8013      	strh	r3, [r2, #0]
 8004f44:	e192      	b.n	800526c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	4413      	add	r3, r2
 8004f50:	881b      	ldrh	r3, [r3, #0]
 8004f52:	827b      	strh	r3, [r7, #18]
 8004f54:	8a7b      	ldrh	r3, [r7, #18]
 8004f56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d01b      	beq.n	8004f96 <USB_DeactivateEndpoint+0xf6>
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	4413      	add	r3, r2
 8004f68:	881b      	ldrh	r3, [r3, #0]
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f74:	823b      	strh	r3, [r7, #16]
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	441a      	add	r2, r3
 8004f80:	8a3b      	ldrh	r3, [r7, #16]
 8004f82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f8a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004f8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	4413      	add	r3, r2
 8004fa0:	881b      	ldrh	r3, [r3, #0]
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004fa8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fac:	81fb      	strh	r3, [r7, #14]
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	441a      	add	r2, r3
 8004fb8:	89fb      	ldrh	r3, [r7, #14]
 8004fba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	8013      	strh	r3, [r2, #0]
 8004fce:	e14d      	b.n	800526c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	785b      	ldrb	r3, [r3, #1]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f040 80a5 	bne.w	8005124 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	4413      	add	r3, r2
 8004fe4:	881b      	ldrh	r3, [r3, #0]
 8004fe6:	843b      	strh	r3, [r7, #32]
 8004fe8:	8c3b      	ldrh	r3, [r7, #32]
 8004fea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d01b      	beq.n	800502a <USB_DeactivateEndpoint+0x18a>
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	4413      	add	r3, r2
 8004ffc:	881b      	ldrh	r3, [r3, #0]
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005004:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005008:	83fb      	strh	r3, [r7, #30]
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	441a      	add	r2, r3
 8005014:	8bfb      	ldrh	r3, [r7, #30]
 8005016:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800501a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800501e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005022:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005026:	b29b      	uxth	r3, r3
 8005028:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	4413      	add	r3, r2
 8005034:	881b      	ldrh	r3, [r3, #0]
 8005036:	83bb      	strh	r3, [r7, #28]
 8005038:	8bbb      	ldrh	r3, [r7, #28]
 800503a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800503e:	2b00      	cmp	r3, #0
 8005040:	d01b      	beq.n	800507a <USB_DeactivateEndpoint+0x1da>
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	4413      	add	r3, r2
 800504c:	881b      	ldrh	r3, [r3, #0]
 800504e:	b29b      	uxth	r3, r3
 8005050:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005054:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005058:	837b      	strh	r3, [r7, #26]
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	441a      	add	r2, r3
 8005064:	8b7b      	ldrh	r3, [r7, #26]
 8005066:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800506a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800506e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005072:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005076:	b29b      	uxth	r3, r3
 8005078:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	4413      	add	r3, r2
 8005084:	881b      	ldrh	r3, [r3, #0]
 8005086:	b29b      	uxth	r3, r3
 8005088:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800508c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005090:	833b      	strh	r3, [r7, #24]
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	441a      	add	r2, r3
 800509c:	8b3b      	ldrh	r3, [r7, #24]
 800509e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050aa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4413      	add	r3, r2
 80050bc:	881b      	ldrh	r3, [r3, #0]
 80050be:	b29b      	uxth	r3, r3
 80050c0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80050c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050c8:	82fb      	strh	r3, [r7, #22]
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	441a      	add	r2, r3
 80050d4:	8afb      	ldrh	r3, [r7, #22]
 80050d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	4413      	add	r3, r2
 80050f4:	881b      	ldrh	r3, [r3, #0]
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005100:	82bb      	strh	r3, [r7, #20]
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	441a      	add	r2, r3
 800510c:	8abb      	ldrh	r3, [r7, #20]
 800510e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005112:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005116:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800511a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800511e:	b29b      	uxth	r3, r3
 8005120:	8013      	strh	r3, [r2, #0]
 8005122:	e0a3      	b.n	800526c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	4413      	add	r3, r2
 800512e:	881b      	ldrh	r3, [r3, #0]
 8005130:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005132:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005134:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d01b      	beq.n	8005174 <USB_DeactivateEndpoint+0x2d4>
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	4413      	add	r3, r2
 8005146:	881b      	ldrh	r3, [r3, #0]
 8005148:	b29b      	uxth	r3, r3
 800514a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800514e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005152:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	441a      	add	r2, r3
 800515e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005160:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005164:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005168:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800516c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005170:	b29b      	uxth	r3, r3
 8005172:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	4413      	add	r3, r2
 800517e:	881b      	ldrh	r3, [r3, #0]
 8005180:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005182:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005184:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005188:	2b00      	cmp	r3, #0
 800518a:	d01b      	beq.n	80051c4 <USB_DeactivateEndpoint+0x324>
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	4413      	add	r3, r2
 8005196:	881b      	ldrh	r3, [r3, #0]
 8005198:	b29b      	uxth	r3, r3
 800519a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800519e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051a2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	441a      	add	r2, r3
 80051ae:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80051b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051bc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	4413      	add	r3, r2
 80051ce:	881b      	ldrh	r3, [r3, #0]
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051da:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	441a      	add	r2, r3
 80051e6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80051e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051f0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80051f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	4413      	add	r3, r2
 8005206:	881b      	ldrh	r3, [r3, #0]
 8005208:	b29b      	uxth	r3, r3
 800520a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800520e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005212:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	441a      	add	r2, r3
 800521e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005220:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005224:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005228:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800522c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005230:	b29b      	uxth	r3, r3
 8005232:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	4413      	add	r3, r2
 800523e:	881b      	ldrh	r3, [r3, #0]
 8005240:	b29b      	uxth	r3, r3
 8005242:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005246:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800524a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	441a      	add	r2, r3
 8005256:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005258:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800525c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005260:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005264:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005268:	b29b      	uxth	r3, r3
 800526a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3734      	adds	r7, #52	@ 0x34
 8005272:	46bd      	mov	sp, r7
 8005274:	bc80      	pop	{r7}
 8005276:	4770      	bx	lr

08005278 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b0c2      	sub	sp, #264	@ 0x108
 800527c:	af00      	add	r7, sp, #0
 800527e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005282:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005286:	6018      	str	r0, [r3, #0]
 8005288:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800528c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005290:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005292:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005296:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	785b      	ldrb	r3, [r3, #1]
 800529e:	2b01      	cmp	r3, #1
 80052a0:	f040 86b7 	bne.w	8006012 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80052a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	699a      	ldr	r2, [r3, #24]
 80052b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d908      	bls.n	80052d2 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80052c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80052d0:	e007      	b.n	80052e2 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80052d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80052e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	7b1b      	ldrb	r3, [r3, #12]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d13a      	bne.n	8005368 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80052f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	6959      	ldr	r1, [r3, #20]
 80052fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005302:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	88da      	ldrh	r2, [r3, #6]
 800530a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800530e:	b29b      	uxth	r3, r3
 8005310:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005314:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005318:	6800      	ldr	r0, [r0, #0]
 800531a:	f001 fc9c 	bl	8006c56 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800531e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005322:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	613b      	str	r3, [r7, #16]
 800532a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800532e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005338:	b29b      	uxth	r3, r3
 800533a:	461a      	mov	r2, r3
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	4413      	add	r3, r2
 8005340:	613b      	str	r3, [r7, #16]
 8005342:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005346:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	011a      	lsls	r2, r3, #4
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	4413      	add	r3, r2
 8005354:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005358:	60fb      	str	r3, [r7, #12]
 800535a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800535e:	b29a      	uxth	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	801a      	strh	r2, [r3, #0]
 8005364:	f000 be1f 	b.w	8005fa6 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005368:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800536c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	78db      	ldrb	r3, [r3, #3]
 8005374:	2b02      	cmp	r3, #2
 8005376:	f040 8462 	bne.w	8005c3e <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800537a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800537e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	6a1a      	ldr	r2, [r3, #32]
 8005386:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800538a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	429a      	cmp	r2, r3
 8005394:	f240 83df 	bls.w	8005b56 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005398:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800539c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	4413      	add	r3, r2
 80053b2:	881b      	ldrh	r3, [r3, #0]
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053be:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80053c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	441a      	add	r2, r3
 80053dc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80053e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053e8:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80053ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80053f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	6a1a      	ldr	r2, [r3, #32]
 8005400:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005404:	1ad2      	subs	r2, r2, r3
 8005406:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800540a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005412:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005416:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005420:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4413      	add	r3, r2
 800542c:	881b      	ldrh	r3, [r3, #0]
 800542e:	b29b      	uxth	r3, r3
 8005430:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005434:	2b00      	cmp	r3, #0
 8005436:	f000 81c7 	beq.w	80057c8 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800543a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800543e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	633b      	str	r3, [r7, #48]	@ 0x30
 8005446:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800544a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	785b      	ldrb	r3, [r3, #1]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d177      	bne.n	8005546 <USB_EPStartXfer+0x2ce>
 8005456:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800545a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005462:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005466:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005470:	b29b      	uxth	r3, r3
 8005472:	461a      	mov	r2, r3
 8005474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005476:	4413      	add	r3, r2
 8005478:	62bb      	str	r3, [r7, #40]	@ 0x28
 800547a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800547e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	011a      	lsls	r2, r3, #4
 8005488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800548a:	4413      	add	r3, r2
 800548c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005490:	627b      	str	r3, [r7, #36]	@ 0x24
 8005492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005494:	881b      	ldrh	r3, [r3, #0]
 8005496:	b29b      	uxth	r3, r3
 8005498:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800549c:	b29a      	uxth	r2, r3
 800549e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a0:	801a      	strh	r2, [r3, #0]
 80054a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054a6:	2b3e      	cmp	r3, #62	@ 0x3e
 80054a8:	d921      	bls.n	80054ee <USB_EPStartXfer+0x276>
 80054aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054ae:	095b      	lsrs	r3, r3, #5
 80054b0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80054b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054b8:	f003 031f 	and.w	r3, r3, #31
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d104      	bne.n	80054ca <USB_EPStartXfer+0x252>
 80054c0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80054c4:	3b01      	subs	r3, #1
 80054c6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80054ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054cc:	881b      	ldrh	r3, [r3, #0]
 80054ce:	b29a      	uxth	r2, r3
 80054d0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	029b      	lsls	r3, r3, #10
 80054d8:	b29b      	uxth	r3, r3
 80054da:	4313      	orrs	r3, r2
 80054dc:	b29b      	uxth	r3, r3
 80054de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ea:	801a      	strh	r2, [r3, #0]
 80054ec:	e050      	b.n	8005590 <USB_EPStartXfer+0x318>
 80054ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d10a      	bne.n	800550c <USB_EPStartXfer+0x294>
 80054f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f8:	881b      	ldrh	r3, [r3, #0]
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005500:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005504:	b29a      	uxth	r2, r3
 8005506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005508:	801a      	strh	r2, [r3, #0]
 800550a:	e041      	b.n	8005590 <USB_EPStartXfer+0x318>
 800550c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005510:	085b      	lsrs	r3, r3, #1
 8005512:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005516:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	2b00      	cmp	r3, #0
 8005520:	d004      	beq.n	800552c <USB_EPStartXfer+0x2b4>
 8005522:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005526:	3301      	adds	r3, #1
 8005528:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800552c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800552e:	881b      	ldrh	r3, [r3, #0]
 8005530:	b29a      	uxth	r2, r3
 8005532:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005536:	b29b      	uxth	r3, r3
 8005538:	029b      	lsls	r3, r3, #10
 800553a:	b29b      	uxth	r3, r3
 800553c:	4313      	orrs	r3, r2
 800553e:	b29a      	uxth	r2, r3
 8005540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005542:	801a      	strh	r2, [r3, #0]
 8005544:	e024      	b.n	8005590 <USB_EPStartXfer+0x318>
 8005546:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800554a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	785b      	ldrb	r3, [r3, #1]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d11c      	bne.n	8005590 <USB_EPStartXfer+0x318>
 8005556:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800555a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005564:	b29b      	uxth	r3, r3
 8005566:	461a      	mov	r2, r3
 8005568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800556a:	4413      	add	r3, r2
 800556c:	633b      	str	r3, [r7, #48]	@ 0x30
 800556e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005572:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	011a      	lsls	r2, r3, #4
 800557c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800557e:	4413      	add	r3, r2
 8005580:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005584:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005586:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800558a:	b29a      	uxth	r2, r3
 800558c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800558e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005590:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005594:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	895b      	ldrh	r3, [r3, #10]
 800559c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	6959      	ldr	r1, [r3, #20]
 80055ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80055b6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80055ba:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80055be:	6800      	ldr	r0, [r0, #0]
 80055c0:	f001 fb49 	bl	8006c56 <USB_WritePMA>
            ep->xfer_buff += len;
 80055c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	695a      	ldr	r2, [r3, #20]
 80055d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055d4:	441a      	add	r2, r3
 80055d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80055e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	6a1a      	ldr	r2, [r3, #32]
 80055ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d90f      	bls.n	800561e <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80055fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005602:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6a1a      	ldr	r2, [r3, #32]
 800560a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800560e:	1ad2      	subs	r2, r2, r3
 8005610:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005614:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	621a      	str	r2, [r3, #32]
 800561c:	e00e      	b.n	800563c <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800561e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005622:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800562e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005632:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2200      	movs	r2, #0
 800563a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800563c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005640:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	785b      	ldrb	r3, [r3, #1]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d177      	bne.n	800573c <USB_EPStartXfer+0x4c4>
 800564c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005650:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	61bb      	str	r3, [r7, #24]
 8005658:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800565c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005666:	b29b      	uxth	r3, r3
 8005668:	461a      	mov	r2, r3
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	4413      	add	r3, r2
 800566e:	61bb      	str	r3, [r7, #24]
 8005670:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005674:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	011a      	lsls	r2, r3, #4
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	4413      	add	r3, r2
 8005682:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005686:	617b      	str	r3, [r7, #20]
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	881b      	ldrh	r3, [r3, #0]
 800568c:	b29b      	uxth	r3, r3
 800568e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005692:	b29a      	uxth	r2, r3
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	801a      	strh	r2, [r3, #0]
 8005698:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800569c:	2b3e      	cmp	r3, #62	@ 0x3e
 800569e:	d921      	bls.n	80056e4 <USB_EPStartXfer+0x46c>
 80056a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056a4:	095b      	lsrs	r3, r3, #5
 80056a6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80056aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056ae:	f003 031f 	and.w	r3, r3, #31
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d104      	bne.n	80056c0 <USB_EPStartXfer+0x448>
 80056b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056ba:	3b01      	subs	r3, #1
 80056bc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	881b      	ldrh	r3, [r3, #0]
 80056c4:	b29a      	uxth	r2, r3
 80056c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	029b      	lsls	r3, r3, #10
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	4313      	orrs	r3, r2
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056dc:	b29a      	uxth	r2, r3
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	801a      	strh	r2, [r3, #0]
 80056e2:	e056      	b.n	8005792 <USB_EPStartXfer+0x51a>
 80056e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d10a      	bne.n	8005702 <USB_EPStartXfer+0x48a>
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	881b      	ldrh	r3, [r3, #0]
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056fa:	b29a      	uxth	r2, r3
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	801a      	strh	r2, [r3, #0]
 8005700:	e047      	b.n	8005792 <USB_EPStartXfer+0x51a>
 8005702:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005706:	085b      	lsrs	r3, r3, #1
 8005708:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800570c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005710:	f003 0301 	and.w	r3, r3, #1
 8005714:	2b00      	cmp	r3, #0
 8005716:	d004      	beq.n	8005722 <USB_EPStartXfer+0x4aa>
 8005718:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800571c:	3301      	adds	r3, #1
 800571e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	881b      	ldrh	r3, [r3, #0]
 8005726:	b29a      	uxth	r2, r3
 8005728:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800572c:	b29b      	uxth	r3, r3
 800572e:	029b      	lsls	r3, r3, #10
 8005730:	b29b      	uxth	r3, r3
 8005732:	4313      	orrs	r3, r2
 8005734:	b29a      	uxth	r2, r3
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	801a      	strh	r2, [r3, #0]
 800573a:	e02a      	b.n	8005792 <USB_EPStartXfer+0x51a>
 800573c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005740:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	785b      	ldrb	r3, [r3, #1]
 8005748:	2b01      	cmp	r3, #1
 800574a:	d122      	bne.n	8005792 <USB_EPStartXfer+0x51a>
 800574c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005750:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	623b      	str	r3, [r7, #32]
 8005758:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800575c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005766:	b29b      	uxth	r3, r3
 8005768:	461a      	mov	r2, r3
 800576a:	6a3b      	ldr	r3, [r7, #32]
 800576c:	4413      	add	r3, r2
 800576e:	623b      	str	r3, [r7, #32]
 8005770:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005774:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	011a      	lsls	r2, r3, #4
 800577e:	6a3b      	ldr	r3, [r7, #32]
 8005780:	4413      	add	r3, r2
 8005782:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005786:	61fb      	str	r3, [r7, #28]
 8005788:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800578c:	b29a      	uxth	r2, r3
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005792:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005796:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	891b      	ldrh	r3, [r3, #8]
 800579e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	6959      	ldr	r1, [r3, #20]
 80057ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80057b8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80057bc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80057c0:	6800      	ldr	r0, [r0, #0]
 80057c2:	f001 fa48 	bl	8006c56 <USB_WritePMA>
 80057c6:	e3ee      	b.n	8005fa6 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80057c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	785b      	ldrb	r3, [r3, #1]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d177      	bne.n	80058c8 <USB_EPStartXfer+0x650>
 80057d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	461a      	mov	r2, r3
 80057f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057f8:	4413      	add	r3, r2
 80057fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005800:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	011a      	lsls	r2, r3, #4
 800580a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800580c:	4413      	add	r3, r2
 800580e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005812:	647b      	str	r3, [r7, #68]	@ 0x44
 8005814:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005816:	881b      	ldrh	r3, [r3, #0]
 8005818:	b29b      	uxth	r3, r3
 800581a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800581e:	b29a      	uxth	r2, r3
 8005820:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005822:	801a      	strh	r2, [r3, #0]
 8005824:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005828:	2b3e      	cmp	r3, #62	@ 0x3e
 800582a:	d921      	bls.n	8005870 <USB_EPStartXfer+0x5f8>
 800582c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005830:	095b      	lsrs	r3, r3, #5
 8005832:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005836:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800583a:	f003 031f 	and.w	r3, r3, #31
 800583e:	2b00      	cmp	r3, #0
 8005840:	d104      	bne.n	800584c <USB_EPStartXfer+0x5d4>
 8005842:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005846:	3b01      	subs	r3, #1
 8005848:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800584c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800584e:	881b      	ldrh	r3, [r3, #0]
 8005850:	b29a      	uxth	r2, r3
 8005852:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005856:	b29b      	uxth	r3, r3
 8005858:	029b      	lsls	r3, r3, #10
 800585a:	b29b      	uxth	r3, r3
 800585c:	4313      	orrs	r3, r2
 800585e:	b29b      	uxth	r3, r3
 8005860:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005864:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005868:	b29a      	uxth	r2, r3
 800586a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800586c:	801a      	strh	r2, [r3, #0]
 800586e:	e056      	b.n	800591e <USB_EPStartXfer+0x6a6>
 8005870:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10a      	bne.n	800588e <USB_EPStartXfer+0x616>
 8005878:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800587a:	881b      	ldrh	r3, [r3, #0]
 800587c:	b29b      	uxth	r3, r3
 800587e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005882:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005886:	b29a      	uxth	r2, r3
 8005888:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800588a:	801a      	strh	r2, [r3, #0]
 800588c:	e047      	b.n	800591e <USB_EPStartXfer+0x6a6>
 800588e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005892:	085b      	lsrs	r3, r3, #1
 8005894:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005898:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800589c:	f003 0301 	and.w	r3, r3, #1
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d004      	beq.n	80058ae <USB_EPStartXfer+0x636>
 80058a4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80058a8:	3301      	adds	r3, #1
 80058aa:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80058ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058b0:	881b      	ldrh	r3, [r3, #0]
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	029b      	lsls	r3, r3, #10
 80058bc:	b29b      	uxth	r3, r3
 80058be:	4313      	orrs	r3, r2
 80058c0:	b29a      	uxth	r2, r3
 80058c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058c4:	801a      	strh	r2, [r3, #0]
 80058c6:	e02a      	b.n	800591e <USB_EPStartXfer+0x6a6>
 80058c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	785b      	ldrb	r3, [r3, #1]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d122      	bne.n	800591e <USB_EPStartXfer+0x6a6>
 80058d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80058e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	461a      	mov	r2, r3
 80058f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058f8:	4413      	add	r3, r2
 80058fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80058fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005900:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	011a      	lsls	r2, r3, #4
 800590a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800590c:	4413      	add	r3, r2
 800590e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005912:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005914:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005918:	b29a      	uxth	r2, r3
 800591a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800591c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800591e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005922:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	891b      	ldrh	r3, [r3, #8]
 800592a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800592e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005932:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6959      	ldr	r1, [r3, #20]
 800593a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800593e:	b29b      	uxth	r3, r3
 8005940:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005944:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005948:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800594c:	6800      	ldr	r0, [r0, #0]
 800594e:	f001 f982 	bl	8006c56 <USB_WritePMA>
            ep->xfer_buff += len;
 8005952:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005956:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	695a      	ldr	r2, [r3, #20]
 800595e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005962:	441a      	add	r2, r3
 8005964:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005968:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005970:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005974:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	6a1a      	ldr	r2, [r3, #32]
 800597c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005980:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	429a      	cmp	r2, r3
 800598a:	d90f      	bls.n	80059ac <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800598c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005990:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	6a1a      	ldr	r2, [r3, #32]
 8005998:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800599c:	1ad2      	subs	r2, r2, r3
 800599e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	621a      	str	r2, [r3, #32]
 80059aa:	e00e      	b.n	80059ca <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80059ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	6a1b      	ldr	r3, [r3, #32]
 80059b8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80059bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2200      	movs	r2, #0
 80059c8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80059ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80059d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	785b      	ldrb	r3, [r3, #1]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d177      	bne.n	8005ad6 <USB_EPStartXfer+0x85e>
 80059e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80059f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	461a      	mov	r2, r3
 8005a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a06:	4413      	add	r3, r2
 8005a08:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	011a      	lsls	r2, r3, #4
 8005a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a1a:	4413      	add	r3, r2
 8005a1c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005a20:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a24:	881b      	ldrh	r3, [r3, #0]
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a2c:	b29a      	uxth	r2, r3
 8005a2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a30:	801a      	strh	r2, [r3, #0]
 8005a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a36:	2b3e      	cmp	r3, #62	@ 0x3e
 8005a38:	d921      	bls.n	8005a7e <USB_EPStartXfer+0x806>
 8005a3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a3e:	095b      	lsrs	r3, r3, #5
 8005a40:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a48:	f003 031f 	and.w	r3, r3, #31
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d104      	bne.n	8005a5a <USB_EPStartXfer+0x7e2>
 8005a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a54:	3b01      	subs	r3, #1
 8005a56:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005a5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a5c:	881b      	ldrh	r3, [r3, #0]
 8005a5e:	b29a      	uxth	r2, r3
 8005a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	029b      	lsls	r3, r3, #10
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a76:	b29a      	uxth	r2, r3
 8005a78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a7a:	801a      	strh	r2, [r3, #0]
 8005a7c:	e050      	b.n	8005b20 <USB_EPStartXfer+0x8a8>
 8005a7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d10a      	bne.n	8005a9c <USB_EPStartXfer+0x824>
 8005a86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a88:	881b      	ldrh	r3, [r3, #0]
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a94:	b29a      	uxth	r2, r3
 8005a96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a98:	801a      	strh	r2, [r3, #0]
 8005a9a:	e041      	b.n	8005b20 <USB_EPStartXfer+0x8a8>
 8005a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aa0:	085b      	lsrs	r3, r3, #1
 8005aa2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aaa:	f003 0301 	and.w	r3, r3, #1
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d004      	beq.n	8005abc <USB_EPStartXfer+0x844>
 8005ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005abc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005abe:	881b      	ldrh	r3, [r3, #0]
 8005ac0:	b29a      	uxth	r2, r3
 8005ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	029b      	lsls	r3, r3, #10
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	4313      	orrs	r3, r2
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ad2:	801a      	strh	r2, [r3, #0]
 8005ad4:	e024      	b.n	8005b20 <USB_EPStartXfer+0x8a8>
 8005ad6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ada:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	785b      	ldrb	r3, [r3, #1]
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d11c      	bne.n	8005b20 <USB_EPStartXfer+0x8a8>
 8005ae6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	461a      	mov	r2, r3
 8005af8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005afa:	4413      	add	r3, r2
 8005afc:	643b      	str	r3, [r7, #64]	@ 0x40
 8005afe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	011a      	lsls	r2, r3, #4
 8005b0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b0e:	4413      	add	r3, r2
 8005b10:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b1e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005b20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	895b      	ldrh	r3, [r3, #10]
 8005b2c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	6959      	ldr	r1, [r3, #20]
 8005b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005b46:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005b4a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005b4e:	6800      	ldr	r0, [r0, #0]
 8005b50:	f001 f881 	bl	8006c56 <USB_WritePMA>
 8005b54:	e227      	b.n	8005fa6 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005b56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005b66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	4413      	add	r3, r2
 8005b80:	881b      	ldrh	r3, [r3, #0]
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005b88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b8c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005b90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	441a      	add	r2, r3
 8005baa:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005bae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005bc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005bce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bd2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	461a      	mov	r2, r3
 8005be0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005be2:	4413      	add	r3, r2
 8005be4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005be6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	011a      	lsls	r2, r3, #4
 8005bf4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005bfc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005bfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005c06:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005c08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	891b      	ldrh	r3, [r3, #8]
 8005c14:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	6959      	ldr	r1, [r3, #20]
 8005c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005c2e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005c32:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005c36:	6800      	ldr	r0, [r0, #0]
 8005c38:	f001 f80d 	bl	8006c56 <USB_WritePMA>
 8005c3c:	e1b3      	b.n	8005fa6 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005c3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	6a1a      	ldr	r2, [r3, #32]
 8005c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c4e:	1ad2      	subs	r2, r2, r3
 8005c50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005c5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	4413      	add	r3, r2
 8005c76:	881b      	ldrh	r3, [r3, #0]
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	f000 80c6 	beq.w	8005e10 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005c84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	785b      	ldrb	r3, [r3, #1]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d177      	bne.n	8005d90 <USB_EPStartXfer+0xb18>
 8005ca0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ca4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005cac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005cc0:	4413      	add	r3, r2
 8005cc2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005cc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	011a      	lsls	r2, r3, #4
 8005cd2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005cd4:	4413      	add	r3, r2
 8005cd6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005cda:	667b      	str	r3, [r7, #100]	@ 0x64
 8005cdc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005cde:	881b      	ldrh	r3, [r3, #0]
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ce6:	b29a      	uxth	r2, r3
 8005ce8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005cea:	801a      	strh	r2, [r3, #0]
 8005cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cf0:	2b3e      	cmp	r3, #62	@ 0x3e
 8005cf2:	d921      	bls.n	8005d38 <USB_EPStartXfer+0xac0>
 8005cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cf8:	095b      	lsrs	r3, r3, #5
 8005cfa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d02:	f003 031f 	and.w	r3, r3, #31
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d104      	bne.n	8005d14 <USB_EPStartXfer+0xa9c>
 8005d0a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005d14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d16:	881b      	ldrh	r3, [r3, #0]
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	029b      	lsls	r3, r3, #10
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	4313      	orrs	r3, r2
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d34:	801a      	strh	r2, [r3, #0]
 8005d36:	e050      	b.n	8005dda <USB_EPStartXfer+0xb62>
 8005d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d10a      	bne.n	8005d56 <USB_EPStartXfer+0xade>
 8005d40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d42:	881b      	ldrh	r3, [r3, #0]
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d52:	801a      	strh	r2, [r3, #0]
 8005d54:	e041      	b.n	8005dda <USB_EPStartXfer+0xb62>
 8005d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d5a:	085b      	lsrs	r3, r3, #1
 8005d5c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d64:	f003 0301 	and.w	r3, r3, #1
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d004      	beq.n	8005d76 <USB_EPStartXfer+0xafe>
 8005d6c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005d70:	3301      	adds	r3, #1
 8005d72:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005d76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d78:	881b      	ldrh	r3, [r3, #0]
 8005d7a:	b29a      	uxth	r2, r3
 8005d7c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	029b      	lsls	r3, r3, #10
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	4313      	orrs	r3, r2
 8005d88:	b29a      	uxth	r2, r3
 8005d8a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d8c:	801a      	strh	r2, [r3, #0]
 8005d8e:	e024      	b.n	8005dda <USB_EPStartXfer+0xb62>
 8005d90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	785b      	ldrb	r3, [r3, #1]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d11c      	bne.n	8005dda <USB_EPStartXfer+0xb62>
 8005da0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005da4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	461a      	mov	r2, r3
 8005db2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005db4:	4413      	add	r3, r2
 8005db6:	673b      	str	r3, [r7, #112]	@ 0x70
 8005db8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	011a      	lsls	r2, r3, #4
 8005dc6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005dc8:	4413      	add	r3, r2
 8005dca:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005dce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dd4:	b29a      	uxth	r2, r3
 8005dd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005dd8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005dda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	895b      	ldrh	r3, [r3, #10]
 8005de6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005dea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6959      	ldr	r1, [r3, #20]
 8005df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005e00:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005e04:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005e08:	6800      	ldr	r0, [r0, #0]
 8005e0a:	f000 ff24 	bl	8006c56 <USB_WritePMA>
 8005e0e:	e0ca      	b.n	8005fa6 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005e10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	785b      	ldrb	r3, [r3, #1]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d177      	bne.n	8005f10 <USB_EPStartXfer+0xc98>
 8005e20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005e2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005e40:	4413      	add	r3, r2
 8005e42:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005e44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	011a      	lsls	r2, r3, #4
 8005e52:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005e54:	4413      	add	r3, r2
 8005e56:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005e5a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005e5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e5e:	881b      	ldrh	r3, [r3, #0]
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e66:	b29a      	uxth	r2, r3
 8005e68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e6a:	801a      	strh	r2, [r3, #0]
 8005e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e70:	2b3e      	cmp	r3, #62	@ 0x3e
 8005e72:	d921      	bls.n	8005eb8 <USB_EPStartXfer+0xc40>
 8005e74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e78:	095b      	lsrs	r3, r3, #5
 8005e7a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e82:	f003 031f 	and.w	r3, r3, #31
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d104      	bne.n	8005e94 <USB_EPStartXfer+0xc1c>
 8005e8a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005e94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e96:	881b      	ldrh	r3, [r3, #0]
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	029b      	lsls	r3, r3, #10
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eb0:	b29a      	uxth	r2, r3
 8005eb2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005eb4:	801a      	strh	r2, [r3, #0]
 8005eb6:	e05c      	b.n	8005f72 <USB_EPStartXfer+0xcfa>
 8005eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d10a      	bne.n	8005ed6 <USB_EPStartXfer+0xc5e>
 8005ec0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ec2:	881b      	ldrh	r3, [r3, #0]
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ece:	b29a      	uxth	r2, r3
 8005ed0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ed2:	801a      	strh	r2, [r3, #0]
 8005ed4:	e04d      	b.n	8005f72 <USB_EPStartXfer+0xcfa>
 8005ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eda:	085b      	lsrs	r3, r3, #1
 8005edc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ee4:	f003 0301 	and.w	r3, r3, #1
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d004      	beq.n	8005ef6 <USB_EPStartXfer+0xc7e>
 8005eec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005ef6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ef8:	881b      	ldrh	r3, [r3, #0]
 8005efa:	b29a      	uxth	r2, r3
 8005efc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	029b      	lsls	r3, r3, #10
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	4313      	orrs	r3, r2
 8005f08:	b29a      	uxth	r2, r3
 8005f0a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f0c:	801a      	strh	r2, [r3, #0]
 8005f0e:	e030      	b.n	8005f72 <USB_EPStartXfer+0xcfa>
 8005f10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	785b      	ldrb	r3, [r3, #1]
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d128      	bne.n	8005f72 <USB_EPStartXfer+0xcfa>
 8005f20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	461a      	mov	r2, r3
 8005f40:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005f44:	4413      	add	r3, r2
 8005f46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	011a      	lsls	r2, r3, #4
 8005f58:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005f62:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f6a:	b29a      	uxth	r2, r3
 8005f6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005f70:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005f72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	891b      	ldrh	r3, [r3, #8]
 8005f7e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	6959      	ldr	r1, [r3, #20]
 8005f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005f98:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005f9c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005fa0:	6800      	ldr	r0, [r0, #0]
 8005fa2:	f000 fe58 	bl	8006c56 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005fa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005faa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	4413      	add	r3, r2
 8005fc0:	881b      	ldrh	r3, [r3, #0]
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fcc:	817b      	strh	r3, [r7, #10]
 8005fce:	897b      	ldrh	r3, [r7, #10]
 8005fd0:	f083 0310 	eor.w	r3, r3, #16
 8005fd4:	817b      	strh	r3, [r7, #10]
 8005fd6:	897b      	ldrh	r3, [r7, #10]
 8005fd8:	f083 0320 	eor.w	r3, r3, #32
 8005fdc:	817b      	strh	r3, [r7, #10]
 8005fde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fe2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	441a      	add	r2, r3
 8005ff8:	897b      	ldrh	r3, [r7, #10]
 8005ffa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ffe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006002:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006006:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800600a:	b29b      	uxth	r3, r3
 800600c:	8013      	strh	r3, [r2, #0]
 800600e:	f000 bcde 	b.w	80069ce <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006012:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006016:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	7b1b      	ldrb	r3, [r3, #12]
 800601e:	2b00      	cmp	r3, #0
 8006020:	f040 80bb 	bne.w	800619a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006024:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006028:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	699a      	ldr	r2, [r3, #24]
 8006030:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006034:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	429a      	cmp	r2, r3
 800603e:	d917      	bls.n	8006070 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006040:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006044:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8006050:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006054:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	699a      	ldr	r2, [r3, #24]
 800605c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006060:	1ad2      	subs	r2, r2, r3
 8006062:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006066:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	619a      	str	r2, [r3, #24]
 800606e:	e00e      	b.n	800608e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006070:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006074:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	699b      	ldr	r3, [r3, #24]
 800607c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8006080:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006084:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2200      	movs	r2, #0
 800608c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800608e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006092:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800609c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	461a      	mov	r2, r3
 80060ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80060b2:	4413      	add	r3, r2
 80060b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80060b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	011a      	lsls	r2, r3, #4
 80060c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80060ca:	4413      	add	r3, r2
 80060cc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80060d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80060d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060d8:	881b      	ldrh	r3, [r3, #0]
 80060da:	b29b      	uxth	r3, r3
 80060dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060e0:	b29a      	uxth	r2, r3
 80060e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060e6:	801a      	strh	r2, [r3, #0]
 80060e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060ec:	2b3e      	cmp	r3, #62	@ 0x3e
 80060ee:	d924      	bls.n	800613a <USB_EPStartXfer+0xec2>
 80060f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060f4:	095b      	lsrs	r3, r3, #5
 80060f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80060fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060fe:	f003 031f 	and.w	r3, r3, #31
 8006102:	2b00      	cmp	r3, #0
 8006104:	d104      	bne.n	8006110 <USB_EPStartXfer+0xe98>
 8006106:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800610a:	3b01      	subs	r3, #1
 800610c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006110:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006114:	881b      	ldrh	r3, [r3, #0]
 8006116:	b29a      	uxth	r2, r3
 8006118:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800611c:	b29b      	uxth	r3, r3
 800611e:	029b      	lsls	r3, r3, #10
 8006120:	b29b      	uxth	r3, r3
 8006122:	4313      	orrs	r3, r2
 8006124:	b29b      	uxth	r3, r3
 8006126:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800612a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800612e:	b29a      	uxth	r2, r3
 8006130:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006134:	801a      	strh	r2, [r3, #0]
 8006136:	f000 bc10 	b.w	800695a <USB_EPStartXfer+0x16e2>
 800613a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800613e:	2b00      	cmp	r3, #0
 8006140:	d10c      	bne.n	800615c <USB_EPStartXfer+0xee4>
 8006142:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006146:	881b      	ldrh	r3, [r3, #0]
 8006148:	b29b      	uxth	r3, r3
 800614a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800614e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006152:	b29a      	uxth	r2, r3
 8006154:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006158:	801a      	strh	r2, [r3, #0]
 800615a:	e3fe      	b.n	800695a <USB_EPStartXfer+0x16e2>
 800615c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006160:	085b      	lsrs	r3, r3, #1
 8006162:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006166:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800616a:	f003 0301 	and.w	r3, r3, #1
 800616e:	2b00      	cmp	r3, #0
 8006170:	d004      	beq.n	800617c <USB_EPStartXfer+0xf04>
 8006172:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006176:	3301      	adds	r3, #1
 8006178:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800617c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006180:	881b      	ldrh	r3, [r3, #0]
 8006182:	b29a      	uxth	r2, r3
 8006184:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006188:	b29b      	uxth	r3, r3
 800618a:	029b      	lsls	r3, r3, #10
 800618c:	b29b      	uxth	r3, r3
 800618e:	4313      	orrs	r3, r2
 8006190:	b29a      	uxth	r2, r3
 8006192:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006196:	801a      	strh	r2, [r3, #0]
 8006198:	e3df      	b.n	800695a <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800619a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800619e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	78db      	ldrb	r3, [r3, #3]
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	f040 8218 	bne.w	80065dc <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80061ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	785b      	ldrb	r3, [r3, #1]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	f040 809d 	bne.w	80062f8 <USB_EPStartXfer+0x1080>
 80061be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80061cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061da:	b29b      	uxth	r3, r3
 80061dc:	461a      	mov	r2, r3
 80061de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80061e2:	4413      	add	r3, r2
 80061e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80061e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	011a      	lsls	r2, r3, #4
 80061f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80061fa:	4413      	add	r3, r2
 80061fc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006200:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006204:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006208:	881b      	ldrh	r3, [r3, #0]
 800620a:	b29b      	uxth	r3, r3
 800620c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006210:	b29a      	uxth	r2, r3
 8006212:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006216:	801a      	strh	r2, [r3, #0]
 8006218:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800621c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	691b      	ldr	r3, [r3, #16]
 8006224:	2b3e      	cmp	r3, #62	@ 0x3e
 8006226:	d92b      	bls.n	8006280 <USB_EPStartXfer+0x1008>
 8006228:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800622c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	095b      	lsrs	r3, r3, #5
 8006236:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800623a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800623e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	f003 031f 	and.w	r3, r3, #31
 800624a:	2b00      	cmp	r3, #0
 800624c:	d104      	bne.n	8006258 <USB_EPStartXfer+0xfe0>
 800624e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006252:	3b01      	subs	r3, #1
 8006254:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006258:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800625c:	881b      	ldrh	r3, [r3, #0]
 800625e:	b29a      	uxth	r2, r3
 8006260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006264:	b29b      	uxth	r3, r3
 8006266:	029b      	lsls	r3, r3, #10
 8006268:	b29b      	uxth	r3, r3
 800626a:	4313      	orrs	r3, r2
 800626c:	b29b      	uxth	r3, r3
 800626e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006272:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006276:	b29a      	uxth	r2, r3
 8006278:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800627c:	801a      	strh	r2, [r3, #0]
 800627e:	e070      	b.n	8006362 <USB_EPStartXfer+0x10ea>
 8006280:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006284:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	691b      	ldr	r3, [r3, #16]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d10c      	bne.n	80062aa <USB_EPStartXfer+0x1032>
 8006290:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006294:	881b      	ldrh	r3, [r3, #0]
 8006296:	b29b      	uxth	r3, r3
 8006298:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800629c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80062a6:	801a      	strh	r2, [r3, #0]
 80062a8:	e05b      	b.n	8006362 <USB_EPStartXfer+0x10ea>
 80062aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	085b      	lsrs	r3, r3, #1
 80062b8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80062bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	f003 0301 	and.w	r3, r3, #1
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d004      	beq.n	80062da <USB_EPStartXfer+0x1062>
 80062d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062d4:	3301      	adds	r3, #1
 80062d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80062da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80062de:	881b      	ldrh	r3, [r3, #0]
 80062e0:	b29a      	uxth	r2, r3
 80062e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	029b      	lsls	r3, r3, #10
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	4313      	orrs	r3, r2
 80062ee:	b29a      	uxth	r2, r3
 80062f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80062f4:	801a      	strh	r2, [r3, #0]
 80062f6:	e034      	b.n	8006362 <USB_EPStartXfer+0x10ea>
 80062f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	785b      	ldrb	r3, [r3, #1]
 8006304:	2b01      	cmp	r3, #1
 8006306:	d12c      	bne.n	8006362 <USB_EPStartXfer+0x10ea>
 8006308:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800630c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006316:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800631a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006324:	b29b      	uxth	r3, r3
 8006326:	461a      	mov	r2, r3
 8006328:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800632c:	4413      	add	r3, r2
 800632e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006332:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006336:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	011a      	lsls	r2, r3, #4
 8006340:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006344:	4413      	add	r3, r2
 8006346:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800634a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800634e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006352:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	b29a      	uxth	r2, r3
 800635c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006360:	801a      	strh	r2, [r3, #0]
 8006362:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006366:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006370:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006374:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	785b      	ldrb	r3, [r3, #1]
 800637c:	2b00      	cmp	r3, #0
 800637e:	f040 809d 	bne.w	80064bc <USB_EPStartXfer+0x1244>
 8006382:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006386:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006390:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006394:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800639e:	b29b      	uxth	r3, r3
 80063a0:	461a      	mov	r2, r3
 80063a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80063a6:	4413      	add	r3, r2
 80063a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80063ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	011a      	lsls	r2, r3, #4
 80063ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80063be:	4413      	add	r3, r2
 80063c0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80063c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80063c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063cc:	881b      	ldrh	r3, [r3, #0]
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063d4:	b29a      	uxth	r2, r3
 80063d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063da:	801a      	strh	r2, [r3, #0]
 80063dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	2b3e      	cmp	r3, #62	@ 0x3e
 80063ea:	d92b      	bls.n	8006444 <USB_EPStartXfer+0x11cc>
 80063ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	095b      	lsrs	r3, r3, #5
 80063fa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80063fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006402:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	f003 031f 	and.w	r3, r3, #31
 800640e:	2b00      	cmp	r3, #0
 8006410:	d104      	bne.n	800641c <USB_EPStartXfer+0x11a4>
 8006412:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006416:	3b01      	subs	r3, #1
 8006418:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800641c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006420:	881b      	ldrh	r3, [r3, #0]
 8006422:	b29a      	uxth	r2, r3
 8006424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006428:	b29b      	uxth	r3, r3
 800642a:	029b      	lsls	r3, r3, #10
 800642c:	b29b      	uxth	r3, r3
 800642e:	4313      	orrs	r3, r2
 8006430:	b29b      	uxth	r3, r3
 8006432:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006436:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800643a:	b29a      	uxth	r2, r3
 800643c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006440:	801a      	strh	r2, [r3, #0]
 8006442:	e069      	b.n	8006518 <USB_EPStartXfer+0x12a0>
 8006444:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006448:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d10c      	bne.n	800646e <USB_EPStartXfer+0x11f6>
 8006454:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006458:	881b      	ldrh	r3, [r3, #0]
 800645a:	b29b      	uxth	r3, r3
 800645c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006460:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006464:	b29a      	uxth	r2, r3
 8006466:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800646a:	801a      	strh	r2, [r3, #0]
 800646c:	e054      	b.n	8006518 <USB_EPStartXfer+0x12a0>
 800646e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006472:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	085b      	lsrs	r3, r3, #1
 800647c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006480:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006484:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	f003 0301 	and.w	r3, r3, #1
 8006490:	2b00      	cmp	r3, #0
 8006492:	d004      	beq.n	800649e <USB_EPStartXfer+0x1226>
 8006494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006498:	3301      	adds	r3, #1
 800649a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800649e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80064a2:	881b      	ldrh	r3, [r3, #0]
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	029b      	lsls	r3, r3, #10
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	4313      	orrs	r3, r2
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80064b8:	801a      	strh	r2, [r3, #0]
 80064ba:	e02d      	b.n	8006518 <USB_EPStartXfer+0x12a0>
 80064bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	785b      	ldrb	r3, [r3, #1]
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d125      	bne.n	8006518 <USB_EPStartXfer+0x12a0>
 80064cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064da:	b29b      	uxth	r3, r3
 80064dc:	461a      	mov	r2, r3
 80064de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80064e2:	4413      	add	r3, r2
 80064e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80064e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	011a      	lsls	r2, r3, #4
 80064f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80064fa:	4413      	add	r3, r2
 80064fc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006500:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006504:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006508:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	b29a      	uxth	r2, r3
 8006512:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006516:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006518:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800651c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	69db      	ldr	r3, [r3, #28]
 8006524:	2b00      	cmp	r3, #0
 8006526:	f000 8218 	beq.w	800695a <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800652a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800652e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006538:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	4413      	add	r3, r2
 8006544:	881b      	ldrh	r3, [r3, #0]
 8006546:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800654a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800654e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006552:	2b00      	cmp	r3, #0
 8006554:	d005      	beq.n	8006562 <USB_EPStartXfer+0x12ea>
 8006556:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800655a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800655e:	2b00      	cmp	r3, #0
 8006560:	d10d      	bne.n	800657e <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006562:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006566:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800656a:	2b00      	cmp	r3, #0
 800656c:	f040 81f5 	bne.w	800695a <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006570:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006574:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006578:	2b00      	cmp	r3, #0
 800657a:	f040 81ee 	bne.w	800695a <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800657e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006582:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800658c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	4413      	add	r3, r2
 8006598:	881b      	ldrh	r3, [r3, #0]
 800659a:	b29b      	uxth	r3, r3
 800659c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065a4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80065a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	441a      	add	r2, r3
 80065c2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80065c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065d2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	8013      	strh	r3, [r2, #0]
 80065da:	e1be      	b.n	800695a <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80065dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	78db      	ldrb	r3, [r3, #3]
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	f040 81b4 	bne.w	8006956 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80065ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	699a      	ldr	r2, [r3, #24]
 80065fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	429a      	cmp	r2, r3
 8006608:	d917      	bls.n	800663a <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800660a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800660e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800661a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800661e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	699a      	ldr	r2, [r3, #24]
 8006626:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800662a:	1ad2      	subs	r2, r2, r3
 800662c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006630:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	619a      	str	r2, [r3, #24]
 8006638:	e00e      	b.n	8006658 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800663a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800663e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800664a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800664e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2200      	movs	r2, #0
 8006656:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006658:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800665c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	785b      	ldrb	r3, [r3, #1]
 8006664:	2b00      	cmp	r3, #0
 8006666:	f040 8085 	bne.w	8006774 <USB_EPStartXfer+0x14fc>
 800666a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800666e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006678:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800667c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006686:	b29b      	uxth	r3, r3
 8006688:	461a      	mov	r2, r3
 800668a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800668e:	4413      	add	r3, r2
 8006690:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006694:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006698:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	011a      	lsls	r2, r3, #4
 80066a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80066a6:	4413      	add	r3, r2
 80066a8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80066ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80066b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80066b4:	881b      	ldrh	r3, [r3, #0]
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066bc:	b29a      	uxth	r2, r3
 80066be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80066c2:	801a      	strh	r2, [r3, #0]
 80066c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80066ca:	d923      	bls.n	8006714 <USB_EPStartXfer+0x149c>
 80066cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066d0:	095b      	lsrs	r3, r3, #5
 80066d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80066d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066da:	f003 031f 	and.w	r3, r3, #31
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d104      	bne.n	80066ec <USB_EPStartXfer+0x1474>
 80066e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066e6:	3b01      	subs	r3, #1
 80066e8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80066ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80066f0:	881b      	ldrh	r3, [r3, #0]
 80066f2:	b29a      	uxth	r2, r3
 80066f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	029b      	lsls	r3, r3, #10
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	4313      	orrs	r3, r2
 8006700:	b29b      	uxth	r3, r3
 8006702:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006706:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800670a:	b29a      	uxth	r2, r3
 800670c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006710:	801a      	strh	r2, [r3, #0]
 8006712:	e060      	b.n	80067d6 <USB_EPStartXfer+0x155e>
 8006714:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006718:	2b00      	cmp	r3, #0
 800671a:	d10c      	bne.n	8006736 <USB_EPStartXfer+0x14be>
 800671c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006720:	881b      	ldrh	r3, [r3, #0]
 8006722:	b29b      	uxth	r3, r3
 8006724:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006728:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800672c:	b29a      	uxth	r2, r3
 800672e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006732:	801a      	strh	r2, [r3, #0]
 8006734:	e04f      	b.n	80067d6 <USB_EPStartXfer+0x155e>
 8006736:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800673a:	085b      	lsrs	r3, r3, #1
 800673c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006740:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006744:	f003 0301 	and.w	r3, r3, #1
 8006748:	2b00      	cmp	r3, #0
 800674a:	d004      	beq.n	8006756 <USB_EPStartXfer+0x14de>
 800674c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006750:	3301      	adds	r3, #1
 8006752:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006756:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800675a:	881b      	ldrh	r3, [r3, #0]
 800675c:	b29a      	uxth	r2, r3
 800675e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006762:	b29b      	uxth	r3, r3
 8006764:	029b      	lsls	r3, r3, #10
 8006766:	b29b      	uxth	r3, r3
 8006768:	4313      	orrs	r3, r2
 800676a:	b29a      	uxth	r2, r3
 800676c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006770:	801a      	strh	r2, [r3, #0]
 8006772:	e030      	b.n	80067d6 <USB_EPStartXfer+0x155e>
 8006774:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006778:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	785b      	ldrb	r3, [r3, #1]
 8006780:	2b01      	cmp	r3, #1
 8006782:	d128      	bne.n	80067d6 <USB_EPStartXfer+0x155e>
 8006784:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006788:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006792:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006796:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	461a      	mov	r2, r3
 80067a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80067a8:	4413      	add	r3, r2
 80067aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80067ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	011a      	lsls	r2, r3, #4
 80067bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80067c0:	4413      	add	r3, r2
 80067c2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80067c6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80067ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067ce:	b29a      	uxth	r2, r3
 80067d0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80067d4:	801a      	strh	r2, [r3, #0]
 80067d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80067e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	785b      	ldrb	r3, [r3, #1]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	f040 8085 	bne.w	8006900 <USB_EPStartXfer+0x1688>
 80067f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006804:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006808:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006812:	b29b      	uxth	r3, r3
 8006814:	461a      	mov	r2, r3
 8006816:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800681a:	4413      	add	r3, r2
 800681c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006820:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006824:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	011a      	lsls	r2, r3, #4
 800682e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006832:	4413      	add	r3, r2
 8006834:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006838:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800683c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006840:	881b      	ldrh	r3, [r3, #0]
 8006842:	b29b      	uxth	r3, r3
 8006844:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006848:	b29a      	uxth	r2, r3
 800684a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800684e:	801a      	strh	r2, [r3, #0]
 8006850:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006854:	2b3e      	cmp	r3, #62	@ 0x3e
 8006856:	d923      	bls.n	80068a0 <USB_EPStartXfer+0x1628>
 8006858:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800685c:	095b      	lsrs	r3, r3, #5
 800685e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006862:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006866:	f003 031f 	and.w	r3, r3, #31
 800686a:	2b00      	cmp	r3, #0
 800686c:	d104      	bne.n	8006878 <USB_EPStartXfer+0x1600>
 800686e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006872:	3b01      	subs	r3, #1
 8006874:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006878:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800687c:	881b      	ldrh	r3, [r3, #0]
 800687e:	b29a      	uxth	r2, r3
 8006880:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006884:	b29b      	uxth	r3, r3
 8006886:	029b      	lsls	r3, r3, #10
 8006888:	b29b      	uxth	r3, r3
 800688a:	4313      	orrs	r3, r2
 800688c:	b29b      	uxth	r3, r3
 800688e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006892:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006896:	b29a      	uxth	r2, r3
 8006898:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800689c:	801a      	strh	r2, [r3, #0]
 800689e:	e05c      	b.n	800695a <USB_EPStartXfer+0x16e2>
 80068a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d10c      	bne.n	80068c2 <USB_EPStartXfer+0x164a>
 80068a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80068ac:	881b      	ldrh	r3, [r3, #0]
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068b8:	b29a      	uxth	r2, r3
 80068ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80068be:	801a      	strh	r2, [r3, #0]
 80068c0:	e04b      	b.n	800695a <USB_EPStartXfer+0x16e2>
 80068c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068c6:	085b      	lsrs	r3, r3, #1
 80068c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80068cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068d0:	f003 0301 	and.w	r3, r3, #1
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d004      	beq.n	80068e2 <USB_EPStartXfer+0x166a>
 80068d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80068dc:	3301      	adds	r3, #1
 80068de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80068e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80068e6:	881b      	ldrh	r3, [r3, #0]
 80068e8:	b29a      	uxth	r2, r3
 80068ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	029b      	lsls	r3, r3, #10
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	4313      	orrs	r3, r2
 80068f6:	b29a      	uxth	r2, r3
 80068f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80068fc:	801a      	strh	r2, [r3, #0]
 80068fe:	e02c      	b.n	800695a <USB_EPStartXfer+0x16e2>
 8006900:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006904:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	785b      	ldrb	r3, [r3, #1]
 800690c:	2b01      	cmp	r3, #1
 800690e:	d124      	bne.n	800695a <USB_EPStartXfer+0x16e2>
 8006910:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006914:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800691e:	b29b      	uxth	r3, r3
 8006920:	461a      	mov	r2, r3
 8006922:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006926:	4413      	add	r3, r2
 8006928:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800692c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006930:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	011a      	lsls	r2, r3, #4
 800693a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800693e:	4413      	add	r3, r2
 8006940:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006944:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006948:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800694c:	b29a      	uxth	r2, r3
 800694e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006952:	801a      	strh	r2, [r3, #0]
 8006954:	e001      	b.n	800695a <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e03a      	b.n	80069d0 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800695a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800695e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006968:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	4413      	add	r3, r2
 8006974:	881b      	ldrh	r3, [r3, #0]
 8006976:	b29b      	uxth	r3, r3
 8006978:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800697c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006980:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006984:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006988:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800698c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006990:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006994:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006998:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800699c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	441a      	add	r2, r3
 80069b6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80069ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80069da:	b480      	push	{r7}
 80069dc:	b085      	sub	sp, #20
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
 80069e2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	785b      	ldrb	r3, [r3, #1]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d020      	beq.n	8006a2e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	4413      	add	r3, r2
 80069f6:	881b      	ldrh	r3, [r3, #0]
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a02:	81bb      	strh	r3, [r7, #12]
 8006a04:	89bb      	ldrh	r3, [r7, #12]
 8006a06:	f083 0310 	eor.w	r3, r3, #16
 8006a0a:	81bb      	strh	r3, [r7, #12]
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	441a      	add	r2, r3
 8006a16:	89bb      	ldrh	r3, [r7, #12]
 8006a18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	8013      	strh	r3, [r2, #0]
 8006a2c:	e01f      	b.n	8006a6e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	4413      	add	r3, r2
 8006a38:	881b      	ldrh	r3, [r3, #0]
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a44:	81fb      	strh	r3, [r7, #14]
 8006a46:	89fb      	ldrh	r3, [r7, #14]
 8006a48:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006a4c:	81fb      	strh	r3, [r7, #14]
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	441a      	add	r2, r3
 8006a58:	89fb      	ldrh	r3, [r7, #14]
 8006a5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006a6e:	2300      	movs	r3, #0
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3714      	adds	r7, #20
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bc80      	pop	{r7}
 8006a78:	4770      	bx	lr

08006a7a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a7a:	b480      	push	{r7}
 8006a7c:	b087      	sub	sp, #28
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
 8006a82:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	7b1b      	ldrb	r3, [r3, #12]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f040 809d 	bne.w	8006bc8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	785b      	ldrb	r3, [r3, #1]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d04c      	beq.n	8006b30 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	4413      	add	r3, r2
 8006aa0:	881b      	ldrh	r3, [r3, #0]
 8006aa2:	823b      	strh	r3, [r7, #16]
 8006aa4:	8a3b      	ldrh	r3, [r7, #16]
 8006aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d01b      	beq.n	8006ae6 <USB_EPClearStall+0x6c>
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	4413      	add	r3, r2
 8006ab8:	881b      	ldrh	r3, [r3, #0]
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ac0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ac4:	81fb      	strh	r3, [r7, #14]
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	441a      	add	r2, r3
 8006ad0:	89fb      	ldrh	r3, [r7, #14]
 8006ad2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ad6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ada:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ade:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	78db      	ldrb	r3, [r3, #3]
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d06c      	beq.n	8006bc8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	4413      	add	r3, r2
 8006af8:	881b      	ldrh	r3, [r3, #0]
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b04:	81bb      	strh	r3, [r7, #12]
 8006b06:	89bb      	ldrh	r3, [r7, #12]
 8006b08:	f083 0320 	eor.w	r3, r3, #32
 8006b0c:	81bb      	strh	r3, [r7, #12]
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	441a      	add	r2, r3
 8006b18:	89bb      	ldrh	r3, [r7, #12]
 8006b1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	8013      	strh	r3, [r2, #0]
 8006b2e:	e04b      	b.n	8006bc8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	4413      	add	r3, r2
 8006b3a:	881b      	ldrh	r3, [r3, #0]
 8006b3c:	82fb      	strh	r3, [r7, #22]
 8006b3e:	8afb      	ldrh	r3, [r7, #22]
 8006b40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d01b      	beq.n	8006b80 <USB_EPClearStall+0x106>
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	4413      	add	r3, r2
 8006b52:	881b      	ldrh	r3, [r3, #0]
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b5e:	82bb      	strh	r3, [r7, #20]
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	441a      	add	r2, r3
 8006b6a:	8abb      	ldrh	r3, [r7, #20]
 8006b6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b74:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	4413      	add	r3, r2
 8006b8a:	881b      	ldrh	r3, [r3, #0]
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b96:	827b      	strh	r3, [r7, #18]
 8006b98:	8a7b      	ldrh	r3, [r7, #18]
 8006b9a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006b9e:	827b      	strh	r3, [r7, #18]
 8006ba0:	8a7b      	ldrh	r3, [r7, #18]
 8006ba2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006ba6:	827b      	strh	r3, [r7, #18]
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	441a      	add	r2, r3
 8006bb2:	8a7b      	ldrh	r3, [r7, #18]
 8006bb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	371c      	adds	r7, #28
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bc80      	pop	{r7}
 8006bd2:	4770      	bx	lr

08006bd4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	460b      	mov	r3, r1
 8006bde:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006be0:	78fb      	ldrb	r3, [r7, #3]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d103      	bne.n	8006bee <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2280      	movs	r2, #128	@ 0x80
 8006bea:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bc80      	pop	{r7}
 8006bf8:	4770      	bx	lr

08006bfa <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006bfa:	b480      	push	{r7}
 8006bfc:	b083      	sub	sp, #12
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006c02:	2300      	movs	r3, #0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	370c      	adds	r7, #12
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bc80      	pop	{r7}
 8006c0c:	4770      	bx	lr

08006c0e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006c0e:	b480      	push	{r7}
 8006c10:	b083      	sub	sp, #12
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	370c      	adds	r7, #12
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bc80      	pop	{r7}
 8006c20:	4770      	bx	lr

08006c22 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006c22:	b480      	push	{r7}
 8006c24:	b085      	sub	sp, #20
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006c34:	68fb      	ldr	r3, [r7, #12]
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3714      	adds	r7, #20
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bc80      	pop	{r7}
 8006c3e:	4770      	bx	lr

08006c40 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006c4a:	2300      	movs	r3, #0
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bc80      	pop	{r7}
 8006c54:	4770      	bx	lr

08006c56 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006c56:	b480      	push	{r7}
 8006c58:	b08b      	sub	sp, #44	@ 0x2c
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	60f8      	str	r0, [r7, #12]
 8006c5e:	60b9      	str	r1, [r7, #8]
 8006c60:	4611      	mov	r1, r2
 8006c62:	461a      	mov	r2, r3
 8006c64:	460b      	mov	r3, r1
 8006c66:	80fb      	strh	r3, [r7, #6]
 8006c68:	4613      	mov	r3, r2
 8006c6a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006c6c:	88bb      	ldrh	r3, [r7, #4]
 8006c6e:	3301      	adds	r3, #1
 8006c70:	085b      	lsrs	r3, r3, #1
 8006c72:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006c7c:	88fb      	ldrh	r3, [r7, #6]
 8006c7e:	005a      	lsls	r2, r3, #1
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	4413      	add	r3, r2
 8006c84:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c88:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c8e:	e01f      	b.n	8006cd0 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	3301      	adds	r3, #1
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	b21b      	sxth	r3, r3
 8006c9e:	021b      	lsls	r3, r3, #8
 8006ca0:	b21a      	sxth	r2, r3
 8006ca2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	b21b      	sxth	r3, r3
 8006caa:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006cac:	6a3b      	ldr	r3, [r7, #32]
 8006cae:	8a7a      	ldrh	r2, [r7, #18]
 8006cb0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006cb2:	6a3b      	ldr	r3, [r7, #32]
 8006cb4:	3302      	adds	r3, #2
 8006cb6:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006cb8:	6a3b      	ldr	r3, [r7, #32]
 8006cba:	3302      	adds	r3, #2
 8006cbc:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ccc:	3b01      	subs	r3, #1
 8006cce:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1dc      	bne.n	8006c90 <USB_WritePMA+0x3a>
  }
}
 8006cd6:	bf00      	nop
 8006cd8:	bf00      	nop
 8006cda:	372c      	adds	r7, #44	@ 0x2c
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bc80      	pop	{r7}
 8006ce0:	4770      	bx	lr

08006ce2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006ce2:	b480      	push	{r7}
 8006ce4:	b08b      	sub	sp, #44	@ 0x2c
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	60f8      	str	r0, [r7, #12]
 8006cea:	60b9      	str	r1, [r7, #8]
 8006cec:	4611      	mov	r1, r2
 8006cee:	461a      	mov	r2, r3
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	80fb      	strh	r3, [r7, #6]
 8006cf4:	4613      	mov	r3, r2
 8006cf6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006cf8:	88bb      	ldrh	r3, [r7, #4]
 8006cfa:	085b      	lsrs	r3, r3, #1
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006d08:	88fb      	ldrh	r3, [r7, #6]
 8006d0a:	005a      	lsls	r2, r3, #1
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	4413      	add	r3, r2
 8006d10:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d14:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d1a:	e01b      	b.n	8006d54 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006d1c:	6a3b      	ldr	r3, [r7, #32]
 8006d1e:	881b      	ldrh	r3, [r3, #0]
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006d24:	6a3b      	ldr	r3, [r7, #32]
 8006d26:	3302      	adds	r3, #2
 8006d28:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	b2da      	uxtb	r2, r3
 8006d2e:	69fb      	ldr	r3, [r7, #28]
 8006d30:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	3301      	adds	r3, #1
 8006d36:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	0a1b      	lsrs	r3, r3, #8
 8006d3c:	b2da      	uxtb	r2, r3
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	3301      	adds	r3, #1
 8006d46:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006d48:	6a3b      	ldr	r3, [r7, #32]
 8006d4a:	3302      	adds	r3, #2
 8006d4c:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d50:	3b01      	subs	r3, #1
 8006d52:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d1e0      	bne.n	8006d1c <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006d5a:	88bb      	ldrh	r3, [r7, #4]
 8006d5c:	f003 0301 	and.w	r3, r3, #1
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d007      	beq.n	8006d76 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006d66:	6a3b      	ldr	r3, [r7, #32]
 8006d68:	881b      	ldrh	r3, [r3, #0]
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	b2da      	uxtb	r2, r3
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	701a      	strb	r2, [r3, #0]
  }
}
 8006d76:	bf00      	nop
 8006d78:	372c      	adds	r7, #44	@ 0x2c
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bc80      	pop	{r7}
 8006d7e:	4770      	bx	lr

08006d80 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	460b      	mov	r3, r1
 8006d8a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	7c1b      	ldrb	r3, [r3, #16]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d115      	bne.n	8006dc4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006d98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006d9c:	2202      	movs	r2, #2
 8006d9e:	2181      	movs	r1, #129	@ 0x81
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f001 fe82 	bl	8008aaa <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2201      	movs	r2, #1
 8006daa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006dac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006db0:	2202      	movs	r2, #2
 8006db2:	2101      	movs	r1, #1
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f001 fe78 	bl	8008aaa <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8006dc2:	e012      	b.n	8006dea <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006dc4:	2340      	movs	r3, #64	@ 0x40
 8006dc6:	2202      	movs	r2, #2
 8006dc8:	2181      	movs	r1, #129	@ 0x81
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f001 fe6d 	bl	8008aaa <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006dd6:	2340      	movs	r3, #64	@ 0x40
 8006dd8:	2202      	movs	r2, #2
 8006dda:	2101      	movs	r1, #1
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f001 fe64 	bl	8008aaa <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2201      	movs	r2, #1
 8006de6:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006dea:	2308      	movs	r3, #8
 8006dec:	2203      	movs	r2, #3
 8006dee:	2182      	movs	r1, #130	@ 0x82
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f001 fe5a 	bl	8008aaa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006dfc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006e00:	f001 ff7a 	bl	8008cf8 <USBD_static_malloc>
 8006e04:	4602      	mov	r2, r0
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d102      	bne.n	8006e1c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006e16:	2301      	movs	r3, #1
 8006e18:	73fb      	strb	r3, [r7, #15]
 8006e1a:	e026      	b.n	8006e6a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e22:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	7c1b      	ldrb	r3, [r3, #16]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d109      	bne.n	8006e5a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006e4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006e50:	2101      	movs	r1, #1
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f001 ff19 	bl	8008c8a <USBD_LL_PrepareReceive>
 8006e58:	e007      	b.n	8006e6a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006e60:	2340      	movs	r3, #64	@ 0x40
 8006e62:	2101      	movs	r1, #1
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f001 ff10 	bl	8008c8a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3710      	adds	r7, #16
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006e80:	2300      	movs	r3, #0
 8006e82:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006e84:	2181      	movs	r1, #129	@ 0x81
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f001 fe35 	bl	8008af6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006e92:	2101      	movs	r1, #1
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f001 fe2e 	bl	8008af6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006ea2:	2182      	movs	r1, #130	@ 0x82
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f001 fe26 	bl	8008af6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d00e      	beq.n	8006ed8 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f001 ff20 	bl	8008d10 <USBD_static_free>
    pdev->pClassData = NULL;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8006ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3710      	adds	r7, #16
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}

08006ee2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006ee2:	b580      	push	{r7, lr}
 8006ee4:	b086      	sub	sp, #24
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
 8006eea:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ef2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006efc:	2300      	movs	r3, #0
 8006efe:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d039      	beq.n	8006f80 <USBD_CDC_Setup+0x9e>
 8006f0c:	2b20      	cmp	r3, #32
 8006f0e:	d17f      	bne.n	8007010 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	88db      	ldrh	r3, [r3, #6]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d029      	beq.n	8006f6c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	b25b      	sxtb	r3, r3
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	da11      	bge.n	8006f46 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	683a      	ldr	r2, [r7, #0]
 8006f2c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006f2e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006f30:	683a      	ldr	r2, [r7, #0]
 8006f32:	88d2      	ldrh	r2, [r2, #6]
 8006f34:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006f36:	6939      	ldr	r1, [r7, #16]
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	88db      	ldrh	r3, [r3, #6]
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f001 fa06 	bl	8008350 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006f44:	e06b      	b.n	800701e <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	785a      	ldrb	r2, [r3, #1]
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	88db      	ldrh	r3, [r3, #6]
 8006f54:	b2da      	uxtb	r2, r3
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006f5c:	6939      	ldr	r1, [r7, #16]
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	88db      	ldrh	r3, [r3, #6]
 8006f62:	461a      	mov	r2, r3
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f001 fa21 	bl	80083ac <USBD_CtlPrepareRx>
      break;
 8006f6a:	e058      	b.n	800701e <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	683a      	ldr	r2, [r7, #0]
 8006f76:	7850      	ldrb	r0, [r2, #1]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	6839      	ldr	r1, [r7, #0]
 8006f7c:	4798      	blx	r3
      break;
 8006f7e:	e04e      	b.n	800701e <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	785b      	ldrb	r3, [r3, #1]
 8006f84:	2b0b      	cmp	r3, #11
 8006f86:	d02e      	beq.n	8006fe6 <USBD_CDC_Setup+0x104>
 8006f88:	2b0b      	cmp	r3, #11
 8006f8a:	dc38      	bgt.n	8006ffe <USBD_CDC_Setup+0x11c>
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d002      	beq.n	8006f96 <USBD_CDC_Setup+0xb4>
 8006f90:	2b0a      	cmp	r3, #10
 8006f92:	d014      	beq.n	8006fbe <USBD_CDC_Setup+0xdc>
 8006f94:	e033      	b.n	8006ffe <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f9c:	2b03      	cmp	r3, #3
 8006f9e:	d107      	bne.n	8006fb0 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006fa0:	f107 030c 	add.w	r3, r7, #12
 8006fa4:	2202      	movs	r2, #2
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f001 f9d1 	bl	8008350 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006fae:	e02e      	b.n	800700e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006fb0:	6839      	ldr	r1, [r7, #0]
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f001 f962 	bl	800827c <USBD_CtlError>
            ret = USBD_FAIL;
 8006fb8:	2302      	movs	r3, #2
 8006fba:	75fb      	strb	r3, [r7, #23]
          break;
 8006fbc:	e027      	b.n	800700e <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fc4:	2b03      	cmp	r3, #3
 8006fc6:	d107      	bne.n	8006fd8 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006fc8:	f107 030f 	add.w	r3, r7, #15
 8006fcc:	2201      	movs	r2, #1
 8006fce:	4619      	mov	r1, r3
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f001 f9bd 	bl	8008350 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006fd6:	e01a      	b.n	800700e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006fd8:	6839      	ldr	r1, [r7, #0]
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f001 f94e 	bl	800827c <USBD_CtlError>
            ret = USBD_FAIL;
 8006fe0:	2302      	movs	r3, #2
 8006fe2:	75fb      	strb	r3, [r7, #23]
          break;
 8006fe4:	e013      	b.n	800700e <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fec:	2b03      	cmp	r3, #3
 8006fee:	d00d      	beq.n	800700c <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006ff0:	6839      	ldr	r1, [r7, #0]
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f001 f942 	bl	800827c <USBD_CtlError>
            ret = USBD_FAIL;
 8006ff8:	2302      	movs	r3, #2
 8006ffa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006ffc:	e006      	b.n	800700c <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006ffe:	6839      	ldr	r1, [r7, #0]
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f001 f93b 	bl	800827c <USBD_CtlError>
          ret = USBD_FAIL;
 8007006:	2302      	movs	r3, #2
 8007008:	75fb      	strb	r3, [r7, #23]
          break;
 800700a:	e000      	b.n	800700e <USBD_CDC_Setup+0x12c>
          break;
 800700c:	bf00      	nop
      }
      break;
 800700e:	e006      	b.n	800701e <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007010:	6839      	ldr	r1, [r7, #0]
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f001 f932 	bl	800827c <USBD_CtlError>
      ret = USBD_FAIL;
 8007018:	2302      	movs	r3, #2
 800701a:	75fb      	strb	r3, [r7, #23]
      break;
 800701c:	bf00      	nop
  }

  return ret;
 800701e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007020:	4618      	mov	r0, r3
 8007022:	3718      	adds	r7, #24
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	460b      	mov	r3, r1
 8007032:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800703a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007042:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800704a:	2b00      	cmp	r3, #0
 800704c:	d03a      	beq.n	80070c4 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800704e:	78fa      	ldrb	r2, [r7, #3]
 8007050:	6879      	ldr	r1, [r7, #4]
 8007052:	4613      	mov	r3, r2
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	4413      	add	r3, r2
 8007058:	009b      	lsls	r3, r3, #2
 800705a:	440b      	add	r3, r1
 800705c:	331c      	adds	r3, #28
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d029      	beq.n	80070b8 <USBD_CDC_DataIn+0x90>
 8007064:	78fa      	ldrb	r2, [r7, #3]
 8007066:	6879      	ldr	r1, [r7, #4]
 8007068:	4613      	mov	r3, r2
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	4413      	add	r3, r2
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	440b      	add	r3, r1
 8007072:	331c      	adds	r3, #28
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	78f9      	ldrb	r1, [r7, #3]
 8007078:	68b8      	ldr	r0, [r7, #8]
 800707a:	460b      	mov	r3, r1
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	440b      	add	r3, r1
 8007080:	00db      	lsls	r3, r3, #3
 8007082:	4403      	add	r3, r0
 8007084:	3320      	adds	r3, #32
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	fbb2 f1f3 	udiv	r1, r2, r3
 800708c:	fb01 f303 	mul.w	r3, r1, r3
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	2b00      	cmp	r3, #0
 8007094:	d110      	bne.n	80070b8 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007096:	78fa      	ldrb	r2, [r7, #3]
 8007098:	6879      	ldr	r1, [r7, #4]
 800709a:	4613      	mov	r3, r2
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	4413      	add	r3, r2
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	440b      	add	r3, r1
 80070a4:	331c      	adds	r3, #28
 80070a6:	2200      	movs	r2, #0
 80070a8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80070aa:	78f9      	ldrb	r1, [r7, #3]
 80070ac:	2300      	movs	r3, #0
 80070ae:	2200      	movs	r2, #0
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f001 fdc7 	bl	8008c44 <USBD_LL_Transmit>
 80070b6:	e003      	b.n	80070c0 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 80070c0:	2300      	movs	r3, #0
 80070c2:	e000      	b.n	80070c6 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80070c4:	2302      	movs	r3, #2
  }
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3710      	adds	r7, #16
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}

080070ce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80070ce:	b580      	push	{r7, lr}
 80070d0:	b084      	sub	sp, #16
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
 80070d6:	460b      	mov	r3, r1
 80070d8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070e0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80070e2:	78fb      	ldrb	r3, [r7, #3]
 80070e4:	4619      	mov	r1, r3
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f001 fdf2 	bl	8008cd0 <USBD_LL_GetRxDataSize>
 80070ec:	4602      	mov	r2, r0
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d00d      	beq.n	800711a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	68fa      	ldr	r2, [r7, #12]
 8007108:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007112:	4611      	mov	r1, r2
 8007114:	4798      	blx	r3

    return USBD_OK;
 8007116:	2300      	movs	r3, #0
 8007118:	e000      	b.n	800711c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800711a:	2302      	movs	r3, #2
  }
}
 800711c:	4618      	mov	r0, r3
 800711e:	3710      	adds	r7, #16
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007132:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800713a:	2b00      	cmp	r3, #0
 800713c:	d014      	beq.n	8007168 <USBD_CDC_EP0_RxReady+0x44>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007144:	2bff      	cmp	r3, #255	@ 0xff
 8007146:	d00f      	beq.n	8007168 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007156:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007158:	68fa      	ldr	r2, [r7, #12]
 800715a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800715e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	22ff      	movs	r2, #255	@ 0xff
 8007164:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	3710      	adds	r7, #16
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
	...

08007174 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2243      	movs	r2, #67	@ 0x43
 8007180:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007182:	4b03      	ldr	r3, [pc, #12]	@ (8007190 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007184:	4618      	mov	r0, r3
 8007186:	370c      	adds	r7, #12
 8007188:	46bd      	mov	sp, r7
 800718a:	bc80      	pop	{r7}
 800718c:	4770      	bx	lr
 800718e:	bf00      	nop
 8007190:	20000098 	.word	0x20000098

08007194 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2243      	movs	r2, #67	@ 0x43
 80071a0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80071a2:	4b03      	ldr	r3, [pc, #12]	@ (80071b0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	370c      	adds	r7, #12
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bc80      	pop	{r7}
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	20000054 	.word	0x20000054

080071b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2243      	movs	r2, #67	@ 0x43
 80071c0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80071c2:	4b03      	ldr	r3, [pc, #12]	@ (80071d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	370c      	adds	r7, #12
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bc80      	pop	{r7}
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop
 80071d0:	200000dc 	.word	0x200000dc

080071d4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b083      	sub	sp, #12
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	220a      	movs	r2, #10
 80071e0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80071e2:	4b03      	ldr	r3, [pc, #12]	@ (80071f0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	370c      	adds	r7, #12
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bc80      	pop	{r7}
 80071ec:	4770      	bx	lr
 80071ee:	bf00      	nop
 80071f0:	20000010 	.word	0x20000010

080071f4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b085      	sub	sp, #20
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80071fe:	2302      	movs	r3, #2
 8007200:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d005      	beq.n	8007214 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	683a      	ldr	r2, [r7, #0]
 800720c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8007210:	2300      	movs	r3, #0
 8007212:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007214:	7bfb      	ldrb	r3, [r7, #15]
}
 8007216:	4618      	mov	r0, r3
 8007218:	3714      	adds	r7, #20
 800721a:	46bd      	mov	sp, r7
 800721c:	bc80      	pop	{r7}
 800721e:	4770      	bx	lr

08007220 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007220:	b480      	push	{r7}
 8007222:	b087      	sub	sp, #28
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	4613      	mov	r3, r2
 800722c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007234:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	68ba      	ldr	r2, [r7, #8]
 800723a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800723e:	88fa      	ldrh	r2, [r7, #6]
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	371c      	adds	r7, #28
 800724c:	46bd      	mov	sp, r7
 800724e:	bc80      	pop	{r7}
 8007250:	4770      	bx	lr

08007252 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007252:	b480      	push	{r7}
 8007254:	b085      	sub	sp, #20
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
 800725a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007262:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	683a      	ldr	r2, [r7, #0]
 8007268:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 800726c:	2300      	movs	r3, #0
}
 800726e:	4618      	mov	r0, r3
 8007270:	3714      	adds	r7, #20
 8007272:	46bd      	mov	sp, r7
 8007274:	bc80      	pop	{r7}
 8007276:	4770      	bx	lr

08007278 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007286:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800728e:	2b00      	cmp	r3, #0
 8007290:	d01c      	beq.n	80072cc <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007298:	2b00      	cmp	r3, #0
 800729a:	d115      	bne.n	80072c8 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2201      	movs	r2, #1
 80072a0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	2181      	movs	r1, #129	@ 0x81
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f001 fcc0 	bl	8008c44 <USBD_LL_Transmit>

      return USBD_OK;
 80072c4:	2300      	movs	r3, #0
 80072c6:	e002      	b.n	80072ce <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80072c8:	2301      	movs	r3, #1
 80072ca:	e000      	b.n	80072ce <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80072cc:	2302      	movs	r3, #2
  }
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3710      	adds	r7, #16
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}

080072d6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80072d6:	b580      	push	{r7, lr}
 80072d8:	b084      	sub	sp, #16
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072e4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d017      	beq.n	8007320 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	7c1b      	ldrb	r3, [r3, #16]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d109      	bne.n	800730c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80072fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007302:	2101      	movs	r1, #1
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f001 fcc0 	bl	8008c8a <USBD_LL_PrepareReceive>
 800730a:	e007      	b.n	800731c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007312:	2340      	movs	r3, #64	@ 0x40
 8007314:	2101      	movs	r1, #1
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f001 fcb7 	bl	8008c8a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800731c:	2300      	movs	r3, #0
 800731e:	e000      	b.n	8007322 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007320:	2302      	movs	r3, #2
  }
}
 8007322:	4618      	mov	r0, r3
 8007324:	3710      	adds	r7, #16
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}

0800732a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800732a:	b580      	push	{r7, lr}
 800732c:	b084      	sub	sp, #16
 800732e:	af00      	add	r7, sp, #0
 8007330:	60f8      	str	r0, [r7, #12]
 8007332:	60b9      	str	r1, [r7, #8]
 8007334:	4613      	mov	r3, r2
 8007336:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d101      	bne.n	8007342 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800733e:	2302      	movs	r3, #2
 8007340:	e01a      	b.n	8007378 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007348:	2b00      	cmp	r3, #0
 800734a:	d003      	beq.n	8007354 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2200      	movs	r2, #0
 8007350:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d003      	beq.n	8007362 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	68ba      	ldr	r2, [r7, #8]
 800735e:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2201      	movs	r2, #1
 8007366:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	79fa      	ldrb	r2, [r7, #7]
 800736e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	f001 fb25 	bl	80089c0 <USBD_LL_Init>

  return USBD_OK;
 8007376:	2300      	movs	r3, #0
}
 8007378:	4618      	mov	r0, r3
 800737a:	3710      	adds	r7, #16
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007380:	b480      	push	{r7}
 8007382:	b085      	sub	sp, #20
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800738a:	2300      	movs	r3, #0
 800738c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d006      	beq.n	80073a2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	683a      	ldr	r2, [r7, #0]
 8007398:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800739c:	2300      	movs	r3, #0
 800739e:	73fb      	strb	r3, [r7, #15]
 80073a0:	e001      	b.n	80073a6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80073a2:	2302      	movs	r3, #2
 80073a4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80073a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3714      	adds	r7, #20
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bc80      	pop	{r7}
 80073b0:	4770      	bx	lr

080073b2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80073b2:	b580      	push	{r7, lr}
 80073b4:	b082      	sub	sp, #8
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f001 fb5a 	bl	8008a74 <USBD_LL_Start>

  return USBD_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3708      	adds	r7, #8
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}

080073ca <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80073ca:	b480      	push	{r7}
 80073cc:	b083      	sub	sp, #12
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80073d2:	2300      	movs	r3, #0
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	370c      	adds	r7, #12
 80073d8:	46bd      	mov	sp, r7
 80073da:	bc80      	pop	{r7}
 80073dc:	4770      	bx	lr

080073de <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80073de:	b580      	push	{r7, lr}
 80073e0:	b084      	sub	sp, #16
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
 80073e6:	460b      	mov	r3, r1
 80073e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80073ea:	2302      	movs	r3, #2
 80073ec:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d00c      	beq.n	8007412 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	78fa      	ldrb	r2, [r7, #3]
 8007402:	4611      	mov	r1, r2
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	4798      	blx	r3
 8007408:	4603      	mov	r3, r0
 800740a:	2b00      	cmp	r3, #0
 800740c:	d101      	bne.n	8007412 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800740e:	2300      	movs	r3, #0
 8007410:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007412:	7bfb      	ldrb	r3, [r7, #15]
}
 8007414:	4618      	mov	r0, r3
 8007416:	3710      	adds	r7, #16
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	460b      	mov	r3, r1
 8007426:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	78fa      	ldrb	r2, [r7, #3]
 8007432:	4611      	mov	r1, r2
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	4798      	blx	r3

  return USBD_OK;
 8007438:	2300      	movs	r3, #0
}
 800743a:	4618      	mov	r0, r3
 800743c:	3708      	adds	r7, #8
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}

08007442 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007442:	b580      	push	{r7, lr}
 8007444:	b082      	sub	sp, #8
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
 800744a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007452:	6839      	ldr	r1, [r7, #0]
 8007454:	4618      	mov	r0, r3
 8007456:	f000 fed8 	bl	800820a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2201      	movs	r2, #1
 800745e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007468:	461a      	mov	r2, r3
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007476:	f003 031f 	and.w	r3, r3, #31
 800747a:	2b02      	cmp	r3, #2
 800747c:	d016      	beq.n	80074ac <USBD_LL_SetupStage+0x6a>
 800747e:	2b02      	cmp	r3, #2
 8007480:	d81c      	bhi.n	80074bc <USBD_LL_SetupStage+0x7a>
 8007482:	2b00      	cmp	r3, #0
 8007484:	d002      	beq.n	800748c <USBD_LL_SetupStage+0x4a>
 8007486:	2b01      	cmp	r3, #1
 8007488:	d008      	beq.n	800749c <USBD_LL_SetupStage+0x5a>
 800748a:	e017      	b.n	80074bc <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007492:	4619      	mov	r1, r3
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f000 f9cb 	bl	8007830 <USBD_StdDevReq>
      break;
 800749a:	e01a      	b.n	80074d2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80074a2:	4619      	mov	r1, r3
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 fa2d 	bl	8007904 <USBD_StdItfReq>
      break;
 80074aa:	e012      	b.n	80074d2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80074b2:	4619      	mov	r1, r3
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 fa6d 	bl	8007994 <USBD_StdEPReq>
      break;
 80074ba:	e00a      	b.n	80074d2 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80074c2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	4619      	mov	r1, r3
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f001 fb32 	bl	8008b34 <USBD_LL_StallEP>
      break;
 80074d0:	bf00      	nop
  }

  return USBD_OK;
 80074d2:	2300      	movs	r3, #0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3708      	adds	r7, #8
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b086      	sub	sp, #24
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	460b      	mov	r3, r1
 80074e6:	607a      	str	r2, [r7, #4]
 80074e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80074ea:	7afb      	ldrb	r3, [r7, #11]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d14b      	bne.n	8007588 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80074f6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80074fe:	2b03      	cmp	r3, #3
 8007500:	d134      	bne.n	800756c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	68da      	ldr	r2, [r3, #12]
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	691b      	ldr	r3, [r3, #16]
 800750a:	429a      	cmp	r2, r3
 800750c:	d919      	bls.n	8007542 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	68da      	ldr	r2, [r3, #12]
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	691b      	ldr	r3, [r3, #16]
 8007516:	1ad2      	subs	r2, r2, r3
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	68da      	ldr	r2, [r3, #12]
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007524:	429a      	cmp	r2, r3
 8007526:	d203      	bcs.n	8007530 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800752c:	b29b      	uxth	r3, r3
 800752e:	e002      	b.n	8007536 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007534:	b29b      	uxth	r3, r3
 8007536:	461a      	mov	r2, r3
 8007538:	6879      	ldr	r1, [r7, #4]
 800753a:	68f8      	ldr	r0, [r7, #12]
 800753c:	f000 ff54 	bl	80083e8 <USBD_CtlContinueRx>
 8007540:	e038      	b.n	80075b4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00a      	beq.n	8007564 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007554:	2b03      	cmp	r3, #3
 8007556:	d105      	bne.n	8007564 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800755e:	691b      	ldr	r3, [r3, #16]
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007564:	68f8      	ldr	r0, [r7, #12]
 8007566:	f000 ff51 	bl	800840c <USBD_CtlSendStatus>
 800756a:	e023      	b.n	80075b4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007572:	2b05      	cmp	r3, #5
 8007574:	d11e      	bne.n	80075b4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2200      	movs	r2, #0
 800757a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800757e:	2100      	movs	r1, #0
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	f001 fad7 	bl	8008b34 <USBD_LL_StallEP>
 8007586:	e015      	b.n	80075b4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800758e:	699b      	ldr	r3, [r3, #24]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d00d      	beq.n	80075b0 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800759a:	2b03      	cmp	r3, #3
 800759c:	d108      	bne.n	80075b0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075a4:	699b      	ldr	r3, [r3, #24]
 80075a6:	7afa      	ldrb	r2, [r7, #11]
 80075a8:	4611      	mov	r1, r2
 80075aa:	68f8      	ldr	r0, [r7, #12]
 80075ac:	4798      	blx	r3
 80075ae:	e001      	b.n	80075b4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80075b0:	2302      	movs	r3, #2
 80075b2:	e000      	b.n	80075b6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80075b4:	2300      	movs	r3, #0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3718      	adds	r7, #24
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}

080075be <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80075be:	b580      	push	{r7, lr}
 80075c0:	b086      	sub	sp, #24
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	60f8      	str	r0, [r7, #12]
 80075c6:	460b      	mov	r3, r1
 80075c8:	607a      	str	r2, [r7, #4]
 80075ca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80075cc:	7afb      	ldrb	r3, [r7, #11]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d17f      	bne.n	80076d2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	3314      	adds	r3, #20
 80075d6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80075de:	2b02      	cmp	r3, #2
 80075e0:	d15c      	bne.n	800769c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	68da      	ldr	r2, [r3, #12]
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	691b      	ldr	r3, [r3, #16]
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d915      	bls.n	800761a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	68da      	ldr	r2, [r3, #12]
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	691b      	ldr	r3, [r3, #16]
 80075f6:	1ad2      	subs	r2, r2, r3
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	b29b      	uxth	r3, r3
 8007602:	461a      	mov	r2, r3
 8007604:	6879      	ldr	r1, [r7, #4]
 8007606:	68f8      	ldr	r0, [r7, #12]
 8007608:	f000 febe 	bl	8008388 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800760c:	2300      	movs	r3, #0
 800760e:	2200      	movs	r2, #0
 8007610:	2100      	movs	r1, #0
 8007612:	68f8      	ldr	r0, [r7, #12]
 8007614:	f001 fb39 	bl	8008c8a <USBD_LL_PrepareReceive>
 8007618:	e04e      	b.n	80076b8 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	697a      	ldr	r2, [r7, #20]
 8007620:	6912      	ldr	r2, [r2, #16]
 8007622:	fbb3 f1f2 	udiv	r1, r3, r2
 8007626:	fb01 f202 	mul.w	r2, r1, r2
 800762a:	1a9b      	subs	r3, r3, r2
 800762c:	2b00      	cmp	r3, #0
 800762e:	d11c      	bne.n	800766a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	689a      	ldr	r2, [r3, #8]
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007638:	429a      	cmp	r2, r3
 800763a:	d316      	bcc.n	800766a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	689a      	ldr	r2, [r3, #8]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007646:	429a      	cmp	r2, r3
 8007648:	d20f      	bcs.n	800766a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800764a:	2200      	movs	r2, #0
 800764c:	2100      	movs	r1, #0
 800764e:	68f8      	ldr	r0, [r7, #12]
 8007650:	f000 fe9a 	bl	8008388 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2200      	movs	r2, #0
 8007658:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800765c:	2300      	movs	r3, #0
 800765e:	2200      	movs	r2, #0
 8007660:	2100      	movs	r1, #0
 8007662:	68f8      	ldr	r0, [r7, #12]
 8007664:	f001 fb11 	bl	8008c8a <USBD_LL_PrepareReceive>
 8007668:	e026      	b.n	80076b8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00a      	beq.n	800768c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800767c:	2b03      	cmp	r3, #3
 800767e:	d105      	bne.n	800768c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007686:	68db      	ldr	r3, [r3, #12]
 8007688:	68f8      	ldr	r0, [r7, #12]
 800768a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800768c:	2180      	movs	r1, #128	@ 0x80
 800768e:	68f8      	ldr	r0, [r7, #12]
 8007690:	f001 fa50 	bl	8008b34 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007694:	68f8      	ldr	r0, [r7, #12]
 8007696:	f000 fecc 	bl	8008432 <USBD_CtlReceiveStatus>
 800769a:	e00d      	b.n	80076b8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80076a2:	2b04      	cmp	r3, #4
 80076a4:	d004      	beq.n	80076b0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d103      	bne.n	80076b8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80076b0:	2180      	movs	r1, #128	@ 0x80
 80076b2:	68f8      	ldr	r0, [r7, #12]
 80076b4:	f001 fa3e 	bl	8008b34 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d11d      	bne.n	80076fe <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80076c2:	68f8      	ldr	r0, [r7, #12]
 80076c4:	f7ff fe81 	bl	80073ca <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2200      	movs	r2, #0
 80076cc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80076d0:	e015      	b.n	80076fe <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076d8:	695b      	ldr	r3, [r3, #20]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d00d      	beq.n	80076fa <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80076e4:	2b03      	cmp	r3, #3
 80076e6:	d108      	bne.n	80076fa <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076ee:	695b      	ldr	r3, [r3, #20]
 80076f0:	7afa      	ldrb	r2, [r7, #11]
 80076f2:	4611      	mov	r1, r2
 80076f4:	68f8      	ldr	r0, [r7, #12]
 80076f6:	4798      	blx	r3
 80076f8:	e001      	b.n	80076fe <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80076fa:	2302      	movs	r3, #2
 80076fc:	e000      	b.n	8007700 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80076fe:	2300      	movs	r3, #0
}
 8007700:	4618      	mov	r0, r3
 8007702:	3718      	adds	r7, #24
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007710:	2340      	movs	r3, #64	@ 0x40
 8007712:	2200      	movs	r2, #0
 8007714:	2100      	movs	r1, #0
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f001 f9c7 	bl	8008aaa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2201      	movs	r2, #1
 8007720:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2240      	movs	r2, #64	@ 0x40
 8007728:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800772c:	2340      	movs	r3, #64	@ 0x40
 800772e:	2200      	movs	r2, #0
 8007730:	2180      	movs	r1, #128	@ 0x80
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f001 f9b9 	bl	8008aaa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2240      	movs	r2, #64	@ 0x40
 8007742:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007768:	2b00      	cmp	r3, #0
 800776a:	d009      	beq.n	8007780 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	6852      	ldr	r2, [r2, #4]
 8007778:	b2d2      	uxtb	r2, r2
 800777a:	4611      	mov	r1, r2
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	4798      	blx	r3
  }

  return USBD_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3708      	adds	r7, #8
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}

0800778a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800778a:	b480      	push	{r7}
 800778c:	b083      	sub	sp, #12
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
 8007792:	460b      	mov	r3, r1
 8007794:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	78fa      	ldrb	r2, [r7, #3]
 800779a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	370c      	adds	r7, #12
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bc80      	pop	{r7}
 80077a6:	4770      	bx	lr

080077a8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2204      	movs	r2, #4
 80077c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	370c      	adds	r7, #12
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bc80      	pop	{r7}
 80077ce:	4770      	bx	lr

080077d0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077de:	2b04      	cmp	r3, #4
 80077e0:	d105      	bne.n	80077ee <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80077ee:	2300      	movs	r3, #0
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	370c      	adds	r7, #12
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bc80      	pop	{r7}
 80077f8:	4770      	bx	lr

080077fa <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b082      	sub	sp, #8
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007808:	2b03      	cmp	r3, #3
 800780a:	d10b      	bne.n	8007824 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007812:	69db      	ldr	r3, [r3, #28]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d005      	beq.n	8007824 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800781e:	69db      	ldr	r3, [r3, #28]
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007824:	2300      	movs	r3, #0
}
 8007826:	4618      	mov	r0, r3
 8007828:	3708      	adds	r7, #8
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
	...

08007830 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800783a:	2300      	movs	r3, #0
 800783c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007846:	2b40      	cmp	r3, #64	@ 0x40
 8007848:	d005      	beq.n	8007856 <USBD_StdDevReq+0x26>
 800784a:	2b40      	cmp	r3, #64	@ 0x40
 800784c:	d84f      	bhi.n	80078ee <USBD_StdDevReq+0xbe>
 800784e:	2b00      	cmp	r3, #0
 8007850:	d009      	beq.n	8007866 <USBD_StdDevReq+0x36>
 8007852:	2b20      	cmp	r3, #32
 8007854:	d14b      	bne.n	80078ee <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	6839      	ldr	r1, [r7, #0]
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	4798      	blx	r3
      break;
 8007864:	e048      	b.n	80078f8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	785b      	ldrb	r3, [r3, #1]
 800786a:	2b09      	cmp	r3, #9
 800786c:	d839      	bhi.n	80078e2 <USBD_StdDevReq+0xb2>
 800786e:	a201      	add	r2, pc, #4	@ (adr r2, 8007874 <USBD_StdDevReq+0x44>)
 8007870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007874:	080078c5 	.word	0x080078c5
 8007878:	080078d9 	.word	0x080078d9
 800787c:	080078e3 	.word	0x080078e3
 8007880:	080078cf 	.word	0x080078cf
 8007884:	080078e3 	.word	0x080078e3
 8007888:	080078a7 	.word	0x080078a7
 800788c:	0800789d 	.word	0x0800789d
 8007890:	080078e3 	.word	0x080078e3
 8007894:	080078bb 	.word	0x080078bb
 8007898:	080078b1 	.word	0x080078b1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800789c:	6839      	ldr	r1, [r7, #0]
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 f9dc 	bl	8007c5c <USBD_GetDescriptor>
          break;
 80078a4:	e022      	b.n	80078ec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80078a6:	6839      	ldr	r1, [r7, #0]
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 fb3f 	bl	8007f2c <USBD_SetAddress>
          break;
 80078ae:	e01d      	b.n	80078ec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80078b0:	6839      	ldr	r1, [r7, #0]
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 fb7e 	bl	8007fb4 <USBD_SetConfig>
          break;
 80078b8:	e018      	b.n	80078ec <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80078ba:	6839      	ldr	r1, [r7, #0]
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 fc07 	bl	80080d0 <USBD_GetConfig>
          break;
 80078c2:	e013      	b.n	80078ec <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80078c4:	6839      	ldr	r1, [r7, #0]
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 fc37 	bl	800813a <USBD_GetStatus>
          break;
 80078cc:	e00e      	b.n	80078ec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80078ce:	6839      	ldr	r1, [r7, #0]
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 fc65 	bl	80081a0 <USBD_SetFeature>
          break;
 80078d6:	e009      	b.n	80078ec <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80078d8:	6839      	ldr	r1, [r7, #0]
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 fc74 	bl	80081c8 <USBD_ClrFeature>
          break;
 80078e0:	e004      	b.n	80078ec <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80078e2:	6839      	ldr	r1, [r7, #0]
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 fcc9 	bl	800827c <USBD_CtlError>
          break;
 80078ea:	bf00      	nop
      }
      break;
 80078ec:	e004      	b.n	80078f8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80078ee:	6839      	ldr	r1, [r7, #0]
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 fcc3 	bl	800827c <USBD_CtlError>
      break;
 80078f6:	bf00      	nop
  }

  return ret;
 80078f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3710      	adds	r7, #16
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop

08007904 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800790e:	2300      	movs	r3, #0
 8007910:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	781b      	ldrb	r3, [r3, #0]
 8007916:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800791a:	2b40      	cmp	r3, #64	@ 0x40
 800791c:	d005      	beq.n	800792a <USBD_StdItfReq+0x26>
 800791e:	2b40      	cmp	r3, #64	@ 0x40
 8007920:	d82e      	bhi.n	8007980 <USBD_StdItfReq+0x7c>
 8007922:	2b00      	cmp	r3, #0
 8007924:	d001      	beq.n	800792a <USBD_StdItfReq+0x26>
 8007926:	2b20      	cmp	r3, #32
 8007928:	d12a      	bne.n	8007980 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007930:	3b01      	subs	r3, #1
 8007932:	2b02      	cmp	r3, #2
 8007934:	d81d      	bhi.n	8007972 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	889b      	ldrh	r3, [r3, #4]
 800793a:	b2db      	uxtb	r3, r3
 800793c:	2b01      	cmp	r3, #1
 800793e:	d813      	bhi.n	8007968 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	6839      	ldr	r1, [r7, #0]
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	4798      	blx	r3
 800794e:	4603      	mov	r3, r0
 8007950:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	88db      	ldrh	r3, [r3, #6]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d110      	bne.n	800797c <USBD_StdItfReq+0x78>
 800795a:	7bfb      	ldrb	r3, [r7, #15]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d10d      	bne.n	800797c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 fd53 	bl	800840c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007966:	e009      	b.n	800797c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007968:	6839      	ldr	r1, [r7, #0]
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 fc86 	bl	800827c <USBD_CtlError>
          break;
 8007970:	e004      	b.n	800797c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007972:	6839      	ldr	r1, [r7, #0]
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 fc81 	bl	800827c <USBD_CtlError>
          break;
 800797a:	e000      	b.n	800797e <USBD_StdItfReq+0x7a>
          break;
 800797c:	bf00      	nop
      }
      break;
 800797e:	e004      	b.n	800798a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007980:	6839      	ldr	r1, [r7, #0]
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 fc7a 	bl	800827c <USBD_CtlError>
      break;
 8007988:	bf00      	nop
  }

  return USBD_OK;
 800798a:	2300      	movs	r3, #0
}
 800798c:	4618      	mov	r0, r3
 800798e:	3710      	adds	r7, #16
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b084      	sub	sp, #16
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800799e:	2300      	movs	r3, #0
 80079a0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	889b      	ldrh	r3, [r3, #4]
 80079a6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80079b0:	2b40      	cmp	r3, #64	@ 0x40
 80079b2:	d007      	beq.n	80079c4 <USBD_StdEPReq+0x30>
 80079b4:	2b40      	cmp	r3, #64	@ 0x40
 80079b6:	f200 8146 	bhi.w	8007c46 <USBD_StdEPReq+0x2b2>
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d00a      	beq.n	80079d4 <USBD_StdEPReq+0x40>
 80079be:	2b20      	cmp	r3, #32
 80079c0:	f040 8141 	bne.w	8007c46 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	6839      	ldr	r1, [r7, #0]
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	4798      	blx	r3
      break;
 80079d2:	e13d      	b.n	8007c50 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80079dc:	2b20      	cmp	r3, #32
 80079de:	d10a      	bne.n	80079f6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	6839      	ldr	r1, [r7, #0]
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	4798      	blx	r3
 80079ee:	4603      	mov	r3, r0
 80079f0:	73fb      	strb	r3, [r7, #15]

        return ret;
 80079f2:	7bfb      	ldrb	r3, [r7, #15]
 80079f4:	e12d      	b.n	8007c52 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	785b      	ldrb	r3, [r3, #1]
 80079fa:	2b03      	cmp	r3, #3
 80079fc:	d007      	beq.n	8007a0e <USBD_StdEPReq+0x7a>
 80079fe:	2b03      	cmp	r3, #3
 8007a00:	f300 811b 	bgt.w	8007c3a <USBD_StdEPReq+0x2a6>
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d072      	beq.n	8007aee <USBD_StdEPReq+0x15a>
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d03a      	beq.n	8007a82 <USBD_StdEPReq+0xee>
 8007a0c:	e115      	b.n	8007c3a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a14:	2b02      	cmp	r3, #2
 8007a16:	d002      	beq.n	8007a1e <USBD_StdEPReq+0x8a>
 8007a18:	2b03      	cmp	r3, #3
 8007a1a:	d015      	beq.n	8007a48 <USBD_StdEPReq+0xb4>
 8007a1c:	e02b      	b.n	8007a76 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a1e:	7bbb      	ldrb	r3, [r7, #14]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d00c      	beq.n	8007a3e <USBD_StdEPReq+0xaa>
 8007a24:	7bbb      	ldrb	r3, [r7, #14]
 8007a26:	2b80      	cmp	r3, #128	@ 0x80
 8007a28:	d009      	beq.n	8007a3e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007a2a:	7bbb      	ldrb	r3, [r7, #14]
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f001 f880 	bl	8008b34 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007a34:	2180      	movs	r1, #128	@ 0x80
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f001 f87c 	bl	8008b34 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a3c:	e020      	b.n	8007a80 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007a3e:	6839      	ldr	r1, [r7, #0]
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 fc1b 	bl	800827c <USBD_CtlError>
              break;
 8007a46:	e01b      	b.n	8007a80 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	885b      	ldrh	r3, [r3, #2]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d10e      	bne.n	8007a6e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007a50:	7bbb      	ldrb	r3, [r7, #14]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d00b      	beq.n	8007a6e <USBD_StdEPReq+0xda>
 8007a56:	7bbb      	ldrb	r3, [r7, #14]
 8007a58:	2b80      	cmp	r3, #128	@ 0x80
 8007a5a:	d008      	beq.n	8007a6e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	88db      	ldrh	r3, [r3, #6]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d104      	bne.n	8007a6e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007a64:	7bbb      	ldrb	r3, [r7, #14]
 8007a66:	4619      	mov	r1, r3
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f001 f863 	bl	8008b34 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 fccc 	bl	800840c <USBD_CtlSendStatus>

              break;
 8007a74:	e004      	b.n	8007a80 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007a76:	6839      	ldr	r1, [r7, #0]
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 fbff 	bl	800827c <USBD_CtlError>
              break;
 8007a7e:	bf00      	nop
          }
          break;
 8007a80:	e0e0      	b.n	8007c44 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a88:	2b02      	cmp	r3, #2
 8007a8a:	d002      	beq.n	8007a92 <USBD_StdEPReq+0xfe>
 8007a8c:	2b03      	cmp	r3, #3
 8007a8e:	d015      	beq.n	8007abc <USBD_StdEPReq+0x128>
 8007a90:	e026      	b.n	8007ae0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a92:	7bbb      	ldrb	r3, [r7, #14]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d00c      	beq.n	8007ab2 <USBD_StdEPReq+0x11e>
 8007a98:	7bbb      	ldrb	r3, [r7, #14]
 8007a9a:	2b80      	cmp	r3, #128	@ 0x80
 8007a9c:	d009      	beq.n	8007ab2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007a9e:	7bbb      	ldrb	r3, [r7, #14]
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f001 f846 	bl	8008b34 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007aa8:	2180      	movs	r1, #128	@ 0x80
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f001 f842 	bl	8008b34 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ab0:	e01c      	b.n	8007aec <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007ab2:	6839      	ldr	r1, [r7, #0]
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 fbe1 	bl	800827c <USBD_CtlError>
              break;
 8007aba:	e017      	b.n	8007aec <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	885b      	ldrh	r3, [r3, #2]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d112      	bne.n	8007aea <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007ac4:	7bbb      	ldrb	r3, [r7, #14]
 8007ac6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d004      	beq.n	8007ad8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007ace:	7bbb      	ldrb	r3, [r7, #14]
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f001 f84d 	bl	8008b72 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 fc97 	bl	800840c <USBD_CtlSendStatus>
              }
              break;
 8007ade:	e004      	b.n	8007aea <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007ae0:	6839      	ldr	r1, [r7, #0]
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 fbca 	bl	800827c <USBD_CtlError>
              break;
 8007ae8:	e000      	b.n	8007aec <USBD_StdEPReq+0x158>
              break;
 8007aea:	bf00      	nop
          }
          break;
 8007aec:	e0aa      	b.n	8007c44 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007af4:	2b02      	cmp	r3, #2
 8007af6:	d002      	beq.n	8007afe <USBD_StdEPReq+0x16a>
 8007af8:	2b03      	cmp	r3, #3
 8007afa:	d032      	beq.n	8007b62 <USBD_StdEPReq+0x1ce>
 8007afc:	e097      	b.n	8007c2e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007afe:	7bbb      	ldrb	r3, [r7, #14]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d007      	beq.n	8007b14 <USBD_StdEPReq+0x180>
 8007b04:	7bbb      	ldrb	r3, [r7, #14]
 8007b06:	2b80      	cmp	r3, #128	@ 0x80
 8007b08:	d004      	beq.n	8007b14 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007b0a:	6839      	ldr	r1, [r7, #0]
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 fbb5 	bl	800827c <USBD_CtlError>
                break;
 8007b12:	e091      	b.n	8007c38 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	da0b      	bge.n	8007b34 <USBD_StdEPReq+0x1a0>
 8007b1c:	7bbb      	ldrb	r3, [r7, #14]
 8007b1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007b22:	4613      	mov	r3, r2
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	4413      	add	r3, r2
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	3310      	adds	r3, #16
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	4413      	add	r3, r2
 8007b30:	3304      	adds	r3, #4
 8007b32:	e00b      	b.n	8007b4c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b34:	7bbb      	ldrb	r3, [r7, #14]
 8007b36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b3a:	4613      	mov	r3, r2
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	4413      	add	r3, r2
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	4413      	add	r3, r2
 8007b4a:	3304      	adds	r3, #4
 8007b4c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	2200      	movs	r2, #0
 8007b52:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	2202      	movs	r2, #2
 8007b58:	4619      	mov	r1, r3
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 fbf8 	bl	8008350 <USBD_CtlSendData>
              break;
 8007b60:	e06a      	b.n	8007c38 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007b62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	da11      	bge.n	8007b8e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007b6a:	7bbb      	ldrb	r3, [r7, #14]
 8007b6c:	f003 020f 	and.w	r2, r3, #15
 8007b70:	6879      	ldr	r1, [r7, #4]
 8007b72:	4613      	mov	r3, r2
 8007b74:	009b      	lsls	r3, r3, #2
 8007b76:	4413      	add	r3, r2
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	440b      	add	r3, r1
 8007b7c:	3318      	adds	r3, #24
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d117      	bne.n	8007bb4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007b84:	6839      	ldr	r1, [r7, #0]
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 fb78 	bl	800827c <USBD_CtlError>
                  break;
 8007b8c:	e054      	b.n	8007c38 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007b8e:	7bbb      	ldrb	r3, [r7, #14]
 8007b90:	f003 020f 	and.w	r2, r3, #15
 8007b94:	6879      	ldr	r1, [r7, #4]
 8007b96:	4613      	mov	r3, r2
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	4413      	add	r3, r2
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	440b      	add	r3, r1
 8007ba0:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d104      	bne.n	8007bb4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007baa:	6839      	ldr	r1, [r7, #0]
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 fb65 	bl	800827c <USBD_CtlError>
                  break;
 8007bb2:	e041      	b.n	8007c38 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	da0b      	bge.n	8007bd4 <USBD_StdEPReq+0x240>
 8007bbc:	7bbb      	ldrb	r3, [r7, #14]
 8007bbe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007bc2:	4613      	mov	r3, r2
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	4413      	add	r3, r2
 8007bc8:	009b      	lsls	r3, r3, #2
 8007bca:	3310      	adds	r3, #16
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	4413      	add	r3, r2
 8007bd0:	3304      	adds	r3, #4
 8007bd2:	e00b      	b.n	8007bec <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007bd4:	7bbb      	ldrb	r3, [r7, #14]
 8007bd6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bda:	4613      	mov	r3, r2
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	4413      	add	r3, r2
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	4413      	add	r3, r2
 8007bea:	3304      	adds	r3, #4
 8007bec:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007bee:	7bbb      	ldrb	r3, [r7, #14]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d002      	beq.n	8007bfa <USBD_StdEPReq+0x266>
 8007bf4:	7bbb      	ldrb	r3, [r7, #14]
 8007bf6:	2b80      	cmp	r3, #128	@ 0x80
 8007bf8:	d103      	bne.n	8007c02 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	601a      	str	r2, [r3, #0]
 8007c00:	e00e      	b.n	8007c20 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007c02:	7bbb      	ldrb	r3, [r7, #14]
 8007c04:	4619      	mov	r1, r3
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 ffd2 	bl	8008bb0 <USBD_LL_IsStallEP>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d003      	beq.n	8007c1a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	2201      	movs	r2, #1
 8007c16:	601a      	str	r2, [r3, #0]
 8007c18:	e002      	b.n	8007c20 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	2202      	movs	r2, #2
 8007c24:	4619      	mov	r1, r3
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 fb92 	bl	8008350 <USBD_CtlSendData>
              break;
 8007c2c:	e004      	b.n	8007c38 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007c2e:	6839      	ldr	r1, [r7, #0]
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 fb23 	bl	800827c <USBD_CtlError>
              break;
 8007c36:	bf00      	nop
          }
          break;
 8007c38:	e004      	b.n	8007c44 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007c3a:	6839      	ldr	r1, [r7, #0]
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 fb1d 	bl	800827c <USBD_CtlError>
          break;
 8007c42:	bf00      	nop
      }
      break;
 8007c44:	e004      	b.n	8007c50 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007c46:	6839      	ldr	r1, [r7, #0]
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 fb17 	bl	800827c <USBD_CtlError>
      break;
 8007c4e:	bf00      	nop
  }

  return ret;
 8007c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3710      	adds	r7, #16
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
	...

08007c5c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c66:	2300      	movs	r3, #0
 8007c68:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	885b      	ldrh	r3, [r3, #2]
 8007c76:	0a1b      	lsrs	r3, r3, #8
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	2b06      	cmp	r3, #6
 8007c7e:	f200 8128 	bhi.w	8007ed2 <USBD_GetDescriptor+0x276>
 8007c82:	a201      	add	r2, pc, #4	@ (adr r2, 8007c88 <USBD_GetDescriptor+0x2c>)
 8007c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c88:	08007ca5 	.word	0x08007ca5
 8007c8c:	08007cbd 	.word	0x08007cbd
 8007c90:	08007cfd 	.word	0x08007cfd
 8007c94:	08007ed3 	.word	0x08007ed3
 8007c98:	08007ed3 	.word	0x08007ed3
 8007c9c:	08007e73 	.word	0x08007e73
 8007ca0:	08007e9f 	.word	0x08007e9f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	7c12      	ldrb	r2, [r2, #16]
 8007cb0:	f107 0108 	add.w	r1, r7, #8
 8007cb4:	4610      	mov	r0, r2
 8007cb6:	4798      	blx	r3
 8007cb8:	60f8      	str	r0, [r7, #12]
      break;
 8007cba:	e112      	b.n	8007ee2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	7c1b      	ldrb	r3, [r3, #16]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d10d      	bne.n	8007ce0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ccc:	f107 0208 	add.w	r2, r7, #8
 8007cd0:	4610      	mov	r0, r2
 8007cd2:	4798      	blx	r3
 8007cd4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	3301      	adds	r3, #1
 8007cda:	2202      	movs	r2, #2
 8007cdc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007cde:	e100      	b.n	8007ee2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ce8:	f107 0208 	add.w	r2, r7, #8
 8007cec:	4610      	mov	r0, r2
 8007cee:	4798      	blx	r3
 8007cf0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	3301      	adds	r3, #1
 8007cf6:	2202      	movs	r2, #2
 8007cf8:	701a      	strb	r2, [r3, #0]
      break;
 8007cfa:	e0f2      	b.n	8007ee2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	885b      	ldrh	r3, [r3, #2]
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	2b05      	cmp	r3, #5
 8007d04:	f200 80ac 	bhi.w	8007e60 <USBD_GetDescriptor+0x204>
 8007d08:	a201      	add	r2, pc, #4	@ (adr r2, 8007d10 <USBD_GetDescriptor+0xb4>)
 8007d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d0e:	bf00      	nop
 8007d10:	08007d29 	.word	0x08007d29
 8007d14:	08007d5d 	.word	0x08007d5d
 8007d18:	08007d91 	.word	0x08007d91
 8007d1c:	08007dc5 	.word	0x08007dc5
 8007d20:	08007df9 	.word	0x08007df9
 8007d24:	08007e2d 	.word	0x08007e2d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d00b      	beq.n	8007d4c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	7c12      	ldrb	r2, [r2, #16]
 8007d40:	f107 0108 	add.w	r1, r7, #8
 8007d44:	4610      	mov	r0, r2
 8007d46:	4798      	blx	r3
 8007d48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d4a:	e091      	b.n	8007e70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d4c:	6839      	ldr	r1, [r7, #0]
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 fa94 	bl	800827c <USBD_CtlError>
            err++;
 8007d54:	7afb      	ldrb	r3, [r7, #11]
 8007d56:	3301      	adds	r3, #1
 8007d58:	72fb      	strb	r3, [r7, #11]
          break;
 8007d5a:	e089      	b.n	8007e70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d00b      	beq.n	8007d80 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	7c12      	ldrb	r2, [r2, #16]
 8007d74:	f107 0108 	add.w	r1, r7, #8
 8007d78:	4610      	mov	r0, r2
 8007d7a:	4798      	blx	r3
 8007d7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d7e:	e077      	b.n	8007e70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d80:	6839      	ldr	r1, [r7, #0]
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 fa7a 	bl	800827c <USBD_CtlError>
            err++;
 8007d88:	7afb      	ldrb	r3, [r7, #11]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	72fb      	strb	r3, [r7, #11]
          break;
 8007d8e:	e06f      	b.n	8007e70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d00b      	beq.n	8007db4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	7c12      	ldrb	r2, [r2, #16]
 8007da8:	f107 0108 	add.w	r1, r7, #8
 8007dac:	4610      	mov	r0, r2
 8007dae:	4798      	blx	r3
 8007db0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007db2:	e05d      	b.n	8007e70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007db4:	6839      	ldr	r1, [r7, #0]
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 fa60 	bl	800827c <USBD_CtlError>
            err++;
 8007dbc:	7afb      	ldrb	r3, [r7, #11]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	72fb      	strb	r3, [r7, #11]
          break;
 8007dc2:	e055      	b.n	8007e70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007dca:	691b      	ldr	r3, [r3, #16]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d00b      	beq.n	8007de8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007dd6:	691b      	ldr	r3, [r3, #16]
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	7c12      	ldrb	r2, [r2, #16]
 8007ddc:	f107 0108 	add.w	r1, r7, #8
 8007de0:	4610      	mov	r0, r2
 8007de2:	4798      	blx	r3
 8007de4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007de6:	e043      	b.n	8007e70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007de8:	6839      	ldr	r1, [r7, #0]
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 fa46 	bl	800827c <USBD_CtlError>
            err++;
 8007df0:	7afb      	ldrb	r3, [r7, #11]
 8007df2:	3301      	adds	r3, #1
 8007df4:	72fb      	strb	r3, [r7, #11]
          break;
 8007df6:	e03b      	b.n	8007e70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007dfe:	695b      	ldr	r3, [r3, #20]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d00b      	beq.n	8007e1c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007e0a:	695b      	ldr	r3, [r3, #20]
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	7c12      	ldrb	r2, [r2, #16]
 8007e10:	f107 0108 	add.w	r1, r7, #8
 8007e14:	4610      	mov	r0, r2
 8007e16:	4798      	blx	r3
 8007e18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e1a:	e029      	b.n	8007e70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e1c:	6839      	ldr	r1, [r7, #0]
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 fa2c 	bl	800827c <USBD_CtlError>
            err++;
 8007e24:	7afb      	ldrb	r3, [r7, #11]
 8007e26:	3301      	adds	r3, #1
 8007e28:	72fb      	strb	r3, [r7, #11]
          break;
 8007e2a:	e021      	b.n	8007e70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007e32:	699b      	ldr	r3, [r3, #24]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d00b      	beq.n	8007e50 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007e3e:	699b      	ldr	r3, [r3, #24]
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	7c12      	ldrb	r2, [r2, #16]
 8007e44:	f107 0108 	add.w	r1, r7, #8
 8007e48:	4610      	mov	r0, r2
 8007e4a:	4798      	blx	r3
 8007e4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e4e:	e00f      	b.n	8007e70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e50:	6839      	ldr	r1, [r7, #0]
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 fa12 	bl	800827c <USBD_CtlError>
            err++;
 8007e58:	7afb      	ldrb	r3, [r7, #11]
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	72fb      	strb	r3, [r7, #11]
          break;
 8007e5e:	e007      	b.n	8007e70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007e60:	6839      	ldr	r1, [r7, #0]
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 fa0a 	bl	800827c <USBD_CtlError>
          err++;
 8007e68:	7afb      	ldrb	r3, [r7, #11]
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007e6e:	e038      	b.n	8007ee2 <USBD_GetDescriptor+0x286>
 8007e70:	e037      	b.n	8007ee2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	7c1b      	ldrb	r3, [r3, #16]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d109      	bne.n	8007e8e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e82:	f107 0208 	add.w	r2, r7, #8
 8007e86:	4610      	mov	r0, r2
 8007e88:	4798      	blx	r3
 8007e8a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e8c:	e029      	b.n	8007ee2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007e8e:	6839      	ldr	r1, [r7, #0]
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 f9f3 	bl	800827c <USBD_CtlError>
        err++;
 8007e96:	7afb      	ldrb	r3, [r7, #11]
 8007e98:	3301      	adds	r3, #1
 8007e9a:	72fb      	strb	r3, [r7, #11]
      break;
 8007e9c:	e021      	b.n	8007ee2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	7c1b      	ldrb	r3, [r3, #16]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d10d      	bne.n	8007ec2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007eae:	f107 0208 	add.w	r2, r7, #8
 8007eb2:	4610      	mov	r0, r2
 8007eb4:	4798      	blx	r3
 8007eb6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	3301      	adds	r3, #1
 8007ebc:	2207      	movs	r2, #7
 8007ebe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ec0:	e00f      	b.n	8007ee2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007ec2:	6839      	ldr	r1, [r7, #0]
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 f9d9 	bl	800827c <USBD_CtlError>
        err++;
 8007eca:	7afb      	ldrb	r3, [r7, #11]
 8007ecc:	3301      	adds	r3, #1
 8007ece:	72fb      	strb	r3, [r7, #11]
      break;
 8007ed0:	e007      	b.n	8007ee2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007ed2:	6839      	ldr	r1, [r7, #0]
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 f9d1 	bl	800827c <USBD_CtlError>
      err++;
 8007eda:	7afb      	ldrb	r3, [r7, #11]
 8007edc:	3301      	adds	r3, #1
 8007ede:	72fb      	strb	r3, [r7, #11]
      break;
 8007ee0:	bf00      	nop
  }

  if (err != 0U)
 8007ee2:	7afb      	ldrb	r3, [r7, #11]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d11c      	bne.n	8007f22 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007ee8:	893b      	ldrh	r3, [r7, #8]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d011      	beq.n	8007f12 <USBD_GetDescriptor+0x2b6>
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	88db      	ldrh	r3, [r3, #6]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d00d      	beq.n	8007f12 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	88da      	ldrh	r2, [r3, #6]
 8007efa:	893b      	ldrh	r3, [r7, #8]
 8007efc:	4293      	cmp	r3, r2
 8007efe:	bf28      	it	cs
 8007f00:	4613      	movcs	r3, r2
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007f06:	893b      	ldrh	r3, [r7, #8]
 8007f08:	461a      	mov	r2, r3
 8007f0a:	68f9      	ldr	r1, [r7, #12]
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 fa1f 	bl	8008350 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	88db      	ldrh	r3, [r3, #6]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d104      	bne.n	8007f24 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 fa76 	bl	800840c <USBD_CtlSendStatus>
 8007f20:	e000      	b.n	8007f24 <USBD_GetDescriptor+0x2c8>
    return;
 8007f22:	bf00      	nop
    }
  }
}
 8007f24:	3710      	adds	r7, #16
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
 8007f2a:	bf00      	nop

08007f2c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	889b      	ldrh	r3, [r3, #4]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d130      	bne.n	8007fa0 <USBD_SetAddress+0x74>
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	88db      	ldrh	r3, [r3, #6]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d12c      	bne.n	8007fa0 <USBD_SetAddress+0x74>
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	885b      	ldrh	r3, [r3, #2]
 8007f4a:	2b7f      	cmp	r3, #127	@ 0x7f
 8007f4c:	d828      	bhi.n	8007fa0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	885b      	ldrh	r3, [r3, #2]
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f58:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f60:	2b03      	cmp	r3, #3
 8007f62:	d104      	bne.n	8007f6e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007f64:	6839      	ldr	r1, [r7, #0]
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 f988 	bl	800827c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f6c:	e01d      	b.n	8007faa <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	7bfa      	ldrb	r2, [r7, #15]
 8007f72:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007f76:	7bfb      	ldrb	r3, [r7, #15]
 8007f78:	4619      	mov	r1, r3
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 fe43 	bl	8008c06 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 fa43 	bl	800840c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007f86:	7bfb      	ldrb	r3, [r7, #15]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d004      	beq.n	8007f96 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2202      	movs	r2, #2
 8007f90:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f94:	e009      	b.n	8007faa <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2201      	movs	r2, #1
 8007f9a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f9e:	e004      	b.n	8007faa <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007fa0:	6839      	ldr	r1, [r7, #0]
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 f96a 	bl	800827c <USBD_CtlError>
  }
}
 8007fa8:	bf00      	nop
 8007faa:	bf00      	nop
 8007fac:	3710      	adds	r7, #16
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
	...

08007fb4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	885b      	ldrh	r3, [r3, #2]
 8007fc2:	b2da      	uxtb	r2, r3
 8007fc4:	4b41      	ldr	r3, [pc, #260]	@ (80080cc <USBD_SetConfig+0x118>)
 8007fc6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007fc8:	4b40      	ldr	r3, [pc, #256]	@ (80080cc <USBD_SetConfig+0x118>)
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d904      	bls.n	8007fda <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007fd0:	6839      	ldr	r1, [r7, #0]
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 f952 	bl	800827c <USBD_CtlError>
 8007fd8:	e075      	b.n	80080c6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fe0:	2b02      	cmp	r3, #2
 8007fe2:	d002      	beq.n	8007fea <USBD_SetConfig+0x36>
 8007fe4:	2b03      	cmp	r3, #3
 8007fe6:	d023      	beq.n	8008030 <USBD_SetConfig+0x7c>
 8007fe8:	e062      	b.n	80080b0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007fea:	4b38      	ldr	r3, [pc, #224]	@ (80080cc <USBD_SetConfig+0x118>)
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d01a      	beq.n	8008028 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007ff2:	4b36      	ldr	r3, [pc, #216]	@ (80080cc <USBD_SetConfig+0x118>)
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2203      	movs	r2, #3
 8008000:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008004:	4b31      	ldr	r3, [pc, #196]	@ (80080cc <USBD_SetConfig+0x118>)
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	4619      	mov	r1, r3
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f7ff f9e7 	bl	80073de <USBD_SetClassConfig>
 8008010:	4603      	mov	r3, r0
 8008012:	2b02      	cmp	r3, #2
 8008014:	d104      	bne.n	8008020 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008016:	6839      	ldr	r1, [r7, #0]
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 f92f 	bl	800827c <USBD_CtlError>
            return;
 800801e:	e052      	b.n	80080c6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 f9f3 	bl	800840c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008026:	e04e      	b.n	80080c6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 f9ef 	bl	800840c <USBD_CtlSendStatus>
        break;
 800802e:	e04a      	b.n	80080c6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008030:	4b26      	ldr	r3, [pc, #152]	@ (80080cc <USBD_SetConfig+0x118>)
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d112      	bne.n	800805e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2202      	movs	r2, #2
 800803c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8008040:	4b22      	ldr	r3, [pc, #136]	@ (80080cc <USBD_SetConfig+0x118>)
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	461a      	mov	r2, r3
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800804a:	4b20      	ldr	r3, [pc, #128]	@ (80080cc <USBD_SetConfig+0x118>)
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	4619      	mov	r1, r3
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f7ff f9e3 	bl	800741c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 f9d8 	bl	800840c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800805c:	e033      	b.n	80080c6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800805e:	4b1b      	ldr	r3, [pc, #108]	@ (80080cc <USBD_SetConfig+0x118>)
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	461a      	mov	r2, r3
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	429a      	cmp	r2, r3
 800806a:	d01d      	beq.n	80080a8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	b2db      	uxtb	r3, r3
 8008072:	4619      	mov	r1, r3
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f7ff f9d1 	bl	800741c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800807a:	4b14      	ldr	r3, [pc, #80]	@ (80080cc <USBD_SetConfig+0x118>)
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	461a      	mov	r2, r3
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008084:	4b11      	ldr	r3, [pc, #68]	@ (80080cc <USBD_SetConfig+0x118>)
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	4619      	mov	r1, r3
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f7ff f9a7 	bl	80073de <USBD_SetClassConfig>
 8008090:	4603      	mov	r3, r0
 8008092:	2b02      	cmp	r3, #2
 8008094:	d104      	bne.n	80080a0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008096:	6839      	ldr	r1, [r7, #0]
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 f8ef 	bl	800827c <USBD_CtlError>
            return;
 800809e:	e012      	b.n	80080c6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 f9b3 	bl	800840c <USBD_CtlSendStatus>
        break;
 80080a6:	e00e      	b.n	80080c6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 f9af 	bl	800840c <USBD_CtlSendStatus>
        break;
 80080ae:	e00a      	b.n	80080c6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80080b0:	6839      	ldr	r1, [r7, #0]
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 f8e2 	bl	800827c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80080b8:	4b04      	ldr	r3, [pc, #16]	@ (80080cc <USBD_SetConfig+0x118>)
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	4619      	mov	r1, r3
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f7ff f9ac 	bl	800741c <USBD_ClrClassConfig>
        break;
 80080c4:	bf00      	nop
    }
  }
}
 80080c6:	3708      	adds	r7, #8
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}
 80080cc:	20000250 	.word	0x20000250

080080d0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	88db      	ldrh	r3, [r3, #6]
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d004      	beq.n	80080ec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80080e2:	6839      	ldr	r1, [r7, #0]
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 f8c9 	bl	800827c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80080ea:	e022      	b.n	8008132 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080f2:	2b02      	cmp	r3, #2
 80080f4:	dc02      	bgt.n	80080fc <USBD_GetConfig+0x2c>
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	dc03      	bgt.n	8008102 <USBD_GetConfig+0x32>
 80080fa:	e015      	b.n	8008128 <USBD_GetConfig+0x58>
 80080fc:	2b03      	cmp	r3, #3
 80080fe:	d00b      	beq.n	8008118 <USBD_GetConfig+0x48>
 8008100:	e012      	b.n	8008128 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	3308      	adds	r3, #8
 800810c:	2201      	movs	r2, #1
 800810e:	4619      	mov	r1, r3
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 f91d 	bl	8008350 <USBD_CtlSendData>
        break;
 8008116:	e00c      	b.n	8008132 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	3304      	adds	r3, #4
 800811c:	2201      	movs	r2, #1
 800811e:	4619      	mov	r1, r3
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 f915 	bl	8008350 <USBD_CtlSendData>
        break;
 8008126:	e004      	b.n	8008132 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008128:	6839      	ldr	r1, [r7, #0]
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 f8a6 	bl	800827c <USBD_CtlError>
        break;
 8008130:	bf00      	nop
}
 8008132:	bf00      	nop
 8008134:	3708      	adds	r7, #8
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}

0800813a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800813a:	b580      	push	{r7, lr}
 800813c:	b082      	sub	sp, #8
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
 8008142:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800814a:	3b01      	subs	r3, #1
 800814c:	2b02      	cmp	r3, #2
 800814e:	d81e      	bhi.n	800818e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	88db      	ldrh	r3, [r3, #6]
 8008154:	2b02      	cmp	r3, #2
 8008156:	d004      	beq.n	8008162 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008158:	6839      	ldr	r1, [r7, #0]
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 f88e 	bl	800827c <USBD_CtlError>
        break;
 8008160:	e01a      	b.n	8008198 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2201      	movs	r2, #1
 8008166:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800816e:	2b00      	cmp	r3, #0
 8008170:	d005      	beq.n	800817e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	68db      	ldr	r3, [r3, #12]
 8008176:	f043 0202 	orr.w	r2, r3, #2
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	330c      	adds	r3, #12
 8008182:	2202      	movs	r2, #2
 8008184:	4619      	mov	r1, r3
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 f8e2 	bl	8008350 <USBD_CtlSendData>
      break;
 800818c:	e004      	b.n	8008198 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800818e:	6839      	ldr	r1, [r7, #0]
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 f873 	bl	800827c <USBD_CtlError>
      break;
 8008196:	bf00      	nop
  }
}
 8008198:	bf00      	nop
 800819a:	3708      	adds	r7, #8
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}

080081a0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	885b      	ldrh	r3, [r3, #2]
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d106      	bne.n	80081c0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2201      	movs	r2, #1
 80081b6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 f926 	bl	800840c <USBD_CtlSendStatus>
  }
}
 80081c0:	bf00      	nop
 80081c2:	3708      	adds	r7, #8
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b082      	sub	sp, #8
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081d8:	3b01      	subs	r3, #1
 80081da:	2b02      	cmp	r3, #2
 80081dc:	d80b      	bhi.n	80081f6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	885b      	ldrh	r3, [r3, #2]
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d10c      	bne.n	8008200 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 f90c 	bl	800840c <USBD_CtlSendStatus>
      }
      break;
 80081f4:	e004      	b.n	8008200 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80081f6:	6839      	ldr	r1, [r7, #0]
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f000 f83f 	bl	800827c <USBD_CtlError>
      break;
 80081fe:	e000      	b.n	8008202 <USBD_ClrFeature+0x3a>
      break;
 8008200:	bf00      	nop
  }
}
 8008202:	bf00      	nop
 8008204:	3708      	adds	r7, #8
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}

0800820a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800820a:	b480      	push	{r7}
 800820c:	b083      	sub	sp, #12
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
 8008212:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	781a      	ldrb	r2, [r3, #0]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	785a      	ldrb	r2, [r3, #1]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	3302      	adds	r3, #2
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	461a      	mov	r2, r3
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	3303      	adds	r3, #3
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	021b      	lsls	r3, r3, #8
 8008234:	b29b      	uxth	r3, r3
 8008236:	4413      	add	r3, r2
 8008238:	b29a      	uxth	r2, r3
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	3304      	adds	r3, #4
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	461a      	mov	r2, r3
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	3305      	adds	r3, #5
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	021b      	lsls	r3, r3, #8
 800824e:	b29b      	uxth	r3, r3
 8008250:	4413      	add	r3, r2
 8008252:	b29a      	uxth	r2, r3
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	3306      	adds	r3, #6
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	461a      	mov	r2, r3
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	3307      	adds	r3, #7
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	021b      	lsls	r3, r3, #8
 8008268:	b29b      	uxth	r3, r3
 800826a:	4413      	add	r3, r2
 800826c:	b29a      	uxth	r2, r3
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	80da      	strh	r2, [r3, #6]

}
 8008272:	bf00      	nop
 8008274:	370c      	adds	r7, #12
 8008276:	46bd      	mov	sp, r7
 8008278:	bc80      	pop	{r7}
 800827a:	4770      	bx	lr

0800827c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008286:	2180      	movs	r1, #128	@ 0x80
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 fc53 	bl	8008b34 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800828e:	2100      	movs	r1, #0
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 fc4f 	bl	8008b34 <USBD_LL_StallEP>
}
 8008296:	bf00      	nop
 8008298:	3708      	adds	r7, #8
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}

0800829e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800829e:	b580      	push	{r7, lr}
 80082a0:	b086      	sub	sp, #24
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	60f8      	str	r0, [r7, #12]
 80082a6:	60b9      	str	r1, [r7, #8]
 80082a8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80082aa:	2300      	movs	r3, #0
 80082ac:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d032      	beq.n	800831a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80082b4:	68f8      	ldr	r0, [r7, #12]
 80082b6:	f000 f834 	bl	8008322 <USBD_GetLen>
 80082ba:	4603      	mov	r3, r0
 80082bc:	3301      	adds	r3, #1
 80082be:	b29b      	uxth	r3, r3
 80082c0:	005b      	lsls	r3, r3, #1
 80082c2:	b29a      	uxth	r2, r3
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80082c8:	7dfb      	ldrb	r3, [r7, #23]
 80082ca:	1c5a      	adds	r2, r3, #1
 80082cc:	75fa      	strb	r2, [r7, #23]
 80082ce:	461a      	mov	r2, r3
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	4413      	add	r3, r2
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	7812      	ldrb	r2, [r2, #0]
 80082d8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80082da:	7dfb      	ldrb	r3, [r7, #23]
 80082dc:	1c5a      	adds	r2, r3, #1
 80082de:	75fa      	strb	r2, [r7, #23]
 80082e0:	461a      	mov	r2, r3
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	4413      	add	r3, r2
 80082e6:	2203      	movs	r2, #3
 80082e8:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80082ea:	e012      	b.n	8008312 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	1c5a      	adds	r2, r3, #1
 80082f0:	60fa      	str	r2, [r7, #12]
 80082f2:	7dfa      	ldrb	r2, [r7, #23]
 80082f4:	1c51      	adds	r1, r2, #1
 80082f6:	75f9      	strb	r1, [r7, #23]
 80082f8:	4611      	mov	r1, r2
 80082fa:	68ba      	ldr	r2, [r7, #8]
 80082fc:	440a      	add	r2, r1
 80082fe:	781b      	ldrb	r3, [r3, #0]
 8008300:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008302:	7dfb      	ldrb	r3, [r7, #23]
 8008304:	1c5a      	adds	r2, r3, #1
 8008306:	75fa      	strb	r2, [r7, #23]
 8008308:	461a      	mov	r2, r3
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	4413      	add	r3, r2
 800830e:	2200      	movs	r2, #0
 8008310:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d1e8      	bne.n	80082ec <USBD_GetString+0x4e>
    }
  }
}
 800831a:	bf00      	nop
 800831c:	3718      	adds	r7, #24
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}

08008322 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008322:	b480      	push	{r7}
 8008324:	b085      	sub	sp, #20
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800832a:	2300      	movs	r3, #0
 800832c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800832e:	e005      	b.n	800833c <USBD_GetLen+0x1a>
  {
    len++;
 8008330:	7bfb      	ldrb	r3, [r7, #15]
 8008332:	3301      	adds	r3, #1
 8008334:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	3301      	adds	r3, #1
 800833a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d1f5      	bne.n	8008330 <USBD_GetLen+0xe>
  }

  return len;
 8008344:	7bfb      	ldrb	r3, [r7, #15]
}
 8008346:	4618      	mov	r0, r3
 8008348:	3714      	adds	r7, #20
 800834a:	46bd      	mov	sp, r7
 800834c:	bc80      	pop	{r7}
 800834e:	4770      	bx	lr

08008350 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	60b9      	str	r1, [r7, #8]
 800835a:	4613      	mov	r3, r2
 800835c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2202      	movs	r2, #2
 8008362:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008366:	88fa      	ldrh	r2, [r7, #6]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800836c:	88fa      	ldrh	r2, [r7, #6]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008372:	88fb      	ldrh	r3, [r7, #6]
 8008374:	68ba      	ldr	r2, [r7, #8]
 8008376:	2100      	movs	r1, #0
 8008378:	68f8      	ldr	r0, [r7, #12]
 800837a:	f000 fc63 	bl	8008c44 <USBD_LL_Transmit>

  return USBD_OK;
 800837e:	2300      	movs	r3, #0
}
 8008380:	4618      	mov	r0, r3
 8008382:	3710      	adds	r7, #16
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	4613      	mov	r3, r2
 8008394:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008396:	88fb      	ldrh	r3, [r7, #6]
 8008398:	68ba      	ldr	r2, [r7, #8]
 800839a:	2100      	movs	r1, #0
 800839c:	68f8      	ldr	r0, [r7, #12]
 800839e:	f000 fc51 	bl	8008c44 <USBD_LL_Transmit>

  return USBD_OK;
 80083a2:	2300      	movs	r3, #0
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3710      	adds	r7, #16
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	60f8      	str	r0, [r7, #12]
 80083b4:	60b9      	str	r1, [r7, #8]
 80083b6:	4613      	mov	r3, r2
 80083b8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2203      	movs	r2, #3
 80083be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80083c2:	88fa      	ldrh	r2, [r7, #6]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 80083ca:	88fa      	ldrh	r2, [r7, #6]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80083d2:	88fb      	ldrh	r3, [r7, #6]
 80083d4:	68ba      	ldr	r2, [r7, #8]
 80083d6:	2100      	movs	r1, #0
 80083d8:	68f8      	ldr	r0, [r7, #12]
 80083da:	f000 fc56 	bl	8008c8a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083de:	2300      	movs	r3, #0
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3710      	adds	r7, #16
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	60b9      	str	r1, [r7, #8]
 80083f2:	4613      	mov	r3, r2
 80083f4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80083f6:	88fb      	ldrh	r3, [r7, #6]
 80083f8:	68ba      	ldr	r2, [r7, #8]
 80083fa:	2100      	movs	r1, #0
 80083fc:	68f8      	ldr	r0, [r7, #12]
 80083fe:	f000 fc44 	bl	8008c8a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008402:	2300      	movs	r3, #0
}
 8008404:	4618      	mov	r0, r3
 8008406:	3710      	adds	r7, #16
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b082      	sub	sp, #8
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2204      	movs	r2, #4
 8008418:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800841c:	2300      	movs	r3, #0
 800841e:	2200      	movs	r2, #0
 8008420:	2100      	movs	r1, #0
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 fc0e 	bl	8008c44 <USBD_LL_Transmit>

  return USBD_OK;
 8008428:	2300      	movs	r3, #0
}
 800842a:	4618      	mov	r0, r3
 800842c:	3708      	adds	r7, #8
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}

08008432 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008432:	b580      	push	{r7, lr}
 8008434:	b082      	sub	sp, #8
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2205      	movs	r2, #5
 800843e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008442:	2300      	movs	r3, #0
 8008444:	2200      	movs	r2, #0
 8008446:	2100      	movs	r1, #0
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 fc1e 	bl	8008c8a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800844e:	2300      	movs	r3, #0
}
 8008450:	4618      	mov	r0, r3
 8008452:	3708      	adds	r7, #8
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800845c:	2200      	movs	r2, #0
 800845e:	4912      	ldr	r1, [pc, #72]	@ (80084a8 <MX_USB_DEVICE_Init+0x50>)
 8008460:	4812      	ldr	r0, [pc, #72]	@ (80084ac <MX_USB_DEVICE_Init+0x54>)
 8008462:	f7fe ff62 	bl	800732a <USBD_Init>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d001      	beq.n	8008470 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800846c:	f7f8 f822 	bl	80004b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008470:	490f      	ldr	r1, [pc, #60]	@ (80084b0 <MX_USB_DEVICE_Init+0x58>)
 8008472:	480e      	ldr	r0, [pc, #56]	@ (80084ac <MX_USB_DEVICE_Init+0x54>)
 8008474:	f7fe ff84 	bl	8007380 <USBD_RegisterClass>
 8008478:	4603      	mov	r3, r0
 800847a:	2b00      	cmp	r3, #0
 800847c:	d001      	beq.n	8008482 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800847e:	f7f8 f819 	bl	80004b4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008482:	490c      	ldr	r1, [pc, #48]	@ (80084b4 <MX_USB_DEVICE_Init+0x5c>)
 8008484:	4809      	ldr	r0, [pc, #36]	@ (80084ac <MX_USB_DEVICE_Init+0x54>)
 8008486:	f7fe feb5 	bl	80071f4 <USBD_CDC_RegisterInterface>
 800848a:	4603      	mov	r3, r0
 800848c:	2b00      	cmp	r3, #0
 800848e:	d001      	beq.n	8008494 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008490:	f7f8 f810 	bl	80004b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008494:	4805      	ldr	r0, [pc, #20]	@ (80084ac <MX_USB_DEVICE_Init+0x54>)
 8008496:	f7fe ff8c 	bl	80073b2 <USBD_Start>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d001      	beq.n	80084a4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80084a0:	f7f8 f808 	bl	80004b4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80084a4:	bf00      	nop
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	20000130 	.word	0x20000130
 80084ac:	20000254 	.word	0x20000254
 80084b0:	2000001c 	.word	0x2000001c
 80084b4:	20000120 	.word	0x20000120

080084b8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80084bc:	2200      	movs	r2, #0
 80084be:	4905      	ldr	r1, [pc, #20]	@ (80084d4 <CDC_Init_FS+0x1c>)
 80084c0:	4805      	ldr	r0, [pc, #20]	@ (80084d8 <CDC_Init_FS+0x20>)
 80084c2:	f7fe fead 	bl	8007220 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80084c6:	4905      	ldr	r1, [pc, #20]	@ (80084dc <CDC_Init_FS+0x24>)
 80084c8:	4803      	ldr	r0, [pc, #12]	@ (80084d8 <CDC_Init_FS+0x20>)
 80084ca:	f7fe fec2 	bl	8007252 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80084ce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	bd80      	pop	{r7, pc}
 80084d4:	20000918 	.word	0x20000918
 80084d8:	20000254 	.word	0x20000254
 80084dc:	20000518 	.word	0x20000518

080084e0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80084e0:	b480      	push	{r7}
 80084e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80084e4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bc80      	pop	{r7}
 80084ec:	4770      	bx	lr
	...

080084f0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b083      	sub	sp, #12
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	4603      	mov	r3, r0
 80084f8:	6039      	str	r1, [r7, #0]
 80084fa:	71fb      	strb	r3, [r7, #7]
 80084fc:	4613      	mov	r3, r2
 80084fe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008500:	79fb      	ldrb	r3, [r7, #7]
 8008502:	2b23      	cmp	r3, #35	@ 0x23
 8008504:	d84a      	bhi.n	800859c <CDC_Control_FS+0xac>
 8008506:	a201      	add	r2, pc, #4	@ (adr r2, 800850c <CDC_Control_FS+0x1c>)
 8008508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800850c:	0800859d 	.word	0x0800859d
 8008510:	0800859d 	.word	0x0800859d
 8008514:	0800859d 	.word	0x0800859d
 8008518:	0800859d 	.word	0x0800859d
 800851c:	0800859d 	.word	0x0800859d
 8008520:	0800859d 	.word	0x0800859d
 8008524:	0800859d 	.word	0x0800859d
 8008528:	0800859d 	.word	0x0800859d
 800852c:	0800859d 	.word	0x0800859d
 8008530:	0800859d 	.word	0x0800859d
 8008534:	0800859d 	.word	0x0800859d
 8008538:	0800859d 	.word	0x0800859d
 800853c:	0800859d 	.word	0x0800859d
 8008540:	0800859d 	.word	0x0800859d
 8008544:	0800859d 	.word	0x0800859d
 8008548:	0800859d 	.word	0x0800859d
 800854c:	0800859d 	.word	0x0800859d
 8008550:	0800859d 	.word	0x0800859d
 8008554:	0800859d 	.word	0x0800859d
 8008558:	0800859d 	.word	0x0800859d
 800855c:	0800859d 	.word	0x0800859d
 8008560:	0800859d 	.word	0x0800859d
 8008564:	0800859d 	.word	0x0800859d
 8008568:	0800859d 	.word	0x0800859d
 800856c:	0800859d 	.word	0x0800859d
 8008570:	0800859d 	.word	0x0800859d
 8008574:	0800859d 	.word	0x0800859d
 8008578:	0800859d 	.word	0x0800859d
 800857c:	0800859d 	.word	0x0800859d
 8008580:	0800859d 	.word	0x0800859d
 8008584:	0800859d 	.word	0x0800859d
 8008588:	0800859d 	.word	0x0800859d
 800858c:	0800859d 	.word	0x0800859d
 8008590:	0800859d 	.word	0x0800859d
 8008594:	0800859d 	.word	0x0800859d
 8008598:	0800859d 	.word	0x0800859d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800859c:	bf00      	nop
  }

  return (USBD_OK);
 800859e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	370c      	adds	r7, #12
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bc80      	pop	{r7}
 80085a8:	4770      	bx	lr
 80085aa:	bf00      	nop

080085ac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b082      	sub	sp, #8
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80085b6:	6879      	ldr	r1, [r7, #4]
 80085b8:	4805      	ldr	r0, [pc, #20]	@ (80085d0 <CDC_Receive_FS+0x24>)
 80085ba:	f7fe fe4a 	bl	8007252 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80085be:	4804      	ldr	r0, [pc, #16]	@ (80085d0 <CDC_Receive_FS+0x24>)
 80085c0:	f7fe fe89 	bl	80072d6 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80085c4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3708      	adds	r7, #8
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	20000254 	.word	0x20000254

080085d4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	460b      	mov	r3, r1
 80085de:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80085e0:	2300      	movs	r3, #0
 80085e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80085e4:	4b0d      	ldr	r3, [pc, #52]	@ (800861c <CDC_Transmit_FS+0x48>)
 80085e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085ea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d001      	beq.n	80085fa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80085f6:	2301      	movs	r3, #1
 80085f8:	e00b      	b.n	8008612 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80085fa:	887b      	ldrh	r3, [r7, #2]
 80085fc:	461a      	mov	r2, r3
 80085fe:	6879      	ldr	r1, [r7, #4]
 8008600:	4806      	ldr	r0, [pc, #24]	@ (800861c <CDC_Transmit_FS+0x48>)
 8008602:	f7fe fe0d 	bl	8007220 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008606:	4805      	ldr	r0, [pc, #20]	@ (800861c <CDC_Transmit_FS+0x48>)
 8008608:	f7fe fe36 	bl	8007278 <USBD_CDC_TransmitPacket>
 800860c:	4603      	mov	r3, r0
 800860e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008610:	7bfb      	ldrb	r3, [r7, #15]
}
 8008612:	4618      	mov	r0, r3
 8008614:	3710      	adds	r7, #16
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
 800861a:	bf00      	nop
 800861c:	20000254 	.word	0x20000254

08008620 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008620:	b480      	push	{r7}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
 8008626:	4603      	mov	r3, r0
 8008628:	6039      	str	r1, [r7, #0]
 800862a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	2212      	movs	r2, #18
 8008630:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008632:	4b03      	ldr	r3, [pc, #12]	@ (8008640 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008634:	4618      	mov	r0, r3
 8008636:	370c      	adds	r7, #12
 8008638:	46bd      	mov	sp, r7
 800863a:	bc80      	pop	{r7}
 800863c:	4770      	bx	lr
 800863e:	bf00      	nop
 8008640:	2000014c 	.word	0x2000014c

08008644 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008644:	b480      	push	{r7}
 8008646:	b083      	sub	sp, #12
 8008648:	af00      	add	r7, sp, #0
 800864a:	4603      	mov	r3, r0
 800864c:	6039      	str	r1, [r7, #0]
 800864e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	2204      	movs	r2, #4
 8008654:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008656:	4b03      	ldr	r3, [pc, #12]	@ (8008664 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008658:	4618      	mov	r0, r3
 800865a:	370c      	adds	r7, #12
 800865c:	46bd      	mov	sp, r7
 800865e:	bc80      	pop	{r7}
 8008660:	4770      	bx	lr
 8008662:	bf00      	nop
 8008664:	20000160 	.word	0x20000160

08008668 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b082      	sub	sp, #8
 800866c:	af00      	add	r7, sp, #0
 800866e:	4603      	mov	r3, r0
 8008670:	6039      	str	r1, [r7, #0]
 8008672:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008674:	79fb      	ldrb	r3, [r7, #7]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d105      	bne.n	8008686 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800867a:	683a      	ldr	r2, [r7, #0]
 800867c:	4907      	ldr	r1, [pc, #28]	@ (800869c <USBD_FS_ProductStrDescriptor+0x34>)
 800867e:	4808      	ldr	r0, [pc, #32]	@ (80086a0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008680:	f7ff fe0d 	bl	800829e <USBD_GetString>
 8008684:	e004      	b.n	8008690 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008686:	683a      	ldr	r2, [r7, #0]
 8008688:	4904      	ldr	r1, [pc, #16]	@ (800869c <USBD_FS_ProductStrDescriptor+0x34>)
 800868a:	4805      	ldr	r0, [pc, #20]	@ (80086a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800868c:	f7ff fe07 	bl	800829e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008690:	4b02      	ldr	r3, [pc, #8]	@ (800869c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008692:	4618      	mov	r0, r3
 8008694:	3708      	adds	r7, #8
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
 800869a:	bf00      	nop
 800869c:	20000d18 	.word	0x20000d18
 80086a0:	080097f4 	.word	0x080097f4

080086a4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b082      	sub	sp, #8
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	4603      	mov	r3, r0
 80086ac:	6039      	str	r1, [r7, #0]
 80086ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80086b0:	683a      	ldr	r2, [r7, #0]
 80086b2:	4904      	ldr	r1, [pc, #16]	@ (80086c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80086b4:	4804      	ldr	r0, [pc, #16]	@ (80086c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80086b6:	f7ff fdf2 	bl	800829e <USBD_GetString>
  return USBD_StrDesc;
 80086ba:	4b02      	ldr	r3, [pc, #8]	@ (80086c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3708      	adds	r7, #8
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	20000d18 	.word	0x20000d18
 80086c8:	0800980c 	.word	0x0800980c

080086cc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	4603      	mov	r3, r0
 80086d4:	6039      	str	r1, [r7, #0]
 80086d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	221a      	movs	r2, #26
 80086dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80086de:	f000 f843 	bl	8008768 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80086e2:	4b02      	ldr	r3, [pc, #8]	@ (80086ec <USBD_FS_SerialStrDescriptor+0x20>)
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3708      	adds	r7, #8
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}
 80086ec:	20000164 	.word	0x20000164

080086f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	4603      	mov	r3, r0
 80086f8:	6039      	str	r1, [r7, #0]
 80086fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80086fc:	79fb      	ldrb	r3, [r7, #7]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d105      	bne.n	800870e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008702:	683a      	ldr	r2, [r7, #0]
 8008704:	4907      	ldr	r1, [pc, #28]	@ (8008724 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008706:	4808      	ldr	r0, [pc, #32]	@ (8008728 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008708:	f7ff fdc9 	bl	800829e <USBD_GetString>
 800870c:	e004      	b.n	8008718 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800870e:	683a      	ldr	r2, [r7, #0]
 8008710:	4904      	ldr	r1, [pc, #16]	@ (8008724 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008712:	4805      	ldr	r0, [pc, #20]	@ (8008728 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008714:	f7ff fdc3 	bl	800829e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008718:	4b02      	ldr	r3, [pc, #8]	@ (8008724 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800871a:	4618      	mov	r0, r3
 800871c:	3708      	adds	r7, #8
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
 8008722:	bf00      	nop
 8008724:	20000d18 	.word	0x20000d18
 8008728:	08009820 	.word	0x08009820

0800872c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b082      	sub	sp, #8
 8008730:	af00      	add	r7, sp, #0
 8008732:	4603      	mov	r3, r0
 8008734:	6039      	str	r1, [r7, #0]
 8008736:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008738:	79fb      	ldrb	r3, [r7, #7]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d105      	bne.n	800874a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800873e:	683a      	ldr	r2, [r7, #0]
 8008740:	4907      	ldr	r1, [pc, #28]	@ (8008760 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008742:	4808      	ldr	r0, [pc, #32]	@ (8008764 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008744:	f7ff fdab 	bl	800829e <USBD_GetString>
 8008748:	e004      	b.n	8008754 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800874a:	683a      	ldr	r2, [r7, #0]
 800874c:	4904      	ldr	r1, [pc, #16]	@ (8008760 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800874e:	4805      	ldr	r0, [pc, #20]	@ (8008764 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008750:	f7ff fda5 	bl	800829e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008754:	4b02      	ldr	r3, [pc, #8]	@ (8008760 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008756:	4618      	mov	r0, r3
 8008758:	3708      	adds	r7, #8
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
 800875e:	bf00      	nop
 8008760:	20000d18 	.word	0x20000d18
 8008764:	0800982c 	.word	0x0800982c

08008768 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800876e:	4b0f      	ldr	r3, [pc, #60]	@ (80087ac <Get_SerialNum+0x44>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008774:	4b0e      	ldr	r3, [pc, #56]	@ (80087b0 <Get_SerialNum+0x48>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800877a:	4b0e      	ldr	r3, [pc, #56]	@ (80087b4 <Get_SerialNum+0x4c>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008780:	68fa      	ldr	r2, [r7, #12]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4413      	add	r3, r2
 8008786:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d009      	beq.n	80087a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800878e:	2208      	movs	r2, #8
 8008790:	4909      	ldr	r1, [pc, #36]	@ (80087b8 <Get_SerialNum+0x50>)
 8008792:	68f8      	ldr	r0, [r7, #12]
 8008794:	f000 f814 	bl	80087c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008798:	2204      	movs	r2, #4
 800879a:	4908      	ldr	r1, [pc, #32]	@ (80087bc <Get_SerialNum+0x54>)
 800879c:	68b8      	ldr	r0, [r7, #8]
 800879e:	f000 f80f 	bl	80087c0 <IntToUnicode>
  }
}
 80087a2:	bf00      	nop
 80087a4:	3710      	adds	r7, #16
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	1ffff7e8 	.word	0x1ffff7e8
 80087b0:	1ffff7ec 	.word	0x1ffff7ec
 80087b4:	1ffff7f0 	.word	0x1ffff7f0
 80087b8:	20000166 	.word	0x20000166
 80087bc:	20000176 	.word	0x20000176

080087c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b087      	sub	sp, #28
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	60f8      	str	r0, [r7, #12]
 80087c8:	60b9      	str	r1, [r7, #8]
 80087ca:	4613      	mov	r3, r2
 80087cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80087ce:	2300      	movs	r3, #0
 80087d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80087d2:	2300      	movs	r3, #0
 80087d4:	75fb      	strb	r3, [r7, #23]
 80087d6:	e027      	b.n	8008828 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	0f1b      	lsrs	r3, r3, #28
 80087dc:	2b09      	cmp	r3, #9
 80087de:	d80b      	bhi.n	80087f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	0f1b      	lsrs	r3, r3, #28
 80087e4:	b2da      	uxtb	r2, r3
 80087e6:	7dfb      	ldrb	r3, [r7, #23]
 80087e8:	005b      	lsls	r3, r3, #1
 80087ea:	4619      	mov	r1, r3
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	440b      	add	r3, r1
 80087f0:	3230      	adds	r2, #48	@ 0x30
 80087f2:	b2d2      	uxtb	r2, r2
 80087f4:	701a      	strb	r2, [r3, #0]
 80087f6:	e00a      	b.n	800880e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	0f1b      	lsrs	r3, r3, #28
 80087fc:	b2da      	uxtb	r2, r3
 80087fe:	7dfb      	ldrb	r3, [r7, #23]
 8008800:	005b      	lsls	r3, r3, #1
 8008802:	4619      	mov	r1, r3
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	440b      	add	r3, r1
 8008808:	3237      	adds	r2, #55	@ 0x37
 800880a:	b2d2      	uxtb	r2, r2
 800880c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	011b      	lsls	r3, r3, #4
 8008812:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008814:	7dfb      	ldrb	r3, [r7, #23]
 8008816:	005b      	lsls	r3, r3, #1
 8008818:	3301      	adds	r3, #1
 800881a:	68ba      	ldr	r2, [r7, #8]
 800881c:	4413      	add	r3, r2
 800881e:	2200      	movs	r2, #0
 8008820:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008822:	7dfb      	ldrb	r3, [r7, #23]
 8008824:	3301      	adds	r3, #1
 8008826:	75fb      	strb	r3, [r7, #23]
 8008828:	7dfa      	ldrb	r2, [r7, #23]
 800882a:	79fb      	ldrb	r3, [r7, #7]
 800882c:	429a      	cmp	r2, r3
 800882e:	d3d3      	bcc.n	80087d8 <IntToUnicode+0x18>
  }
}
 8008830:	bf00      	nop
 8008832:	bf00      	nop
 8008834:	371c      	adds	r7, #28
 8008836:	46bd      	mov	sp, r7
 8008838:	bc80      	pop	{r7}
 800883a:	4770      	bx	lr

0800883c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a0d      	ldr	r2, [pc, #52]	@ (8008880 <HAL_PCD_MspInit+0x44>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d113      	bne.n	8008876 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800884e:	4b0d      	ldr	r3, [pc, #52]	@ (8008884 <HAL_PCD_MspInit+0x48>)
 8008850:	69db      	ldr	r3, [r3, #28]
 8008852:	4a0c      	ldr	r2, [pc, #48]	@ (8008884 <HAL_PCD_MspInit+0x48>)
 8008854:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008858:	61d3      	str	r3, [r2, #28]
 800885a:	4b0a      	ldr	r3, [pc, #40]	@ (8008884 <HAL_PCD_MspInit+0x48>)
 800885c:	69db      	ldr	r3, [r3, #28]
 800885e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008862:	60fb      	str	r3, [r7, #12]
 8008864:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008866:	2200      	movs	r2, #0
 8008868:	2100      	movs	r1, #0
 800886a:	2014      	movs	r0, #20
 800886c:	f7f8 f9bb 	bl	8000be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008870:	2014      	movs	r0, #20
 8008872:	f7f8 f9d4 	bl	8000c1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008876:	bf00      	nop
 8008878:	3710      	adds	r7, #16
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}
 800887e:	bf00      	nop
 8008880:	40005c00 	.word	0x40005c00
 8008884:	40021000 	.word	0x40021000

08008888 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b082      	sub	sp, #8
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800889c:	4619      	mov	r1, r3
 800889e:	4610      	mov	r0, r2
 80088a0:	f7fe fdcf 	bl	8007442 <USBD_LL_SetupStage>
}
 80088a4:	bf00      	nop
 80088a6:	3708      	adds	r7, #8
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}

080088ac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b082      	sub	sp, #8
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	460b      	mov	r3, r1
 80088b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80088be:	78fa      	ldrb	r2, [r7, #3]
 80088c0:	6879      	ldr	r1, [r7, #4]
 80088c2:	4613      	mov	r3, r2
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	4413      	add	r3, r2
 80088c8:	00db      	lsls	r3, r3, #3
 80088ca:	440b      	add	r3, r1
 80088cc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80088d0:	681a      	ldr	r2, [r3, #0]
 80088d2:	78fb      	ldrb	r3, [r7, #3]
 80088d4:	4619      	mov	r1, r3
 80088d6:	f7fe fe01 	bl	80074dc <USBD_LL_DataOutStage>
}
 80088da:	bf00      	nop
 80088dc:	3708      	adds	r7, #8
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}

080088e2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088e2:	b580      	push	{r7, lr}
 80088e4:	b082      	sub	sp, #8
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
 80088ea:	460b      	mov	r3, r1
 80088ec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80088f4:	78fa      	ldrb	r2, [r7, #3]
 80088f6:	6879      	ldr	r1, [r7, #4]
 80088f8:	4613      	mov	r3, r2
 80088fa:	009b      	lsls	r3, r3, #2
 80088fc:	4413      	add	r3, r2
 80088fe:	00db      	lsls	r3, r3, #3
 8008900:	440b      	add	r3, r1
 8008902:	3324      	adds	r3, #36	@ 0x24
 8008904:	681a      	ldr	r2, [r3, #0]
 8008906:	78fb      	ldrb	r3, [r7, #3]
 8008908:	4619      	mov	r1, r3
 800890a:	f7fe fe58 	bl	80075be <USBD_LL_DataInStage>
}
 800890e:	bf00      	nop
 8008910:	3708      	adds	r7, #8
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}

08008916 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008916:	b580      	push	{r7, lr}
 8008918:	b082      	sub	sp, #8
 800891a:	af00      	add	r7, sp, #0
 800891c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008924:	4618      	mov	r0, r3
 8008926:	f7fe ff68 	bl	80077fa <USBD_LL_SOF>
}
 800892a:	bf00      	nop
 800892c:	3708      	adds	r7, #8
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}

08008932 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008932:	b580      	push	{r7, lr}
 8008934:	b084      	sub	sp, #16
 8008936:	af00      	add	r7, sp, #0
 8008938:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800893a:	2301      	movs	r3, #1
 800893c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	799b      	ldrb	r3, [r3, #6]
 8008942:	2b02      	cmp	r3, #2
 8008944:	d001      	beq.n	800894a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008946:	f7f7 fdb5 	bl	80004b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008950:	7bfa      	ldrb	r2, [r7, #15]
 8008952:	4611      	mov	r1, r2
 8008954:	4618      	mov	r0, r3
 8008956:	f7fe ff18 	bl	800778a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008960:	4618      	mov	r0, r3
 8008962:	f7fe fed1 	bl	8007708 <USBD_LL_Reset>
}
 8008966:	bf00      	nop
 8008968:	3710      	adds	r7, #16
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
	...

08008970 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b082      	sub	sp, #8
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800897e:	4618      	mov	r0, r3
 8008980:	f7fe ff12 	bl	80077a8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	7a9b      	ldrb	r3, [r3, #10]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d005      	beq.n	8008998 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800898c:	4b04      	ldr	r3, [pc, #16]	@ (80089a0 <HAL_PCD_SuspendCallback+0x30>)
 800898e:	691b      	ldr	r3, [r3, #16]
 8008990:	4a03      	ldr	r2, [pc, #12]	@ (80089a0 <HAL_PCD_SuspendCallback+0x30>)
 8008992:	f043 0306 	orr.w	r3, r3, #6
 8008996:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008998:	bf00      	nop
 800899a:	3708      	adds	r7, #8
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}
 80089a0:	e000ed00 	.word	0xe000ed00

080089a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b082      	sub	sp, #8
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7fe ff0c 	bl	80077d0 <USBD_LL_Resume>
}
 80089b8:	bf00      	nop
 80089ba:	3708      	adds	r7, #8
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b082      	sub	sp, #8
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80089c8:	4a28      	ldr	r2, [pc, #160]	@ (8008a6c <USBD_LL_Init+0xac>)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	4a26      	ldr	r2, [pc, #152]	@ (8008a6c <USBD_LL_Init+0xac>)
 80089d4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 80089d8:	4b24      	ldr	r3, [pc, #144]	@ (8008a6c <USBD_LL_Init+0xac>)
 80089da:	4a25      	ldr	r2, [pc, #148]	@ (8008a70 <USBD_LL_Init+0xb0>)
 80089dc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80089de:	4b23      	ldr	r3, [pc, #140]	@ (8008a6c <USBD_LL_Init+0xac>)
 80089e0:	2208      	movs	r2, #8
 80089e2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80089e4:	4b21      	ldr	r3, [pc, #132]	@ (8008a6c <USBD_LL_Init+0xac>)
 80089e6:	2202      	movs	r2, #2
 80089e8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80089ea:	4b20      	ldr	r3, [pc, #128]	@ (8008a6c <USBD_LL_Init+0xac>)
 80089ec:	2200      	movs	r2, #0
 80089ee:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80089f0:	4b1e      	ldr	r3, [pc, #120]	@ (8008a6c <USBD_LL_Init+0xac>)
 80089f2:	2200      	movs	r2, #0
 80089f4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80089f6:	4b1d      	ldr	r3, [pc, #116]	@ (8008a6c <USBD_LL_Init+0xac>)
 80089f8:	2200      	movs	r2, #0
 80089fa:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80089fc:	481b      	ldr	r0, [pc, #108]	@ (8008a6c <USBD_LL_Init+0xac>)
 80089fe:	f7f9 fc16 	bl	800222e <HAL_PCD_Init>
 8008a02:	4603      	mov	r3, r0
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d001      	beq.n	8008a0c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008a08:	f7f7 fd54 	bl	80004b4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008a12:	2318      	movs	r3, #24
 8008a14:	2200      	movs	r2, #0
 8008a16:	2100      	movs	r1, #0
 8008a18:	f7fb f927 	bl	8003c6a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008a22:	2358      	movs	r3, #88	@ 0x58
 8008a24:	2200      	movs	r2, #0
 8008a26:	2180      	movs	r1, #128	@ 0x80
 8008a28:	f7fb f91f 	bl	8003c6a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008a32:	23c0      	movs	r3, #192	@ 0xc0
 8008a34:	2200      	movs	r2, #0
 8008a36:	2181      	movs	r1, #129	@ 0x81
 8008a38:	f7fb f917 	bl	8003c6a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008a42:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8008a46:	2200      	movs	r2, #0
 8008a48:	2101      	movs	r1, #1
 8008a4a:	f7fb f90e 	bl	8003c6a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008a54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008a58:	2200      	movs	r2, #0
 8008a5a:	2182      	movs	r1, #130	@ 0x82
 8008a5c:	f7fb f905 	bl	8003c6a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008a60:	2300      	movs	r3, #0
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3708      	adds	r7, #8
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}
 8008a6a:	bf00      	nop
 8008a6c:	20000f18 	.word	0x20000f18
 8008a70:	40005c00 	.word	0x40005c00

08008a74 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b084      	sub	sp, #16
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a80:	2300      	movs	r3, #0
 8008a82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f7f9 fcc5 	bl	800241a <HAL_PCD_Start>
 8008a90:	4603      	mov	r3, r0
 8008a92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a94:	7bfb      	ldrb	r3, [r7, #15]
 8008a96:	4618      	mov	r0, r3
 8008a98:	f000 f94e 	bl	8008d38 <USBD_Get_USB_Status>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008aa0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3710      	adds	r7, #16
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}

08008aaa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008aaa:	b580      	push	{r7, lr}
 8008aac:	b084      	sub	sp, #16
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	6078      	str	r0, [r7, #4]
 8008ab2:	4608      	mov	r0, r1
 8008ab4:	4611      	mov	r1, r2
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	4603      	mov	r3, r0
 8008aba:	70fb      	strb	r3, [r7, #3]
 8008abc:	460b      	mov	r3, r1
 8008abe:	70bb      	strb	r3, [r7, #2]
 8008ac0:	4613      	mov	r3, r2
 8008ac2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008ad2:	78bb      	ldrb	r3, [r7, #2]
 8008ad4:	883a      	ldrh	r2, [r7, #0]
 8008ad6:	78f9      	ldrb	r1, [r7, #3]
 8008ad8:	f7f9 fe19 	bl	800270e <HAL_PCD_EP_Open>
 8008adc:	4603      	mov	r3, r0
 8008ade:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ae0:	7bfb      	ldrb	r3, [r7, #15]
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f000 f928 	bl	8008d38 <USBD_Get_USB_Status>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008aec:	7bbb      	ldrb	r3, [r7, #14]
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3710      	adds	r7, #16
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}

08008af6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008af6:	b580      	push	{r7, lr}
 8008af8:	b084      	sub	sp, #16
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	6078      	str	r0, [r7, #4]
 8008afe:	460b      	mov	r3, r1
 8008b00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b02:	2300      	movs	r3, #0
 8008b04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b06:	2300      	movs	r3, #0
 8008b08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008b10:	78fa      	ldrb	r2, [r7, #3]
 8008b12:	4611      	mov	r1, r2
 8008b14:	4618      	mov	r0, r3
 8008b16:	f7f9 fe57 	bl	80027c8 <HAL_PCD_EP_Close>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b1e:	7bfb      	ldrb	r3, [r7, #15]
 8008b20:	4618      	mov	r0, r3
 8008b22:	f000 f909 	bl	8008d38 <USBD_Get_USB_Status>
 8008b26:	4603      	mov	r3, r0
 8008b28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3710      	adds	r7, #16
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b40:	2300      	movs	r3, #0
 8008b42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b44:	2300      	movs	r3, #0
 8008b46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008b4e:	78fa      	ldrb	r2, [r7, #3]
 8008b50:	4611      	mov	r1, r2
 8008b52:	4618      	mov	r0, r3
 8008b54:	f7f9 feff 	bl	8002956 <HAL_PCD_EP_SetStall>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b5c:	7bfb      	ldrb	r3, [r7, #15]
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f000 f8ea 	bl	8008d38 <USBD_Get_USB_Status>
 8008b64:	4603      	mov	r3, r0
 8008b66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b68:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3710      	adds	r7, #16
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}

08008b72 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b72:	b580      	push	{r7, lr}
 8008b74:	b084      	sub	sp, #16
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	6078      	str	r0, [r7, #4]
 8008b7a:	460b      	mov	r3, r1
 8008b7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b82:	2300      	movs	r3, #0
 8008b84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008b8c:	78fa      	ldrb	r2, [r7, #3]
 8008b8e:	4611      	mov	r1, r2
 8008b90:	4618      	mov	r0, r3
 8008b92:	f7f9 ff40 	bl	8002a16 <HAL_PCD_EP_ClrStall>
 8008b96:	4603      	mov	r3, r0
 8008b98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b9a:	7bfb      	ldrb	r3, [r7, #15]
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f000 f8cb 	bl	8008d38 <USBD_Get_USB_Status>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ba6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3710      	adds	r7, #16
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b085      	sub	sp, #20
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	460b      	mov	r3, r1
 8008bba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008bc2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008bc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	da0b      	bge.n	8008be4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008bcc:	78fb      	ldrb	r3, [r7, #3]
 8008bce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008bd2:	68f9      	ldr	r1, [r7, #12]
 8008bd4:	4613      	mov	r3, r2
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	4413      	add	r3, r2
 8008bda:	00db      	lsls	r3, r3, #3
 8008bdc:	440b      	add	r3, r1
 8008bde:	3312      	adds	r3, #18
 8008be0:	781b      	ldrb	r3, [r3, #0]
 8008be2:	e00b      	b.n	8008bfc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008be4:	78fb      	ldrb	r3, [r7, #3]
 8008be6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008bea:	68f9      	ldr	r1, [r7, #12]
 8008bec:	4613      	mov	r3, r2
 8008bee:	009b      	lsls	r3, r3, #2
 8008bf0:	4413      	add	r3, r2
 8008bf2:	00db      	lsls	r3, r3, #3
 8008bf4:	440b      	add	r3, r1
 8008bf6:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8008bfa:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3714      	adds	r7, #20
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bc80      	pop	{r7}
 8008c04:	4770      	bx	lr

08008c06 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008c06:	b580      	push	{r7, lr}
 8008c08:	b084      	sub	sp, #16
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
 8008c0e:	460b      	mov	r3, r1
 8008c10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c12:	2300      	movs	r3, #0
 8008c14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c16:	2300      	movs	r3, #0
 8008c18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008c20:	78fa      	ldrb	r2, [r7, #3]
 8008c22:	4611      	mov	r1, r2
 8008c24:	4618      	mov	r0, r3
 8008c26:	f7f9 fd4e 	bl	80026c6 <HAL_PCD_SetAddress>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c2e:	7bfb      	ldrb	r3, [r7, #15]
 8008c30:	4618      	mov	r0, r3
 8008c32:	f000 f881 	bl	8008d38 <USBD_Get_USB_Status>
 8008c36:	4603      	mov	r3, r0
 8008c38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3710      	adds	r7, #16
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b086      	sub	sp, #24
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	60f8      	str	r0, [r7, #12]
 8008c4c:	607a      	str	r2, [r7, #4]
 8008c4e:	461a      	mov	r2, r3
 8008c50:	460b      	mov	r3, r1
 8008c52:	72fb      	strb	r3, [r7, #11]
 8008c54:	4613      	mov	r3, r2
 8008c56:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008c66:	893b      	ldrh	r3, [r7, #8]
 8008c68:	7af9      	ldrb	r1, [r7, #11]
 8008c6a:	687a      	ldr	r2, [r7, #4]
 8008c6c:	f7f9 fe3c 	bl	80028e8 <HAL_PCD_EP_Transmit>
 8008c70:	4603      	mov	r3, r0
 8008c72:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c74:	7dfb      	ldrb	r3, [r7, #23]
 8008c76:	4618      	mov	r0, r3
 8008c78:	f000 f85e 	bl	8008d38 <USBD_Get_USB_Status>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008c80:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3718      	adds	r7, #24
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}

08008c8a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008c8a:	b580      	push	{r7, lr}
 8008c8c:	b086      	sub	sp, #24
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	60f8      	str	r0, [r7, #12]
 8008c92:	607a      	str	r2, [r7, #4]
 8008c94:	461a      	mov	r2, r3
 8008c96:	460b      	mov	r3, r1
 8008c98:	72fb      	strb	r3, [r7, #11]
 8008c9a:	4613      	mov	r3, r2
 8008c9c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008cac:	893b      	ldrh	r3, [r7, #8]
 8008cae:	7af9      	ldrb	r1, [r7, #11]
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	f7f9 fdd1 	bl	8002858 <HAL_PCD_EP_Receive>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cba:	7dfb      	ldrb	r3, [r7, #23]
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f000 f83b 	bl	8008d38 <USBD_Get_USB_Status>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008cc6:	7dbb      	ldrb	r3, [r7, #22]
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3718      	adds	r7, #24
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b082      	sub	sp, #8
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	460b      	mov	r3, r1
 8008cda:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008ce2:	78fa      	ldrb	r2, [r7, #3]
 8008ce4:	4611      	mov	r1, r2
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f7f9 fde7 	bl	80028ba <HAL_PCD_EP_GetRxCount>
 8008cec:	4603      	mov	r3, r0
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3708      	adds	r7, #8
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}
	...

08008cf8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b083      	sub	sp, #12
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008d00:	4b02      	ldr	r3, [pc, #8]	@ (8008d0c <USBD_static_malloc+0x14>)
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	370c      	adds	r7, #12
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bc80      	pop	{r7}
 8008d0a:	4770      	bx	lr
 8008d0c:	200011f0 	.word	0x200011f0

08008d10 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b083      	sub	sp, #12
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]

}
 8008d18:	bf00      	nop
 8008d1a:	370c      	adds	r7, #12
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bc80      	pop	{r7}
 8008d20:	4770      	bx	lr

08008d22 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d22:	b480      	push	{r7}
 8008d24:	b083      	sub	sp, #12
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
 8008d2a:	460b      	mov	r3, r1
 8008d2c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008d2e:	bf00      	nop
 8008d30:	370c      	adds	r7, #12
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bc80      	pop	{r7}
 8008d36:	4770      	bx	lr

08008d38 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b085      	sub	sp, #20
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	4603      	mov	r3, r0
 8008d40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d42:	2300      	movs	r3, #0
 8008d44:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008d46:	79fb      	ldrb	r3, [r7, #7]
 8008d48:	2b03      	cmp	r3, #3
 8008d4a:	d817      	bhi.n	8008d7c <USBD_Get_USB_Status+0x44>
 8008d4c:	a201      	add	r2, pc, #4	@ (adr r2, 8008d54 <USBD_Get_USB_Status+0x1c>)
 8008d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d52:	bf00      	nop
 8008d54:	08008d65 	.word	0x08008d65
 8008d58:	08008d6b 	.word	0x08008d6b
 8008d5c:	08008d71 	.word	0x08008d71
 8008d60:	08008d77 	.word	0x08008d77
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008d64:	2300      	movs	r3, #0
 8008d66:	73fb      	strb	r3, [r7, #15]
    break;
 8008d68:	e00b      	b.n	8008d82 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d6a:	2302      	movs	r3, #2
 8008d6c:	73fb      	strb	r3, [r7, #15]
    break;
 8008d6e:	e008      	b.n	8008d82 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d70:	2301      	movs	r3, #1
 8008d72:	73fb      	strb	r3, [r7, #15]
    break;
 8008d74:	e005      	b.n	8008d82 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d76:	2302      	movs	r3, #2
 8008d78:	73fb      	strb	r3, [r7, #15]
    break;
 8008d7a:	e002      	b.n	8008d82 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008d7c:	2302      	movs	r3, #2
 8008d7e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d80:	bf00      	nop
  }
  return usb_status;
 8008d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3714      	adds	r7, #20
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bc80      	pop	{r7}
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop

08008d90 <sniprintf>:
 8008d90:	b40c      	push	{r2, r3}
 8008d92:	b530      	push	{r4, r5, lr}
 8008d94:	4b18      	ldr	r3, [pc, #96]	@ (8008df8 <sniprintf+0x68>)
 8008d96:	1e0c      	subs	r4, r1, #0
 8008d98:	681d      	ldr	r5, [r3, #0]
 8008d9a:	b09d      	sub	sp, #116	@ 0x74
 8008d9c:	da08      	bge.n	8008db0 <sniprintf+0x20>
 8008d9e:	238b      	movs	r3, #139	@ 0x8b
 8008da0:	f04f 30ff 	mov.w	r0, #4294967295
 8008da4:	602b      	str	r3, [r5, #0]
 8008da6:	b01d      	add	sp, #116	@ 0x74
 8008da8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008dac:	b002      	add	sp, #8
 8008dae:	4770      	bx	lr
 8008db0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008db4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008db8:	f04f 0300 	mov.w	r3, #0
 8008dbc:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008dbe:	bf0c      	ite	eq
 8008dc0:	4623      	moveq	r3, r4
 8008dc2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008dc6:	9304      	str	r3, [sp, #16]
 8008dc8:	9307      	str	r3, [sp, #28]
 8008dca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008dce:	9002      	str	r0, [sp, #8]
 8008dd0:	9006      	str	r0, [sp, #24]
 8008dd2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008dd6:	4628      	mov	r0, r5
 8008dd8:	ab21      	add	r3, sp, #132	@ 0x84
 8008dda:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008ddc:	a902      	add	r1, sp, #8
 8008dde:	9301      	str	r3, [sp, #4]
 8008de0:	f000 f9a0 	bl	8009124 <_svfiprintf_r>
 8008de4:	1c43      	adds	r3, r0, #1
 8008de6:	bfbc      	itt	lt
 8008de8:	238b      	movlt	r3, #139	@ 0x8b
 8008dea:	602b      	strlt	r3, [r5, #0]
 8008dec:	2c00      	cmp	r4, #0
 8008dee:	d0da      	beq.n	8008da6 <sniprintf+0x16>
 8008df0:	2200      	movs	r2, #0
 8008df2:	9b02      	ldr	r3, [sp, #8]
 8008df4:	701a      	strb	r2, [r3, #0]
 8008df6:	e7d6      	b.n	8008da6 <sniprintf+0x16>
 8008df8:	20000180 	.word	0x20000180

08008dfc <memset>:
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	4402      	add	r2, r0
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d100      	bne.n	8008e06 <memset+0xa>
 8008e04:	4770      	bx	lr
 8008e06:	f803 1b01 	strb.w	r1, [r3], #1
 8008e0a:	e7f9      	b.n	8008e00 <memset+0x4>

08008e0c <__errno>:
 8008e0c:	4b01      	ldr	r3, [pc, #4]	@ (8008e14 <__errno+0x8>)
 8008e0e:	6818      	ldr	r0, [r3, #0]
 8008e10:	4770      	bx	lr
 8008e12:	bf00      	nop
 8008e14:	20000180 	.word	0x20000180

08008e18 <__libc_init_array>:
 8008e18:	b570      	push	{r4, r5, r6, lr}
 8008e1a:	2600      	movs	r6, #0
 8008e1c:	4d0c      	ldr	r5, [pc, #48]	@ (8008e50 <__libc_init_array+0x38>)
 8008e1e:	4c0d      	ldr	r4, [pc, #52]	@ (8008e54 <__libc_init_array+0x3c>)
 8008e20:	1b64      	subs	r4, r4, r5
 8008e22:	10a4      	asrs	r4, r4, #2
 8008e24:	42a6      	cmp	r6, r4
 8008e26:	d109      	bne.n	8008e3c <__libc_init_array+0x24>
 8008e28:	f000 fc76 	bl	8009718 <_init>
 8008e2c:	2600      	movs	r6, #0
 8008e2e:	4d0a      	ldr	r5, [pc, #40]	@ (8008e58 <__libc_init_array+0x40>)
 8008e30:	4c0a      	ldr	r4, [pc, #40]	@ (8008e5c <__libc_init_array+0x44>)
 8008e32:	1b64      	subs	r4, r4, r5
 8008e34:	10a4      	asrs	r4, r4, #2
 8008e36:	42a6      	cmp	r6, r4
 8008e38:	d105      	bne.n	8008e46 <__libc_init_array+0x2e>
 8008e3a:	bd70      	pop	{r4, r5, r6, pc}
 8008e3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e40:	4798      	blx	r3
 8008e42:	3601      	adds	r6, #1
 8008e44:	e7ee      	b.n	8008e24 <__libc_init_array+0xc>
 8008e46:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e4a:	4798      	blx	r3
 8008e4c:	3601      	adds	r6, #1
 8008e4e:	e7f2      	b.n	8008e36 <__libc_init_array+0x1e>
 8008e50:	080098a4 	.word	0x080098a4
 8008e54:	080098a4 	.word	0x080098a4
 8008e58:	080098a4 	.word	0x080098a4
 8008e5c:	080098a8 	.word	0x080098a8

08008e60 <__retarget_lock_acquire_recursive>:
 8008e60:	4770      	bx	lr

08008e62 <__retarget_lock_release_recursive>:
 8008e62:	4770      	bx	lr

08008e64 <memcpy>:
 8008e64:	440a      	add	r2, r1
 8008e66:	4291      	cmp	r1, r2
 8008e68:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e6c:	d100      	bne.n	8008e70 <memcpy+0xc>
 8008e6e:	4770      	bx	lr
 8008e70:	b510      	push	{r4, lr}
 8008e72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e76:	4291      	cmp	r1, r2
 8008e78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e7c:	d1f9      	bne.n	8008e72 <memcpy+0xe>
 8008e7e:	bd10      	pop	{r4, pc}

08008e80 <_free_r>:
 8008e80:	b538      	push	{r3, r4, r5, lr}
 8008e82:	4605      	mov	r5, r0
 8008e84:	2900      	cmp	r1, #0
 8008e86:	d040      	beq.n	8008f0a <_free_r+0x8a>
 8008e88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e8c:	1f0c      	subs	r4, r1, #4
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	bfb8      	it	lt
 8008e92:	18e4      	addlt	r4, r4, r3
 8008e94:	f000 f8de 	bl	8009054 <__malloc_lock>
 8008e98:	4a1c      	ldr	r2, [pc, #112]	@ (8008f0c <_free_r+0x8c>)
 8008e9a:	6813      	ldr	r3, [r2, #0]
 8008e9c:	b933      	cbnz	r3, 8008eac <_free_r+0x2c>
 8008e9e:	6063      	str	r3, [r4, #4]
 8008ea0:	6014      	str	r4, [r2, #0]
 8008ea2:	4628      	mov	r0, r5
 8008ea4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ea8:	f000 b8da 	b.w	8009060 <__malloc_unlock>
 8008eac:	42a3      	cmp	r3, r4
 8008eae:	d908      	bls.n	8008ec2 <_free_r+0x42>
 8008eb0:	6820      	ldr	r0, [r4, #0]
 8008eb2:	1821      	adds	r1, r4, r0
 8008eb4:	428b      	cmp	r3, r1
 8008eb6:	bf01      	itttt	eq
 8008eb8:	6819      	ldreq	r1, [r3, #0]
 8008eba:	685b      	ldreq	r3, [r3, #4]
 8008ebc:	1809      	addeq	r1, r1, r0
 8008ebe:	6021      	streq	r1, [r4, #0]
 8008ec0:	e7ed      	b.n	8008e9e <_free_r+0x1e>
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	685b      	ldr	r3, [r3, #4]
 8008ec6:	b10b      	cbz	r3, 8008ecc <_free_r+0x4c>
 8008ec8:	42a3      	cmp	r3, r4
 8008eca:	d9fa      	bls.n	8008ec2 <_free_r+0x42>
 8008ecc:	6811      	ldr	r1, [r2, #0]
 8008ece:	1850      	adds	r0, r2, r1
 8008ed0:	42a0      	cmp	r0, r4
 8008ed2:	d10b      	bne.n	8008eec <_free_r+0x6c>
 8008ed4:	6820      	ldr	r0, [r4, #0]
 8008ed6:	4401      	add	r1, r0
 8008ed8:	1850      	adds	r0, r2, r1
 8008eda:	4283      	cmp	r3, r0
 8008edc:	6011      	str	r1, [r2, #0]
 8008ede:	d1e0      	bne.n	8008ea2 <_free_r+0x22>
 8008ee0:	6818      	ldr	r0, [r3, #0]
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	4408      	add	r0, r1
 8008ee6:	6010      	str	r0, [r2, #0]
 8008ee8:	6053      	str	r3, [r2, #4]
 8008eea:	e7da      	b.n	8008ea2 <_free_r+0x22>
 8008eec:	d902      	bls.n	8008ef4 <_free_r+0x74>
 8008eee:	230c      	movs	r3, #12
 8008ef0:	602b      	str	r3, [r5, #0]
 8008ef2:	e7d6      	b.n	8008ea2 <_free_r+0x22>
 8008ef4:	6820      	ldr	r0, [r4, #0]
 8008ef6:	1821      	adds	r1, r4, r0
 8008ef8:	428b      	cmp	r3, r1
 8008efa:	bf01      	itttt	eq
 8008efc:	6819      	ldreq	r1, [r3, #0]
 8008efe:	685b      	ldreq	r3, [r3, #4]
 8008f00:	1809      	addeq	r1, r1, r0
 8008f02:	6021      	streq	r1, [r4, #0]
 8008f04:	6063      	str	r3, [r4, #4]
 8008f06:	6054      	str	r4, [r2, #4]
 8008f08:	e7cb      	b.n	8008ea2 <_free_r+0x22>
 8008f0a:	bd38      	pop	{r3, r4, r5, pc}
 8008f0c:	20001554 	.word	0x20001554

08008f10 <sbrk_aligned>:
 8008f10:	b570      	push	{r4, r5, r6, lr}
 8008f12:	4e0f      	ldr	r6, [pc, #60]	@ (8008f50 <sbrk_aligned+0x40>)
 8008f14:	460c      	mov	r4, r1
 8008f16:	6831      	ldr	r1, [r6, #0]
 8008f18:	4605      	mov	r5, r0
 8008f1a:	b911      	cbnz	r1, 8008f22 <sbrk_aligned+0x12>
 8008f1c:	f000 fba8 	bl	8009670 <_sbrk_r>
 8008f20:	6030      	str	r0, [r6, #0]
 8008f22:	4621      	mov	r1, r4
 8008f24:	4628      	mov	r0, r5
 8008f26:	f000 fba3 	bl	8009670 <_sbrk_r>
 8008f2a:	1c43      	adds	r3, r0, #1
 8008f2c:	d103      	bne.n	8008f36 <sbrk_aligned+0x26>
 8008f2e:	f04f 34ff 	mov.w	r4, #4294967295
 8008f32:	4620      	mov	r0, r4
 8008f34:	bd70      	pop	{r4, r5, r6, pc}
 8008f36:	1cc4      	adds	r4, r0, #3
 8008f38:	f024 0403 	bic.w	r4, r4, #3
 8008f3c:	42a0      	cmp	r0, r4
 8008f3e:	d0f8      	beq.n	8008f32 <sbrk_aligned+0x22>
 8008f40:	1a21      	subs	r1, r4, r0
 8008f42:	4628      	mov	r0, r5
 8008f44:	f000 fb94 	bl	8009670 <_sbrk_r>
 8008f48:	3001      	adds	r0, #1
 8008f4a:	d1f2      	bne.n	8008f32 <sbrk_aligned+0x22>
 8008f4c:	e7ef      	b.n	8008f2e <sbrk_aligned+0x1e>
 8008f4e:	bf00      	nop
 8008f50:	20001550 	.word	0x20001550

08008f54 <_malloc_r>:
 8008f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f58:	1ccd      	adds	r5, r1, #3
 8008f5a:	f025 0503 	bic.w	r5, r5, #3
 8008f5e:	3508      	adds	r5, #8
 8008f60:	2d0c      	cmp	r5, #12
 8008f62:	bf38      	it	cc
 8008f64:	250c      	movcc	r5, #12
 8008f66:	2d00      	cmp	r5, #0
 8008f68:	4606      	mov	r6, r0
 8008f6a:	db01      	blt.n	8008f70 <_malloc_r+0x1c>
 8008f6c:	42a9      	cmp	r1, r5
 8008f6e:	d904      	bls.n	8008f7a <_malloc_r+0x26>
 8008f70:	230c      	movs	r3, #12
 8008f72:	6033      	str	r3, [r6, #0]
 8008f74:	2000      	movs	r0, #0
 8008f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009050 <_malloc_r+0xfc>
 8008f7e:	f000 f869 	bl	8009054 <__malloc_lock>
 8008f82:	f8d8 3000 	ldr.w	r3, [r8]
 8008f86:	461c      	mov	r4, r3
 8008f88:	bb44      	cbnz	r4, 8008fdc <_malloc_r+0x88>
 8008f8a:	4629      	mov	r1, r5
 8008f8c:	4630      	mov	r0, r6
 8008f8e:	f7ff ffbf 	bl	8008f10 <sbrk_aligned>
 8008f92:	1c43      	adds	r3, r0, #1
 8008f94:	4604      	mov	r4, r0
 8008f96:	d158      	bne.n	800904a <_malloc_r+0xf6>
 8008f98:	f8d8 4000 	ldr.w	r4, [r8]
 8008f9c:	4627      	mov	r7, r4
 8008f9e:	2f00      	cmp	r7, #0
 8008fa0:	d143      	bne.n	800902a <_malloc_r+0xd6>
 8008fa2:	2c00      	cmp	r4, #0
 8008fa4:	d04b      	beq.n	800903e <_malloc_r+0xea>
 8008fa6:	6823      	ldr	r3, [r4, #0]
 8008fa8:	4639      	mov	r1, r7
 8008faa:	4630      	mov	r0, r6
 8008fac:	eb04 0903 	add.w	r9, r4, r3
 8008fb0:	f000 fb5e 	bl	8009670 <_sbrk_r>
 8008fb4:	4581      	cmp	r9, r0
 8008fb6:	d142      	bne.n	800903e <_malloc_r+0xea>
 8008fb8:	6821      	ldr	r1, [r4, #0]
 8008fba:	4630      	mov	r0, r6
 8008fbc:	1a6d      	subs	r5, r5, r1
 8008fbe:	4629      	mov	r1, r5
 8008fc0:	f7ff ffa6 	bl	8008f10 <sbrk_aligned>
 8008fc4:	3001      	adds	r0, #1
 8008fc6:	d03a      	beq.n	800903e <_malloc_r+0xea>
 8008fc8:	6823      	ldr	r3, [r4, #0]
 8008fca:	442b      	add	r3, r5
 8008fcc:	6023      	str	r3, [r4, #0]
 8008fce:	f8d8 3000 	ldr.w	r3, [r8]
 8008fd2:	685a      	ldr	r2, [r3, #4]
 8008fd4:	bb62      	cbnz	r2, 8009030 <_malloc_r+0xdc>
 8008fd6:	f8c8 7000 	str.w	r7, [r8]
 8008fda:	e00f      	b.n	8008ffc <_malloc_r+0xa8>
 8008fdc:	6822      	ldr	r2, [r4, #0]
 8008fde:	1b52      	subs	r2, r2, r5
 8008fe0:	d420      	bmi.n	8009024 <_malloc_r+0xd0>
 8008fe2:	2a0b      	cmp	r2, #11
 8008fe4:	d917      	bls.n	8009016 <_malloc_r+0xc2>
 8008fe6:	1961      	adds	r1, r4, r5
 8008fe8:	42a3      	cmp	r3, r4
 8008fea:	6025      	str	r5, [r4, #0]
 8008fec:	bf18      	it	ne
 8008fee:	6059      	strne	r1, [r3, #4]
 8008ff0:	6863      	ldr	r3, [r4, #4]
 8008ff2:	bf08      	it	eq
 8008ff4:	f8c8 1000 	streq.w	r1, [r8]
 8008ff8:	5162      	str	r2, [r4, r5]
 8008ffa:	604b      	str	r3, [r1, #4]
 8008ffc:	4630      	mov	r0, r6
 8008ffe:	f000 f82f 	bl	8009060 <__malloc_unlock>
 8009002:	f104 000b 	add.w	r0, r4, #11
 8009006:	1d23      	adds	r3, r4, #4
 8009008:	f020 0007 	bic.w	r0, r0, #7
 800900c:	1ac2      	subs	r2, r0, r3
 800900e:	bf1c      	itt	ne
 8009010:	1a1b      	subne	r3, r3, r0
 8009012:	50a3      	strne	r3, [r4, r2]
 8009014:	e7af      	b.n	8008f76 <_malloc_r+0x22>
 8009016:	6862      	ldr	r2, [r4, #4]
 8009018:	42a3      	cmp	r3, r4
 800901a:	bf0c      	ite	eq
 800901c:	f8c8 2000 	streq.w	r2, [r8]
 8009020:	605a      	strne	r2, [r3, #4]
 8009022:	e7eb      	b.n	8008ffc <_malloc_r+0xa8>
 8009024:	4623      	mov	r3, r4
 8009026:	6864      	ldr	r4, [r4, #4]
 8009028:	e7ae      	b.n	8008f88 <_malloc_r+0x34>
 800902a:	463c      	mov	r4, r7
 800902c:	687f      	ldr	r7, [r7, #4]
 800902e:	e7b6      	b.n	8008f9e <_malloc_r+0x4a>
 8009030:	461a      	mov	r2, r3
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	42a3      	cmp	r3, r4
 8009036:	d1fb      	bne.n	8009030 <_malloc_r+0xdc>
 8009038:	2300      	movs	r3, #0
 800903a:	6053      	str	r3, [r2, #4]
 800903c:	e7de      	b.n	8008ffc <_malloc_r+0xa8>
 800903e:	230c      	movs	r3, #12
 8009040:	4630      	mov	r0, r6
 8009042:	6033      	str	r3, [r6, #0]
 8009044:	f000 f80c 	bl	8009060 <__malloc_unlock>
 8009048:	e794      	b.n	8008f74 <_malloc_r+0x20>
 800904a:	6005      	str	r5, [r0, #0]
 800904c:	e7d6      	b.n	8008ffc <_malloc_r+0xa8>
 800904e:	bf00      	nop
 8009050:	20001554 	.word	0x20001554

08009054 <__malloc_lock>:
 8009054:	4801      	ldr	r0, [pc, #4]	@ (800905c <__malloc_lock+0x8>)
 8009056:	f7ff bf03 	b.w	8008e60 <__retarget_lock_acquire_recursive>
 800905a:	bf00      	nop
 800905c:	2000154c 	.word	0x2000154c

08009060 <__malloc_unlock>:
 8009060:	4801      	ldr	r0, [pc, #4]	@ (8009068 <__malloc_unlock+0x8>)
 8009062:	f7ff befe 	b.w	8008e62 <__retarget_lock_release_recursive>
 8009066:	bf00      	nop
 8009068:	2000154c 	.word	0x2000154c

0800906c <__ssputs_r>:
 800906c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009070:	461f      	mov	r7, r3
 8009072:	688e      	ldr	r6, [r1, #8]
 8009074:	4682      	mov	sl, r0
 8009076:	42be      	cmp	r6, r7
 8009078:	460c      	mov	r4, r1
 800907a:	4690      	mov	r8, r2
 800907c:	680b      	ldr	r3, [r1, #0]
 800907e:	d82d      	bhi.n	80090dc <__ssputs_r+0x70>
 8009080:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009084:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009088:	d026      	beq.n	80090d8 <__ssputs_r+0x6c>
 800908a:	6965      	ldr	r5, [r4, #20]
 800908c:	6909      	ldr	r1, [r1, #16]
 800908e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009092:	eba3 0901 	sub.w	r9, r3, r1
 8009096:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800909a:	1c7b      	adds	r3, r7, #1
 800909c:	444b      	add	r3, r9
 800909e:	106d      	asrs	r5, r5, #1
 80090a0:	429d      	cmp	r5, r3
 80090a2:	bf38      	it	cc
 80090a4:	461d      	movcc	r5, r3
 80090a6:	0553      	lsls	r3, r2, #21
 80090a8:	d527      	bpl.n	80090fa <__ssputs_r+0x8e>
 80090aa:	4629      	mov	r1, r5
 80090ac:	f7ff ff52 	bl	8008f54 <_malloc_r>
 80090b0:	4606      	mov	r6, r0
 80090b2:	b360      	cbz	r0, 800910e <__ssputs_r+0xa2>
 80090b4:	464a      	mov	r2, r9
 80090b6:	6921      	ldr	r1, [r4, #16]
 80090b8:	f7ff fed4 	bl	8008e64 <memcpy>
 80090bc:	89a3      	ldrh	r3, [r4, #12]
 80090be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80090c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090c6:	81a3      	strh	r3, [r4, #12]
 80090c8:	6126      	str	r6, [r4, #16]
 80090ca:	444e      	add	r6, r9
 80090cc:	6026      	str	r6, [r4, #0]
 80090ce:	463e      	mov	r6, r7
 80090d0:	6165      	str	r5, [r4, #20]
 80090d2:	eba5 0509 	sub.w	r5, r5, r9
 80090d6:	60a5      	str	r5, [r4, #8]
 80090d8:	42be      	cmp	r6, r7
 80090da:	d900      	bls.n	80090de <__ssputs_r+0x72>
 80090dc:	463e      	mov	r6, r7
 80090de:	4632      	mov	r2, r6
 80090e0:	4641      	mov	r1, r8
 80090e2:	6820      	ldr	r0, [r4, #0]
 80090e4:	f000 faaa 	bl	800963c <memmove>
 80090e8:	2000      	movs	r0, #0
 80090ea:	68a3      	ldr	r3, [r4, #8]
 80090ec:	1b9b      	subs	r3, r3, r6
 80090ee:	60a3      	str	r3, [r4, #8]
 80090f0:	6823      	ldr	r3, [r4, #0]
 80090f2:	4433      	add	r3, r6
 80090f4:	6023      	str	r3, [r4, #0]
 80090f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090fa:	462a      	mov	r2, r5
 80090fc:	f000 fad6 	bl	80096ac <_realloc_r>
 8009100:	4606      	mov	r6, r0
 8009102:	2800      	cmp	r0, #0
 8009104:	d1e0      	bne.n	80090c8 <__ssputs_r+0x5c>
 8009106:	4650      	mov	r0, sl
 8009108:	6921      	ldr	r1, [r4, #16]
 800910a:	f7ff feb9 	bl	8008e80 <_free_r>
 800910e:	230c      	movs	r3, #12
 8009110:	f8ca 3000 	str.w	r3, [sl]
 8009114:	89a3      	ldrh	r3, [r4, #12]
 8009116:	f04f 30ff 	mov.w	r0, #4294967295
 800911a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800911e:	81a3      	strh	r3, [r4, #12]
 8009120:	e7e9      	b.n	80090f6 <__ssputs_r+0x8a>
	...

08009124 <_svfiprintf_r>:
 8009124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009128:	4698      	mov	r8, r3
 800912a:	898b      	ldrh	r3, [r1, #12]
 800912c:	4607      	mov	r7, r0
 800912e:	061b      	lsls	r3, r3, #24
 8009130:	460d      	mov	r5, r1
 8009132:	4614      	mov	r4, r2
 8009134:	b09d      	sub	sp, #116	@ 0x74
 8009136:	d510      	bpl.n	800915a <_svfiprintf_r+0x36>
 8009138:	690b      	ldr	r3, [r1, #16]
 800913a:	b973      	cbnz	r3, 800915a <_svfiprintf_r+0x36>
 800913c:	2140      	movs	r1, #64	@ 0x40
 800913e:	f7ff ff09 	bl	8008f54 <_malloc_r>
 8009142:	6028      	str	r0, [r5, #0]
 8009144:	6128      	str	r0, [r5, #16]
 8009146:	b930      	cbnz	r0, 8009156 <_svfiprintf_r+0x32>
 8009148:	230c      	movs	r3, #12
 800914a:	603b      	str	r3, [r7, #0]
 800914c:	f04f 30ff 	mov.w	r0, #4294967295
 8009150:	b01d      	add	sp, #116	@ 0x74
 8009152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009156:	2340      	movs	r3, #64	@ 0x40
 8009158:	616b      	str	r3, [r5, #20]
 800915a:	2300      	movs	r3, #0
 800915c:	9309      	str	r3, [sp, #36]	@ 0x24
 800915e:	2320      	movs	r3, #32
 8009160:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009164:	2330      	movs	r3, #48	@ 0x30
 8009166:	f04f 0901 	mov.w	r9, #1
 800916a:	f8cd 800c 	str.w	r8, [sp, #12]
 800916e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009308 <_svfiprintf_r+0x1e4>
 8009172:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009176:	4623      	mov	r3, r4
 8009178:	469a      	mov	sl, r3
 800917a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800917e:	b10a      	cbz	r2, 8009184 <_svfiprintf_r+0x60>
 8009180:	2a25      	cmp	r2, #37	@ 0x25
 8009182:	d1f9      	bne.n	8009178 <_svfiprintf_r+0x54>
 8009184:	ebba 0b04 	subs.w	fp, sl, r4
 8009188:	d00b      	beq.n	80091a2 <_svfiprintf_r+0x7e>
 800918a:	465b      	mov	r3, fp
 800918c:	4622      	mov	r2, r4
 800918e:	4629      	mov	r1, r5
 8009190:	4638      	mov	r0, r7
 8009192:	f7ff ff6b 	bl	800906c <__ssputs_r>
 8009196:	3001      	adds	r0, #1
 8009198:	f000 80a7 	beq.w	80092ea <_svfiprintf_r+0x1c6>
 800919c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800919e:	445a      	add	r2, fp
 80091a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80091a2:	f89a 3000 	ldrb.w	r3, [sl]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	f000 809f 	beq.w	80092ea <_svfiprintf_r+0x1c6>
 80091ac:	2300      	movs	r3, #0
 80091ae:	f04f 32ff 	mov.w	r2, #4294967295
 80091b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091b6:	f10a 0a01 	add.w	sl, sl, #1
 80091ba:	9304      	str	r3, [sp, #16]
 80091bc:	9307      	str	r3, [sp, #28]
 80091be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80091c2:	931a      	str	r3, [sp, #104]	@ 0x68
 80091c4:	4654      	mov	r4, sl
 80091c6:	2205      	movs	r2, #5
 80091c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091cc:	484e      	ldr	r0, [pc, #312]	@ (8009308 <_svfiprintf_r+0x1e4>)
 80091ce:	f000 fa5f 	bl	8009690 <memchr>
 80091d2:	9a04      	ldr	r2, [sp, #16]
 80091d4:	b9d8      	cbnz	r0, 800920e <_svfiprintf_r+0xea>
 80091d6:	06d0      	lsls	r0, r2, #27
 80091d8:	bf44      	itt	mi
 80091da:	2320      	movmi	r3, #32
 80091dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091e0:	0711      	lsls	r1, r2, #28
 80091e2:	bf44      	itt	mi
 80091e4:	232b      	movmi	r3, #43	@ 0x2b
 80091e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091ea:	f89a 3000 	ldrb.w	r3, [sl]
 80091ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80091f0:	d015      	beq.n	800921e <_svfiprintf_r+0xfa>
 80091f2:	4654      	mov	r4, sl
 80091f4:	2000      	movs	r0, #0
 80091f6:	f04f 0c0a 	mov.w	ip, #10
 80091fa:	9a07      	ldr	r2, [sp, #28]
 80091fc:	4621      	mov	r1, r4
 80091fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009202:	3b30      	subs	r3, #48	@ 0x30
 8009204:	2b09      	cmp	r3, #9
 8009206:	d94b      	bls.n	80092a0 <_svfiprintf_r+0x17c>
 8009208:	b1b0      	cbz	r0, 8009238 <_svfiprintf_r+0x114>
 800920a:	9207      	str	r2, [sp, #28]
 800920c:	e014      	b.n	8009238 <_svfiprintf_r+0x114>
 800920e:	eba0 0308 	sub.w	r3, r0, r8
 8009212:	fa09 f303 	lsl.w	r3, r9, r3
 8009216:	4313      	orrs	r3, r2
 8009218:	46a2      	mov	sl, r4
 800921a:	9304      	str	r3, [sp, #16]
 800921c:	e7d2      	b.n	80091c4 <_svfiprintf_r+0xa0>
 800921e:	9b03      	ldr	r3, [sp, #12]
 8009220:	1d19      	adds	r1, r3, #4
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	9103      	str	r1, [sp, #12]
 8009226:	2b00      	cmp	r3, #0
 8009228:	bfbb      	ittet	lt
 800922a:	425b      	neglt	r3, r3
 800922c:	f042 0202 	orrlt.w	r2, r2, #2
 8009230:	9307      	strge	r3, [sp, #28]
 8009232:	9307      	strlt	r3, [sp, #28]
 8009234:	bfb8      	it	lt
 8009236:	9204      	strlt	r2, [sp, #16]
 8009238:	7823      	ldrb	r3, [r4, #0]
 800923a:	2b2e      	cmp	r3, #46	@ 0x2e
 800923c:	d10a      	bne.n	8009254 <_svfiprintf_r+0x130>
 800923e:	7863      	ldrb	r3, [r4, #1]
 8009240:	2b2a      	cmp	r3, #42	@ 0x2a
 8009242:	d132      	bne.n	80092aa <_svfiprintf_r+0x186>
 8009244:	9b03      	ldr	r3, [sp, #12]
 8009246:	3402      	adds	r4, #2
 8009248:	1d1a      	adds	r2, r3, #4
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	9203      	str	r2, [sp, #12]
 800924e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009252:	9305      	str	r3, [sp, #20]
 8009254:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800930c <_svfiprintf_r+0x1e8>
 8009258:	2203      	movs	r2, #3
 800925a:	4650      	mov	r0, sl
 800925c:	7821      	ldrb	r1, [r4, #0]
 800925e:	f000 fa17 	bl	8009690 <memchr>
 8009262:	b138      	cbz	r0, 8009274 <_svfiprintf_r+0x150>
 8009264:	2240      	movs	r2, #64	@ 0x40
 8009266:	9b04      	ldr	r3, [sp, #16]
 8009268:	eba0 000a 	sub.w	r0, r0, sl
 800926c:	4082      	lsls	r2, r0
 800926e:	4313      	orrs	r3, r2
 8009270:	3401      	adds	r4, #1
 8009272:	9304      	str	r3, [sp, #16]
 8009274:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009278:	2206      	movs	r2, #6
 800927a:	4825      	ldr	r0, [pc, #148]	@ (8009310 <_svfiprintf_r+0x1ec>)
 800927c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009280:	f000 fa06 	bl	8009690 <memchr>
 8009284:	2800      	cmp	r0, #0
 8009286:	d036      	beq.n	80092f6 <_svfiprintf_r+0x1d2>
 8009288:	4b22      	ldr	r3, [pc, #136]	@ (8009314 <_svfiprintf_r+0x1f0>)
 800928a:	bb1b      	cbnz	r3, 80092d4 <_svfiprintf_r+0x1b0>
 800928c:	9b03      	ldr	r3, [sp, #12]
 800928e:	3307      	adds	r3, #7
 8009290:	f023 0307 	bic.w	r3, r3, #7
 8009294:	3308      	adds	r3, #8
 8009296:	9303      	str	r3, [sp, #12]
 8009298:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800929a:	4433      	add	r3, r6
 800929c:	9309      	str	r3, [sp, #36]	@ 0x24
 800929e:	e76a      	b.n	8009176 <_svfiprintf_r+0x52>
 80092a0:	460c      	mov	r4, r1
 80092a2:	2001      	movs	r0, #1
 80092a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80092a8:	e7a8      	b.n	80091fc <_svfiprintf_r+0xd8>
 80092aa:	2300      	movs	r3, #0
 80092ac:	f04f 0c0a 	mov.w	ip, #10
 80092b0:	4619      	mov	r1, r3
 80092b2:	3401      	adds	r4, #1
 80092b4:	9305      	str	r3, [sp, #20]
 80092b6:	4620      	mov	r0, r4
 80092b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092bc:	3a30      	subs	r2, #48	@ 0x30
 80092be:	2a09      	cmp	r2, #9
 80092c0:	d903      	bls.n	80092ca <_svfiprintf_r+0x1a6>
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d0c6      	beq.n	8009254 <_svfiprintf_r+0x130>
 80092c6:	9105      	str	r1, [sp, #20]
 80092c8:	e7c4      	b.n	8009254 <_svfiprintf_r+0x130>
 80092ca:	4604      	mov	r4, r0
 80092cc:	2301      	movs	r3, #1
 80092ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80092d2:	e7f0      	b.n	80092b6 <_svfiprintf_r+0x192>
 80092d4:	ab03      	add	r3, sp, #12
 80092d6:	9300      	str	r3, [sp, #0]
 80092d8:	462a      	mov	r2, r5
 80092da:	4638      	mov	r0, r7
 80092dc:	4b0e      	ldr	r3, [pc, #56]	@ (8009318 <_svfiprintf_r+0x1f4>)
 80092de:	a904      	add	r1, sp, #16
 80092e0:	f3af 8000 	nop.w
 80092e4:	1c42      	adds	r2, r0, #1
 80092e6:	4606      	mov	r6, r0
 80092e8:	d1d6      	bne.n	8009298 <_svfiprintf_r+0x174>
 80092ea:	89ab      	ldrh	r3, [r5, #12]
 80092ec:	065b      	lsls	r3, r3, #25
 80092ee:	f53f af2d 	bmi.w	800914c <_svfiprintf_r+0x28>
 80092f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80092f4:	e72c      	b.n	8009150 <_svfiprintf_r+0x2c>
 80092f6:	ab03      	add	r3, sp, #12
 80092f8:	9300      	str	r3, [sp, #0]
 80092fa:	462a      	mov	r2, r5
 80092fc:	4638      	mov	r0, r7
 80092fe:	4b06      	ldr	r3, [pc, #24]	@ (8009318 <_svfiprintf_r+0x1f4>)
 8009300:	a904      	add	r1, sp, #16
 8009302:	f000 f87d 	bl	8009400 <_printf_i>
 8009306:	e7ed      	b.n	80092e4 <_svfiprintf_r+0x1c0>
 8009308:	08009866 	.word	0x08009866
 800930c:	0800986c 	.word	0x0800986c
 8009310:	08009870 	.word	0x08009870
 8009314:	00000000 	.word	0x00000000
 8009318:	0800906d 	.word	0x0800906d

0800931c <_printf_common>:
 800931c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009320:	4616      	mov	r6, r2
 8009322:	4698      	mov	r8, r3
 8009324:	688a      	ldr	r2, [r1, #8]
 8009326:	690b      	ldr	r3, [r1, #16]
 8009328:	4607      	mov	r7, r0
 800932a:	4293      	cmp	r3, r2
 800932c:	bfb8      	it	lt
 800932e:	4613      	movlt	r3, r2
 8009330:	6033      	str	r3, [r6, #0]
 8009332:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009336:	460c      	mov	r4, r1
 8009338:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800933c:	b10a      	cbz	r2, 8009342 <_printf_common+0x26>
 800933e:	3301      	adds	r3, #1
 8009340:	6033      	str	r3, [r6, #0]
 8009342:	6823      	ldr	r3, [r4, #0]
 8009344:	0699      	lsls	r1, r3, #26
 8009346:	bf42      	ittt	mi
 8009348:	6833      	ldrmi	r3, [r6, #0]
 800934a:	3302      	addmi	r3, #2
 800934c:	6033      	strmi	r3, [r6, #0]
 800934e:	6825      	ldr	r5, [r4, #0]
 8009350:	f015 0506 	ands.w	r5, r5, #6
 8009354:	d106      	bne.n	8009364 <_printf_common+0x48>
 8009356:	f104 0a19 	add.w	sl, r4, #25
 800935a:	68e3      	ldr	r3, [r4, #12]
 800935c:	6832      	ldr	r2, [r6, #0]
 800935e:	1a9b      	subs	r3, r3, r2
 8009360:	42ab      	cmp	r3, r5
 8009362:	dc2b      	bgt.n	80093bc <_printf_common+0xa0>
 8009364:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009368:	6822      	ldr	r2, [r4, #0]
 800936a:	3b00      	subs	r3, #0
 800936c:	bf18      	it	ne
 800936e:	2301      	movne	r3, #1
 8009370:	0692      	lsls	r2, r2, #26
 8009372:	d430      	bmi.n	80093d6 <_printf_common+0xba>
 8009374:	4641      	mov	r1, r8
 8009376:	4638      	mov	r0, r7
 8009378:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800937c:	47c8      	blx	r9
 800937e:	3001      	adds	r0, #1
 8009380:	d023      	beq.n	80093ca <_printf_common+0xae>
 8009382:	6823      	ldr	r3, [r4, #0]
 8009384:	6922      	ldr	r2, [r4, #16]
 8009386:	f003 0306 	and.w	r3, r3, #6
 800938a:	2b04      	cmp	r3, #4
 800938c:	bf14      	ite	ne
 800938e:	2500      	movne	r5, #0
 8009390:	6833      	ldreq	r3, [r6, #0]
 8009392:	f04f 0600 	mov.w	r6, #0
 8009396:	bf08      	it	eq
 8009398:	68e5      	ldreq	r5, [r4, #12]
 800939a:	f104 041a 	add.w	r4, r4, #26
 800939e:	bf08      	it	eq
 80093a0:	1aed      	subeq	r5, r5, r3
 80093a2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80093a6:	bf08      	it	eq
 80093a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80093ac:	4293      	cmp	r3, r2
 80093ae:	bfc4      	itt	gt
 80093b0:	1a9b      	subgt	r3, r3, r2
 80093b2:	18ed      	addgt	r5, r5, r3
 80093b4:	42b5      	cmp	r5, r6
 80093b6:	d11a      	bne.n	80093ee <_printf_common+0xd2>
 80093b8:	2000      	movs	r0, #0
 80093ba:	e008      	b.n	80093ce <_printf_common+0xb2>
 80093bc:	2301      	movs	r3, #1
 80093be:	4652      	mov	r2, sl
 80093c0:	4641      	mov	r1, r8
 80093c2:	4638      	mov	r0, r7
 80093c4:	47c8      	blx	r9
 80093c6:	3001      	adds	r0, #1
 80093c8:	d103      	bne.n	80093d2 <_printf_common+0xb6>
 80093ca:	f04f 30ff 	mov.w	r0, #4294967295
 80093ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093d2:	3501      	adds	r5, #1
 80093d4:	e7c1      	b.n	800935a <_printf_common+0x3e>
 80093d6:	2030      	movs	r0, #48	@ 0x30
 80093d8:	18e1      	adds	r1, r4, r3
 80093da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80093de:	1c5a      	adds	r2, r3, #1
 80093e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80093e4:	4422      	add	r2, r4
 80093e6:	3302      	adds	r3, #2
 80093e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80093ec:	e7c2      	b.n	8009374 <_printf_common+0x58>
 80093ee:	2301      	movs	r3, #1
 80093f0:	4622      	mov	r2, r4
 80093f2:	4641      	mov	r1, r8
 80093f4:	4638      	mov	r0, r7
 80093f6:	47c8      	blx	r9
 80093f8:	3001      	adds	r0, #1
 80093fa:	d0e6      	beq.n	80093ca <_printf_common+0xae>
 80093fc:	3601      	adds	r6, #1
 80093fe:	e7d9      	b.n	80093b4 <_printf_common+0x98>

08009400 <_printf_i>:
 8009400:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009404:	7e0f      	ldrb	r7, [r1, #24]
 8009406:	4691      	mov	r9, r2
 8009408:	2f78      	cmp	r7, #120	@ 0x78
 800940a:	4680      	mov	r8, r0
 800940c:	460c      	mov	r4, r1
 800940e:	469a      	mov	sl, r3
 8009410:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009412:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009416:	d807      	bhi.n	8009428 <_printf_i+0x28>
 8009418:	2f62      	cmp	r7, #98	@ 0x62
 800941a:	d80a      	bhi.n	8009432 <_printf_i+0x32>
 800941c:	2f00      	cmp	r7, #0
 800941e:	f000 80d1 	beq.w	80095c4 <_printf_i+0x1c4>
 8009422:	2f58      	cmp	r7, #88	@ 0x58
 8009424:	f000 80b8 	beq.w	8009598 <_printf_i+0x198>
 8009428:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800942c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009430:	e03a      	b.n	80094a8 <_printf_i+0xa8>
 8009432:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009436:	2b15      	cmp	r3, #21
 8009438:	d8f6      	bhi.n	8009428 <_printf_i+0x28>
 800943a:	a101      	add	r1, pc, #4	@ (adr r1, 8009440 <_printf_i+0x40>)
 800943c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009440:	08009499 	.word	0x08009499
 8009444:	080094ad 	.word	0x080094ad
 8009448:	08009429 	.word	0x08009429
 800944c:	08009429 	.word	0x08009429
 8009450:	08009429 	.word	0x08009429
 8009454:	08009429 	.word	0x08009429
 8009458:	080094ad 	.word	0x080094ad
 800945c:	08009429 	.word	0x08009429
 8009460:	08009429 	.word	0x08009429
 8009464:	08009429 	.word	0x08009429
 8009468:	08009429 	.word	0x08009429
 800946c:	080095ab 	.word	0x080095ab
 8009470:	080094d7 	.word	0x080094d7
 8009474:	08009565 	.word	0x08009565
 8009478:	08009429 	.word	0x08009429
 800947c:	08009429 	.word	0x08009429
 8009480:	080095cd 	.word	0x080095cd
 8009484:	08009429 	.word	0x08009429
 8009488:	080094d7 	.word	0x080094d7
 800948c:	08009429 	.word	0x08009429
 8009490:	08009429 	.word	0x08009429
 8009494:	0800956d 	.word	0x0800956d
 8009498:	6833      	ldr	r3, [r6, #0]
 800949a:	1d1a      	adds	r2, r3, #4
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	6032      	str	r2, [r6, #0]
 80094a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80094a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80094a8:	2301      	movs	r3, #1
 80094aa:	e09c      	b.n	80095e6 <_printf_i+0x1e6>
 80094ac:	6833      	ldr	r3, [r6, #0]
 80094ae:	6820      	ldr	r0, [r4, #0]
 80094b0:	1d19      	adds	r1, r3, #4
 80094b2:	6031      	str	r1, [r6, #0]
 80094b4:	0606      	lsls	r6, r0, #24
 80094b6:	d501      	bpl.n	80094bc <_printf_i+0xbc>
 80094b8:	681d      	ldr	r5, [r3, #0]
 80094ba:	e003      	b.n	80094c4 <_printf_i+0xc4>
 80094bc:	0645      	lsls	r5, r0, #25
 80094be:	d5fb      	bpl.n	80094b8 <_printf_i+0xb8>
 80094c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80094c4:	2d00      	cmp	r5, #0
 80094c6:	da03      	bge.n	80094d0 <_printf_i+0xd0>
 80094c8:	232d      	movs	r3, #45	@ 0x2d
 80094ca:	426d      	negs	r5, r5
 80094cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80094d0:	230a      	movs	r3, #10
 80094d2:	4858      	ldr	r0, [pc, #352]	@ (8009634 <_printf_i+0x234>)
 80094d4:	e011      	b.n	80094fa <_printf_i+0xfa>
 80094d6:	6821      	ldr	r1, [r4, #0]
 80094d8:	6833      	ldr	r3, [r6, #0]
 80094da:	0608      	lsls	r0, r1, #24
 80094dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80094e0:	d402      	bmi.n	80094e8 <_printf_i+0xe8>
 80094e2:	0649      	lsls	r1, r1, #25
 80094e4:	bf48      	it	mi
 80094e6:	b2ad      	uxthmi	r5, r5
 80094e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80094ea:	6033      	str	r3, [r6, #0]
 80094ec:	bf14      	ite	ne
 80094ee:	230a      	movne	r3, #10
 80094f0:	2308      	moveq	r3, #8
 80094f2:	4850      	ldr	r0, [pc, #320]	@ (8009634 <_printf_i+0x234>)
 80094f4:	2100      	movs	r1, #0
 80094f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80094fa:	6866      	ldr	r6, [r4, #4]
 80094fc:	2e00      	cmp	r6, #0
 80094fe:	60a6      	str	r6, [r4, #8]
 8009500:	db05      	blt.n	800950e <_printf_i+0x10e>
 8009502:	6821      	ldr	r1, [r4, #0]
 8009504:	432e      	orrs	r6, r5
 8009506:	f021 0104 	bic.w	r1, r1, #4
 800950a:	6021      	str	r1, [r4, #0]
 800950c:	d04b      	beq.n	80095a6 <_printf_i+0x1a6>
 800950e:	4616      	mov	r6, r2
 8009510:	fbb5 f1f3 	udiv	r1, r5, r3
 8009514:	fb03 5711 	mls	r7, r3, r1, r5
 8009518:	5dc7      	ldrb	r7, [r0, r7]
 800951a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800951e:	462f      	mov	r7, r5
 8009520:	42bb      	cmp	r3, r7
 8009522:	460d      	mov	r5, r1
 8009524:	d9f4      	bls.n	8009510 <_printf_i+0x110>
 8009526:	2b08      	cmp	r3, #8
 8009528:	d10b      	bne.n	8009542 <_printf_i+0x142>
 800952a:	6823      	ldr	r3, [r4, #0]
 800952c:	07df      	lsls	r7, r3, #31
 800952e:	d508      	bpl.n	8009542 <_printf_i+0x142>
 8009530:	6923      	ldr	r3, [r4, #16]
 8009532:	6861      	ldr	r1, [r4, #4]
 8009534:	4299      	cmp	r1, r3
 8009536:	bfde      	ittt	le
 8009538:	2330      	movle	r3, #48	@ 0x30
 800953a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800953e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009542:	1b92      	subs	r2, r2, r6
 8009544:	6122      	str	r2, [r4, #16]
 8009546:	464b      	mov	r3, r9
 8009548:	4621      	mov	r1, r4
 800954a:	4640      	mov	r0, r8
 800954c:	f8cd a000 	str.w	sl, [sp]
 8009550:	aa03      	add	r2, sp, #12
 8009552:	f7ff fee3 	bl	800931c <_printf_common>
 8009556:	3001      	adds	r0, #1
 8009558:	d14a      	bne.n	80095f0 <_printf_i+0x1f0>
 800955a:	f04f 30ff 	mov.w	r0, #4294967295
 800955e:	b004      	add	sp, #16
 8009560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009564:	6823      	ldr	r3, [r4, #0]
 8009566:	f043 0320 	orr.w	r3, r3, #32
 800956a:	6023      	str	r3, [r4, #0]
 800956c:	2778      	movs	r7, #120	@ 0x78
 800956e:	4832      	ldr	r0, [pc, #200]	@ (8009638 <_printf_i+0x238>)
 8009570:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009574:	6823      	ldr	r3, [r4, #0]
 8009576:	6831      	ldr	r1, [r6, #0]
 8009578:	061f      	lsls	r7, r3, #24
 800957a:	f851 5b04 	ldr.w	r5, [r1], #4
 800957e:	d402      	bmi.n	8009586 <_printf_i+0x186>
 8009580:	065f      	lsls	r7, r3, #25
 8009582:	bf48      	it	mi
 8009584:	b2ad      	uxthmi	r5, r5
 8009586:	6031      	str	r1, [r6, #0]
 8009588:	07d9      	lsls	r1, r3, #31
 800958a:	bf44      	itt	mi
 800958c:	f043 0320 	orrmi.w	r3, r3, #32
 8009590:	6023      	strmi	r3, [r4, #0]
 8009592:	b11d      	cbz	r5, 800959c <_printf_i+0x19c>
 8009594:	2310      	movs	r3, #16
 8009596:	e7ad      	b.n	80094f4 <_printf_i+0xf4>
 8009598:	4826      	ldr	r0, [pc, #152]	@ (8009634 <_printf_i+0x234>)
 800959a:	e7e9      	b.n	8009570 <_printf_i+0x170>
 800959c:	6823      	ldr	r3, [r4, #0]
 800959e:	f023 0320 	bic.w	r3, r3, #32
 80095a2:	6023      	str	r3, [r4, #0]
 80095a4:	e7f6      	b.n	8009594 <_printf_i+0x194>
 80095a6:	4616      	mov	r6, r2
 80095a8:	e7bd      	b.n	8009526 <_printf_i+0x126>
 80095aa:	6833      	ldr	r3, [r6, #0]
 80095ac:	6825      	ldr	r5, [r4, #0]
 80095ae:	1d18      	adds	r0, r3, #4
 80095b0:	6961      	ldr	r1, [r4, #20]
 80095b2:	6030      	str	r0, [r6, #0]
 80095b4:	062e      	lsls	r6, r5, #24
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	d501      	bpl.n	80095be <_printf_i+0x1be>
 80095ba:	6019      	str	r1, [r3, #0]
 80095bc:	e002      	b.n	80095c4 <_printf_i+0x1c4>
 80095be:	0668      	lsls	r0, r5, #25
 80095c0:	d5fb      	bpl.n	80095ba <_printf_i+0x1ba>
 80095c2:	8019      	strh	r1, [r3, #0]
 80095c4:	2300      	movs	r3, #0
 80095c6:	4616      	mov	r6, r2
 80095c8:	6123      	str	r3, [r4, #16]
 80095ca:	e7bc      	b.n	8009546 <_printf_i+0x146>
 80095cc:	6833      	ldr	r3, [r6, #0]
 80095ce:	2100      	movs	r1, #0
 80095d0:	1d1a      	adds	r2, r3, #4
 80095d2:	6032      	str	r2, [r6, #0]
 80095d4:	681e      	ldr	r6, [r3, #0]
 80095d6:	6862      	ldr	r2, [r4, #4]
 80095d8:	4630      	mov	r0, r6
 80095da:	f000 f859 	bl	8009690 <memchr>
 80095de:	b108      	cbz	r0, 80095e4 <_printf_i+0x1e4>
 80095e0:	1b80      	subs	r0, r0, r6
 80095e2:	6060      	str	r0, [r4, #4]
 80095e4:	6863      	ldr	r3, [r4, #4]
 80095e6:	6123      	str	r3, [r4, #16]
 80095e8:	2300      	movs	r3, #0
 80095ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80095ee:	e7aa      	b.n	8009546 <_printf_i+0x146>
 80095f0:	4632      	mov	r2, r6
 80095f2:	4649      	mov	r1, r9
 80095f4:	4640      	mov	r0, r8
 80095f6:	6923      	ldr	r3, [r4, #16]
 80095f8:	47d0      	blx	sl
 80095fa:	3001      	adds	r0, #1
 80095fc:	d0ad      	beq.n	800955a <_printf_i+0x15a>
 80095fe:	6823      	ldr	r3, [r4, #0]
 8009600:	079b      	lsls	r3, r3, #30
 8009602:	d413      	bmi.n	800962c <_printf_i+0x22c>
 8009604:	68e0      	ldr	r0, [r4, #12]
 8009606:	9b03      	ldr	r3, [sp, #12]
 8009608:	4298      	cmp	r0, r3
 800960a:	bfb8      	it	lt
 800960c:	4618      	movlt	r0, r3
 800960e:	e7a6      	b.n	800955e <_printf_i+0x15e>
 8009610:	2301      	movs	r3, #1
 8009612:	4632      	mov	r2, r6
 8009614:	4649      	mov	r1, r9
 8009616:	4640      	mov	r0, r8
 8009618:	47d0      	blx	sl
 800961a:	3001      	adds	r0, #1
 800961c:	d09d      	beq.n	800955a <_printf_i+0x15a>
 800961e:	3501      	adds	r5, #1
 8009620:	68e3      	ldr	r3, [r4, #12]
 8009622:	9903      	ldr	r1, [sp, #12]
 8009624:	1a5b      	subs	r3, r3, r1
 8009626:	42ab      	cmp	r3, r5
 8009628:	dcf2      	bgt.n	8009610 <_printf_i+0x210>
 800962a:	e7eb      	b.n	8009604 <_printf_i+0x204>
 800962c:	2500      	movs	r5, #0
 800962e:	f104 0619 	add.w	r6, r4, #25
 8009632:	e7f5      	b.n	8009620 <_printf_i+0x220>
 8009634:	08009877 	.word	0x08009877
 8009638:	08009888 	.word	0x08009888

0800963c <memmove>:
 800963c:	4288      	cmp	r0, r1
 800963e:	b510      	push	{r4, lr}
 8009640:	eb01 0402 	add.w	r4, r1, r2
 8009644:	d902      	bls.n	800964c <memmove+0x10>
 8009646:	4284      	cmp	r4, r0
 8009648:	4623      	mov	r3, r4
 800964a:	d807      	bhi.n	800965c <memmove+0x20>
 800964c:	1e43      	subs	r3, r0, #1
 800964e:	42a1      	cmp	r1, r4
 8009650:	d008      	beq.n	8009664 <memmove+0x28>
 8009652:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009656:	f803 2f01 	strb.w	r2, [r3, #1]!
 800965a:	e7f8      	b.n	800964e <memmove+0x12>
 800965c:	4601      	mov	r1, r0
 800965e:	4402      	add	r2, r0
 8009660:	428a      	cmp	r2, r1
 8009662:	d100      	bne.n	8009666 <memmove+0x2a>
 8009664:	bd10      	pop	{r4, pc}
 8009666:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800966a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800966e:	e7f7      	b.n	8009660 <memmove+0x24>

08009670 <_sbrk_r>:
 8009670:	b538      	push	{r3, r4, r5, lr}
 8009672:	2300      	movs	r3, #0
 8009674:	4d05      	ldr	r5, [pc, #20]	@ (800968c <_sbrk_r+0x1c>)
 8009676:	4604      	mov	r4, r0
 8009678:	4608      	mov	r0, r1
 800967a:	602b      	str	r3, [r5, #0]
 800967c:	f7f6 ffe8 	bl	8000650 <_sbrk>
 8009680:	1c43      	adds	r3, r0, #1
 8009682:	d102      	bne.n	800968a <_sbrk_r+0x1a>
 8009684:	682b      	ldr	r3, [r5, #0]
 8009686:	b103      	cbz	r3, 800968a <_sbrk_r+0x1a>
 8009688:	6023      	str	r3, [r4, #0]
 800968a:	bd38      	pop	{r3, r4, r5, pc}
 800968c:	20001548 	.word	0x20001548

08009690 <memchr>:
 8009690:	4603      	mov	r3, r0
 8009692:	b510      	push	{r4, lr}
 8009694:	b2c9      	uxtb	r1, r1
 8009696:	4402      	add	r2, r0
 8009698:	4293      	cmp	r3, r2
 800969a:	4618      	mov	r0, r3
 800969c:	d101      	bne.n	80096a2 <memchr+0x12>
 800969e:	2000      	movs	r0, #0
 80096a0:	e003      	b.n	80096aa <memchr+0x1a>
 80096a2:	7804      	ldrb	r4, [r0, #0]
 80096a4:	3301      	adds	r3, #1
 80096a6:	428c      	cmp	r4, r1
 80096a8:	d1f6      	bne.n	8009698 <memchr+0x8>
 80096aa:	bd10      	pop	{r4, pc}

080096ac <_realloc_r>:
 80096ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096b0:	4607      	mov	r7, r0
 80096b2:	4614      	mov	r4, r2
 80096b4:	460d      	mov	r5, r1
 80096b6:	b921      	cbnz	r1, 80096c2 <_realloc_r+0x16>
 80096b8:	4611      	mov	r1, r2
 80096ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096be:	f7ff bc49 	b.w	8008f54 <_malloc_r>
 80096c2:	b92a      	cbnz	r2, 80096d0 <_realloc_r+0x24>
 80096c4:	f7ff fbdc 	bl	8008e80 <_free_r>
 80096c8:	4625      	mov	r5, r4
 80096ca:	4628      	mov	r0, r5
 80096cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096d0:	f000 f81a 	bl	8009708 <_malloc_usable_size_r>
 80096d4:	4284      	cmp	r4, r0
 80096d6:	4606      	mov	r6, r0
 80096d8:	d802      	bhi.n	80096e0 <_realloc_r+0x34>
 80096da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80096de:	d8f4      	bhi.n	80096ca <_realloc_r+0x1e>
 80096e0:	4621      	mov	r1, r4
 80096e2:	4638      	mov	r0, r7
 80096e4:	f7ff fc36 	bl	8008f54 <_malloc_r>
 80096e8:	4680      	mov	r8, r0
 80096ea:	b908      	cbnz	r0, 80096f0 <_realloc_r+0x44>
 80096ec:	4645      	mov	r5, r8
 80096ee:	e7ec      	b.n	80096ca <_realloc_r+0x1e>
 80096f0:	42b4      	cmp	r4, r6
 80096f2:	4622      	mov	r2, r4
 80096f4:	4629      	mov	r1, r5
 80096f6:	bf28      	it	cs
 80096f8:	4632      	movcs	r2, r6
 80096fa:	f7ff fbb3 	bl	8008e64 <memcpy>
 80096fe:	4629      	mov	r1, r5
 8009700:	4638      	mov	r0, r7
 8009702:	f7ff fbbd 	bl	8008e80 <_free_r>
 8009706:	e7f1      	b.n	80096ec <_realloc_r+0x40>

08009708 <_malloc_usable_size_r>:
 8009708:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800970c:	1f18      	subs	r0, r3, #4
 800970e:	2b00      	cmp	r3, #0
 8009710:	bfbc      	itt	lt
 8009712:	580b      	ldrlt	r3, [r1, r0]
 8009714:	18c0      	addlt	r0, r0, r3
 8009716:	4770      	bx	lr

08009718 <_init>:
 8009718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800971a:	bf00      	nop
 800971c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800971e:	bc08      	pop	{r3}
 8009720:	469e      	mov	lr, r3
 8009722:	4770      	bx	lr

08009724 <_fini>:
 8009724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009726:	bf00      	nop
 8009728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800972a:	bc08      	pop	{r3}
 800972c:	469e      	mov	lr, r3
 800972e:	4770      	bx	lr
