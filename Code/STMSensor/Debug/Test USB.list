
Test USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f58  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08008064  08008064  00009064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800811c  0800811c  0000a1cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800811c  0800811c  0000911c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008124  08008124  0000a1cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008124  08008124  00009124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008128  08008128  00009128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001cc  20000000  0800812c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000132c  200001cc  080082f8  0000a1cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200014f8  080082f8  0000a4f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c1e7  00000000  00000000  0000a1f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bdd  00000000  00000000  000163dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac0  00000000  00000000  00018fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007cb  00000000  00000000  00019a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004861  00000000  00000000  0001a24b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f2ba  00000000  00000000  0001eaac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084cd9  00000000  00000000  0002dd66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b2a3f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002df4  00000000  00000000  000b2a84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000b5878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001cc 	.word	0x200001cc
 8000128:	00000000 	.word	0x00000000
 800012c:	0800804c 	.word	0x0800804c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001d0 	.word	0x200001d0
 8000148:	0800804c 	.word	0x0800804c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000160:	f000 f9ee 	bl	8000540 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000164:	f000 f816 	bl	8000194 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000168:	f000 f86e 	bl	8000248 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800016c:	f006 fe0e 	bl	8006d8c <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Status LED is setup as Pull-Up
	  HAL_GPIO_WritePin(LED_BUILTIN, GPIO_PIN_RESET); // Reset status LED on at start of loop. LED will turn off if there is an error. HAL_GPIO_WritePin(LED_BUILTIN, GPIO_PIN_SET);
 8000170:	2200      	movs	r2, #0
 8000172:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000176:	4806      	ldr	r0, [pc, #24]	@ (8000190 <main+0x34>)
 8000178:	f000 fcfa 	bl	8000b70 <HAL_GPIO_WritePin>
	  SendSensorUSB(1000);
 800017c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000180:	f000 f984 	bl	800048c <SendSensorUSB>
	  HAL_Delay(1000);
 8000184:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000188:	f000 fa3c 	bl	8000604 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_BUILTIN, GPIO_PIN_RESET); // Reset status LED on at start of loop. LED will turn off if there is an error. HAL_GPIO_WritePin(LED_BUILTIN, GPIO_PIN_SET);
 800018c:	bf00      	nop
 800018e:	e7ef      	b.n	8000170 <main+0x14>
 8000190:	40011000 	.word	0x40011000

08000194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	b094      	sub	sp, #80	@ 0x50
 8000198:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800019a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800019e:	2228      	movs	r2, #40	@ 0x28
 80001a0:	2100      	movs	r1, #0
 80001a2:	4618      	mov	r0, r3
 80001a4:	f007 fac4 	bl	8007730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001a8:	f107 0314 	add.w	r3, r7, #20
 80001ac:	2200      	movs	r2, #0
 80001ae:	601a      	str	r2, [r3, #0]
 80001b0:	605a      	str	r2, [r3, #4]
 80001b2:	609a      	str	r2, [r3, #8]
 80001b4:	60da      	str	r2, [r3, #12]
 80001b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001b8:	1d3b      	adds	r3, r7, #4
 80001ba:	2200      	movs	r2, #0
 80001bc:	601a      	str	r2, [r3, #0]
 80001be:	605a      	str	r2, [r3, #4]
 80001c0:	609a      	str	r2, [r3, #8]
 80001c2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001c4:	2301      	movs	r3, #1
 80001c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001ce:	2300      	movs	r3, #0
 80001d0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001d2:	2301      	movs	r3, #1
 80001d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001d6:	2302      	movs	r3, #2
 80001d8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001e0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80001e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001ea:	4618      	mov	r0, r3
 80001ec:	f002 fa38 	bl	8002660 <HAL_RCC_OscConfig>
 80001f0:	4603      	mov	r3, r0
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d001      	beq.n	80001fa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001f6:	f000 f873 	bl	80002e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001fa:	230f      	movs	r3, #15
 80001fc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001fe:	2302      	movs	r3, #2
 8000200:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000202:	2300      	movs	r3, #0
 8000204:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000206:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800020a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800020c:	2300      	movs	r3, #0
 800020e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000210:	f107 0314 	add.w	r3, r7, #20
 8000214:	2102      	movs	r1, #2
 8000216:	4618      	mov	r0, r3
 8000218:	f002 fca4 	bl	8002b64 <HAL_RCC_ClockConfig>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	d001      	beq.n	8000226 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000222:	f000 f85d 	bl	80002e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000226:	2310      	movs	r3, #16
 8000228:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800022a:	2300      	movs	r3, #0
 800022c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800022e:	1d3b      	adds	r3, r7, #4
 8000230:	4618      	mov	r0, r3
 8000232:	f002 fdf3 	bl	8002e1c <HAL_RCCEx_PeriphCLKConfig>
 8000236:	4603      	mov	r3, r0
 8000238:	2b00      	cmp	r3, #0
 800023a:	d001      	beq.n	8000240 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800023c:	f000 f850 	bl	80002e0 <Error_Handler>
  }
}
 8000240:	bf00      	nop
 8000242:	3750      	adds	r7, #80	@ 0x50
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}

08000248 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b088      	sub	sp, #32
 800024c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800024e:	f107 0310 	add.w	r3, r7, #16
 8000252:	2200      	movs	r2, #0
 8000254:	601a      	str	r2, [r3, #0]
 8000256:	605a      	str	r2, [r3, #4]
 8000258:	609a      	str	r2, [r3, #8]
 800025a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800025c:	4b1e      	ldr	r3, [pc, #120]	@ (80002d8 <MX_GPIO_Init+0x90>)
 800025e:	699b      	ldr	r3, [r3, #24]
 8000260:	4a1d      	ldr	r2, [pc, #116]	@ (80002d8 <MX_GPIO_Init+0x90>)
 8000262:	f043 0310 	orr.w	r3, r3, #16
 8000266:	6193      	str	r3, [r2, #24]
 8000268:	4b1b      	ldr	r3, [pc, #108]	@ (80002d8 <MX_GPIO_Init+0x90>)
 800026a:	699b      	ldr	r3, [r3, #24]
 800026c:	f003 0310 	and.w	r3, r3, #16
 8000270:	60fb      	str	r3, [r7, #12]
 8000272:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000274:	4b18      	ldr	r3, [pc, #96]	@ (80002d8 <MX_GPIO_Init+0x90>)
 8000276:	699b      	ldr	r3, [r3, #24]
 8000278:	4a17      	ldr	r2, [pc, #92]	@ (80002d8 <MX_GPIO_Init+0x90>)
 800027a:	f043 0320 	orr.w	r3, r3, #32
 800027e:	6193      	str	r3, [r2, #24]
 8000280:	4b15      	ldr	r3, [pc, #84]	@ (80002d8 <MX_GPIO_Init+0x90>)
 8000282:	699b      	ldr	r3, [r3, #24]
 8000284:	f003 0320 	and.w	r3, r3, #32
 8000288:	60bb      	str	r3, [r7, #8]
 800028a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800028c:	4b12      	ldr	r3, [pc, #72]	@ (80002d8 <MX_GPIO_Init+0x90>)
 800028e:	699b      	ldr	r3, [r3, #24]
 8000290:	4a11      	ldr	r2, [pc, #68]	@ (80002d8 <MX_GPIO_Init+0x90>)
 8000292:	f043 0304 	orr.w	r3, r3, #4
 8000296:	6193      	str	r3, [r2, #24]
 8000298:	4b0f      	ldr	r3, [pc, #60]	@ (80002d8 <MX_GPIO_Init+0x90>)
 800029a:	699b      	ldr	r3, [r3, #24]
 800029c:	f003 0304 	and.w	r3, r3, #4
 80002a0:	607b      	str	r3, [r7, #4]
 80002a2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Status_LED_GPIO_Port, Status_LED_Pin, GPIO_PIN_RESET);
 80002a4:	2200      	movs	r2, #0
 80002a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002aa:	480c      	ldr	r0, [pc, #48]	@ (80002dc <MX_GPIO_Init+0x94>)
 80002ac:	f000 fc60 	bl	8000b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Status_LED_Pin */
  GPIO_InitStruct.Pin = Status_LED_Pin;
 80002b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002b6:	2301      	movs	r3, #1
 80002b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002ba:	2301      	movs	r3, #1
 80002bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002be:	2303      	movs	r3, #3
 80002c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Status_LED_GPIO_Port, &GPIO_InitStruct);
 80002c2:	f107 0310 	add.w	r3, r7, #16
 80002c6:	4619      	mov	r1, r3
 80002c8:	4804      	ldr	r0, [pc, #16]	@ (80002dc <MX_GPIO_Init+0x94>)
 80002ca:	f000 facd 	bl	8000868 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80002ce:	bf00      	nop
 80002d0:	3720      	adds	r7, #32
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	40021000 	.word	0x40021000
 80002dc:	40011000 	.word	0x40011000

080002e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002e4:	b672      	cpsid	i
}
 80002e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002e8:	bf00      	nop
 80002ea:	e7fd      	b.n	80002e8 <Error_Handler+0x8>

080002ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b085      	sub	sp, #20
 80002f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002f2:	4b15      	ldr	r3, [pc, #84]	@ (8000348 <HAL_MspInit+0x5c>)
 80002f4:	699b      	ldr	r3, [r3, #24]
 80002f6:	4a14      	ldr	r2, [pc, #80]	@ (8000348 <HAL_MspInit+0x5c>)
 80002f8:	f043 0301 	orr.w	r3, r3, #1
 80002fc:	6193      	str	r3, [r2, #24]
 80002fe:	4b12      	ldr	r3, [pc, #72]	@ (8000348 <HAL_MspInit+0x5c>)
 8000300:	699b      	ldr	r3, [r3, #24]
 8000302:	f003 0301 	and.w	r3, r3, #1
 8000306:	60bb      	str	r3, [r7, #8]
 8000308:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800030a:	4b0f      	ldr	r3, [pc, #60]	@ (8000348 <HAL_MspInit+0x5c>)
 800030c:	69db      	ldr	r3, [r3, #28]
 800030e:	4a0e      	ldr	r2, [pc, #56]	@ (8000348 <HAL_MspInit+0x5c>)
 8000310:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000314:	61d3      	str	r3, [r2, #28]
 8000316:	4b0c      	ldr	r3, [pc, #48]	@ (8000348 <HAL_MspInit+0x5c>)
 8000318:	69db      	ldr	r3, [r3, #28]
 800031a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800031e:	607b      	str	r3, [r7, #4]
 8000320:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000322:	4b0a      	ldr	r3, [pc, #40]	@ (800034c <HAL_MspInit+0x60>)
 8000324:	685b      	ldr	r3, [r3, #4]
 8000326:	60fb      	str	r3, [r7, #12]
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800032e:	60fb      	str	r3, [r7, #12]
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000336:	60fb      	str	r3, [r7, #12]
 8000338:	4a04      	ldr	r2, [pc, #16]	@ (800034c <HAL_MspInit+0x60>)
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800033e:	bf00      	nop
 8000340:	3714      	adds	r7, #20
 8000342:	46bd      	mov	sp, r7
 8000344:	bc80      	pop	{r7}
 8000346:	4770      	bx	lr
 8000348:	40021000 	.word	0x40021000
 800034c:	40010000 	.word	0x40010000

08000350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000354:	bf00      	nop
 8000356:	e7fd      	b.n	8000354 <NMI_Handler+0x4>

08000358 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800035c:	bf00      	nop
 800035e:	e7fd      	b.n	800035c <HardFault_Handler+0x4>

08000360 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000364:	bf00      	nop
 8000366:	e7fd      	b.n	8000364 <MemManage_Handler+0x4>

08000368 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800036c:	bf00      	nop
 800036e:	e7fd      	b.n	800036c <BusFault_Handler+0x4>

08000370 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000374:	bf00      	nop
 8000376:	e7fd      	b.n	8000374 <UsageFault_Handler+0x4>

08000378 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800037c:	bf00      	nop
 800037e:	46bd      	mov	sp, r7
 8000380:	bc80      	pop	{r7}
 8000382:	4770      	bx	lr

08000384 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000388:	bf00      	nop
 800038a:	46bd      	mov	sp, r7
 800038c:	bc80      	pop	{r7}
 800038e:	4770      	bx	lr

08000390 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000394:	bf00      	nop
 8000396:	46bd      	mov	sp, r7
 8000398:	bc80      	pop	{r7}
 800039a:	4770      	bx	lr

0800039c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003a0:	f000 f914 	bl	80005cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003a4:	bf00      	nop
 80003a6:	bd80      	pop	{r7, pc}

080003a8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80003ac:	4802      	ldr	r0, [pc, #8]	@ (80003b8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80003ae:	f000 fd13 	bl	8000dd8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	20000eb8 	.word	0x20000eb8

080003bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b086      	sub	sp, #24
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003c4:	4a14      	ldr	r2, [pc, #80]	@ (8000418 <_sbrk+0x5c>)
 80003c6:	4b15      	ldr	r3, [pc, #84]	@ (800041c <_sbrk+0x60>)
 80003c8:	1ad3      	subs	r3, r2, r3
 80003ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003cc:	697b      	ldr	r3, [r7, #20]
 80003ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003d0:	4b13      	ldr	r3, [pc, #76]	@ (8000420 <_sbrk+0x64>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d102      	bne.n	80003de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003d8:	4b11      	ldr	r3, [pc, #68]	@ (8000420 <_sbrk+0x64>)
 80003da:	4a12      	ldr	r2, [pc, #72]	@ (8000424 <_sbrk+0x68>)
 80003dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003de:	4b10      	ldr	r3, [pc, #64]	@ (8000420 <_sbrk+0x64>)
 80003e0:	681a      	ldr	r2, [r3, #0]
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	4413      	add	r3, r2
 80003e6:	693a      	ldr	r2, [r7, #16]
 80003e8:	429a      	cmp	r2, r3
 80003ea:	d207      	bcs.n	80003fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80003ec:	f007 f9a8 	bl	8007740 <__errno>
 80003f0:	4603      	mov	r3, r0
 80003f2:	220c      	movs	r2, #12
 80003f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80003f6:	f04f 33ff 	mov.w	r3, #4294967295
 80003fa:	e009      	b.n	8000410 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80003fc:	4b08      	ldr	r3, [pc, #32]	@ (8000420 <_sbrk+0x64>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000402:	4b07      	ldr	r3, [pc, #28]	@ (8000420 <_sbrk+0x64>)
 8000404:	681a      	ldr	r2, [r3, #0]
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	4413      	add	r3, r2
 800040a:	4a05      	ldr	r2, [pc, #20]	@ (8000420 <_sbrk+0x64>)
 800040c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800040e:	68fb      	ldr	r3, [r7, #12]
}
 8000410:	4618      	mov	r0, r3
 8000412:	3718      	adds	r7, #24
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	20005000 	.word	0x20005000
 800041c:	00000400 	.word	0x00000400
 8000420:	200001e8 	.word	0x200001e8
 8000424:	200014f8 	.word	0x200014f8

08000428 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800042c:	bf00      	nop
 800042e:	46bd      	mov	sp, r7
 8000430:	bc80      	pop	{r7}
 8000432:	4770      	bx	lr

08000434 <USBWrite>:
#include "main.h"
#include "string.h"
#include "usbd_cdc_if.h"
#include "gpio.h"

USBD_StatusTypeDef USBWrite(uint8_t *txData) {
 8000434:	b580      	push	{r7, lr}
 8000436:	b084      	sub	sp, #16
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
	uint16_t len = strlen((char*)txData);
 800043c:	6878      	ldr	r0, [r7, #4]
 800043e:	f7ff fe85 	bl	800014c <strlen>
 8000442:	4603      	mov	r3, r0
 8000444:	81fb      	strh	r3, [r7, #14]
	USBD_StatusTypeDef status;
	// Keep trying until it's not busy
	    do {
	        status = CDC_Transmit_FS(txData, len);
 8000446:	89fb      	ldrh	r3, [r7, #14]
 8000448:	4619      	mov	r1, r3
 800044a:	6878      	ldr	r0, [r7, #4]
 800044c:	f006 fd5c 	bl	8006f08 <CDC_Transmit_FS>
 8000450:	4603      	mov	r3, r0
 8000452:	737b      	strb	r3, [r7, #13]
	        if (status == USBD_BUSY) {
 8000454:	7b7b      	ldrb	r3, [r7, #13]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d102      	bne.n	8000460 <USBWrite+0x2c>
	            HAL_Delay(10);  // Small delay before retrying
 800045a:	200a      	movs	r0, #10
 800045c:	f000 f8d2 	bl	8000604 <HAL_Delay>
	        }
	    } while (status == USBD_BUSY);
 8000460:	7b7b      	ldrb	r3, [r7, #13]
 8000462:	2b01      	cmp	r3, #1
 8000464:	d0ef      	beq.n	8000446 <USBWrite+0x12>

	if (status == USBD_OK) {
 8000466:	7b7b      	ldrb	r3, [r7, #13]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d101      	bne.n	8000470 <USBWrite+0x3c>
		return status;
 800046c:	7b7b      	ldrb	r3, [r7, #13]
 800046e:	e006      	b.n	800047e <USBWrite+0x4a>
	} else {
		HAL_GPIO_WritePin(LED_BUILTIN, GPIO_PIN_SET);
 8000470:	2201      	movs	r2, #1
 8000472:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000476:	4804      	ldr	r0, [pc, #16]	@ (8000488 <USBWrite+0x54>)
 8000478:	f000 fb7a 	bl	8000b70 <HAL_GPIO_WritePin>
		return status;
 800047c:	7b7b      	ldrb	r3, [r7, #13]
	}
}
 800047e:	4618      	mov	r0, r3
 8000480:	3710      	adds	r7, #16
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	40011000 	.word	0x40011000

0800048c <SendSensorUSB>:
	buffer[msgLen] = '\0';

	return USBWrite(buffer);
}

USBD_StatusTypeDef SendSensorUSB(uint16_t distance) {
 800048c:	b580      	push	{r7, lr}
 800048e:	b0c6      	sub	sp, #280	@ 0x118
 8000490:	af00      	add	r7, sp, #0
 8000492:	4602      	mov	r2, r0
 8000494:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000498:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 800049c:	801a      	strh	r2, [r3, #0]
    uint8_t buffer[256];
    char distance_str[10];

    // Convert distance to string
    snprintf(distance_str, sizeof(distance_str), "%u", distance / 1000);
 800049e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80004a2:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 80004a6:	881b      	ldrh	r3, [r3, #0]
 80004a8:	4a0f      	ldr	r2, [pc, #60]	@ (80004e8 <SendSensorUSB+0x5c>)
 80004aa:	fba2 2303 	umull	r2, r3, r2, r3
 80004ae:	099b      	lsrs	r3, r3, #6
 80004b0:	b29b      	uxth	r3, r3
 80004b2:	f107 000c 	add.w	r0, r7, #12
 80004b6:	4a0d      	ldr	r2, [pc, #52]	@ (80004ec <SendSensorUSB+0x60>)
 80004b8:	210a      	movs	r1, #10
 80004ba:	f007 f903 	bl	80076c4 <sniprintf>

    // Create full message
    snprintf((char*)buffer, sizeof(buffer), "Distance: %s m\r\n", distance_str);
 80004be:	f107 030c 	add.w	r3, r7, #12
 80004c2:	f107 0018 	add.w	r0, r7, #24
 80004c6:	4a0a      	ldr	r2, [pc, #40]	@ (80004f0 <SendSensorUSB+0x64>)
 80004c8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004cc:	f007 f8fa 	bl	80076c4 <sniprintf>

    return USBWrite(buffer);
 80004d0:	f107 0318 	add.w	r3, r7, #24
 80004d4:	4618      	mov	r0, r3
 80004d6:	f7ff ffad 	bl	8000434 <USBWrite>
 80004da:	4603      	mov	r3, r0
}
 80004dc:	4618      	mov	r0, r3
 80004de:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	10624dd3 	.word	0x10624dd3
 80004ec:	08008064 	.word	0x08008064
 80004f0:	08008068 	.word	0x08008068

080004f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004f4:	f7ff ff98 	bl	8000428 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004f8:	480b      	ldr	r0, [pc, #44]	@ (8000528 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80004fa:	490c      	ldr	r1, [pc, #48]	@ (800052c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80004fc:	4a0c      	ldr	r2, [pc, #48]	@ (8000530 <LoopFillZerobss+0x16>)
  movs r3, #0
 80004fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000500:	e002      	b.n	8000508 <LoopCopyDataInit>

08000502 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000502:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000504:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000506:	3304      	adds	r3, #4

08000508 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000508:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800050a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800050c:	d3f9      	bcc.n	8000502 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800050e:	4a09      	ldr	r2, [pc, #36]	@ (8000534 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000510:	4c09      	ldr	r4, [pc, #36]	@ (8000538 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000512:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000514:	e001      	b.n	800051a <LoopFillZerobss>

08000516 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000516:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000518:	3204      	adds	r2, #4

0800051a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800051a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800051c:	d3fb      	bcc.n	8000516 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800051e:	f007 f915 	bl	800774c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000522:	f7ff fe1b 	bl	800015c <main>
  bx lr
 8000526:	4770      	bx	lr
  ldr r0, =_sdata
 8000528:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800052c:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8000530:	0800812c 	.word	0x0800812c
  ldr r2, =_sbss
 8000534:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8000538:	200014f8 	.word	0x200014f8

0800053c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800053c:	e7fe      	b.n	800053c <ADC1_2_IRQHandler>
	...

08000540 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000544:	4b08      	ldr	r3, [pc, #32]	@ (8000568 <HAL_Init+0x28>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a07      	ldr	r2, [pc, #28]	@ (8000568 <HAL_Init+0x28>)
 800054a:	f043 0310 	orr.w	r3, r3, #16
 800054e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000550:	2003      	movs	r0, #3
 8000552:	f000 f947 	bl	80007e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000556:	200f      	movs	r0, #15
 8000558:	f000 f808 	bl	800056c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800055c:	f7ff fec6 	bl	80002ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000560:	2300      	movs	r3, #0
}
 8000562:	4618      	mov	r0, r3
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40022000 	.word	0x40022000

0800056c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000574:	4b12      	ldr	r3, [pc, #72]	@ (80005c0 <HAL_InitTick+0x54>)
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	4b12      	ldr	r3, [pc, #72]	@ (80005c4 <HAL_InitTick+0x58>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	4619      	mov	r1, r3
 800057e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000582:	fbb3 f3f1 	udiv	r3, r3, r1
 8000586:	fbb2 f3f3 	udiv	r3, r2, r3
 800058a:	4618      	mov	r0, r3
 800058c:	f000 f95f 	bl	800084e <HAL_SYSTICK_Config>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000596:	2301      	movs	r3, #1
 8000598:	e00e      	b.n	80005b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	2b0f      	cmp	r3, #15
 800059e:	d80a      	bhi.n	80005b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005a0:	2200      	movs	r2, #0
 80005a2:	6879      	ldr	r1, [r7, #4]
 80005a4:	f04f 30ff 	mov.w	r0, #4294967295
 80005a8:	f000 f927 	bl	80007fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005ac:	4a06      	ldr	r2, [pc, #24]	@ (80005c8 <HAL_InitTick+0x5c>)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005b2:	2300      	movs	r3, #0
 80005b4:	e000      	b.n	80005b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005b6:	2301      	movs	r3, #1
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	20000000 	.word	0x20000000
 80005c4:	20000008 	.word	0x20000008
 80005c8:	20000004 	.word	0x20000004

080005cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005d0:	4b05      	ldr	r3, [pc, #20]	@ (80005e8 <HAL_IncTick+0x1c>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	461a      	mov	r2, r3
 80005d6:	4b05      	ldr	r3, [pc, #20]	@ (80005ec <HAL_IncTick+0x20>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4413      	add	r3, r2
 80005dc:	4a03      	ldr	r2, [pc, #12]	@ (80005ec <HAL_IncTick+0x20>)
 80005de:	6013      	str	r3, [r2, #0]
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr
 80005e8:	20000008 	.word	0x20000008
 80005ec:	200001ec 	.word	0x200001ec

080005f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  return uwTick;
 80005f4:	4b02      	ldr	r3, [pc, #8]	@ (8000600 <HAL_GetTick+0x10>)
 80005f6:	681b      	ldr	r3, [r3, #0]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr
 8000600:	200001ec 	.word	0x200001ec

08000604 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800060c:	f7ff fff0 	bl	80005f0 <HAL_GetTick>
 8000610:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800061c:	d005      	beq.n	800062a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800061e:	4b0a      	ldr	r3, [pc, #40]	@ (8000648 <HAL_Delay+0x44>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	461a      	mov	r2, r3
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	4413      	add	r3, r2
 8000628:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800062a:	bf00      	nop
 800062c:	f7ff ffe0 	bl	80005f0 <HAL_GetTick>
 8000630:	4602      	mov	r2, r0
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	1ad3      	subs	r3, r2, r3
 8000636:	68fa      	ldr	r2, [r7, #12]
 8000638:	429a      	cmp	r2, r3
 800063a:	d8f7      	bhi.n	800062c <HAL_Delay+0x28>
  {
  }
}
 800063c:	bf00      	nop
 800063e:	bf00      	nop
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000008 	.word	0x20000008

0800064c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800064c:	b480      	push	{r7}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	f003 0307 	and.w	r3, r3, #7
 800065a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800065c:	4b0c      	ldr	r3, [pc, #48]	@ (8000690 <__NVIC_SetPriorityGrouping+0x44>)
 800065e:	68db      	ldr	r3, [r3, #12]
 8000660:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000662:	68ba      	ldr	r2, [r7, #8]
 8000664:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000668:	4013      	ands	r3, r2
 800066a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000674:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000678:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800067c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800067e:	4a04      	ldr	r2, [pc, #16]	@ (8000690 <__NVIC_SetPriorityGrouping+0x44>)
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	60d3      	str	r3, [r2, #12]
}
 8000684:	bf00      	nop
 8000686:	3714      	adds	r7, #20
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	e000ed00 	.word	0xe000ed00

08000694 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000698:	4b04      	ldr	r3, [pc, #16]	@ (80006ac <__NVIC_GetPriorityGrouping+0x18>)
 800069a:	68db      	ldr	r3, [r3, #12]
 800069c:	0a1b      	lsrs	r3, r3, #8
 800069e:	f003 0307 	and.w	r3, r3, #7
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bc80      	pop	{r7}
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	e000ed00 	.word	0xe000ed00

080006b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	db0b      	blt.n	80006da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	f003 021f 	and.w	r2, r3, #31
 80006c8:	4906      	ldr	r1, [pc, #24]	@ (80006e4 <__NVIC_EnableIRQ+0x34>)
 80006ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ce:	095b      	lsrs	r3, r3, #5
 80006d0:	2001      	movs	r0, #1
 80006d2:	fa00 f202 	lsl.w	r2, r0, r2
 80006d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006da:	bf00      	nop
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr
 80006e4:	e000e100 	.word	0xe000e100

080006e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	6039      	str	r1, [r7, #0]
 80006f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	db0a      	blt.n	8000712 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	490c      	ldr	r1, [pc, #48]	@ (8000734 <__NVIC_SetPriority+0x4c>)
 8000702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000706:	0112      	lsls	r2, r2, #4
 8000708:	b2d2      	uxtb	r2, r2
 800070a:	440b      	add	r3, r1
 800070c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000710:	e00a      	b.n	8000728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	b2da      	uxtb	r2, r3
 8000716:	4908      	ldr	r1, [pc, #32]	@ (8000738 <__NVIC_SetPriority+0x50>)
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	f003 030f 	and.w	r3, r3, #15
 800071e:	3b04      	subs	r3, #4
 8000720:	0112      	lsls	r2, r2, #4
 8000722:	b2d2      	uxtb	r2, r2
 8000724:	440b      	add	r3, r1
 8000726:	761a      	strb	r2, [r3, #24]
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	bc80      	pop	{r7}
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	e000e100 	.word	0xe000e100
 8000738:	e000ed00 	.word	0xe000ed00

0800073c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800073c:	b480      	push	{r7}
 800073e:	b089      	sub	sp, #36	@ 0x24
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	60b9      	str	r1, [r7, #8]
 8000746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	f003 0307 	and.w	r3, r3, #7
 800074e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000750:	69fb      	ldr	r3, [r7, #28]
 8000752:	f1c3 0307 	rsb	r3, r3, #7
 8000756:	2b04      	cmp	r3, #4
 8000758:	bf28      	it	cs
 800075a:	2304      	movcs	r3, #4
 800075c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	3304      	adds	r3, #4
 8000762:	2b06      	cmp	r3, #6
 8000764:	d902      	bls.n	800076c <NVIC_EncodePriority+0x30>
 8000766:	69fb      	ldr	r3, [r7, #28]
 8000768:	3b03      	subs	r3, #3
 800076a:	e000      	b.n	800076e <NVIC_EncodePriority+0x32>
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000770:	f04f 32ff 	mov.w	r2, #4294967295
 8000774:	69bb      	ldr	r3, [r7, #24]
 8000776:	fa02 f303 	lsl.w	r3, r2, r3
 800077a:	43da      	mvns	r2, r3
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	401a      	ands	r2, r3
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000784:	f04f 31ff 	mov.w	r1, #4294967295
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	fa01 f303 	lsl.w	r3, r1, r3
 800078e:	43d9      	mvns	r1, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000794:	4313      	orrs	r3, r2
         );
}
 8000796:	4618      	mov	r0, r3
 8000798:	3724      	adds	r7, #36	@ 0x24
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr

080007a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	3b01      	subs	r3, #1
 80007ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80007b0:	d301      	bcc.n	80007b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007b2:	2301      	movs	r3, #1
 80007b4:	e00f      	b.n	80007d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007b6:	4a0a      	ldr	r2, [pc, #40]	@ (80007e0 <SysTick_Config+0x40>)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	3b01      	subs	r3, #1
 80007bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007be:	210f      	movs	r1, #15
 80007c0:	f04f 30ff 	mov.w	r0, #4294967295
 80007c4:	f7ff ff90 	bl	80006e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007c8:	4b05      	ldr	r3, [pc, #20]	@ (80007e0 <SysTick_Config+0x40>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ce:	4b04      	ldr	r3, [pc, #16]	@ (80007e0 <SysTick_Config+0x40>)
 80007d0:	2207      	movs	r2, #7
 80007d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007d4:	2300      	movs	r3, #0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	e000e010 	.word	0xe000e010

080007e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f7ff ff2d 	bl	800064c <__NVIC_SetPriorityGrouping>
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b086      	sub	sp, #24
 80007fe:	af00      	add	r7, sp, #0
 8000800:	4603      	mov	r3, r0
 8000802:	60b9      	str	r1, [r7, #8]
 8000804:	607a      	str	r2, [r7, #4]
 8000806:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800080c:	f7ff ff42 	bl	8000694 <__NVIC_GetPriorityGrouping>
 8000810:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	68b9      	ldr	r1, [r7, #8]
 8000816:	6978      	ldr	r0, [r7, #20]
 8000818:	f7ff ff90 	bl	800073c <NVIC_EncodePriority>
 800081c:	4602      	mov	r2, r0
 800081e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000822:	4611      	mov	r1, r2
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff ff5f 	bl	80006e8 <__NVIC_SetPriority>
}
 800082a:	bf00      	nop
 800082c:	3718      	adds	r7, #24
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	b082      	sub	sp, #8
 8000836:	af00      	add	r7, sp, #0
 8000838:	4603      	mov	r3, r0
 800083a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800083c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff ff35 	bl	80006b0 <__NVIC_EnableIRQ>
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	b082      	sub	sp, #8
 8000852:	af00      	add	r7, sp, #0
 8000854:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000856:	6878      	ldr	r0, [r7, #4]
 8000858:	f7ff ffa2 	bl	80007a0 <SysTick_Config>
 800085c:	4603      	mov	r3, r0
}
 800085e:	4618      	mov	r0, r3
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000868:	b480      	push	{r7}
 800086a:	b08b      	sub	sp, #44	@ 0x2c
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000872:	2300      	movs	r3, #0
 8000874:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000876:	2300      	movs	r3, #0
 8000878:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800087a:	e169      	b.n	8000b50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800087c:	2201      	movs	r2, #1
 800087e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000880:	fa02 f303 	lsl.w	r3, r2, r3
 8000884:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	69fa      	ldr	r2, [r7, #28]
 800088c:	4013      	ands	r3, r2
 800088e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000890:	69ba      	ldr	r2, [r7, #24]
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	429a      	cmp	r2, r3
 8000896:	f040 8158 	bne.w	8000b4a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	4a9a      	ldr	r2, [pc, #616]	@ (8000b08 <HAL_GPIO_Init+0x2a0>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d05e      	beq.n	8000962 <HAL_GPIO_Init+0xfa>
 80008a4:	4a98      	ldr	r2, [pc, #608]	@ (8000b08 <HAL_GPIO_Init+0x2a0>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d875      	bhi.n	8000996 <HAL_GPIO_Init+0x12e>
 80008aa:	4a98      	ldr	r2, [pc, #608]	@ (8000b0c <HAL_GPIO_Init+0x2a4>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d058      	beq.n	8000962 <HAL_GPIO_Init+0xfa>
 80008b0:	4a96      	ldr	r2, [pc, #600]	@ (8000b0c <HAL_GPIO_Init+0x2a4>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d86f      	bhi.n	8000996 <HAL_GPIO_Init+0x12e>
 80008b6:	4a96      	ldr	r2, [pc, #600]	@ (8000b10 <HAL_GPIO_Init+0x2a8>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d052      	beq.n	8000962 <HAL_GPIO_Init+0xfa>
 80008bc:	4a94      	ldr	r2, [pc, #592]	@ (8000b10 <HAL_GPIO_Init+0x2a8>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d869      	bhi.n	8000996 <HAL_GPIO_Init+0x12e>
 80008c2:	4a94      	ldr	r2, [pc, #592]	@ (8000b14 <HAL_GPIO_Init+0x2ac>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d04c      	beq.n	8000962 <HAL_GPIO_Init+0xfa>
 80008c8:	4a92      	ldr	r2, [pc, #584]	@ (8000b14 <HAL_GPIO_Init+0x2ac>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d863      	bhi.n	8000996 <HAL_GPIO_Init+0x12e>
 80008ce:	4a92      	ldr	r2, [pc, #584]	@ (8000b18 <HAL_GPIO_Init+0x2b0>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d046      	beq.n	8000962 <HAL_GPIO_Init+0xfa>
 80008d4:	4a90      	ldr	r2, [pc, #576]	@ (8000b18 <HAL_GPIO_Init+0x2b0>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d85d      	bhi.n	8000996 <HAL_GPIO_Init+0x12e>
 80008da:	2b12      	cmp	r3, #18
 80008dc:	d82a      	bhi.n	8000934 <HAL_GPIO_Init+0xcc>
 80008de:	2b12      	cmp	r3, #18
 80008e0:	d859      	bhi.n	8000996 <HAL_GPIO_Init+0x12e>
 80008e2:	a201      	add	r2, pc, #4	@ (adr r2, 80008e8 <HAL_GPIO_Init+0x80>)
 80008e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e8:	08000963 	.word	0x08000963
 80008ec:	0800093d 	.word	0x0800093d
 80008f0:	0800094f 	.word	0x0800094f
 80008f4:	08000991 	.word	0x08000991
 80008f8:	08000997 	.word	0x08000997
 80008fc:	08000997 	.word	0x08000997
 8000900:	08000997 	.word	0x08000997
 8000904:	08000997 	.word	0x08000997
 8000908:	08000997 	.word	0x08000997
 800090c:	08000997 	.word	0x08000997
 8000910:	08000997 	.word	0x08000997
 8000914:	08000997 	.word	0x08000997
 8000918:	08000997 	.word	0x08000997
 800091c:	08000997 	.word	0x08000997
 8000920:	08000997 	.word	0x08000997
 8000924:	08000997 	.word	0x08000997
 8000928:	08000997 	.word	0x08000997
 800092c:	08000945 	.word	0x08000945
 8000930:	08000959 	.word	0x08000959
 8000934:	4a79      	ldr	r2, [pc, #484]	@ (8000b1c <HAL_GPIO_Init+0x2b4>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d013      	beq.n	8000962 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800093a:	e02c      	b.n	8000996 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	623b      	str	r3, [r7, #32]
          break;
 8000942:	e029      	b.n	8000998 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	68db      	ldr	r3, [r3, #12]
 8000948:	3304      	adds	r3, #4
 800094a:	623b      	str	r3, [r7, #32]
          break;
 800094c:	e024      	b.n	8000998 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	68db      	ldr	r3, [r3, #12]
 8000952:	3308      	adds	r3, #8
 8000954:	623b      	str	r3, [r7, #32]
          break;
 8000956:	e01f      	b.n	8000998 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	330c      	adds	r3, #12
 800095e:	623b      	str	r3, [r7, #32]
          break;
 8000960:	e01a      	b.n	8000998 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	689b      	ldr	r3, [r3, #8]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d102      	bne.n	8000970 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800096a:	2304      	movs	r3, #4
 800096c:	623b      	str	r3, [r7, #32]
          break;
 800096e:	e013      	b.n	8000998 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	689b      	ldr	r3, [r3, #8]
 8000974:	2b01      	cmp	r3, #1
 8000976:	d105      	bne.n	8000984 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000978:	2308      	movs	r3, #8
 800097a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	69fa      	ldr	r2, [r7, #28]
 8000980:	611a      	str	r2, [r3, #16]
          break;
 8000982:	e009      	b.n	8000998 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000984:	2308      	movs	r3, #8
 8000986:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	69fa      	ldr	r2, [r7, #28]
 800098c:	615a      	str	r2, [r3, #20]
          break;
 800098e:	e003      	b.n	8000998 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000990:	2300      	movs	r3, #0
 8000992:	623b      	str	r3, [r7, #32]
          break;
 8000994:	e000      	b.n	8000998 <HAL_GPIO_Init+0x130>
          break;
 8000996:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000998:	69bb      	ldr	r3, [r7, #24]
 800099a:	2bff      	cmp	r3, #255	@ 0xff
 800099c:	d801      	bhi.n	80009a2 <HAL_GPIO_Init+0x13a>
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	e001      	b.n	80009a6 <HAL_GPIO_Init+0x13e>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	3304      	adds	r3, #4
 80009a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009a8:	69bb      	ldr	r3, [r7, #24]
 80009aa:	2bff      	cmp	r3, #255	@ 0xff
 80009ac:	d802      	bhi.n	80009b4 <HAL_GPIO_Init+0x14c>
 80009ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	e002      	b.n	80009ba <HAL_GPIO_Init+0x152>
 80009b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009b6:	3b08      	subs	r3, #8
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	210f      	movs	r1, #15
 80009c2:	693b      	ldr	r3, [r7, #16]
 80009c4:	fa01 f303 	lsl.w	r3, r1, r3
 80009c8:	43db      	mvns	r3, r3
 80009ca:	401a      	ands	r2, r3
 80009cc:	6a39      	ldr	r1, [r7, #32]
 80009ce:	693b      	ldr	r3, [r7, #16]
 80009d0:	fa01 f303 	lsl.w	r3, r1, r3
 80009d4:	431a      	orrs	r2, r3
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	f000 80b1 	beq.w	8000b4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009e8:	4b4d      	ldr	r3, [pc, #308]	@ (8000b20 <HAL_GPIO_Init+0x2b8>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	4a4c      	ldr	r2, [pc, #304]	@ (8000b20 <HAL_GPIO_Init+0x2b8>)
 80009ee:	f043 0301 	orr.w	r3, r3, #1
 80009f2:	6193      	str	r3, [r2, #24]
 80009f4:	4b4a      	ldr	r3, [pc, #296]	@ (8000b20 <HAL_GPIO_Init+0x2b8>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	f003 0301 	and.w	r3, r3, #1
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a00:	4a48      	ldr	r2, [pc, #288]	@ (8000b24 <HAL_GPIO_Init+0x2bc>)
 8000a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a04:	089b      	lsrs	r3, r3, #2
 8000a06:	3302      	adds	r3, #2
 8000a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a0c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a10:	f003 0303 	and.w	r3, r3, #3
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	220f      	movs	r2, #15
 8000a18:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1c:	43db      	mvns	r3, r3
 8000a1e:	68fa      	ldr	r2, [r7, #12]
 8000a20:	4013      	ands	r3, r2
 8000a22:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4a40      	ldr	r2, [pc, #256]	@ (8000b28 <HAL_GPIO_Init+0x2c0>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d013      	beq.n	8000a54 <HAL_GPIO_Init+0x1ec>
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	4a3f      	ldr	r2, [pc, #252]	@ (8000b2c <HAL_GPIO_Init+0x2c4>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d00d      	beq.n	8000a50 <HAL_GPIO_Init+0x1e8>
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4a3e      	ldr	r2, [pc, #248]	@ (8000b30 <HAL_GPIO_Init+0x2c8>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d007      	beq.n	8000a4c <HAL_GPIO_Init+0x1e4>
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	4a3d      	ldr	r2, [pc, #244]	@ (8000b34 <HAL_GPIO_Init+0x2cc>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d101      	bne.n	8000a48 <HAL_GPIO_Init+0x1e0>
 8000a44:	2303      	movs	r3, #3
 8000a46:	e006      	b.n	8000a56 <HAL_GPIO_Init+0x1ee>
 8000a48:	2304      	movs	r3, #4
 8000a4a:	e004      	b.n	8000a56 <HAL_GPIO_Init+0x1ee>
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	e002      	b.n	8000a56 <HAL_GPIO_Init+0x1ee>
 8000a50:	2301      	movs	r3, #1
 8000a52:	e000      	b.n	8000a56 <HAL_GPIO_Init+0x1ee>
 8000a54:	2300      	movs	r3, #0
 8000a56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a58:	f002 0203 	and.w	r2, r2, #3
 8000a5c:	0092      	lsls	r2, r2, #2
 8000a5e:	4093      	lsls	r3, r2
 8000a60:	68fa      	ldr	r2, [r7, #12]
 8000a62:	4313      	orrs	r3, r2
 8000a64:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a66:	492f      	ldr	r1, [pc, #188]	@ (8000b24 <HAL_GPIO_Init+0x2bc>)
 8000a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a6a:	089b      	lsrs	r3, r3, #2
 8000a6c:	3302      	adds	r3, #2
 8000a6e:	68fa      	ldr	r2, [r7, #12]
 8000a70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d006      	beq.n	8000a8e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a80:	4b2d      	ldr	r3, [pc, #180]	@ (8000b38 <HAL_GPIO_Init+0x2d0>)
 8000a82:	689a      	ldr	r2, [r3, #8]
 8000a84:	492c      	ldr	r1, [pc, #176]	@ (8000b38 <HAL_GPIO_Init+0x2d0>)
 8000a86:	69bb      	ldr	r3, [r7, #24]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	608b      	str	r3, [r1, #8]
 8000a8c:	e006      	b.n	8000a9c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a8e:	4b2a      	ldr	r3, [pc, #168]	@ (8000b38 <HAL_GPIO_Init+0x2d0>)
 8000a90:	689a      	ldr	r2, [r3, #8]
 8000a92:	69bb      	ldr	r3, [r7, #24]
 8000a94:	43db      	mvns	r3, r3
 8000a96:	4928      	ldr	r1, [pc, #160]	@ (8000b38 <HAL_GPIO_Init+0x2d0>)
 8000a98:	4013      	ands	r3, r2
 8000a9a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d006      	beq.n	8000ab6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000aa8:	4b23      	ldr	r3, [pc, #140]	@ (8000b38 <HAL_GPIO_Init+0x2d0>)
 8000aaa:	68da      	ldr	r2, [r3, #12]
 8000aac:	4922      	ldr	r1, [pc, #136]	@ (8000b38 <HAL_GPIO_Init+0x2d0>)
 8000aae:	69bb      	ldr	r3, [r7, #24]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	60cb      	str	r3, [r1, #12]
 8000ab4:	e006      	b.n	8000ac4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ab6:	4b20      	ldr	r3, [pc, #128]	@ (8000b38 <HAL_GPIO_Init+0x2d0>)
 8000ab8:	68da      	ldr	r2, [r3, #12]
 8000aba:	69bb      	ldr	r3, [r7, #24]
 8000abc:	43db      	mvns	r3, r3
 8000abe:	491e      	ldr	r1, [pc, #120]	@ (8000b38 <HAL_GPIO_Init+0x2d0>)
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d006      	beq.n	8000ade <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ad0:	4b19      	ldr	r3, [pc, #100]	@ (8000b38 <HAL_GPIO_Init+0x2d0>)
 8000ad2:	685a      	ldr	r2, [r3, #4]
 8000ad4:	4918      	ldr	r1, [pc, #96]	@ (8000b38 <HAL_GPIO_Init+0x2d0>)
 8000ad6:	69bb      	ldr	r3, [r7, #24]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	604b      	str	r3, [r1, #4]
 8000adc:	e006      	b.n	8000aec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ade:	4b16      	ldr	r3, [pc, #88]	@ (8000b38 <HAL_GPIO_Init+0x2d0>)
 8000ae0:	685a      	ldr	r2, [r3, #4]
 8000ae2:	69bb      	ldr	r3, [r7, #24]
 8000ae4:	43db      	mvns	r3, r3
 8000ae6:	4914      	ldr	r1, [pc, #80]	@ (8000b38 <HAL_GPIO_Init+0x2d0>)
 8000ae8:	4013      	ands	r3, r2
 8000aea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d021      	beq.n	8000b3c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000af8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b38 <HAL_GPIO_Init+0x2d0>)
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	490e      	ldr	r1, [pc, #56]	@ (8000b38 <HAL_GPIO_Init+0x2d0>)
 8000afe:	69bb      	ldr	r3, [r7, #24]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	600b      	str	r3, [r1, #0]
 8000b04:	e021      	b.n	8000b4a <HAL_GPIO_Init+0x2e2>
 8000b06:	bf00      	nop
 8000b08:	10320000 	.word	0x10320000
 8000b0c:	10310000 	.word	0x10310000
 8000b10:	10220000 	.word	0x10220000
 8000b14:	10210000 	.word	0x10210000
 8000b18:	10120000 	.word	0x10120000
 8000b1c:	10110000 	.word	0x10110000
 8000b20:	40021000 	.word	0x40021000
 8000b24:	40010000 	.word	0x40010000
 8000b28:	40010800 	.word	0x40010800
 8000b2c:	40010c00 	.word	0x40010c00
 8000b30:	40011000 	.word	0x40011000
 8000b34:	40011400 	.word	0x40011400
 8000b38:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b6c <HAL_GPIO_Init+0x304>)
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	69bb      	ldr	r3, [r7, #24]
 8000b42:	43db      	mvns	r3, r3
 8000b44:	4909      	ldr	r1, [pc, #36]	@ (8000b6c <HAL_GPIO_Init+0x304>)
 8000b46:	4013      	ands	r3, r2
 8000b48:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b56:	fa22 f303 	lsr.w	r3, r2, r3
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	f47f ae8e 	bne.w	800087c <HAL_GPIO_Init+0x14>
  }
}
 8000b60:	bf00      	nop
 8000b62:	bf00      	nop
 8000b64:	372c      	adds	r7, #44	@ 0x2c
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr
 8000b6c:	40010400 	.word	0x40010400

08000b70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	460b      	mov	r3, r1
 8000b7a:	807b      	strh	r3, [r7, #2]
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b80:	787b      	ldrb	r3, [r7, #1]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d003      	beq.n	8000b8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b86:	887a      	ldrh	r2, [r7, #2]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b8c:	e003      	b.n	8000b96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b8e:	887b      	ldrh	r3, [r7, #2]
 8000b90:	041a      	lsls	r2, r3, #16
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	611a      	str	r2, [r3, #16]
}
 8000b96:	bf00      	nop
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr

08000ba0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d101      	bne.n	8000bb2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e0e8      	b.n	8000d84 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d106      	bne.n	8000bcc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f006 fad2 	bl	8007170 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2203      	movs	r2, #3
 8000bd0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f002 f9f5 	bl	8002fce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6818      	ldr	r0, [r3, #0]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3304      	adds	r3, #4
 8000bec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bee:	f002 f9cb 	bl	8002f88 <USB_CoreInit>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d005      	beq.n	8000c04 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2202      	movs	r2, #2
 8000bfc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8000c00:	2301      	movs	r3, #1
 8000c02:	e0bf      	b.n	8000d84 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f002 f9f9 	bl	8003002 <USB_SetCurrentMode>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d005      	beq.n	8000c22 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2202      	movs	r2, #2
 8000c1a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e0b0      	b.n	8000d84 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c22:	2300      	movs	r3, #0
 8000c24:	73fb      	strb	r3, [r7, #15]
 8000c26:	e03e      	b.n	8000ca6 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000c28:	7bfa      	ldrb	r2, [r7, #15]
 8000c2a:	6879      	ldr	r1, [r7, #4]
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	4413      	add	r3, r2
 8000c32:	00db      	lsls	r3, r3, #3
 8000c34:	440b      	add	r3, r1
 8000c36:	3311      	adds	r3, #17
 8000c38:	2201      	movs	r2, #1
 8000c3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000c3c:	7bfa      	ldrb	r2, [r7, #15]
 8000c3e:	6879      	ldr	r1, [r7, #4]
 8000c40:	4613      	mov	r3, r2
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	4413      	add	r3, r2
 8000c46:	00db      	lsls	r3, r3, #3
 8000c48:	440b      	add	r3, r1
 8000c4a:	3310      	adds	r3, #16
 8000c4c:	7bfa      	ldrb	r2, [r7, #15]
 8000c4e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000c50:	7bfa      	ldrb	r2, [r7, #15]
 8000c52:	6879      	ldr	r1, [r7, #4]
 8000c54:	4613      	mov	r3, r2
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	4413      	add	r3, r2
 8000c5a:	00db      	lsls	r3, r3, #3
 8000c5c:	440b      	add	r3, r1
 8000c5e:	3313      	adds	r3, #19
 8000c60:	2200      	movs	r2, #0
 8000c62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000c64:	7bfa      	ldrb	r2, [r7, #15]
 8000c66:	6879      	ldr	r1, [r7, #4]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	4413      	add	r3, r2
 8000c6e:	00db      	lsls	r3, r3, #3
 8000c70:	440b      	add	r3, r1
 8000c72:	3320      	adds	r3, #32
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000c78:	7bfa      	ldrb	r2, [r7, #15]
 8000c7a:	6879      	ldr	r1, [r7, #4]
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	4413      	add	r3, r2
 8000c82:	00db      	lsls	r3, r3, #3
 8000c84:	440b      	add	r3, r1
 8000c86:	3324      	adds	r3, #36	@ 0x24
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000c8c:	7bfb      	ldrb	r3, [r7, #15]
 8000c8e:	6879      	ldr	r1, [r7, #4]
 8000c90:	1c5a      	adds	r2, r3, #1
 8000c92:	4613      	mov	r3, r2
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	4413      	add	r3, r2
 8000c98:	00db      	lsls	r3, r3, #3
 8000c9a:	440b      	add	r3, r1
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ca0:	7bfb      	ldrb	r3, [r7, #15]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	73fb      	strb	r3, [r7, #15]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	791b      	ldrb	r3, [r3, #4]
 8000caa:	7bfa      	ldrb	r2, [r7, #15]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d3bb      	bcc.n	8000c28 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	73fb      	strb	r3, [r7, #15]
 8000cb4:	e044      	b.n	8000d40 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000cb6:	7bfa      	ldrb	r2, [r7, #15]
 8000cb8:	6879      	ldr	r1, [r7, #4]
 8000cba:	4613      	mov	r3, r2
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	4413      	add	r3, r2
 8000cc0:	00db      	lsls	r3, r3, #3
 8000cc2:	440b      	add	r3, r1
 8000cc4:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8000cc8:	2200      	movs	r2, #0
 8000cca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000ccc:	7bfa      	ldrb	r2, [r7, #15]
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	4413      	add	r3, r2
 8000cd6:	00db      	lsls	r3, r3, #3
 8000cd8:	440b      	add	r3, r1
 8000cda:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000cde:	7bfa      	ldrb	r2, [r7, #15]
 8000ce0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000ce2:	7bfa      	ldrb	r2, [r7, #15]
 8000ce4:	6879      	ldr	r1, [r7, #4]
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	4413      	add	r3, r2
 8000cec:	00db      	lsls	r3, r3, #3
 8000cee:	440b      	add	r3, r1
 8000cf0:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000cf8:	7bfa      	ldrb	r2, [r7, #15]
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	4413      	add	r3, r2
 8000d02:	00db      	lsls	r3, r3, #3
 8000d04:	440b      	add	r3, r1
 8000d06:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000d0e:	7bfa      	ldrb	r2, [r7, #15]
 8000d10:	6879      	ldr	r1, [r7, #4]
 8000d12:	4613      	mov	r3, r2
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	4413      	add	r3, r2
 8000d18:	00db      	lsls	r3, r3, #3
 8000d1a:	440b      	add	r3, r1
 8000d1c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000d24:	7bfa      	ldrb	r2, [r7, #15]
 8000d26:	6879      	ldr	r1, [r7, #4]
 8000d28:	4613      	mov	r3, r2
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	4413      	add	r3, r2
 8000d2e:	00db      	lsls	r3, r3, #3
 8000d30:	440b      	add	r3, r1
 8000d32:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	73fb      	strb	r3, [r7, #15]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	791b      	ldrb	r3, [r3, #4]
 8000d44:	7bfa      	ldrb	r2, [r7, #15]
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d3b5      	bcc.n	8000cb6 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6818      	ldr	r0, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	3304      	adds	r3, #4
 8000d52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d54:	f002 f961 	bl	800301a <USB_DevInit>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d005      	beq.n	8000d6a <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2202      	movs	r2, #2
 8000d62:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e00c      	b.n	8000d84 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2201      	movs	r2, #1
 8000d74:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f004 fbe0 	bl	8005542 <USB_DevDisconnect>

  return HAL_OK;
 8000d82:	2300      	movs	r3, #0
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3710      	adds	r7, #16
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d101      	bne.n	8000da2 <HAL_PCD_Start+0x16>
 8000d9e:	2302      	movs	r3, #2
 8000da0:	e016      	b.n	8000dd0 <HAL_PCD_Start+0x44>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2201      	movs	r2, #1
 8000da6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f002 f8f7 	bl	8002fa2 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000db4:	2101      	movs	r1, #1
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f006 fc4d 	bl	8007656 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f004 fbb4 	bl	800552e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8000dce:	2300      	movs	r3, #0
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b088      	sub	sp, #32
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f004 fbb6 	bl	8005556 <USB_ReadInterrupts>
 8000dea:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d003      	beq.n	8000dfe <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f000 fb1a 	bl	8001430 <PCD_EP_ISR_Handler>

    return;
 8000dfc:	e119      	b.n	8001032 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d013      	beq.n	8000e30 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000e10:	b29a      	uxth	r2, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000e1a:	b292      	uxth	r2, r2
 8000e1c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f006 fa20 	bl	8007266 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000e26:	2100      	movs	r1, #0
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f000 f905 	bl	8001038 <HAL_PCD_SetAddress>

    return;
 8000e2e:	e100      	b.n	8001032 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d00c      	beq.n	8000e54 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000e42:	b29a      	uxth	r2, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8000e4c:	b292      	uxth	r2, r2
 8000e4e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8000e52:	e0ee      	b.n	8001032 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d00c      	beq.n	8000e78 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000e66:	b29a      	uxth	r2, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8000e70:	b292      	uxth	r2, r2
 8000e72:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8000e76:	e0dc      	b.n	8001032 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d027      	beq.n	8000ed2 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000e8a:	b29a      	uxth	r2, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f022 0204 	bic.w	r2, r2, #4
 8000e94:	b292      	uxth	r2, r2
 8000e96:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000ea2:	b29a      	uxth	r2, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f022 0208 	bic.w	r2, r2, #8
 8000eac:	b292      	uxth	r2, r2
 8000eae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f006 fa10 	bl	80072d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000ec0:	b29a      	uxth	r2, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000eca:	b292      	uxth	r2, r2
 8000ecc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8000ed0:	e0af      	b.n	8001032 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	f000 8083 	beq.w	8000fe4 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8000ede:	2300      	movs	r3, #0
 8000ee0:	77fb      	strb	r3, [r7, #31]
 8000ee2:	e010      	b.n	8000f06 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	7ffb      	ldrb	r3, [r7, #31]
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	441a      	add	r2, r3
 8000ef0:	7ffb      	ldrb	r3, [r7, #31]
 8000ef2:	8812      	ldrh	r2, [r2, #0]
 8000ef4:	b292      	uxth	r2, r2
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	3320      	adds	r3, #32
 8000efa:	443b      	add	r3, r7
 8000efc:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8000f00:	7ffb      	ldrb	r3, [r7, #31]
 8000f02:	3301      	adds	r3, #1
 8000f04:	77fb      	strb	r3, [r7, #31]
 8000f06:	7ffb      	ldrb	r3, [r7, #31]
 8000f08:	2b07      	cmp	r3, #7
 8000f0a:	d9eb      	bls.n	8000ee4 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000f14:	b29a      	uxth	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f042 0201 	orr.w	r2, r2, #1
 8000f1e:	b292      	uxth	r2, r2
 8000f20:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f022 0201 	bic.w	r2, r2, #1
 8000f36:	b292      	uxth	r2, r2
 8000f38:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000f3c:	bf00      	nop
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d0f6      	beq.n	8000f3e <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000f62:	b292      	uxth	r2, r2
 8000f64:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8000f68:	2300      	movs	r3, #0
 8000f6a:	77fb      	strb	r3, [r7, #31]
 8000f6c:	e00f      	b.n	8000f8e <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8000f6e:	7ffb      	ldrb	r3, [r7, #31]
 8000f70:	687a      	ldr	r2, [r7, #4]
 8000f72:	6812      	ldr	r2, [r2, #0]
 8000f74:	4611      	mov	r1, r2
 8000f76:	7ffa      	ldrb	r2, [r7, #31]
 8000f78:	0092      	lsls	r2, r2, #2
 8000f7a:	440a      	add	r2, r1
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	3320      	adds	r3, #32
 8000f80:	443b      	add	r3, r7
 8000f82:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8000f86:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8000f88:	7ffb      	ldrb	r3, [r7, #31]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	77fb      	strb	r3, [r7, #31]
 8000f8e:	7ffb      	ldrb	r3, [r7, #31]
 8000f90:	2b07      	cmp	r3, #7
 8000f92:	d9ec      	bls.n	8000f6e <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f042 0208 	orr.w	r2, r2, #8
 8000fa6:	b292      	uxth	r2, r2
 8000fa8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000fb4:	b29a      	uxth	r2, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000fbe:	b292      	uxth	r2, r2
 8000fc0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f042 0204 	orr.w	r2, r2, #4
 8000fd6:	b292      	uxth	r2, r2
 8000fd8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f006 f961 	bl	80072a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000fe2:	e026      	b.n	8001032 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d00f      	beq.n	800100e <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001000:	b292      	uxth	r2, r2
 8001002:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f006 f91f 	bl	800724a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800100c:	e011      	b.n	8001032 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001014:	2b00      	cmp	r3, #0
 8001016:	d00c      	beq.n	8001032 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001020:	b29a      	uxth	r2, r3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800102a:	b292      	uxth	r2, r2
 800102c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001030:	bf00      	nop
  }
}
 8001032:	3720      	adds	r7, #32
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	460b      	mov	r3, r1
 8001042:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800104a:	2b01      	cmp	r3, #1
 800104c:	d101      	bne.n	8001052 <HAL_PCD_SetAddress+0x1a>
 800104e:	2302      	movs	r3, #2
 8001050:	e012      	b.n	8001078 <HAL_PCD_SetAddress+0x40>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2201      	movs	r2, #1
 8001056:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	78fa      	ldrb	r2, [r7, #3]
 800105e:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	78fa      	ldrb	r2, [r7, #3]
 8001066:	4611      	mov	r1, r2
 8001068:	4618      	mov	r0, r3
 800106a:	f004 fa4d 	bl	8005508 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001076:	2300      	movs	r3, #0
}
 8001078:	4618      	mov	r0, r3
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	4608      	mov	r0, r1
 800108a:	4611      	mov	r1, r2
 800108c:	461a      	mov	r2, r3
 800108e:	4603      	mov	r3, r0
 8001090:	70fb      	strb	r3, [r7, #3]
 8001092:	460b      	mov	r3, r1
 8001094:	803b      	strh	r3, [r7, #0]
 8001096:	4613      	mov	r3, r2
 8001098:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800109a:	2300      	movs	r3, #0
 800109c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800109e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	da0e      	bge.n	80010c4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80010a6:	78fb      	ldrb	r3, [r7, #3]
 80010a8:	f003 0207 	and.w	r2, r3, #7
 80010ac:	4613      	mov	r3, r2
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	4413      	add	r3, r2
 80010b2:	00db      	lsls	r3, r3, #3
 80010b4:	3310      	adds	r3, #16
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	4413      	add	r3, r2
 80010ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	2201      	movs	r2, #1
 80010c0:	705a      	strb	r2, [r3, #1]
 80010c2:	e00e      	b.n	80010e2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80010c4:	78fb      	ldrb	r3, [r7, #3]
 80010c6:	f003 0207 	and.w	r2, r3, #7
 80010ca:	4613      	mov	r3, r2
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	4413      	add	r3, r2
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	4413      	add	r3, r2
 80010da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	2200      	movs	r2, #0
 80010e0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80010e2:	78fb      	ldrb	r3, [r7, #3]
 80010e4:	f003 0307 	and.w	r3, r3, #7
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80010ee:	883a      	ldrh	r2, [r7, #0]
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	78ba      	ldrb	r2, [r7, #2]
 80010f8:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80010fa:	78bb      	ldrb	r3, [r7, #2]
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d102      	bne.n	8001106 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	2200      	movs	r2, #0
 8001104:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800110c:	2b01      	cmp	r3, #1
 800110e:	d101      	bne.n	8001114 <HAL_PCD_EP_Open+0x94>
 8001110:	2302      	movs	r3, #2
 8001112:	e00e      	b.n	8001132 <HAL_PCD_EP_Open+0xb2>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2201      	movs	r2, #1
 8001118:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	68f9      	ldr	r1, [r7, #12]
 8001122:	4618      	mov	r0, r3
 8001124:	f001 ff96 	bl	8003054 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8001130:	7afb      	ldrb	r3, [r7, #11]
}
 8001132:	4618      	mov	r0, r3
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b084      	sub	sp, #16
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
 8001142:	460b      	mov	r3, r1
 8001144:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001146:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800114a:	2b00      	cmp	r3, #0
 800114c:	da0e      	bge.n	800116c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800114e:	78fb      	ldrb	r3, [r7, #3]
 8001150:	f003 0207 	and.w	r2, r3, #7
 8001154:	4613      	mov	r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4413      	add	r3, r2
 800115a:	00db      	lsls	r3, r3, #3
 800115c:	3310      	adds	r3, #16
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	4413      	add	r3, r2
 8001162:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	2201      	movs	r2, #1
 8001168:	705a      	strb	r2, [r3, #1]
 800116a:	e00e      	b.n	800118a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800116c:	78fb      	ldrb	r3, [r7, #3]
 800116e:	f003 0207 	and.w	r2, r3, #7
 8001172:	4613      	mov	r3, r2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	4413      	add	r3, r2
 8001178:	00db      	lsls	r3, r3, #3
 800117a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	4413      	add	r3, r2
 8001182:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2200      	movs	r2, #0
 8001188:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800118a:	78fb      	ldrb	r3, [r7, #3]
 800118c:	f003 0307 	and.w	r3, r3, #7
 8001190:	b2da      	uxtb	r2, r3
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800119c:	2b01      	cmp	r3, #1
 800119e:	d101      	bne.n	80011a4 <HAL_PCD_EP_Close+0x6a>
 80011a0:	2302      	movs	r3, #2
 80011a2:	e00e      	b.n	80011c2 <HAL_PCD_EP_Close+0x88>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2201      	movs	r2, #1
 80011a8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	68f9      	ldr	r1, [r7, #12]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f002 fb0e 	bl	80037d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2200      	movs	r2, #0
 80011bc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b086      	sub	sp, #24
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	60f8      	str	r0, [r7, #12]
 80011d2:	607a      	str	r2, [r7, #4]
 80011d4:	603b      	str	r3, [r7, #0]
 80011d6:	460b      	mov	r3, r1
 80011d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011da:	7afb      	ldrb	r3, [r7, #11]
 80011dc:	f003 0207 	and.w	r2, r3, #7
 80011e0:	4613      	mov	r3, r2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	4413      	add	r3, r2
 80011e6:	00db      	lsls	r3, r3, #3
 80011e8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80011ec:	68fa      	ldr	r2, [r7, #12]
 80011ee:	4413      	add	r3, r2
 80011f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	683a      	ldr	r2, [r7, #0]
 80011fc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	2200      	movs	r2, #0
 8001202:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	2200      	movs	r2, #0
 8001208:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800120a:	7afb      	ldrb	r3, [r7, #11]
 800120c:	f003 0307 	and.w	r3, r3, #7
 8001210:	b2da      	uxtb	r2, r3
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	6979      	ldr	r1, [r7, #20]
 800121c:	4618      	mov	r0, r3
 800121e:	f002 fcc5 	bl	8003bac <USB_EPStartXfer>

  return HAL_OK;
 8001222:	2300      	movs	r3, #0
}
 8001224:	4618      	mov	r0, r3
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	460b      	mov	r3, r1
 8001236:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001238:	78fb      	ldrb	r3, [r7, #3]
 800123a:	f003 0207 	and.w	r2, r3, #7
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	4613      	mov	r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	4413      	add	r3, r2
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	440b      	add	r3, r1
 800124a:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800124e:	681b      	ldr	r3, [r3, #0]
}
 8001250:	4618      	mov	r0, r3
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr

0800125a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b086      	sub	sp, #24
 800125e:	af00      	add	r7, sp, #0
 8001260:	60f8      	str	r0, [r7, #12]
 8001262:	607a      	str	r2, [r7, #4]
 8001264:	603b      	str	r3, [r7, #0]
 8001266:	460b      	mov	r3, r1
 8001268:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800126a:	7afb      	ldrb	r3, [r7, #11]
 800126c:	f003 0207 	and.w	r2, r3, #7
 8001270:	4613      	mov	r3, r2
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	4413      	add	r3, r2
 8001276:	00db      	lsls	r3, r3, #3
 8001278:	3310      	adds	r3, #16
 800127a:	68fa      	ldr	r2, [r7, #12]
 800127c:	4413      	add	r3, r2
 800127e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	683a      	ldr	r2, [r7, #0]
 800128a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	2201      	movs	r2, #1
 8001290:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	683a      	ldr	r2, [r7, #0]
 8001298:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	2200      	movs	r2, #0
 800129e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	2201      	movs	r2, #1
 80012a4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80012a6:	7afb      	ldrb	r3, [r7, #11]
 80012a8:	f003 0307 	and.w	r3, r3, #7
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	6979      	ldr	r1, [r7, #20]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f002 fc77 	bl	8003bac <USB_EPStartXfer>

  return HAL_OK;
 80012be:	2300      	movs	r3, #0
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	460b      	mov	r3, r1
 80012d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80012d4:	78fb      	ldrb	r3, [r7, #3]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	7912      	ldrb	r2, [r2, #4]
 80012de:	4293      	cmp	r3, r2
 80012e0:	d901      	bls.n	80012e6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e04c      	b.n	8001380 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80012e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	da0e      	bge.n	800130c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012ee:	78fb      	ldrb	r3, [r7, #3]
 80012f0:	f003 0207 	and.w	r2, r3, #7
 80012f4:	4613      	mov	r3, r2
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	4413      	add	r3, r2
 80012fa:	00db      	lsls	r3, r3, #3
 80012fc:	3310      	adds	r3, #16
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	4413      	add	r3, r2
 8001302:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	2201      	movs	r2, #1
 8001308:	705a      	strb	r2, [r3, #1]
 800130a:	e00c      	b.n	8001326 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800130c:	78fa      	ldrb	r2, [r7, #3]
 800130e:	4613      	mov	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	4413      	add	r3, r2
 8001314:	00db      	lsls	r3, r3, #3
 8001316:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	4413      	add	r3, r2
 800131e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	2200      	movs	r2, #0
 8001324:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	2201      	movs	r2, #1
 800132a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800132c:	78fb      	ldrb	r3, [r7, #3]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	b2da      	uxtb	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800133e:	2b01      	cmp	r3, #1
 8001340:	d101      	bne.n	8001346 <HAL_PCD_EP_SetStall+0x7e>
 8001342:	2302      	movs	r3, #2
 8001344:	e01c      	b.n	8001380 <HAL_PCD_EP_SetStall+0xb8>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	68f9      	ldr	r1, [r7, #12]
 8001354:	4618      	mov	r0, r3
 8001356:	f003 ffda 	bl	800530e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800135a:	78fb      	ldrb	r3, [r7, #3]
 800135c:	f003 0307 	and.w	r3, r3, #7
 8001360:	2b00      	cmp	r3, #0
 8001362:	d108      	bne.n	8001376 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800136e:	4619      	mov	r1, r3
 8001370:	4610      	mov	r0, r2
 8001372:	f004 f8ff 	bl	8005574 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800137e:	2300      	movs	r3, #0
}
 8001380:	4618      	mov	r0, r3
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001394:	78fb      	ldrb	r3, [r7, #3]
 8001396:	f003 030f 	and.w	r3, r3, #15
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	7912      	ldrb	r2, [r2, #4]
 800139e:	4293      	cmp	r3, r2
 80013a0:	d901      	bls.n	80013a6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e040      	b.n	8001428 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80013a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	da0e      	bge.n	80013cc <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013ae:	78fb      	ldrb	r3, [r7, #3]
 80013b0:	f003 0207 	and.w	r2, r3, #7
 80013b4:	4613      	mov	r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	4413      	add	r3, r2
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	3310      	adds	r3, #16
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	4413      	add	r3, r2
 80013c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2201      	movs	r2, #1
 80013c8:	705a      	strb	r2, [r3, #1]
 80013ca:	e00e      	b.n	80013ea <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013cc:	78fb      	ldrb	r3, [r7, #3]
 80013ce:	f003 0207 	and.w	r2, r3, #7
 80013d2:	4613      	mov	r3, r2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	4413      	add	r3, r2
 80013d8:	00db      	lsls	r3, r3, #3
 80013da:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	4413      	add	r3, r2
 80013e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2200      	movs	r2, #0
 80013e8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2200      	movs	r2, #0
 80013ee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80013f0:	78fb      	ldrb	r3, [r7, #3]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001402:	2b01      	cmp	r3, #1
 8001404:	d101      	bne.n	800140a <HAL_PCD_EP_ClrStall+0x82>
 8001406:	2302      	movs	r3, #2
 8001408:	e00e      	b.n	8001428 <HAL_PCD_EP_ClrStall+0xa0>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2201      	movs	r2, #1
 800140e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	68f9      	ldr	r1, [r7, #12]
 8001418:	4618      	mov	r0, r3
 800141a:	f003 ffc8 	bl	80053ae <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b096      	sub	sp, #88	@ 0x58
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001438:	e3bb      	b.n	8001bb2 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001442:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001446:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800144a:	b2db      	uxtb	r3, r3
 800144c:	f003 030f 	and.w	r3, r3, #15
 8001450:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8001454:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001458:	2b00      	cmp	r3, #0
 800145a:	f040 8175 	bne.w	8001748 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800145e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001462:	f003 0310 	and.w	r3, r3, #16
 8001466:	2b00      	cmp	r3, #0
 8001468:	d14e      	bne.n	8001508 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	b29b      	uxth	r3, r3
 8001472:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001476:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800147a:	81fb      	strh	r3, [r7, #14]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	89fb      	ldrh	r3, [r7, #14]
 8001482:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001486:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800148a:	b29b      	uxth	r3, r3
 800148c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3310      	adds	r3, #16
 8001492:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800149c:	b29b      	uxth	r3, r3
 800149e:	461a      	mov	r2, r3
 80014a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	4413      	add	r3, r2
 80014a8:	3302      	adds	r3, #2
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	6812      	ldr	r2, [r2, #0]
 80014b0:	4413      	add	r3, r2
 80014b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80014b6:	881b      	ldrh	r3, [r3, #0]
 80014b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80014bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014be:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80014c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014c2:	695a      	ldr	r2, [r3, #20]
 80014c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014c6:	69db      	ldr	r3, [r3, #28]
 80014c8:	441a      	add	r2, r3
 80014ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014cc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80014ce:	2100      	movs	r1, #0
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f005 fea0 	bl	8007216 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	7b5b      	ldrb	r3, [r3, #13]
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f000 8368 	beq.w	8001bb2 <PCD_EP_ISR_Handler+0x782>
 80014e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	f040 8363 	bne.w	8001bb2 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	7b5b      	ldrb	r3, [r3, #13]
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80014f6:	b2da      	uxtb	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	735a      	strb	r2, [r3, #13]
 8001506:	e354      	b.n	8001bb2 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800150e:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	881b      	ldrh	r3, [r3, #0]
 8001516:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800151a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800151e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001522:	2b00      	cmp	r3, #0
 8001524:	d034      	beq.n	8001590 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800152e:	b29b      	uxth	r3, r3
 8001530:	461a      	mov	r2, r3
 8001532:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	00db      	lsls	r3, r3, #3
 8001538:	4413      	add	r3, r2
 800153a:	3306      	adds	r3, #6
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	6812      	ldr	r2, [r2, #0]
 8001542:	4413      	add	r3, r2
 8001544:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001548:	881b      	ldrh	r3, [r3, #0]
 800154a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800154e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001550:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6818      	ldr	r0, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800155c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800155e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001560:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001562:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001564:	b29b      	uxth	r3, r3
 8001566:	f004 f856 	bl	8005616 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	881b      	ldrh	r3, [r3, #0]
 8001570:	b29a      	uxth	r2, r3
 8001572:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001576:	4013      	ands	r3, r2
 8001578:	823b      	strh	r3, [r7, #16]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	8a3a      	ldrh	r2, [r7, #16]
 8001580:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001584:	b292      	uxth	r2, r2
 8001586:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f005 fe17 	bl	80071bc <HAL_PCD_SetupStageCallback>
 800158e:	e310      	b.n	8001bb2 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001590:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001594:	2b00      	cmp	r3, #0
 8001596:	f280 830c 	bge.w	8001bb2 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	881b      	ldrh	r3, [r3, #0]
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80015a6:	4013      	ands	r3, r2
 80015a8:	83fb      	strh	r3, [r7, #30]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	8bfa      	ldrh	r2, [r7, #30]
 80015b0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80015b4:	b292      	uxth	r2, r2
 80015b6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	461a      	mov	r2, r3
 80015c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	00db      	lsls	r3, r3, #3
 80015ca:	4413      	add	r3, r2
 80015cc:	3306      	adds	r3, #6
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	6812      	ldr	r2, [r2, #0]
 80015d4:	4413      	add	r3, r2
 80015d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80015da:	881b      	ldrh	r3, [r3, #0]
 80015dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80015e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015e2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80015e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015e6:	69db      	ldr	r3, [r3, #28]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d019      	beq.n	8001620 <PCD_EP_ISR_Handler+0x1f0>
 80015ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015ee:	695b      	ldr	r3, [r3, #20]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d015      	beq.n	8001620 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6818      	ldr	r0, [r3, #0]
 80015f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015fa:	6959      	ldr	r1, [r3, #20]
 80015fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015fe:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001600:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001602:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001604:	b29b      	uxth	r3, r3
 8001606:	f004 f806 	bl	8005616 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800160a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800160c:	695a      	ldr	r2, [r3, #20]
 800160e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	441a      	add	r2, r3
 8001614:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001616:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001618:	2100      	movs	r1, #0
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f005 fde0 	bl	80071e0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	881b      	ldrh	r3, [r3, #0]
 8001626:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800162a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800162e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001632:	2b00      	cmp	r3, #0
 8001634:	f040 82bd 	bne.w	8001bb2 <PCD_EP_ISR_Handler+0x782>
 8001638:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800163c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001640:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001644:	f000 82b5 	beq.w	8001bb2 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	61bb      	str	r3, [r7, #24]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001656:	b29b      	uxth	r3, r3
 8001658:	461a      	mov	r2, r3
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	4413      	add	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001666:	617b      	str	r3, [r7, #20]
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	881b      	ldrh	r3, [r3, #0]
 800166c:	b29b      	uxth	r3, r3
 800166e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001672:	b29a      	uxth	r2, r3
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	801a      	strh	r2, [r3, #0]
 8001678:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800167a:	691b      	ldr	r3, [r3, #16]
 800167c:	2b3e      	cmp	r3, #62	@ 0x3e
 800167e:	d91d      	bls.n	80016bc <PCD_EP_ISR_Handler+0x28c>
 8001680:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001682:	691b      	ldr	r3, [r3, #16]
 8001684:	095b      	lsrs	r3, r3, #5
 8001686:	647b      	str	r3, [r7, #68]	@ 0x44
 8001688:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800168a:	691b      	ldr	r3, [r3, #16]
 800168c:	f003 031f 	and.w	r3, r3, #31
 8001690:	2b00      	cmp	r3, #0
 8001692:	d102      	bne.n	800169a <PCD_EP_ISR_Handler+0x26a>
 8001694:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001696:	3b01      	subs	r3, #1
 8001698:	647b      	str	r3, [r7, #68]	@ 0x44
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	881b      	ldrh	r3, [r3, #0]
 800169e:	b29a      	uxth	r2, r3
 80016a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	029b      	lsls	r3, r3, #10
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	4313      	orrs	r3, r2
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80016b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	801a      	strh	r2, [r3, #0]
 80016ba:	e026      	b.n	800170a <PCD_EP_ISR_Handler+0x2da>
 80016bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016be:	691b      	ldr	r3, [r3, #16]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d10a      	bne.n	80016da <PCD_EP_ISR_Handler+0x2aa>
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	881b      	ldrh	r3, [r3, #0]
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80016ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80016d2:	b29a      	uxth	r2, r3
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	801a      	strh	r2, [r3, #0]
 80016d8:	e017      	b.n	800170a <PCD_EP_ISR_Handler+0x2da>
 80016da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	085b      	lsrs	r3, r3, #1
 80016e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80016e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d002      	beq.n	80016f4 <PCD_EP_ISR_Handler+0x2c4>
 80016ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016f0:	3301      	adds	r3, #1
 80016f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	881b      	ldrh	r3, [r3, #0]
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	029b      	lsls	r3, r3, #10
 8001700:	b29b      	uxth	r3, r3
 8001702:	4313      	orrs	r3, r2
 8001704:	b29a      	uxth	r2, r3
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	881b      	ldrh	r3, [r3, #0]
 8001710:	b29b      	uxth	r3, r3
 8001712:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001716:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800171a:	827b      	strh	r3, [r7, #18]
 800171c:	8a7b      	ldrh	r3, [r7, #18]
 800171e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001722:	827b      	strh	r3, [r7, #18]
 8001724:	8a7b      	ldrh	r3, [r7, #18]
 8001726:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800172a:	827b      	strh	r3, [r7, #18]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	8a7b      	ldrh	r3, [r7, #18]
 8001732:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001736:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800173a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800173e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001742:	b29b      	uxth	r3, r3
 8001744:	8013      	strh	r3, [r2, #0]
 8001746:	e234      	b.n	8001bb2 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	461a      	mov	r2, r3
 800174e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	4413      	add	r3, r2
 8001756:	881b      	ldrh	r3, [r3, #0]
 8001758:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800175c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001760:	2b00      	cmp	r3, #0
 8001762:	f280 80fc 	bge.w	800195e <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	461a      	mov	r2, r3
 800176c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	881b      	ldrh	r3, [r3, #0]
 8001776:	b29a      	uxth	r2, r3
 8001778:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800177c:	4013      	ands	r3, r2
 800177e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	461a      	mov	r2, r3
 8001788:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8001794:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001798:	b292      	uxth	r2, r2
 800179a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800179c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80017a0:	4613      	mov	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	4413      	add	r3, r2
 80017b0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80017b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017b4:	7b1b      	ldrb	r3, [r3, #12]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d125      	bne.n	8001806 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	461a      	mov	r2, r3
 80017c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	4413      	add	r3, r2
 80017ce:	3306      	adds	r3, #6
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	6812      	ldr	r2, [r2, #0]
 80017d6:	4413      	add	r3, r2
 80017d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80017dc:	881b      	ldrh	r3, [r3, #0]
 80017de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017e2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80017e6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	f000 8092 	beq.w	8001914 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6818      	ldr	r0, [r3, #0]
 80017f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017f6:	6959      	ldr	r1, [r3, #20]
 80017f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017fa:	88da      	ldrh	r2, [r3, #6]
 80017fc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001800:	f003 ff09 	bl	8005616 <USB_ReadPMA>
 8001804:	e086      	b.n	8001914 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001806:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001808:	78db      	ldrb	r3, [r3, #3]
 800180a:	2b02      	cmp	r3, #2
 800180c:	d10a      	bne.n	8001824 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800180e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001812:	461a      	mov	r2, r3
 8001814:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 f9d9 	bl	8001bce <HAL_PCD_EP_DB_Receive>
 800181c:	4603      	mov	r3, r0
 800181e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8001822:	e077      	b.n	8001914 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	461a      	mov	r2, r3
 800182a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4413      	add	r3, r2
 8001832:	881b      	ldrh	r3, [r3, #0]
 8001834:	b29b      	uxth	r3, r3
 8001836:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800183a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800183e:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	461a      	mov	r2, r3
 8001848:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	441a      	add	r2, r3
 8001850:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001854:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001858:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800185c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001860:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001864:	b29b      	uxth	r3, r3
 8001866:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	461a      	mov	r2, r3
 800186e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4413      	add	r3, r2
 8001876:	881b      	ldrh	r3, [r3, #0]
 8001878:	b29b      	uxth	r3, r3
 800187a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d024      	beq.n	80018cc <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800188a:	b29b      	uxth	r3, r3
 800188c:	461a      	mov	r2, r3
 800188e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	4413      	add	r3, r2
 8001896:	3302      	adds	r3, #2
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	6812      	ldr	r2, [r2, #0]
 800189e:	4413      	add	r3, r2
 80018a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018aa:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80018ae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d02e      	beq.n	8001914 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6818      	ldr	r0, [r3, #0]
 80018ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018bc:	6959      	ldr	r1, [r3, #20]
 80018be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018c0:	891a      	ldrh	r2, [r3, #8]
 80018c2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80018c6:	f003 fea6 	bl	8005616 <USB_ReadPMA>
 80018ca:	e023      	b.n	8001914 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	461a      	mov	r2, r3
 80018d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	4413      	add	r3, r2
 80018e0:	3306      	adds	r3, #6
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	6812      	ldr	r2, [r2, #0]
 80018e8:	4413      	add	r3, r2
 80018ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80018ee:	881b      	ldrh	r3, [r3, #0]
 80018f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018f4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80018f8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d009      	beq.n	8001914 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6818      	ldr	r0, [r3, #0]
 8001904:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001906:	6959      	ldr	r1, [r3, #20]
 8001908:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800190a:	895a      	ldrh	r2, [r3, #10]
 800190c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001910:	f003 fe81 	bl	8005616 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001914:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001916:	69da      	ldr	r2, [r3, #28]
 8001918:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800191c:	441a      	add	r2, r3
 800191e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001920:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001922:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001924:	695a      	ldr	r2, [r3, #20]
 8001926:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800192a:	441a      	add	r2, r3
 800192c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800192e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001930:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d005      	beq.n	8001944 <PCD_EP_ISR_Handler+0x514>
 8001938:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800193c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800193e:	691b      	ldr	r3, [r3, #16]
 8001940:	429a      	cmp	r2, r3
 8001942:	d206      	bcs.n	8001952 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001944:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	4619      	mov	r1, r3
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f005 fc48 	bl	80071e0 <HAL_PCD_DataOutStageCallback>
 8001950:	e005      	b.n	800195e <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001958:	4618      	mov	r0, r3
 800195a:	f002 f927 	bl	8003bac <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800195e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001966:	2b00      	cmp	r3, #0
 8001968:	f000 8123 	beq.w	8001bb2 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 800196c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001970:	4613      	mov	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4413      	add	r3, r2
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	3310      	adds	r3, #16
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	4413      	add	r3, r2
 800197e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	461a      	mov	r2, r3
 8001986:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4413      	add	r3, r2
 800198e:	881b      	ldrh	r3, [r3, #0]
 8001990:	b29b      	uxth	r3, r3
 8001992:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001996:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800199a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	461a      	mov	r2, r3
 80019a4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	441a      	add	r2, r3
 80019ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80019b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80019bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019be:	78db      	ldrb	r3, [r3, #3]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	f040 80a2 	bne.w	8001b0a <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 80019c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019c8:	2200      	movs	r2, #0
 80019ca:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80019cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019ce:	7b1b      	ldrb	r3, [r3, #12]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	f000 8093 	beq.w	8001afc <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80019d6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80019da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d046      	beq.n	8001a70 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80019e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019e4:	785b      	ldrb	r3, [r3, #1]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d126      	bne.n	8001a38 <PCD_EP_ISR_Handler+0x608>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	461a      	mov	r2, r3
 80019fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019fe:	4413      	add	r3, r2
 8001a00:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	011a      	lsls	r2, r3, #4
 8001a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a0a:	4413      	add	r3, r2
 8001a0c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001a10:	623b      	str	r3, [r7, #32]
 8001a12:	6a3b      	ldr	r3, [r7, #32]
 8001a14:	881b      	ldrh	r3, [r3, #0]
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	6a3b      	ldr	r3, [r7, #32]
 8001a20:	801a      	strh	r2, [r3, #0]
 8001a22:	6a3b      	ldr	r3, [r7, #32]
 8001a24:	881b      	ldrh	r3, [r3, #0]
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a30:	b29a      	uxth	r2, r3
 8001a32:	6a3b      	ldr	r3, [r7, #32]
 8001a34:	801a      	strh	r2, [r3, #0]
 8001a36:	e061      	b.n	8001afc <PCD_EP_ISR_Handler+0x6cc>
 8001a38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a3a:	785b      	ldrb	r3, [r3, #1]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d15d      	bne.n	8001afc <PCD_EP_ISR_Handler+0x6cc>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	461a      	mov	r2, r3
 8001a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a54:	4413      	add	r3, r2
 8001a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	011a      	lsls	r2, r3, #4
 8001a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a60:	4413      	add	r3, r2
 8001a62:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001a66:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	801a      	strh	r2, [r3, #0]
 8001a6e:	e045      	b.n	8001afc <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a78:	785b      	ldrb	r3, [r3, #1]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d126      	bne.n	8001acc <PCD_EP_ISR_Handler+0x69c>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	461a      	mov	r2, r3
 8001a90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a92:	4413      	add	r3, r2
 8001a94:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	011a      	lsls	r2, r3, #4
 8001a9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a9e:	4413      	add	r3, r2
 8001aa0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001aa4:	633b      	str	r3, [r7, #48]	@ 0x30
 8001aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001aa8:	881b      	ldrh	r3, [r3, #0]
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ab4:	801a      	strh	r2, [r3, #0]
 8001ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ab8:	881b      	ldrh	r3, [r3, #0]
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ac0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ac8:	801a      	strh	r2, [r3, #0]
 8001aca:	e017      	b.n	8001afc <PCD_EP_ISR_Handler+0x6cc>
 8001acc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ace:	785b      	ldrb	r3, [r3, #1]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d113      	bne.n	8001afc <PCD_EP_ISR_Handler+0x6cc>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	461a      	mov	r2, r3
 8001ae0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ae2:	4413      	add	r3, r2
 8001ae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ae6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	011a      	lsls	r2, r3, #4
 8001aec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001aee:	4413      	add	r3, r2
 8001af0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001af4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001af8:	2200      	movs	r2, #0
 8001afa:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001afc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	4619      	mov	r1, r3
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f005 fb87 	bl	8007216 <HAL_PCD_DataInStageCallback>
 8001b08:	e053      	b.n	8001bb2 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001b0a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001b0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d146      	bne.n	8001ba4 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	461a      	mov	r2, r3
 8001b22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	4413      	add	r3, r2
 8001b2a:	3302      	adds	r3, #2
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	6812      	ldr	r2, [r2, #0]
 8001b32:	4413      	add	r3, r2
 8001b34:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001b38:	881b      	ldrh	r3, [r3, #0]
 8001b3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b3e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8001b42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b44:	699a      	ldr	r2, [r3, #24]
 8001b46:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d907      	bls.n	8001b5e <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8001b4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b50:	699a      	ldr	r2, [r3, #24]
 8001b52:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001b56:	1ad2      	subs	r2, r2, r3
 8001b58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b5a:	619a      	str	r2, [r3, #24]
 8001b5c:	e002      	b.n	8001b64 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8001b5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b60:	2200      	movs	r2, #0
 8001b62:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001b64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d106      	bne.n	8001b7a <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001b6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	4619      	mov	r1, r3
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f005 fb4f 	bl	8007216 <HAL_PCD_DataInStageCallback>
 8001b78:	e01b      	b.n	8001bb2 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001b7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b7c:	695a      	ldr	r2, [r3, #20]
 8001b7e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001b82:	441a      	add	r2, r3
 8001b84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b86:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001b88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b8a:	69da      	ldr	r2, [r3, #28]
 8001b8c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001b90:	441a      	add	r2, r3
 8001b92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b94:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f002 f805 	bl	8003bac <USB_EPStartXfer>
 8001ba2:	e006      	b.n	8001bb2 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001ba4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001ba8:	461a      	mov	r2, r3
 8001baa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 f91b 	bl	8001de8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	b21b      	sxth	r3, r3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f6ff ac3b 	blt.w	800143a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3758      	adds	r7, #88	@ 0x58
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b088      	sub	sp, #32
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	60f8      	str	r0, [r7, #12]
 8001bd6:	60b9      	str	r1, [r7, #8]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001bdc:	88fb      	ldrh	r3, [r7, #6]
 8001bde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d07e      	beq.n	8001ce4 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	4413      	add	r3, r2
 8001bfa:	3302      	adds	r3, #2
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	6812      	ldr	r2, [r2, #0]
 8001c02:	4413      	add	r3, r2
 8001c04:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001c08:	881b      	ldrh	r3, [r3, #0]
 8001c0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c0e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	699a      	ldr	r2, [r3, #24]
 8001c14:	8b7b      	ldrh	r3, [r7, #26]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d306      	bcc.n	8001c28 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	699a      	ldr	r2, [r3, #24]
 8001c1e:	8b7b      	ldrh	r3, [r7, #26]
 8001c20:	1ad2      	subs	r2, r2, r3
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	619a      	str	r2, [r3, #24]
 8001c26:	e002      	b.n	8001c2e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d123      	bne.n	8001c7e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	881b      	ldrh	r3, [r3, #0]
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001c4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c50:	833b      	strh	r3, [r7, #24]
 8001c52:	8b3b      	ldrh	r3, [r7, #24]
 8001c54:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001c58:	833b      	strh	r3, [r7, #24]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	441a      	add	r2, r3
 8001c68:	8b3b      	ldrh	r3, [r7, #24]
 8001c6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001c6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001c72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001c7e:	88fb      	ldrh	r3, [r7, #6]
 8001c80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d01f      	beq.n	8001cc8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4413      	add	r3, r2
 8001c96:	881b      	ldrh	r3, [r3, #0]
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001c9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ca2:	82fb      	strh	r3, [r7, #22]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	461a      	mov	r2, r3
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	441a      	add	r2, r3
 8001cb2:	8afb      	ldrh	r3, [r7, #22]
 8001cb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001cb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001cbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cc0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001cc8:	8b7b      	ldrh	r3, [r7, #26]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f000 8087 	beq.w	8001dde <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6818      	ldr	r0, [r3, #0]
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	6959      	ldr	r1, [r3, #20]
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	891a      	ldrh	r2, [r3, #8]
 8001cdc:	8b7b      	ldrh	r3, [r7, #26]
 8001cde:	f003 fc9a 	bl	8005616 <USB_ReadPMA>
 8001ce2:	e07c      	b.n	8001dde <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	461a      	mov	r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	4413      	add	r3, r2
 8001cf8:	3306      	adds	r3, #6
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	6812      	ldr	r2, [r2, #0]
 8001d00:	4413      	add	r3, r2
 8001d02:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d0c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	699a      	ldr	r2, [r3, #24]
 8001d12:	8b7b      	ldrh	r3, [r7, #26]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d306      	bcc.n	8001d26 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	699a      	ldr	r2, [r3, #24]
 8001d1c:	8b7b      	ldrh	r3, [r7, #26]
 8001d1e:	1ad2      	subs	r2, r2, r3
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	619a      	str	r2, [r3, #24]
 8001d24:	e002      	b.n	8001d2c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d123      	bne.n	8001d7c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	461a      	mov	r2, r3
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001d4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d4e:	83fb      	strh	r3, [r7, #30]
 8001d50:	8bfb      	ldrh	r3, [r7, #30]
 8001d52:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001d56:	83fb      	strh	r3, [r7, #30]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	441a      	add	r2, r3
 8001d66:	8bfb      	ldrh	r3, [r7, #30]
 8001d68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001d6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001d70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001d7c:	88fb      	ldrh	r3, [r7, #6]
 8001d7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d11f      	bne.n	8001dc6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	4413      	add	r3, r2
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001d9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001da0:	83bb      	strh	r3, [r7, #28]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	461a      	mov	r2, r3
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	441a      	add	r2, r3
 8001db0:	8bbb      	ldrh	r3, [r7, #28]
 8001db2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001db6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001dba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001dbe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001dc6:	8b7b      	ldrh	r3, [r7, #26]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d008      	beq.n	8001dde <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6818      	ldr	r0, [r3, #0]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	6959      	ldr	r1, [r3, #20]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	895a      	ldrh	r2, [r3, #10]
 8001dd8:	8b7b      	ldrh	r3, [r7, #26]
 8001dda:	f003 fc1c 	bl	8005616 <USB_ReadPMA>
    }
  }

  return count;
 8001dde:	8b7b      	ldrh	r3, [r7, #26]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3720      	adds	r7, #32
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b0a4      	sub	sp, #144	@ 0x90
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	4613      	mov	r3, r2
 8001df4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001df6:	88fb      	ldrh	r3, [r7, #6]
 8001df8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f000 81dd 	beq.w	80021bc <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	4413      	add	r3, r2
 8001e16:	3302      	adds	r3, #2
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	6812      	ldr	r2, [r2, #0]
 8001e1e:	4413      	add	r3, r2
 8001e20:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001e24:	881b      	ldrh	r3, [r3, #0]
 8001e26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e2a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	699a      	ldr	r2, [r3, #24]
 8001e32:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d907      	bls.n	8001e4a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	699a      	ldr	r2, [r3, #24]
 8001e3e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001e42:	1ad2      	subs	r2, r2, r3
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	619a      	str	r2, [r3, #24]
 8001e48:	e002      	b.n	8001e50 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f040 80b9 	bne.w	8001fcc <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	785b      	ldrb	r3, [r3, #1]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d126      	bne.n	8001eb0 <HAL_PCD_EP_DB_Transmit+0xc8>
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	461a      	mov	r2, r3
 8001e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e76:	4413      	add	r3, r2
 8001e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	011a      	lsls	r2, r3, #4
 8001e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e82:	4413      	add	r3, r2
 8001e84:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001e88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e8c:	881b      	ldrh	r3, [r3, #0]
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e98:	801a      	strh	r2, [r3, #0]
 8001e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e9c:	881b      	ldrh	r3, [r3, #0]
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ea4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eac:	801a      	strh	r2, [r3, #0]
 8001eae:	e01a      	b.n	8001ee6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	785b      	ldrb	r3, [r3, #1]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d116      	bne.n	8001ee6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	461a      	mov	r2, r3
 8001eca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ecc:	4413      	add	r3, r2
 8001ece:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	011a      	lsls	r2, r3, #4
 8001ed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ed8:	4413      	add	r3, r2
 8001eda:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001ede:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	785b      	ldrb	r3, [r3, #1]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d126      	bne.n	8001f42 <HAL_PCD_EP_DB_Transmit+0x15a>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	61fb      	str	r3, [r7, #28]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	461a      	mov	r2, r3
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	4413      	add	r3, r2
 8001f0a:	61fb      	str	r3, [r7, #28]
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	011a      	lsls	r2, r3, #4
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	4413      	add	r3, r2
 8001f16:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001f1a:	61bb      	str	r3, [r7, #24]
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	881b      	ldrh	r3, [r3, #0]
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	801a      	strh	r2, [r3, #0]
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	881b      	ldrh	r3, [r3, #0]
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	801a      	strh	r2, [r3, #0]
 8001f40:	e017      	b.n	8001f72 <HAL_PCD_EP_DB_Transmit+0x18a>
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	785b      	ldrb	r3, [r3, #1]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d113      	bne.n	8001f72 <HAL_PCD_EP_DB_Transmit+0x18a>
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	461a      	mov	r2, r3
 8001f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f58:	4413      	add	r3, r2
 8001f5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	011a      	lsls	r2, r3, #4
 8001f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f64:	4413      	add	r3, r2
 8001f66:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001f6a:	623b      	str	r3, [r7, #32]
 8001f6c:	6a3b      	ldr	r3, [r7, #32]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	4619      	mov	r1, r3
 8001f78:	68f8      	ldr	r0, [r7, #12]
 8001f7a:	f005 f94c 	bl	8007216 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f7e:	88fb      	ldrh	r3, [r7, #6]
 8001f80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f000 82fc 	beq.w	8002582 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	4413      	add	r3, r2
 8001f98:	881b      	ldrh	r3, [r3, #0]
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001fa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fa4:	82fb      	strh	r3, [r7, #22]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	461a      	mov	r2, r3
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	441a      	add	r2, r3
 8001fb4:	8afb      	ldrh	r3, [r7, #22]
 8001fb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001fba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001fbe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001fc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	8013      	strh	r3, [r2, #0]
 8001fca:	e2da      	b.n	8002582 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001fcc:	88fb      	ldrh	r3, [r7, #6]
 8001fce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d021      	beq.n	800201a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	4413      	add	r3, r2
 8001fe4:	881b      	ldrh	r3, [r3, #0]
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001fec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ff0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	441a      	add	r2, r3
 8002002:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8002006:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800200a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800200e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002012:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002016:	b29b      	uxth	r3, r3
 8002018:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002020:	2b01      	cmp	r3, #1
 8002022:	f040 82ae 	bne.w	8002582 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	695a      	ldr	r2, [r3, #20]
 800202a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800202e:	441a      	add	r2, r3
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	69da      	ldr	r2, [r3, #28]
 8002038:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800203c:	441a      	add	r2, r3
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	6a1a      	ldr	r2, [r3, #32]
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	429a      	cmp	r2, r3
 800204c:	d30b      	bcc.n	8002066 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	6a1a      	ldr	r2, [r3, #32]
 800205a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800205e:	1ad2      	subs	r2, r2, r3
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	621a      	str	r2, [r3, #32]
 8002064:	e017      	b.n	8002096 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d108      	bne.n	8002080 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800206e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002072:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800207e:	e00a      	b.n	8002096 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	6a1b      	ldr	r3, [r3, #32]
 800208c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	2200      	movs	r2, #0
 8002094:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	785b      	ldrb	r3, [r3, #1]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d165      	bne.n	800216a <HAL_PCD_EP_DB_Transmit+0x382>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	461a      	mov	r2, r3
 80020b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020b2:	4413      	add	r3, r2
 80020b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	011a      	lsls	r2, r3, #4
 80020bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020be:	4413      	add	r3, r2
 80020c0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80020c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80020c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020c8:	881b      	ldrh	r3, [r3, #0]
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020d4:	801a      	strh	r2, [r3, #0]
 80020d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80020da:	2b3e      	cmp	r3, #62	@ 0x3e
 80020dc:	d91d      	bls.n	800211a <HAL_PCD_EP_DB_Transmit+0x332>
 80020de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80020e2:	095b      	lsrs	r3, r3, #5
 80020e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80020e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80020ea:	f003 031f 	and.w	r3, r3, #31
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d102      	bne.n	80020f8 <HAL_PCD_EP_DB_Transmit+0x310>
 80020f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80020f4:	3b01      	subs	r3, #1
 80020f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80020f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020fa:	881b      	ldrh	r3, [r3, #0]
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002100:	b29b      	uxth	r3, r3
 8002102:	029b      	lsls	r3, r3, #10
 8002104:	b29b      	uxth	r3, r3
 8002106:	4313      	orrs	r3, r2
 8002108:	b29b      	uxth	r3, r3
 800210a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800210e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002112:	b29a      	uxth	r2, r3
 8002114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002116:	801a      	strh	r2, [r3, #0]
 8002118:	e044      	b.n	80021a4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800211a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800211e:	2b00      	cmp	r3, #0
 8002120:	d10a      	bne.n	8002138 <HAL_PCD_EP_DB_Transmit+0x350>
 8002122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002124:	881b      	ldrh	r3, [r3, #0]
 8002126:	b29b      	uxth	r3, r3
 8002128:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800212c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002130:	b29a      	uxth	r2, r3
 8002132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002134:	801a      	strh	r2, [r3, #0]
 8002136:	e035      	b.n	80021a4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002138:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800213c:	085b      	lsrs	r3, r3, #1
 800213e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002140:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	2b00      	cmp	r3, #0
 800214a:	d002      	beq.n	8002152 <HAL_PCD_EP_DB_Transmit+0x36a>
 800214c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800214e:	3301      	adds	r3, #1
 8002150:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002154:	881b      	ldrh	r3, [r3, #0]
 8002156:	b29a      	uxth	r2, r3
 8002158:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800215a:	b29b      	uxth	r3, r3
 800215c:	029b      	lsls	r3, r3, #10
 800215e:	b29b      	uxth	r3, r3
 8002160:	4313      	orrs	r3, r2
 8002162:	b29a      	uxth	r2, r3
 8002164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002166:	801a      	strh	r2, [r3, #0]
 8002168:	e01c      	b.n	80021a4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	785b      	ldrb	r3, [r3, #1]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d118      	bne.n	80021a4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	647b      	str	r3, [r7, #68]	@ 0x44
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002180:	b29b      	uxth	r3, r3
 8002182:	461a      	mov	r2, r3
 8002184:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002186:	4413      	add	r3, r2
 8002188:	647b      	str	r3, [r7, #68]	@ 0x44
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	011a      	lsls	r2, r3, #4
 8002190:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002192:	4413      	add	r3, r2
 8002194:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002198:	643b      	str	r3, [r7, #64]	@ 0x40
 800219a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800219e:	b29a      	uxth	r2, r3
 80021a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021a2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6818      	ldr	r0, [r3, #0]
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	6959      	ldr	r1, [r3, #20]
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	891a      	ldrh	r2, [r3, #8]
 80021b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	f003 f9e8 	bl	800558a <USB_WritePMA>
 80021ba:	e1e2      	b.n	8002582 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	461a      	mov	r2, r3
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	4413      	add	r3, r2
 80021d0:	3306      	adds	r3, #6
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	6812      	ldr	r2, [r2, #0]
 80021d8:	4413      	add	r3, r2
 80021da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80021de:	881b      	ldrh	r3, [r3, #0]
 80021e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021e4:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	699a      	ldr	r2, [r3, #24]
 80021ec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d307      	bcc.n	8002204 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	699a      	ldr	r2, [r3, #24]
 80021f8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80021fc:	1ad2      	subs	r2, r2, r3
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	619a      	str	r2, [r3, #24]
 8002202:	e002      	b.n	800220a <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	2200      	movs	r2, #0
 8002208:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	2b00      	cmp	r3, #0
 8002210:	f040 80c0 	bne.w	8002394 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	785b      	ldrb	r3, [r3, #1]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d126      	bne.n	800226a <HAL_PCD_EP_DB_Transmit+0x482>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800222a:	b29b      	uxth	r3, r3
 800222c:	461a      	mov	r2, r3
 800222e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002230:	4413      	add	r3, r2
 8002232:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	011a      	lsls	r2, r3, #4
 800223a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800223c:	4413      	add	r3, r2
 800223e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002242:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002244:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002246:	881b      	ldrh	r3, [r3, #0]
 8002248:	b29b      	uxth	r3, r3
 800224a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800224e:	b29a      	uxth	r2, r3
 8002250:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002252:	801a      	strh	r2, [r3, #0]
 8002254:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002256:	881b      	ldrh	r3, [r3, #0]
 8002258:	b29b      	uxth	r3, r3
 800225a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800225e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002262:	b29a      	uxth	r2, r3
 8002264:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002266:	801a      	strh	r2, [r3, #0]
 8002268:	e01a      	b.n	80022a0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	785b      	ldrb	r3, [r3, #1]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d116      	bne.n	80022a0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	667b      	str	r3, [r7, #100]	@ 0x64
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002280:	b29b      	uxth	r3, r3
 8002282:	461a      	mov	r2, r3
 8002284:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002286:	4413      	add	r3, r2
 8002288:	667b      	str	r3, [r7, #100]	@ 0x64
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	011a      	lsls	r2, r3, #4
 8002290:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002292:	4413      	add	r3, r2
 8002294:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002298:	663b      	str	r3, [r7, #96]	@ 0x60
 800229a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800229c:	2200      	movs	r2, #0
 800229e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	677b      	str	r3, [r7, #116]	@ 0x74
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	785b      	ldrb	r3, [r3, #1]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d12b      	bne.n	8002306 <HAL_PCD_EP_DB_Transmit+0x51e>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022bc:	b29b      	uxth	r3, r3
 80022be:	461a      	mov	r2, r3
 80022c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022c2:	4413      	add	r3, r2
 80022c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	011a      	lsls	r2, r3, #4
 80022cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022ce:	4413      	add	r3, r2
 80022d0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80022d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80022d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80022dc:	881b      	ldrh	r3, [r3, #0]
 80022de:	b29b      	uxth	r3, r3
 80022e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80022ea:	801a      	strh	r2, [r3, #0]
 80022ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80022f0:	881b      	ldrh	r3, [r3, #0]
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002302:	801a      	strh	r2, [r3, #0]
 8002304:	e017      	b.n	8002336 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	785b      	ldrb	r3, [r3, #1]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d113      	bne.n	8002336 <HAL_PCD_EP_DB_Transmit+0x54e>
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002316:	b29b      	uxth	r3, r3
 8002318:	461a      	mov	r2, r3
 800231a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800231c:	4413      	add	r3, r2
 800231e:	677b      	str	r3, [r7, #116]	@ 0x74
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	011a      	lsls	r2, r3, #4
 8002326:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002328:	4413      	add	r3, r2
 800232a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800232e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002330:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002332:	2200      	movs	r2, #0
 8002334:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	4619      	mov	r1, r3
 800233c:	68f8      	ldr	r0, [r7, #12]
 800233e:	f004 ff6a 	bl	8007216 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002342:	88fb      	ldrh	r3, [r7, #6]
 8002344:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002348:	2b00      	cmp	r3, #0
 800234a:	f040 811a 	bne.w	8002582 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	461a      	mov	r2, r3
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	4413      	add	r3, r2
 800235c:	881b      	ldrh	r3, [r3, #0]
 800235e:	b29b      	uxth	r3, r3
 8002360:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002364:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002368:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	461a      	mov	r2, r3
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	441a      	add	r2, r3
 800237a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800237e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002382:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002386:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800238a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800238e:	b29b      	uxth	r3, r3
 8002390:	8013      	strh	r3, [r2, #0]
 8002392:	e0f6      	b.n	8002582 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002394:	88fb      	ldrh	r3, [r7, #6]
 8002396:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d121      	bne.n	80023e2 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	461a      	mov	r2, r3
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	881b      	ldrh	r3, [r3, #0]
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80023b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023b8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	461a      	mov	r2, r3
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	441a      	add	r2, r3
 80023ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80023ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80023d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80023d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80023da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023de:	b29b      	uxth	r3, r3
 80023e0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	f040 80ca 	bne.w	8002582 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	695a      	ldr	r2, [r3, #20]
 80023f2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80023f6:	441a      	add	r2, r3
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	69da      	ldr	r2, [r3, #28]
 8002400:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002404:	441a      	add	r2, r3
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	6a1a      	ldr	r2, [r3, #32]
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	429a      	cmp	r2, r3
 8002414:	d30b      	bcc.n	800242e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	6a1a      	ldr	r2, [r3, #32]
 8002422:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002426:	1ad2      	subs	r2, r2, r3
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	621a      	str	r2, [r3, #32]
 800242c:	e017      	b.n	800245e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d108      	bne.n	8002448 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002436:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800243a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002446:	e00a      	b.n	800245e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	2200      	movs	r2, #0
 8002454:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	657b      	str	r3, [r7, #84]	@ 0x54
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	785b      	ldrb	r3, [r3, #1]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d165      	bne.n	8002538 <HAL_PCD_EP_DB_Transmit+0x750>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800247a:	b29b      	uxth	r3, r3
 800247c:	461a      	mov	r2, r3
 800247e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002480:	4413      	add	r3, r2
 8002482:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	011a      	lsls	r2, r3, #4
 800248a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800248c:	4413      	add	r3, r2
 800248e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002492:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002494:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002496:	881b      	ldrh	r3, [r3, #0]
 8002498:	b29b      	uxth	r3, r3
 800249a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800249e:	b29a      	uxth	r2, r3
 80024a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024a2:	801a      	strh	r2, [r3, #0]
 80024a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80024aa:	d91d      	bls.n	80024e8 <HAL_PCD_EP_DB_Transmit+0x700>
 80024ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024b0:	095b      	lsrs	r3, r3, #5
 80024b2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80024b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024b8:	f003 031f 	and.w	r3, r3, #31
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d102      	bne.n	80024c6 <HAL_PCD_EP_DB_Transmit+0x6de>
 80024c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80024c2:	3b01      	subs	r3, #1
 80024c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80024c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024c8:	881b      	ldrh	r3, [r3, #0]
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	029b      	lsls	r3, r3, #10
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	4313      	orrs	r3, r2
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024e4:	801a      	strh	r2, [r3, #0]
 80024e6:	e041      	b.n	800256c <HAL_PCD_EP_DB_Transmit+0x784>
 80024e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d10a      	bne.n	8002506 <HAL_PCD_EP_DB_Transmit+0x71e>
 80024f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024f2:	881b      	ldrh	r3, [r3, #0]
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024fe:	b29a      	uxth	r2, r3
 8002500:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002502:	801a      	strh	r2, [r3, #0]
 8002504:	e032      	b.n	800256c <HAL_PCD_EP_DB_Transmit+0x784>
 8002506:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800250a:	085b      	lsrs	r3, r3, #1
 800250c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800250e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d002      	beq.n	8002520 <HAL_PCD_EP_DB_Transmit+0x738>
 800251a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800251c:	3301      	adds	r3, #1
 800251e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002520:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002522:	881b      	ldrh	r3, [r3, #0]
 8002524:	b29a      	uxth	r2, r3
 8002526:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002528:	b29b      	uxth	r3, r3
 800252a:	029b      	lsls	r3, r3, #10
 800252c:	b29b      	uxth	r3, r3
 800252e:	4313      	orrs	r3, r2
 8002530:	b29a      	uxth	r2, r3
 8002532:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002534:	801a      	strh	r2, [r3, #0]
 8002536:	e019      	b.n	800256c <HAL_PCD_EP_DB_Transmit+0x784>
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	785b      	ldrb	r3, [r3, #1]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d115      	bne.n	800256c <HAL_PCD_EP_DB_Transmit+0x784>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002548:	b29b      	uxth	r3, r3
 800254a:	461a      	mov	r2, r3
 800254c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800254e:	4413      	add	r3, r2
 8002550:	657b      	str	r3, [r7, #84]	@ 0x54
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	011a      	lsls	r2, r3, #4
 8002558:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800255a:	4413      	add	r3, r2
 800255c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002560:	653b      	str	r3, [r7, #80]	@ 0x50
 8002562:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002566:	b29a      	uxth	r2, r3
 8002568:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800256a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6818      	ldr	r0, [r3, #0]
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	6959      	ldr	r1, [r3, #20]
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	895a      	ldrh	r2, [r3, #10]
 8002578:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800257c:	b29b      	uxth	r3, r3
 800257e:	f003 f804 	bl	800558a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	461a      	mov	r2, r3
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	881b      	ldrh	r3, [r3, #0]
 8002592:	b29b      	uxth	r3, r3
 8002594:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002598:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800259c:	82bb      	strh	r3, [r7, #20]
 800259e:	8abb      	ldrh	r3, [r7, #20]
 80025a0:	f083 0310 	eor.w	r3, r3, #16
 80025a4:	82bb      	strh	r3, [r7, #20]
 80025a6:	8abb      	ldrh	r3, [r7, #20]
 80025a8:	f083 0320 	eor.w	r3, r3, #32
 80025ac:	82bb      	strh	r3, [r7, #20]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	461a      	mov	r2, r3
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	441a      	add	r2, r3
 80025bc:	8abb      	ldrh	r3, [r7, #20]
 80025be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80025c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80025c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3790      	adds	r7, #144	@ 0x90
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80025dc:	b480      	push	{r7}
 80025de:	b087      	sub	sp, #28
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	607b      	str	r3, [r7, #4]
 80025e6:	460b      	mov	r3, r1
 80025e8:	817b      	strh	r3, [r7, #10]
 80025ea:	4613      	mov	r3, r2
 80025ec:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80025ee:	897b      	ldrh	r3, [r7, #10]
 80025f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00b      	beq.n	8002612 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025fa:	897b      	ldrh	r3, [r7, #10]
 80025fc:	f003 0207 	and.w	r2, r3, #7
 8002600:	4613      	mov	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4413      	add	r3, r2
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	3310      	adds	r3, #16
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	4413      	add	r3, r2
 800260e:	617b      	str	r3, [r7, #20]
 8002610:	e009      	b.n	8002626 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002612:	897a      	ldrh	r2, [r7, #10]
 8002614:	4613      	mov	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	4413      	add	r3, r2
 8002624:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002626:	893b      	ldrh	r3, [r7, #8]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d107      	bne.n	800263c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	2200      	movs	r2, #0
 8002630:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	b29a      	uxth	r2, r3
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	80da      	strh	r2, [r3, #6]
 800263a:	e00b      	b.n	8002654 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	2201      	movs	r2, #1
 8002640:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	b29a      	uxth	r2, r3
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	0c1b      	lsrs	r3, r3, #16
 800264e:	b29a      	uxth	r2, r3
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	371c      	adds	r7, #28
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr

08002660 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e272      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	f000 8087 	beq.w	800278e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002680:	4b92      	ldr	r3, [pc, #584]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f003 030c 	and.w	r3, r3, #12
 8002688:	2b04      	cmp	r3, #4
 800268a:	d00c      	beq.n	80026a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800268c:	4b8f      	ldr	r3, [pc, #572]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f003 030c 	and.w	r3, r3, #12
 8002694:	2b08      	cmp	r3, #8
 8002696:	d112      	bne.n	80026be <HAL_RCC_OscConfig+0x5e>
 8002698:	4b8c      	ldr	r3, [pc, #560]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026a4:	d10b      	bne.n	80026be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a6:	4b89      	ldr	r3, [pc, #548]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d06c      	beq.n	800278c <HAL_RCC_OscConfig+0x12c>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d168      	bne.n	800278c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e24c      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026c6:	d106      	bne.n	80026d6 <HAL_RCC_OscConfig+0x76>
 80026c8:	4b80      	ldr	r3, [pc, #512]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a7f      	ldr	r2, [pc, #508]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 80026ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026d2:	6013      	str	r3, [r2, #0]
 80026d4:	e02e      	b.n	8002734 <HAL_RCC_OscConfig+0xd4>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10c      	bne.n	80026f8 <HAL_RCC_OscConfig+0x98>
 80026de:	4b7b      	ldr	r3, [pc, #492]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a7a      	ldr	r2, [pc, #488]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 80026e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026e8:	6013      	str	r3, [r2, #0]
 80026ea:	4b78      	ldr	r3, [pc, #480]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a77      	ldr	r2, [pc, #476]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 80026f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	e01d      	b.n	8002734 <HAL_RCC_OscConfig+0xd4>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002700:	d10c      	bne.n	800271c <HAL_RCC_OscConfig+0xbc>
 8002702:	4b72      	ldr	r3, [pc, #456]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a71      	ldr	r2, [pc, #452]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002708:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800270c:	6013      	str	r3, [r2, #0]
 800270e:	4b6f      	ldr	r3, [pc, #444]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a6e      	ldr	r2, [pc, #440]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002714:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	e00b      	b.n	8002734 <HAL_RCC_OscConfig+0xd4>
 800271c:	4b6b      	ldr	r3, [pc, #428]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a6a      	ldr	r2, [pc, #424]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002722:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002726:	6013      	str	r3, [r2, #0]
 8002728:	4b68      	ldr	r3, [pc, #416]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a67      	ldr	r2, [pc, #412]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 800272e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002732:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d013      	beq.n	8002764 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273c:	f7fd ff58 	bl	80005f0 <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002744:	f7fd ff54 	bl	80005f0 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b64      	cmp	r3, #100	@ 0x64
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e200      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002756:	4b5d      	ldr	r3, [pc, #372]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d0f0      	beq.n	8002744 <HAL_RCC_OscConfig+0xe4>
 8002762:	e014      	b.n	800278e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002764:	f7fd ff44 	bl	80005f0 <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800276c:	f7fd ff40 	bl	80005f0 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b64      	cmp	r3, #100	@ 0x64
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e1ec      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800277e:	4b53      	ldr	r3, [pc, #332]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1f0      	bne.n	800276c <HAL_RCC_OscConfig+0x10c>
 800278a:	e000      	b.n	800278e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800278c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d063      	beq.n	8002862 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800279a:	4b4c      	ldr	r3, [pc, #304]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f003 030c 	and.w	r3, r3, #12
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00b      	beq.n	80027be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80027a6:	4b49      	ldr	r3, [pc, #292]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f003 030c 	and.w	r3, r3, #12
 80027ae:	2b08      	cmp	r3, #8
 80027b0:	d11c      	bne.n	80027ec <HAL_RCC_OscConfig+0x18c>
 80027b2:	4b46      	ldr	r3, [pc, #280]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d116      	bne.n	80027ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027be:	4b43      	ldr	r3, [pc, #268]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d005      	beq.n	80027d6 <HAL_RCC_OscConfig+0x176>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d001      	beq.n	80027d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e1c0      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d6:	4b3d      	ldr	r3, [pc, #244]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	4939      	ldr	r1, [pc, #228]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ea:	e03a      	b.n	8002862 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d020      	beq.n	8002836 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027f4:	4b36      	ldr	r3, [pc, #216]	@ (80028d0 <HAL_RCC_OscConfig+0x270>)
 80027f6:	2201      	movs	r2, #1
 80027f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027fa:	f7fd fef9 	bl	80005f0 <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002800:	e008      	b.n	8002814 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002802:	f7fd fef5 	bl	80005f0 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e1a1      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002814:	4b2d      	ldr	r3, [pc, #180]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0f0      	beq.n	8002802 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002820:	4b2a      	ldr	r3, [pc, #168]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	4927      	ldr	r1, [pc, #156]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002830:	4313      	orrs	r3, r2
 8002832:	600b      	str	r3, [r1, #0]
 8002834:	e015      	b.n	8002862 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002836:	4b26      	ldr	r3, [pc, #152]	@ (80028d0 <HAL_RCC_OscConfig+0x270>)
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283c:	f7fd fed8 	bl	80005f0 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002844:	f7fd fed4 	bl	80005f0 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e180      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002856:	4b1d      	ldr	r3, [pc, #116]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1f0      	bne.n	8002844 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0308 	and.w	r3, r3, #8
 800286a:	2b00      	cmp	r3, #0
 800286c:	d03a      	beq.n	80028e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d019      	beq.n	80028aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002876:	4b17      	ldr	r3, [pc, #92]	@ (80028d4 <HAL_RCC_OscConfig+0x274>)
 8002878:	2201      	movs	r2, #1
 800287a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800287c:	f7fd feb8 	bl	80005f0 <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002884:	f7fd feb4 	bl	80005f0 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e160      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002896:	4b0d      	ldr	r3, [pc, #52]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0f0      	beq.n	8002884 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80028a2:	2001      	movs	r0, #1
 80028a4:	f000 fa9c 	bl	8002de0 <RCC_Delay>
 80028a8:	e01c      	b.n	80028e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028aa:	4b0a      	ldr	r3, [pc, #40]	@ (80028d4 <HAL_RCC_OscConfig+0x274>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b0:	f7fd fe9e 	bl	80005f0 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b6:	e00f      	b.n	80028d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028b8:	f7fd fe9a 	bl	80005f0 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d908      	bls.n	80028d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e146      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
 80028ca:	bf00      	nop
 80028cc:	40021000 	.word	0x40021000
 80028d0:	42420000 	.word	0x42420000
 80028d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d8:	4b92      	ldr	r3, [pc, #584]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 80028da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1e9      	bne.n	80028b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 80a6 	beq.w	8002a3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028f2:	2300      	movs	r3, #0
 80028f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028f6:	4b8b      	ldr	r3, [pc, #556]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10d      	bne.n	800291e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002902:	4b88      	ldr	r3, [pc, #544]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	4a87      	ldr	r2, [pc, #540]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002908:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800290c:	61d3      	str	r3, [r2, #28]
 800290e:	4b85      	ldr	r3, [pc, #532]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002916:	60bb      	str	r3, [r7, #8]
 8002918:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800291a:	2301      	movs	r3, #1
 800291c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800291e:	4b82      	ldr	r3, [pc, #520]	@ (8002b28 <HAL_RCC_OscConfig+0x4c8>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002926:	2b00      	cmp	r3, #0
 8002928:	d118      	bne.n	800295c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800292a:	4b7f      	ldr	r3, [pc, #508]	@ (8002b28 <HAL_RCC_OscConfig+0x4c8>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a7e      	ldr	r2, [pc, #504]	@ (8002b28 <HAL_RCC_OscConfig+0x4c8>)
 8002930:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002934:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002936:	f7fd fe5b 	bl	80005f0 <HAL_GetTick>
 800293a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293c:	e008      	b.n	8002950 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800293e:	f7fd fe57 	bl	80005f0 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b64      	cmp	r3, #100	@ 0x64
 800294a:	d901      	bls.n	8002950 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e103      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002950:	4b75      	ldr	r3, [pc, #468]	@ (8002b28 <HAL_RCC_OscConfig+0x4c8>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002958:	2b00      	cmp	r3, #0
 800295a:	d0f0      	beq.n	800293e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d106      	bne.n	8002972 <HAL_RCC_OscConfig+0x312>
 8002964:	4b6f      	ldr	r3, [pc, #444]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	4a6e      	ldr	r2, [pc, #440]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 800296a:	f043 0301 	orr.w	r3, r3, #1
 800296e:	6213      	str	r3, [r2, #32]
 8002970:	e02d      	b.n	80029ce <HAL_RCC_OscConfig+0x36e>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d10c      	bne.n	8002994 <HAL_RCC_OscConfig+0x334>
 800297a:	4b6a      	ldr	r3, [pc, #424]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	4a69      	ldr	r2, [pc, #420]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002980:	f023 0301 	bic.w	r3, r3, #1
 8002984:	6213      	str	r3, [r2, #32]
 8002986:	4b67      	ldr	r3, [pc, #412]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	4a66      	ldr	r2, [pc, #408]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 800298c:	f023 0304 	bic.w	r3, r3, #4
 8002990:	6213      	str	r3, [r2, #32]
 8002992:	e01c      	b.n	80029ce <HAL_RCC_OscConfig+0x36e>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	2b05      	cmp	r3, #5
 800299a:	d10c      	bne.n	80029b6 <HAL_RCC_OscConfig+0x356>
 800299c:	4b61      	ldr	r3, [pc, #388]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	4a60      	ldr	r2, [pc, #384]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 80029a2:	f043 0304 	orr.w	r3, r3, #4
 80029a6:	6213      	str	r3, [r2, #32]
 80029a8:	4b5e      	ldr	r3, [pc, #376]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	4a5d      	ldr	r2, [pc, #372]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 80029ae:	f043 0301 	orr.w	r3, r3, #1
 80029b2:	6213      	str	r3, [r2, #32]
 80029b4:	e00b      	b.n	80029ce <HAL_RCC_OscConfig+0x36e>
 80029b6:	4b5b      	ldr	r3, [pc, #364]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	4a5a      	ldr	r2, [pc, #360]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 80029bc:	f023 0301 	bic.w	r3, r3, #1
 80029c0:	6213      	str	r3, [r2, #32]
 80029c2:	4b58      	ldr	r3, [pc, #352]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	4a57      	ldr	r2, [pc, #348]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 80029c8:	f023 0304 	bic.w	r3, r3, #4
 80029cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d015      	beq.n	8002a02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029d6:	f7fd fe0b 	bl	80005f0 <HAL_GetTick>
 80029da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029dc:	e00a      	b.n	80029f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029de:	f7fd fe07 	bl	80005f0 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d901      	bls.n	80029f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e0b1      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f4:	4b4b      	ldr	r3, [pc, #300]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d0ee      	beq.n	80029de <HAL_RCC_OscConfig+0x37e>
 8002a00:	e014      	b.n	8002a2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a02:	f7fd fdf5 	bl	80005f0 <HAL_GetTick>
 8002a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a08:	e00a      	b.n	8002a20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a0a:	f7fd fdf1 	bl	80005f0 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e09b      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a20:	4b40      	ldr	r3, [pc, #256]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002a22:	6a1b      	ldr	r3, [r3, #32]
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1ee      	bne.n	8002a0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a2c:	7dfb      	ldrb	r3, [r7, #23]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d105      	bne.n	8002a3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a32:	4b3c      	ldr	r3, [pc, #240]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	4a3b      	ldr	r2, [pc, #236]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002a38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	69db      	ldr	r3, [r3, #28]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 8087 	beq.w	8002b56 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a48:	4b36      	ldr	r3, [pc, #216]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f003 030c 	and.w	r3, r3, #12
 8002a50:	2b08      	cmp	r3, #8
 8002a52:	d061      	beq.n	8002b18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	69db      	ldr	r3, [r3, #28]
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d146      	bne.n	8002aea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a5c:	4b33      	ldr	r3, [pc, #204]	@ (8002b2c <HAL_RCC_OscConfig+0x4cc>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a62:	f7fd fdc5 	bl	80005f0 <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a68:	e008      	b.n	8002a7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a6a:	f7fd fdc1 	bl	80005f0 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e06d      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a7c:	4b29      	ldr	r3, [pc, #164]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1f0      	bne.n	8002a6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a90:	d108      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a92:	4b24      	ldr	r3, [pc, #144]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	4921      	ldr	r1, [pc, #132]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002aa4:	4b1f      	ldr	r3, [pc, #124]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a19      	ldr	r1, [r3, #32]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab4:	430b      	orrs	r3, r1
 8002ab6:	491b      	ldr	r1, [pc, #108]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002abc:	4b1b      	ldr	r3, [pc, #108]	@ (8002b2c <HAL_RCC_OscConfig+0x4cc>)
 8002abe:	2201      	movs	r2, #1
 8002ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac2:	f7fd fd95 	bl	80005f0 <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aca:	f7fd fd91 	bl	80005f0 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e03d      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002adc:	4b11      	ldr	r3, [pc, #68]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d0f0      	beq.n	8002aca <HAL_RCC_OscConfig+0x46a>
 8002ae8:	e035      	b.n	8002b56 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aea:	4b10      	ldr	r3, [pc, #64]	@ (8002b2c <HAL_RCC_OscConfig+0x4cc>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af0:	f7fd fd7e 	bl	80005f0 <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af8:	f7fd fd7a 	bl	80005f0 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e026      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b0a:	4b06      	ldr	r3, [pc, #24]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1f0      	bne.n	8002af8 <HAL_RCC_OscConfig+0x498>
 8002b16:	e01e      	b.n	8002b56 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	69db      	ldr	r3, [r3, #28]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d107      	bne.n	8002b30 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e019      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
 8002b24:	40021000 	.word	0x40021000
 8002b28:	40007000 	.word	0x40007000
 8002b2c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b30:	4b0b      	ldr	r3, [pc, #44]	@ (8002b60 <HAL_RCC_OscConfig+0x500>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d106      	bne.n	8002b52 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d001      	beq.n	8002b56 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e000      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3718      	adds	r7, #24
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40021000 	.word	0x40021000

08002b64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e0d0      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b78:	4b6a      	ldr	r3, [pc, #424]	@ (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0307 	and.w	r3, r3, #7
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d910      	bls.n	8002ba8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b86:	4b67      	ldr	r3, [pc, #412]	@ (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f023 0207 	bic.w	r2, r3, #7
 8002b8e:	4965      	ldr	r1, [pc, #404]	@ (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b96:	4b63      	ldr	r3, [pc, #396]	@ (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d001      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e0b8      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d020      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0304 	and.w	r3, r3, #4
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d005      	beq.n	8002bcc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bc0:	4b59      	ldr	r3, [pc, #356]	@ (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	4a58      	ldr	r2, [pc, #352]	@ (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002bca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0308 	and.w	r3, r3, #8
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d005      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bd8:	4b53      	ldr	r3, [pc, #332]	@ (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	4a52      	ldr	r2, [pc, #328]	@ (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002bde:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002be2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002be4:	4b50      	ldr	r3, [pc, #320]	@ (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	494d      	ldr	r1, [pc, #308]	@ (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d040      	beq.n	8002c84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d107      	bne.n	8002c1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c0a:	4b47      	ldr	r3, [pc, #284]	@ (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d115      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e07f      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d107      	bne.n	8002c32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c22:	4b41      	ldr	r3, [pc, #260]	@ (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d109      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e073      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c32:	4b3d      	ldr	r3, [pc, #244]	@ (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e06b      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c42:	4b39      	ldr	r3, [pc, #228]	@ (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f023 0203 	bic.w	r2, r3, #3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	4936      	ldr	r1, [pc, #216]	@ (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c54:	f7fd fccc 	bl	80005f0 <HAL_GetTick>
 8002c58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c5a:	e00a      	b.n	8002c72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c5c:	f7fd fcc8 	bl	80005f0 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e053      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c72:	4b2d      	ldr	r3, [pc, #180]	@ (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f003 020c 	and.w	r2, r3, #12
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d1eb      	bne.n	8002c5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c84:	4b27      	ldr	r3, [pc, #156]	@ (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0307 	and.w	r3, r3, #7
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d210      	bcs.n	8002cb4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c92:	4b24      	ldr	r3, [pc, #144]	@ (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f023 0207 	bic.w	r2, r3, #7
 8002c9a:	4922      	ldr	r1, [pc, #136]	@ (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ca2:	4b20      	ldr	r3, [pc, #128]	@ (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d001      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e032      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d008      	beq.n	8002cd2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cc0:	4b19      	ldr	r3, [pc, #100]	@ (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	4916      	ldr	r1, [pc, #88]	@ (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0308 	and.w	r3, r3, #8
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d009      	beq.n	8002cf2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cde:	4b12      	ldr	r3, [pc, #72]	@ (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	490e      	ldr	r1, [pc, #56]	@ (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cf2:	f000 f821 	bl	8002d38 <HAL_RCC_GetSysClockFreq>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	091b      	lsrs	r3, r3, #4
 8002cfe:	f003 030f 	and.w	r3, r3, #15
 8002d02:	490a      	ldr	r1, [pc, #40]	@ (8002d2c <HAL_RCC_ClockConfig+0x1c8>)
 8002d04:	5ccb      	ldrb	r3, [r1, r3]
 8002d06:	fa22 f303 	lsr.w	r3, r2, r3
 8002d0a:	4a09      	ldr	r2, [pc, #36]	@ (8002d30 <HAL_RCC_ClockConfig+0x1cc>)
 8002d0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d0e:	4b09      	ldr	r3, [pc, #36]	@ (8002d34 <HAL_RCC_ClockConfig+0x1d0>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fd fc2a 	bl	800056c <HAL_InitTick>

  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	40022000 	.word	0x40022000
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	080080c4 	.word	0x080080c4
 8002d30:	20000000 	.word	0x20000000
 8002d34:	20000004 	.word	0x20000004

08002d38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b087      	sub	sp, #28
 8002d3c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60fb      	str	r3, [r7, #12]
 8002d42:	2300      	movs	r3, #0
 8002d44:	60bb      	str	r3, [r7, #8]
 8002d46:	2300      	movs	r3, #0
 8002d48:	617b      	str	r3, [r7, #20]
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d52:	4b1e      	ldr	r3, [pc, #120]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x94>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f003 030c 	and.w	r3, r3, #12
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	d002      	beq.n	8002d68 <HAL_RCC_GetSysClockFreq+0x30>
 8002d62:	2b08      	cmp	r3, #8
 8002d64:	d003      	beq.n	8002d6e <HAL_RCC_GetSysClockFreq+0x36>
 8002d66:	e027      	b.n	8002db8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d68:	4b19      	ldr	r3, [pc, #100]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d6a:	613b      	str	r3, [r7, #16]
      break;
 8002d6c:	e027      	b.n	8002dbe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	0c9b      	lsrs	r3, r3, #18
 8002d72:	f003 030f 	and.w	r3, r3, #15
 8002d76:	4a17      	ldr	r2, [pc, #92]	@ (8002dd4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d78:	5cd3      	ldrb	r3, [r2, r3]
 8002d7a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d010      	beq.n	8002da8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d86:	4b11      	ldr	r3, [pc, #68]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x94>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	0c5b      	lsrs	r3, r3, #17
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	4a11      	ldr	r2, [pc, #68]	@ (8002dd8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d92:	5cd3      	ldrb	r3, [r2, r3]
 8002d94:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a0d      	ldr	r2, [pc, #52]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d9a:	fb03 f202 	mul.w	r2, r3, r2
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da4:	617b      	str	r3, [r7, #20]
 8002da6:	e004      	b.n	8002db2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a0c      	ldr	r2, [pc, #48]	@ (8002ddc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002dac:	fb02 f303 	mul.w	r3, r2, r3
 8002db0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	613b      	str	r3, [r7, #16]
      break;
 8002db6:	e002      	b.n	8002dbe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002db8:	4b05      	ldr	r3, [pc, #20]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002dba:	613b      	str	r3, [r7, #16]
      break;
 8002dbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dbe:	693b      	ldr	r3, [r7, #16]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	371c      	adds	r7, #28
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bc80      	pop	{r7}
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	007a1200 	.word	0x007a1200
 8002dd4:	080080d4 	.word	0x080080d4
 8002dd8:	080080e4 	.word	0x080080e4
 8002ddc:	003d0900 	.word	0x003d0900

08002de0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002de8:	4b0a      	ldr	r3, [pc, #40]	@ (8002e14 <RCC_Delay+0x34>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a0a      	ldr	r2, [pc, #40]	@ (8002e18 <RCC_Delay+0x38>)
 8002dee:	fba2 2303 	umull	r2, r3, r2, r3
 8002df2:	0a5b      	lsrs	r3, r3, #9
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	fb02 f303 	mul.w	r3, r2, r3
 8002dfa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002dfc:	bf00      	nop
  }
  while (Delay --);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	1e5a      	subs	r2, r3, #1
 8002e02:	60fa      	str	r2, [r7, #12]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1f9      	bne.n	8002dfc <RCC_Delay+0x1c>
}
 8002e08:	bf00      	nop
 8002e0a:	bf00      	nop
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bc80      	pop	{r7}
 8002e12:	4770      	bx	lr
 8002e14:	20000000 	.word	0x20000000
 8002e18:	10624dd3 	.word	0x10624dd3

08002e1c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002e24:	2300      	movs	r3, #0
 8002e26:	613b      	str	r3, [r7, #16]
 8002e28:	2300      	movs	r3, #0
 8002e2a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d07d      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e3c:	4b4f      	ldr	r3, [pc, #316]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e3e:	69db      	ldr	r3, [r3, #28]
 8002e40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10d      	bne.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e48:	4b4c      	ldr	r3, [pc, #304]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e4a:	69db      	ldr	r3, [r3, #28]
 8002e4c:	4a4b      	ldr	r2, [pc, #300]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e52:	61d3      	str	r3, [r2, #28]
 8002e54:	4b49      	ldr	r3, [pc, #292]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e56:	69db      	ldr	r3, [r3, #28]
 8002e58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e5c:	60bb      	str	r3, [r7, #8]
 8002e5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e60:	2301      	movs	r3, #1
 8002e62:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e64:	4b46      	ldr	r3, [pc, #280]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d118      	bne.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e70:	4b43      	ldr	r3, [pc, #268]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a42      	ldr	r2, [pc, #264]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e7c:	f7fd fbb8 	bl	80005f0 <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e82:	e008      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e84:	f7fd fbb4 	bl	80005f0 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b64      	cmp	r3, #100	@ 0x64
 8002e90:	d901      	bls.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e06d      	b.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e96:	4b3a      	ldr	r3, [pc, #232]	@ (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d0f0      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ea2:	4b36      	ldr	r3, [pc, #216]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002eaa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d02e      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d027      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ec0:	4b2e      	ldr	r3, [pc, #184]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ec8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002eca:	4b2e      	ldr	r3, [pc, #184]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ecc:	2201      	movs	r2, #1
 8002ece:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ed0:	4b2c      	ldr	r3, [pc, #176]	@ (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ed6:	4a29      	ldr	r2, [pc, #164]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d014      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee6:	f7fd fb83 	bl	80005f0 <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eec:	e00a      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eee:	f7fd fb7f 	bl	80005f0 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e036      	b.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f04:	4b1d      	ldr	r3, [pc, #116]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d0ee      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f10:	4b1a      	ldr	r3, [pc, #104]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	4917      	ldr	r1, [pc, #92]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f22:	7dfb      	ldrb	r3, [r7, #23]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d105      	bne.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f28:	4b14      	ldr	r3, [pc, #80]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f2a:	69db      	ldr	r3, [r3, #28]
 8002f2c:	4a13      	ldr	r2, [pc, #76]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f32:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d008      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f40:	4b0e      	ldr	r3, [pc, #56]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	490b      	ldr	r1, [pc, #44]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0310 	and.w	r3, r3, #16
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d008      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f5e:	4b07      	ldr	r3, [pc, #28]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	4904      	ldr	r1, [pc, #16]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3718      	adds	r7, #24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	40007000 	.word	0x40007000
 8002f84:	42420440 	.word	0x42420440

08002f88 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	4638      	mov	r0, r7
 8002f92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3714      	adds	r7, #20
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bc80      	pop	{r7}
 8002fa0:	4770      	bx	lr

08002fa2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b085      	sub	sp, #20
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002fb2:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8002fb6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	b29a      	uxth	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3714      	adds	r7, #20
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bc80      	pop	{r7}
 8002fcc:	4770      	bx	lr

08002fce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b085      	sub	sp, #20
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002fd6:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8002fda:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	4013      	ands	r3, r2
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3714      	adds	r7, #20
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bc80      	pop	{r7}
 8003000:	4770      	bx	lr

08003002 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
 800300a:	460b      	mov	r3, r1
 800300c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	bc80      	pop	{r7}
 8003018:	4770      	bx	lr

0800301a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800301a:	b480      	push	{r7}
 800301c:	b085      	sub	sp, #20
 800301e:	af00      	add	r7, sp, #0
 8003020:	60f8      	str	r0, [r7, #12]
 8003022:	4638      	mov	r0, r7
 8003024:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2201      	movs	r2, #1
 800302c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3714      	adds	r7, #20
 800304e:	46bd      	mov	sp, r7
 8003050:	bc80      	pop	{r7}
 8003052:	4770      	bx	lr

08003054 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003054:	b480      	push	{r7}
 8003056:	b09d      	sub	sp, #116	@ 0x74
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800305e:	2300      	movs	r3, #0
 8003060:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	4413      	add	r3, r2
 800306e:	881b      	ldrh	r3, [r3, #0]
 8003070:	b29b      	uxth	r3, r3
 8003072:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8003076:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800307a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	78db      	ldrb	r3, [r3, #3]
 8003082:	2b03      	cmp	r3, #3
 8003084:	d81f      	bhi.n	80030c6 <USB_ActivateEndpoint+0x72>
 8003086:	a201      	add	r2, pc, #4	@ (adr r2, 800308c <USB_ActivateEndpoint+0x38>)
 8003088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800308c:	0800309d 	.word	0x0800309d
 8003090:	080030b9 	.word	0x080030b9
 8003094:	080030cf 	.word	0x080030cf
 8003098:	080030ab 	.word	0x080030ab
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800309c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80030a0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030a4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80030a8:	e012      	b.n	80030d0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80030aa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80030ae:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80030b2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80030b6:	e00b      	b.n	80030d0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80030b8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80030bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030c0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80030c4:	e004      	b.n	80030d0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80030cc:	e000      	b.n	80030d0 <USB_ActivateEndpoint+0x7c>
      break;
 80030ce:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	441a      	add	r2, r3
 80030da:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80030de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80030e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80030e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4413      	add	r3, r2
 80030fc:	881b      	ldrh	r3, [r3, #0]
 80030fe:	b29b      	uxth	r3, r3
 8003100:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003104:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003108:	b29b      	uxth	r3, r3
 800310a:	683a      	ldr	r2, [r7, #0]
 800310c:	7812      	ldrb	r2, [r2, #0]
 800310e:	4313      	orrs	r3, r2
 8003110:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	441a      	add	r2, r3
 800311e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8003122:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003126:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800312a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800312e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003132:	b29b      	uxth	r3, r3
 8003134:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	7b1b      	ldrb	r3, [r3, #12]
 800313a:	2b00      	cmp	r3, #0
 800313c:	f040 8178 	bne.w	8003430 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	785b      	ldrb	r3, [r3, #1]
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 8084 	beq.w	8003252 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	61bb      	str	r3, [r7, #24]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003154:	b29b      	uxth	r3, r3
 8003156:	461a      	mov	r2, r3
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	4413      	add	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	011a      	lsls	r2, r3, #4
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	4413      	add	r3, r2
 8003168:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800316c:	617b      	str	r3, [r7, #20]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	88db      	ldrh	r3, [r3, #6]
 8003172:	085b      	lsrs	r3, r3, #1
 8003174:	b29b      	uxth	r3, r3
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	b29a      	uxth	r2, r3
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	881b      	ldrh	r3, [r3, #0]
 800318a:	827b      	strh	r3, [r7, #18]
 800318c:	8a7b      	ldrh	r3, [r7, #18]
 800318e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003192:	2b00      	cmp	r3, #0
 8003194:	d01b      	beq.n	80031ce <USB_ActivateEndpoint+0x17a>
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4413      	add	r3, r2
 80031a0:	881b      	ldrh	r3, [r3, #0]
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031ac:	823b      	strh	r3, [r7, #16]
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	441a      	add	r2, r3
 80031b8:	8a3b      	ldrh	r3, [r7, #16]
 80031ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80031be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80031c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031c6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	78db      	ldrb	r3, [r3, #3]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d020      	beq.n	8003218 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4413      	add	r3, r2
 80031e0:	881b      	ldrh	r3, [r3, #0]
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031ec:	81bb      	strh	r3, [r7, #12]
 80031ee:	89bb      	ldrh	r3, [r7, #12]
 80031f0:	f083 0320 	eor.w	r3, r3, #32
 80031f4:	81bb      	strh	r3, [r7, #12]
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	441a      	add	r2, r3
 8003200:	89bb      	ldrh	r3, [r7, #12]
 8003202:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003206:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800320a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800320e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003212:	b29b      	uxth	r3, r3
 8003214:	8013      	strh	r3, [r2, #0]
 8003216:	e2d5      	b.n	80037c4 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4413      	add	r3, r2
 8003222:	881b      	ldrh	r3, [r3, #0]
 8003224:	b29b      	uxth	r3, r3
 8003226:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800322a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800322e:	81fb      	strh	r3, [r7, #14]
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	441a      	add	r2, r3
 800323a:	89fb      	ldrh	r3, [r7, #14]
 800323c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003240:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003244:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003248:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800324c:	b29b      	uxth	r3, r3
 800324e:	8013      	strh	r3, [r2, #0]
 8003250:	e2b8      	b.n	80037c4 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	633b      	str	r3, [r7, #48]	@ 0x30
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800325c:	b29b      	uxth	r3, r3
 800325e:	461a      	mov	r2, r3
 8003260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003262:	4413      	add	r3, r2
 8003264:	633b      	str	r3, [r7, #48]	@ 0x30
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	011a      	lsls	r2, r3, #4
 800326c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800326e:	4413      	add	r3, r2
 8003270:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8003274:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	88db      	ldrh	r3, [r3, #6]
 800327a:	085b      	lsrs	r3, r3, #1
 800327c:	b29b      	uxth	r3, r3
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	b29a      	uxth	r2, r3
 8003282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003284:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	62bb      	str	r3, [r7, #40]	@ 0x28
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003290:	b29b      	uxth	r3, r3
 8003292:	461a      	mov	r2, r3
 8003294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003296:	4413      	add	r3, r2
 8003298:	62bb      	str	r3, [r7, #40]	@ 0x28
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	011a      	lsls	r2, r3, #4
 80032a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032a2:	4413      	add	r3, r2
 80032a4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80032a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80032aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ac:	881b      	ldrh	r3, [r3, #0]
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b8:	801a      	strh	r2, [r3, #0]
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	2b3e      	cmp	r3, #62	@ 0x3e
 80032c0:	d91d      	bls.n	80032fe <USB_ActivateEndpoint+0x2aa>
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	095b      	lsrs	r3, r3, #5
 80032c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	f003 031f 	and.w	r3, r3, #31
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d102      	bne.n	80032dc <USB_ActivateEndpoint+0x288>
 80032d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80032d8:	3b01      	subs	r3, #1
 80032da:	66bb      	str	r3, [r7, #104]	@ 0x68
 80032dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032de:	881b      	ldrh	r3, [r3, #0]
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	029b      	lsls	r3, r3, #10
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	4313      	orrs	r3, r2
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032fa:	801a      	strh	r2, [r3, #0]
 80032fc:	e026      	b.n	800334c <USB_ActivateEndpoint+0x2f8>
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10a      	bne.n	800331c <USB_ActivateEndpoint+0x2c8>
 8003306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003308:	881b      	ldrh	r3, [r3, #0]
 800330a:	b29b      	uxth	r3, r3
 800330c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003310:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003314:	b29a      	uxth	r2, r3
 8003316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003318:	801a      	strh	r2, [r3, #0]
 800331a:	e017      	b.n	800334c <USB_ActivateEndpoint+0x2f8>
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	085b      	lsrs	r3, r3, #1
 8003322:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b00      	cmp	r3, #0
 800332e:	d002      	beq.n	8003336 <USB_ActivateEndpoint+0x2e2>
 8003330:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003332:	3301      	adds	r3, #1
 8003334:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003338:	881b      	ldrh	r3, [r3, #0]
 800333a:	b29a      	uxth	r2, r3
 800333c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800333e:	b29b      	uxth	r3, r3
 8003340:	029b      	lsls	r3, r3, #10
 8003342:	b29b      	uxth	r3, r3
 8003344:	4313      	orrs	r3, r2
 8003346:	b29a      	uxth	r2, r3
 8003348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800334a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4413      	add	r3, r2
 8003356:	881b      	ldrh	r3, [r3, #0]
 8003358:	847b      	strh	r3, [r7, #34]	@ 0x22
 800335a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800335c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d01b      	beq.n	800339c <USB_ActivateEndpoint+0x348>
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4413      	add	r3, r2
 800336e:	881b      	ldrh	r3, [r3, #0]
 8003370:	b29b      	uxth	r3, r3
 8003372:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003376:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800337a:	843b      	strh	r3, [r7, #32]
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	441a      	add	r2, r3
 8003386:	8c3b      	ldrh	r3, [r7, #32]
 8003388:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800338c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003390:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003394:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003398:	b29b      	uxth	r3, r3
 800339a:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d124      	bne.n	80033ee <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	4413      	add	r3, r2
 80033ae:	881b      	ldrh	r3, [r3, #0]
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80033b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033ba:	83bb      	strh	r3, [r7, #28]
 80033bc:	8bbb      	ldrh	r3, [r7, #28]
 80033be:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80033c2:	83bb      	strh	r3, [r7, #28]
 80033c4:	8bbb      	ldrh	r3, [r7, #28]
 80033c6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80033ca:	83bb      	strh	r3, [r7, #28]
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	441a      	add	r2, r3
 80033d6:	8bbb      	ldrh	r3, [r7, #28]
 80033d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80033dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80033e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	8013      	strh	r3, [r2, #0]
 80033ec:	e1ea      	b.n	80037c4 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4413      	add	r3, r2
 80033f8:	881b      	ldrh	r3, [r3, #0]
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003400:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003404:	83fb      	strh	r3, [r7, #30]
 8003406:	8bfb      	ldrh	r3, [r7, #30]
 8003408:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800340c:	83fb      	strh	r3, [r7, #30]
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	441a      	add	r2, r3
 8003418:	8bfb      	ldrh	r3, [r7, #30]
 800341a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800341e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003422:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003426:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800342a:	b29b      	uxth	r3, r3
 800342c:	8013      	strh	r3, [r2, #0]
 800342e:	e1c9      	b.n	80037c4 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	78db      	ldrb	r3, [r3, #3]
 8003434:	2b02      	cmp	r3, #2
 8003436:	d11e      	bne.n	8003476 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4413      	add	r3, r2
 8003442:	881b      	ldrh	r3, [r3, #0]
 8003444:	b29b      	uxth	r3, r3
 8003446:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800344a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800344e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	441a      	add	r2, r3
 800345c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8003460:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003464:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003468:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800346c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003470:	b29b      	uxth	r3, r3
 8003472:	8013      	strh	r3, [r2, #0]
 8003474:	e01d      	b.n	80034b2 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	4413      	add	r3, r2
 8003480:	881b      	ldrh	r3, [r3, #0]
 8003482:	b29b      	uxth	r3, r3
 8003484:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8003488:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800348c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	441a      	add	r2, r3
 800349a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800349e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80034a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80034a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034bc:	b29b      	uxth	r3, r3
 80034be:	461a      	mov	r2, r3
 80034c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034c2:	4413      	add	r3, r2
 80034c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	011a      	lsls	r2, r3, #4
 80034cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034ce:	4413      	add	r3, r2
 80034d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80034d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	891b      	ldrh	r3, [r3, #8]
 80034da:	085b      	lsrs	r3, r3, #1
 80034dc:	b29b      	uxth	r3, r3
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80034e4:	801a      	strh	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	461a      	mov	r2, r3
 80034f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034f6:	4413      	add	r3, r2
 80034f8:	657b      	str	r3, [r7, #84]	@ 0x54
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	011a      	lsls	r2, r3, #4
 8003500:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003502:	4413      	add	r3, r2
 8003504:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8003508:	653b      	str	r3, [r7, #80]	@ 0x50
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	895b      	ldrh	r3, [r3, #10]
 800350e:	085b      	lsrs	r3, r3, #1
 8003510:	b29b      	uxth	r3, r3
 8003512:	005b      	lsls	r3, r3, #1
 8003514:	b29a      	uxth	r2, r3
 8003516:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003518:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	785b      	ldrb	r3, [r3, #1]
 800351e:	2b00      	cmp	r3, #0
 8003520:	f040 8093 	bne.w	800364a <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4413      	add	r3, r2
 800352e:	881b      	ldrh	r3, [r3, #0]
 8003530:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8003534:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003538:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d01b      	beq.n	8003578 <USB_ActivateEndpoint+0x524>
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	4413      	add	r3, r2
 800354a:	881b      	ldrh	r3, [r3, #0]
 800354c:	b29b      	uxth	r3, r3
 800354e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003552:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003556:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	441a      	add	r2, r3
 8003562:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003564:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003568:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800356c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003570:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003574:	b29b      	uxth	r3, r3
 8003576:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4413      	add	r3, r2
 8003582:	881b      	ldrh	r3, [r3, #0]
 8003584:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8003586:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8003588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800358c:	2b00      	cmp	r3, #0
 800358e:	d01b      	beq.n	80035c8 <USB_ActivateEndpoint+0x574>
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4413      	add	r3, r2
 800359a:	881b      	ldrh	r3, [r3, #0]
 800359c:	b29b      	uxth	r3, r3
 800359e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035a6:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	441a      	add	r2, r3
 80035b2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80035b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80035b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80035bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035c0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4413      	add	r3, r2
 80035d2:	881b      	ldrh	r3, [r3, #0]
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80035da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035de:	873b      	strh	r3, [r7, #56]	@ 0x38
 80035e0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80035e2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80035e6:	873b      	strh	r3, [r7, #56]	@ 0x38
 80035e8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80035ea:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80035ee:	873b      	strh	r3, [r7, #56]	@ 0x38
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	441a      	add	r2, r3
 80035fa:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80035fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003600:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003604:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003608:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800360c:	b29b      	uxth	r3, r3
 800360e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	881b      	ldrh	r3, [r3, #0]
 800361c:	b29b      	uxth	r3, r3
 800361e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003622:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003626:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	441a      	add	r2, r3
 8003632:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003634:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003638:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800363c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003640:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003644:	b29b      	uxth	r3, r3
 8003646:	8013      	strh	r3, [r2, #0]
 8003648:	e0bc      	b.n	80037c4 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4413      	add	r3, r2
 8003654:	881b      	ldrh	r3, [r3, #0]
 8003656:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800365a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800365e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d01d      	beq.n	80036a2 <USB_ActivateEndpoint+0x64e>
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	4413      	add	r3, r2
 8003670:	881b      	ldrh	r3, [r3, #0]
 8003672:	b29b      	uxth	r3, r3
 8003674:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003678:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800367c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	441a      	add	r2, r3
 800368a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800368e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003692:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003696:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800369a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800369e:	b29b      	uxth	r3, r3
 80036a0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	4413      	add	r3, r2
 80036ac:	881b      	ldrh	r3, [r3, #0]
 80036ae:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80036b2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80036b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d01d      	beq.n	80036fa <USB_ActivateEndpoint+0x6a6>
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4413      	add	r3, r2
 80036c8:	881b      	ldrh	r3, [r3, #0]
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036d4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	441a      	add	r2, r3
 80036e2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80036e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80036ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80036ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036f2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	78db      	ldrb	r3, [r3, #3]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d024      	beq.n	800374c <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	4413      	add	r3, r2
 800370c:	881b      	ldrh	r3, [r3, #0]
 800370e:	b29b      	uxth	r3, r3
 8003710:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003714:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003718:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800371c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8003720:	f083 0320 	eor.w	r3, r3, #32
 8003724:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	441a      	add	r2, r3
 8003732:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8003736:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800373a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800373e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003742:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003746:	b29b      	uxth	r3, r3
 8003748:	8013      	strh	r3, [r2, #0]
 800374a:	e01d      	b.n	8003788 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4413      	add	r3, r2
 8003756:	881b      	ldrh	r3, [r3, #0]
 8003758:	b29b      	uxth	r3, r3
 800375a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800375e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003762:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	441a      	add	r2, r3
 8003770:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003774:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003778:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800377c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003780:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003784:	b29b      	uxth	r3, r3
 8003786:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	4413      	add	r3, r2
 8003792:	881b      	ldrh	r3, [r3, #0]
 8003794:	b29b      	uxth	r3, r3
 8003796:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800379a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800379e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	441a      	add	r2, r3
 80037ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80037b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80037b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80037b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80037c4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3774      	adds	r7, #116	@ 0x74
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bc80      	pop	{r7}
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop

080037d4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b08d      	sub	sp, #52	@ 0x34
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	7b1b      	ldrb	r3, [r3, #12]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f040 808e 	bne.w	8003904 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	785b      	ldrb	r3, [r3, #1]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d044      	beq.n	800387a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	4413      	add	r3, r2
 80037fa:	881b      	ldrh	r3, [r3, #0]
 80037fc:	81bb      	strh	r3, [r7, #12]
 80037fe:	89bb      	ldrh	r3, [r7, #12]
 8003800:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003804:	2b00      	cmp	r3, #0
 8003806:	d01b      	beq.n	8003840 <USB_DeactivateEndpoint+0x6c>
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4413      	add	r3, r2
 8003812:	881b      	ldrh	r3, [r3, #0]
 8003814:	b29b      	uxth	r3, r3
 8003816:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800381a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800381e:	817b      	strh	r3, [r7, #10]
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	441a      	add	r2, r3
 800382a:	897b      	ldrh	r3, [r7, #10]
 800382c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003830:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003834:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003838:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800383c:	b29b      	uxth	r3, r3
 800383e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	4413      	add	r3, r2
 800384a:	881b      	ldrh	r3, [r3, #0]
 800384c:	b29b      	uxth	r3, r3
 800384e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003852:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003856:	813b      	strh	r3, [r7, #8]
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	441a      	add	r2, r3
 8003862:	893b      	ldrh	r3, [r7, #8]
 8003864:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003868:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800386c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003870:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003874:	b29b      	uxth	r3, r3
 8003876:	8013      	strh	r3, [r2, #0]
 8003878:	e192      	b.n	8003ba0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	4413      	add	r3, r2
 8003884:	881b      	ldrh	r3, [r3, #0]
 8003886:	827b      	strh	r3, [r7, #18]
 8003888:	8a7b      	ldrh	r3, [r7, #18]
 800388a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d01b      	beq.n	80038ca <USB_DeactivateEndpoint+0xf6>
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	4413      	add	r3, r2
 800389c:	881b      	ldrh	r3, [r3, #0]
 800389e:	b29b      	uxth	r3, r3
 80038a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038a8:	823b      	strh	r3, [r7, #16]
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	441a      	add	r2, r3
 80038b4:	8a3b      	ldrh	r3, [r7, #16]
 80038b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80038ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80038be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80038c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	4413      	add	r3, r2
 80038d4:	881b      	ldrh	r3, [r3, #0]
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80038dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038e0:	81fb      	strh	r3, [r7, #14]
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	441a      	add	r2, r3
 80038ec:	89fb      	ldrh	r3, [r7, #14]
 80038ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80038f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80038f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038fe:	b29b      	uxth	r3, r3
 8003900:	8013      	strh	r3, [r2, #0]
 8003902:	e14d      	b.n	8003ba0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	785b      	ldrb	r3, [r3, #1]
 8003908:	2b00      	cmp	r3, #0
 800390a:	f040 80a5 	bne.w	8003a58 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	4413      	add	r3, r2
 8003918:	881b      	ldrh	r3, [r3, #0]
 800391a:	843b      	strh	r3, [r7, #32]
 800391c:	8c3b      	ldrh	r3, [r7, #32]
 800391e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d01b      	beq.n	800395e <USB_DeactivateEndpoint+0x18a>
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4413      	add	r3, r2
 8003930:	881b      	ldrh	r3, [r3, #0]
 8003932:	b29b      	uxth	r3, r3
 8003934:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003938:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800393c:	83fb      	strh	r3, [r7, #30]
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	441a      	add	r2, r3
 8003948:	8bfb      	ldrh	r3, [r7, #30]
 800394a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800394e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003952:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003956:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800395a:	b29b      	uxth	r3, r3
 800395c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	4413      	add	r3, r2
 8003968:	881b      	ldrh	r3, [r3, #0]
 800396a:	83bb      	strh	r3, [r7, #28]
 800396c:	8bbb      	ldrh	r3, [r7, #28]
 800396e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003972:	2b00      	cmp	r3, #0
 8003974:	d01b      	beq.n	80039ae <USB_DeactivateEndpoint+0x1da>
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	4413      	add	r3, r2
 8003980:	881b      	ldrh	r3, [r3, #0]
 8003982:	b29b      	uxth	r3, r3
 8003984:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003988:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800398c:	837b      	strh	r3, [r7, #26]
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	441a      	add	r2, r3
 8003998:	8b7b      	ldrh	r3, [r7, #26]
 800399a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800399e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80039a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039a6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	4413      	add	r3, r2
 80039b8:	881b      	ldrh	r3, [r3, #0]
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039c4:	833b      	strh	r3, [r7, #24]
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	441a      	add	r2, r3
 80039d0:	8b3b      	ldrh	r3, [r7, #24]
 80039d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80039d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80039da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039de:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4413      	add	r3, r2
 80039f0:	881b      	ldrh	r3, [r3, #0]
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80039f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039fc:	82fb      	strh	r3, [r7, #22]
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	441a      	add	r2, r3
 8003a08:	8afb      	ldrh	r3, [r7, #22]
 8003a0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	4413      	add	r3, r2
 8003a28:	881b      	ldrh	r3, [r3, #0]
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a34:	82bb      	strh	r3, [r7, #20]
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	441a      	add	r2, r3
 8003a40:	8abb      	ldrh	r3, [r7, #20]
 8003a42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	8013      	strh	r3, [r2, #0]
 8003a56:	e0a3      	b.n	8003ba0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	4413      	add	r3, r2
 8003a62:	881b      	ldrh	r3, [r3, #0]
 8003a64:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8003a66:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003a68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d01b      	beq.n	8003aa8 <USB_DeactivateEndpoint+0x2d4>
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	4413      	add	r3, r2
 8003a7a:	881b      	ldrh	r3, [r3, #0]
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a86:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	441a      	add	r2, r3
 8003a92:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003a94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a9c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003aa0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	4413      	add	r3, r2
 8003ab2:	881b      	ldrh	r3, [r3, #0]
 8003ab4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8003ab6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003ab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d01b      	beq.n	8003af8 <USB_DeactivateEndpoint+0x324>
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	881b      	ldrh	r3, [r3, #0]
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ad2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ad6:	853b      	strh	r3, [r7, #40]	@ 0x28
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	441a      	add	r2, r3
 8003ae2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003ae4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ae8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003aec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003af0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	881b      	ldrh	r3, [r3, #0]
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b0e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	441a      	add	r2, r3
 8003b1a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003b1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b24:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4413      	add	r3, r2
 8003b3a:	881b      	ldrh	r3, [r3, #0]
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b46:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	441a      	add	r2, r3
 8003b52:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003b54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4413      	add	r3, r2
 8003b72:	881b      	ldrh	r3, [r3, #0]
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b7e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	441a      	add	r2, r3
 8003b8a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003b8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3734      	adds	r7, #52	@ 0x34
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bc80      	pop	{r7}
 8003baa:	4770      	bx	lr

08003bac <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b0c2      	sub	sp, #264	@ 0x108
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003bb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003bba:	6018      	str	r0, [r3, #0]
 8003bbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003bc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003bc4:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003bc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003bca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	785b      	ldrb	r3, [r3, #1]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	f040 86b7 	bne.w	8004946 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003bd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003bdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	699a      	ldr	r2, [r3, #24]
 8003be4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003be8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d908      	bls.n	8003c06 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8003bf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003bf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003c04:	e007      	b.n	8003c16 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8003c06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003c16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	7b1b      	ldrb	r3, [r3, #12]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d13a      	bne.n	8003c9c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003c26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6959      	ldr	r1, [r3, #20]
 8003c32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	88da      	ldrh	r2, [r3, #6]
 8003c3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8003c48:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8003c4c:	6800      	ldr	r0, [r0, #0]
 8003c4e:	f001 fc9c 	bl	800558a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003c52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	613b      	str	r3, [r7, #16]
 8003c5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	461a      	mov	r2, r3
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	4413      	add	r3, r2
 8003c74:	613b      	str	r3, [r7, #16]
 8003c76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	011a      	lsls	r2, r3, #4
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	4413      	add	r3, r2
 8003c88:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003c8c:	60fb      	str	r3, [r7, #12]
 8003c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	801a      	strh	r2, [r3, #0]
 8003c98:	f000 be1f 	b.w	80048da <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003c9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ca0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	78db      	ldrb	r3, [r3, #3]
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	f040 8462 	bne.w	8004572 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8003cae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003cb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6a1a      	ldr	r2, [r3, #32]
 8003cba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003cbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	f240 83df 	bls.w	800448a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003ccc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003cd0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003cda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	4413      	add	r3, r2
 8003ce6:	881b      	ldrh	r3, [r3, #0]
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cf2:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8003cf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003cfa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	441a      	add	r2, r3
 8003d10:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8003d14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d1c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8003d20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003d28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	6a1a      	ldr	r2, [r3, #32]
 8003d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d38:	1ad2      	subs	r2, r2, r3
 8003d3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003d46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d4a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	4413      	add	r3, r2
 8003d60:	881b      	ldrh	r3, [r3, #0]
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 81c7 	beq.w	80040fc <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003d6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	785b      	ldrb	r3, [r3, #1]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d177      	bne.n	8003e7a <USB_EPStartXfer+0x2ce>
 8003d8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	461a      	mov	r2, r3
 8003da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003daa:	4413      	add	r3, r2
 8003dac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003dae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003db2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	011a      	lsls	r2, r3, #4
 8003dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dbe:	4413      	add	r3, r2
 8003dc0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003dc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc8:	881b      	ldrh	r3, [r3, #0]
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd4:	801a      	strh	r2, [r3, #0]
 8003dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dda:	2b3e      	cmp	r3, #62	@ 0x3e
 8003ddc:	d921      	bls.n	8003e22 <USB_EPStartXfer+0x276>
 8003dde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003de2:	095b      	lsrs	r3, r3, #5
 8003de4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dec:	f003 031f 	and.w	r3, r3, #31
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d104      	bne.n	8003dfe <USB_EPStartXfer+0x252>
 8003df4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e00:	881b      	ldrh	r3, [r3, #0]
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	029b      	lsls	r3, r3, #10
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1e:	801a      	strh	r2, [r3, #0]
 8003e20:	e050      	b.n	8003ec4 <USB_EPStartXfer+0x318>
 8003e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10a      	bne.n	8003e40 <USB_EPStartXfer+0x294>
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2c:	881b      	ldrh	r3, [r3, #0]
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e3c:	801a      	strh	r2, [r3, #0]
 8003e3e:	e041      	b.n	8003ec4 <USB_EPStartXfer+0x318>
 8003e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e44:	085b      	lsrs	r3, r3, #1
 8003e46:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d004      	beq.n	8003e60 <USB_EPStartXfer+0x2b4>
 8003e56:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e62:	881b      	ldrh	r3, [r3, #0]
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	029b      	lsls	r3, r3, #10
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	4313      	orrs	r3, r2
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e76:	801a      	strh	r2, [r3, #0]
 8003e78:	e024      	b.n	8003ec4 <USB_EPStartXfer+0x318>
 8003e7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	785b      	ldrb	r3, [r3, #1]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d11c      	bne.n	8003ec4 <USB_EPStartXfer+0x318>
 8003e8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e9e:	4413      	add	r3, r2
 8003ea0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ea2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ea6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	011a      	lsls	r2, r3, #4
 8003eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eb2:	4413      	add	r3, r2
 8003eb4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ebe:	b29a      	uxth	r2, r3
 8003ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ec2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003ec4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ec8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	895b      	ldrh	r3, [r3, #10]
 8003ed0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003ed4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ed8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	6959      	ldr	r1, [r3, #20]
 8003ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8003eea:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8003eee:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8003ef2:	6800      	ldr	r0, [r0, #0]
 8003ef4:	f001 fb49 	bl	800558a <USB_WritePMA>
            ep->xfer_buff += len;
 8003ef8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003efc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	695a      	ldr	r2, [r3, #20]
 8003f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f08:	441a      	add	r2, r3
 8003f0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003f16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6a1a      	ldr	r2, [r3, #32]
 8003f22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d90f      	bls.n	8003f52 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8003f32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6a1a      	ldr	r2, [r3, #32]
 8003f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f42:	1ad2      	subs	r2, r2, r3
 8003f44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	621a      	str	r2, [r3, #32]
 8003f50:	e00e      	b.n	8003f70 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8003f52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8003f62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003f70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	785b      	ldrb	r3, [r3, #1]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d177      	bne.n	8004070 <USB_EPStartXfer+0x4c4>
 8003f80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	61bb      	str	r3, [r7, #24]
 8003f8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	61bb      	str	r3, [r7, #24]
 8003fa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003fa8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	011a      	lsls	r2, r3, #4
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003fba:	617b      	str	r3, [r7, #20]
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	881b      	ldrh	r3, [r3, #0]
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	801a      	strh	r2, [r3, #0]
 8003fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fd0:	2b3e      	cmp	r3, #62	@ 0x3e
 8003fd2:	d921      	bls.n	8004018 <USB_EPStartXfer+0x46c>
 8003fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fd8:	095b      	lsrs	r3, r3, #5
 8003fda:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003fde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fe2:	f003 031f 	and.w	r3, r3, #31
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d104      	bne.n	8003ff4 <USB_EPStartXfer+0x448>
 8003fea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	881b      	ldrh	r3, [r3, #0]
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	029b      	lsls	r3, r3, #10
 8004002:	b29b      	uxth	r3, r3
 8004004:	4313      	orrs	r3, r2
 8004006:	b29b      	uxth	r3, r3
 8004008:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800400c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004010:	b29a      	uxth	r2, r3
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	801a      	strh	r2, [r3, #0]
 8004016:	e056      	b.n	80040c6 <USB_EPStartXfer+0x51a>
 8004018:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10a      	bne.n	8004036 <USB_EPStartXfer+0x48a>
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	881b      	ldrh	r3, [r3, #0]
 8004024:	b29b      	uxth	r3, r3
 8004026:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800402a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800402e:	b29a      	uxth	r2, r3
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	801a      	strh	r2, [r3, #0]
 8004034:	e047      	b.n	80040c6 <USB_EPStartXfer+0x51a>
 8004036:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800403a:	085b      	lsrs	r3, r3, #1
 800403c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004040:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004044:	f003 0301 	and.w	r3, r3, #1
 8004048:	2b00      	cmp	r3, #0
 800404a:	d004      	beq.n	8004056 <USB_EPStartXfer+0x4aa>
 800404c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004050:	3301      	adds	r3, #1
 8004052:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	881b      	ldrh	r3, [r3, #0]
 800405a:	b29a      	uxth	r2, r3
 800405c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004060:	b29b      	uxth	r3, r3
 8004062:	029b      	lsls	r3, r3, #10
 8004064:	b29b      	uxth	r3, r3
 8004066:	4313      	orrs	r3, r2
 8004068:	b29a      	uxth	r2, r3
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	801a      	strh	r2, [r3, #0]
 800406e:	e02a      	b.n	80040c6 <USB_EPStartXfer+0x51a>
 8004070:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004074:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	785b      	ldrb	r3, [r3, #1]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d122      	bne.n	80040c6 <USB_EPStartXfer+0x51a>
 8004080:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004084:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	623b      	str	r3, [r7, #32]
 800408c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004090:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800409a:	b29b      	uxth	r3, r3
 800409c:	461a      	mov	r2, r3
 800409e:	6a3b      	ldr	r3, [r7, #32]
 80040a0:	4413      	add	r3, r2
 80040a2:	623b      	str	r3, [r7, #32]
 80040a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80040a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	011a      	lsls	r2, r3, #4
 80040b2:	6a3b      	ldr	r3, [r7, #32]
 80040b4:	4413      	add	r3, r2
 80040b6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80040ba:	61fb      	str	r3, [r7, #28]
 80040bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80040c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80040ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	891b      	ldrh	r3, [r3, #8]
 80040d2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80040d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80040da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	6959      	ldr	r1, [r3, #20]
 80040e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80040ec:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80040f0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80040f4:	6800      	ldr	r0, [r0, #0]
 80040f6:	f001 fa48 	bl	800558a <USB_WritePMA>
 80040fa:	e3ee      	b.n	80048da <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80040fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004100:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	785b      	ldrb	r3, [r3, #1]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d177      	bne.n	80041fc <USB_EPStartXfer+0x650>
 800410c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004110:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004118:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800411c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004126:	b29b      	uxth	r3, r3
 8004128:	461a      	mov	r2, r3
 800412a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800412c:	4413      	add	r3, r2
 800412e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004130:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004134:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	011a      	lsls	r2, r3, #4
 800413e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004140:	4413      	add	r3, r2
 8004142:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004146:	647b      	str	r3, [r7, #68]	@ 0x44
 8004148:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800414a:	881b      	ldrh	r3, [r3, #0]
 800414c:	b29b      	uxth	r3, r3
 800414e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004152:	b29a      	uxth	r2, r3
 8004154:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004156:	801a      	strh	r2, [r3, #0]
 8004158:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800415c:	2b3e      	cmp	r3, #62	@ 0x3e
 800415e:	d921      	bls.n	80041a4 <USB_EPStartXfer+0x5f8>
 8004160:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004164:	095b      	lsrs	r3, r3, #5
 8004166:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800416a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800416e:	f003 031f 	and.w	r3, r3, #31
 8004172:	2b00      	cmp	r3, #0
 8004174:	d104      	bne.n	8004180 <USB_EPStartXfer+0x5d4>
 8004176:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800417a:	3b01      	subs	r3, #1
 800417c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004180:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004182:	881b      	ldrh	r3, [r3, #0]
 8004184:	b29a      	uxth	r2, r3
 8004186:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800418a:	b29b      	uxth	r3, r3
 800418c:	029b      	lsls	r3, r3, #10
 800418e:	b29b      	uxth	r3, r3
 8004190:	4313      	orrs	r3, r2
 8004192:	b29b      	uxth	r3, r3
 8004194:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004198:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800419c:	b29a      	uxth	r2, r3
 800419e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041a0:	801a      	strh	r2, [r3, #0]
 80041a2:	e056      	b.n	8004252 <USB_EPStartXfer+0x6a6>
 80041a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d10a      	bne.n	80041c2 <USB_EPStartXfer+0x616>
 80041ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041ae:	881b      	ldrh	r3, [r3, #0]
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041be:	801a      	strh	r2, [r3, #0]
 80041c0:	e047      	b.n	8004252 <USB_EPStartXfer+0x6a6>
 80041c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041c6:	085b      	lsrs	r3, r3, #1
 80041c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80041cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d004      	beq.n	80041e2 <USB_EPStartXfer+0x636>
 80041d8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80041dc:	3301      	adds	r3, #1
 80041de:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80041e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041e4:	881b      	ldrh	r3, [r3, #0]
 80041e6:	b29a      	uxth	r2, r3
 80041e8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	029b      	lsls	r3, r3, #10
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	4313      	orrs	r3, r2
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041f8:	801a      	strh	r2, [r3, #0]
 80041fa:	e02a      	b.n	8004252 <USB_EPStartXfer+0x6a6>
 80041fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004200:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	785b      	ldrb	r3, [r3, #1]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d122      	bne.n	8004252 <USB_EPStartXfer+0x6a6>
 800420c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004210:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	653b      	str	r3, [r7, #80]	@ 0x50
 8004218:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800421c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004226:	b29b      	uxth	r3, r3
 8004228:	461a      	mov	r2, r3
 800422a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800422c:	4413      	add	r3, r2
 800422e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004230:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004234:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	011a      	lsls	r2, r3, #4
 800423e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004240:	4413      	add	r3, r2
 8004242:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004246:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004248:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800424c:	b29a      	uxth	r2, r3
 800424e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004250:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004252:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004256:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	891b      	ldrh	r3, [r3, #8]
 800425e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004262:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004266:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6959      	ldr	r1, [r3, #20]
 800426e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004272:	b29b      	uxth	r3, r3
 8004274:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004278:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800427c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004280:	6800      	ldr	r0, [r0, #0]
 8004282:	f001 f982 	bl	800558a <USB_WritePMA>
            ep->xfer_buff += len;
 8004286:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800428a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	695a      	ldr	r2, [r3, #20]
 8004292:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004296:	441a      	add	r2, r3
 8004298:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800429c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80042a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80042a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	6a1a      	ldr	r2, [r3, #32]
 80042b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80042b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d90f      	bls.n	80042e0 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80042c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80042c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	6a1a      	ldr	r2, [r3, #32]
 80042cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042d0:	1ad2      	subs	r2, r2, r3
 80042d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80042d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	621a      	str	r2, [r3, #32]
 80042de:	e00e      	b.n	80042fe <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80042e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80042e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	6a1b      	ldr	r3, [r3, #32]
 80042ec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80042f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80042f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2200      	movs	r2, #0
 80042fc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80042fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004302:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	643b      	str	r3, [r7, #64]	@ 0x40
 800430a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800430e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	785b      	ldrb	r3, [r3, #1]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d177      	bne.n	800440a <USB_EPStartXfer+0x85e>
 800431a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800431e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004326:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800432a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004334:	b29b      	uxth	r3, r3
 8004336:	461a      	mov	r2, r3
 8004338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800433a:	4413      	add	r3, r2
 800433c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800433e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004342:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	011a      	lsls	r2, r3, #4
 800434c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800434e:	4413      	add	r3, r2
 8004350:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004354:	637b      	str	r3, [r7, #52]	@ 0x34
 8004356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004358:	881b      	ldrh	r3, [r3, #0]
 800435a:	b29b      	uxth	r3, r3
 800435c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004360:	b29a      	uxth	r2, r3
 8004362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004364:	801a      	strh	r2, [r3, #0]
 8004366:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800436a:	2b3e      	cmp	r3, #62	@ 0x3e
 800436c:	d921      	bls.n	80043b2 <USB_EPStartXfer+0x806>
 800436e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004372:	095b      	lsrs	r3, r3, #5
 8004374:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004378:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800437c:	f003 031f 	and.w	r3, r3, #31
 8004380:	2b00      	cmp	r3, #0
 8004382:	d104      	bne.n	800438e <USB_EPStartXfer+0x7e2>
 8004384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004388:	3b01      	subs	r3, #1
 800438a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800438e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004390:	881b      	ldrh	r3, [r3, #0]
 8004392:	b29a      	uxth	r2, r3
 8004394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004398:	b29b      	uxth	r3, r3
 800439a:	029b      	lsls	r3, r3, #10
 800439c:	b29b      	uxth	r3, r3
 800439e:	4313      	orrs	r3, r2
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043ae:	801a      	strh	r2, [r3, #0]
 80043b0:	e050      	b.n	8004454 <USB_EPStartXfer+0x8a8>
 80043b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10a      	bne.n	80043d0 <USB_EPStartXfer+0x824>
 80043ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043bc:	881b      	ldrh	r3, [r3, #0]
 80043be:	b29b      	uxth	r3, r3
 80043c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043cc:	801a      	strh	r2, [r3, #0]
 80043ce:	e041      	b.n	8004454 <USB_EPStartXfer+0x8a8>
 80043d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043d4:	085b      	lsrs	r3, r3, #1
 80043d6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80043da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d004      	beq.n	80043f0 <USB_EPStartXfer+0x844>
 80043e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ea:	3301      	adds	r3, #1
 80043ec:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80043f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043f2:	881b      	ldrh	r3, [r3, #0]
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	029b      	lsls	r3, r3, #10
 80043fe:	b29b      	uxth	r3, r3
 8004400:	4313      	orrs	r3, r2
 8004402:	b29a      	uxth	r2, r3
 8004404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004406:	801a      	strh	r2, [r3, #0]
 8004408:	e024      	b.n	8004454 <USB_EPStartXfer+0x8a8>
 800440a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800440e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	785b      	ldrb	r3, [r3, #1]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d11c      	bne.n	8004454 <USB_EPStartXfer+0x8a8>
 800441a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800441e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004428:	b29b      	uxth	r3, r3
 800442a:	461a      	mov	r2, r3
 800442c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800442e:	4413      	add	r3, r2
 8004430:	643b      	str	r3, [r7, #64]	@ 0x40
 8004432:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004436:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	011a      	lsls	r2, r3, #4
 8004440:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004442:	4413      	add	r3, r2
 8004444:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004448:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800444a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800444e:	b29a      	uxth	r2, r3
 8004450:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004452:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004454:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004458:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	895b      	ldrh	r3, [r3, #10]
 8004460:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004464:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004468:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6959      	ldr	r1, [r3, #20]
 8004470:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004474:	b29b      	uxth	r3, r3
 8004476:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800447a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800447e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004482:	6800      	ldr	r0, [r0, #0]
 8004484:	f001 f881 	bl	800558a <USB_WritePMA>
 8004488:	e227      	b.n	80048da <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800448a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800448e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6a1b      	ldr	r3, [r3, #32]
 8004496:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800449a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800449e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	4413      	add	r3, r2
 80044b4:	881b      	ldrh	r3, [r3, #0]
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80044bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044c0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80044c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	441a      	add	r2, r3
 80044de:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80044e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80044f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004502:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004506:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004510:	b29b      	uxth	r3, r3
 8004512:	461a      	mov	r2, r3
 8004514:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004516:	4413      	add	r3, r2
 8004518:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800451a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800451e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	011a      	lsls	r2, r3, #4
 8004528:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800452a:	4413      	add	r3, r2
 800452c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004530:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004532:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004536:	b29a      	uxth	r2, r3
 8004538:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800453a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800453c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004540:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	891b      	ldrh	r3, [r3, #8]
 8004548:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800454c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004550:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	6959      	ldr	r1, [r3, #20]
 8004558:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800455c:	b29b      	uxth	r3, r3
 800455e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004562:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004566:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800456a:	6800      	ldr	r0, [r0, #0]
 800456c:	f001 f80d 	bl	800558a <USB_WritePMA>
 8004570:	e1b3      	b.n	80048da <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004572:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004576:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	6a1a      	ldr	r2, [r3, #32]
 800457e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004582:	1ad2      	subs	r2, r2, r3
 8004584:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004588:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004590:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004594:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800459e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4413      	add	r3, r2
 80045aa:	881b      	ldrh	r3, [r3, #0]
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f000 80c6 	beq.w	8004744 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80045b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	673b      	str	r3, [r7, #112]	@ 0x70
 80045c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	785b      	ldrb	r3, [r3, #1]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d177      	bne.n	80046c4 <USB_EPStartXfer+0xb18>
 80045d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	461a      	mov	r2, r3
 80045f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80045f4:	4413      	add	r3, r2
 80045f6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	011a      	lsls	r2, r3, #4
 8004606:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004608:	4413      	add	r3, r2
 800460a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800460e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004610:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004612:	881b      	ldrh	r3, [r3, #0]
 8004614:	b29b      	uxth	r3, r3
 8004616:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800461a:	b29a      	uxth	r2, r3
 800461c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800461e:	801a      	strh	r2, [r3, #0]
 8004620:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004624:	2b3e      	cmp	r3, #62	@ 0x3e
 8004626:	d921      	bls.n	800466c <USB_EPStartXfer+0xac0>
 8004628:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800462c:	095b      	lsrs	r3, r3, #5
 800462e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004632:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004636:	f003 031f 	and.w	r3, r3, #31
 800463a:	2b00      	cmp	r3, #0
 800463c:	d104      	bne.n	8004648 <USB_EPStartXfer+0xa9c>
 800463e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004642:	3b01      	subs	r3, #1
 8004644:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004648:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800464a:	881b      	ldrh	r3, [r3, #0]
 800464c:	b29a      	uxth	r2, r3
 800464e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004652:	b29b      	uxth	r3, r3
 8004654:	029b      	lsls	r3, r3, #10
 8004656:	b29b      	uxth	r3, r3
 8004658:	4313      	orrs	r3, r2
 800465a:	b29b      	uxth	r3, r3
 800465c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004660:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004664:	b29a      	uxth	r2, r3
 8004666:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004668:	801a      	strh	r2, [r3, #0]
 800466a:	e050      	b.n	800470e <USB_EPStartXfer+0xb62>
 800466c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004670:	2b00      	cmp	r3, #0
 8004672:	d10a      	bne.n	800468a <USB_EPStartXfer+0xade>
 8004674:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004676:	881b      	ldrh	r3, [r3, #0]
 8004678:	b29b      	uxth	r3, r3
 800467a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800467e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004682:	b29a      	uxth	r2, r3
 8004684:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004686:	801a      	strh	r2, [r3, #0]
 8004688:	e041      	b.n	800470e <USB_EPStartXfer+0xb62>
 800468a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800468e:	085b      	lsrs	r3, r3, #1
 8004690:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004694:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	2b00      	cmp	r3, #0
 800469e:	d004      	beq.n	80046aa <USB_EPStartXfer+0xafe>
 80046a0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80046a4:	3301      	adds	r3, #1
 80046a6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80046aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046ac:	881b      	ldrh	r3, [r3, #0]
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	029b      	lsls	r3, r3, #10
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	4313      	orrs	r3, r2
 80046bc:	b29a      	uxth	r2, r3
 80046be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046c0:	801a      	strh	r2, [r3, #0]
 80046c2:	e024      	b.n	800470e <USB_EPStartXfer+0xb62>
 80046c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	785b      	ldrb	r3, [r3, #1]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d11c      	bne.n	800470e <USB_EPStartXfer+0xb62>
 80046d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	461a      	mov	r2, r3
 80046e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80046e8:	4413      	add	r3, r2
 80046ea:	673b      	str	r3, [r7, #112]	@ 0x70
 80046ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	011a      	lsls	r2, r3, #4
 80046fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80046fc:	4413      	add	r3, r2
 80046fe:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004702:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004704:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004708:	b29a      	uxth	r2, r3
 800470a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800470c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800470e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004712:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	895b      	ldrh	r3, [r3, #10]
 800471a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800471e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004722:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6959      	ldr	r1, [r3, #20]
 800472a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800472e:	b29b      	uxth	r3, r3
 8004730:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004734:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004738:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800473c:	6800      	ldr	r0, [r0, #0]
 800473e:	f000 ff24 	bl	800558a <USB_WritePMA>
 8004742:	e0ca      	b.n	80048da <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004744:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004748:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	785b      	ldrb	r3, [r3, #1]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d177      	bne.n	8004844 <USB_EPStartXfer+0xc98>
 8004754:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004758:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004760:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004764:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800476e:	b29b      	uxth	r3, r3
 8004770:	461a      	mov	r2, r3
 8004772:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004774:	4413      	add	r3, r2
 8004776:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004778:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800477c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	011a      	lsls	r2, r3, #4
 8004786:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004788:	4413      	add	r3, r2
 800478a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800478e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004790:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004792:	881b      	ldrh	r3, [r3, #0]
 8004794:	b29b      	uxth	r3, r3
 8004796:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800479a:	b29a      	uxth	r2, r3
 800479c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800479e:	801a      	strh	r2, [r3, #0]
 80047a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047a4:	2b3e      	cmp	r3, #62	@ 0x3e
 80047a6:	d921      	bls.n	80047ec <USB_EPStartXfer+0xc40>
 80047a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047ac:	095b      	lsrs	r3, r3, #5
 80047ae:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80047b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047b6:	f003 031f 	and.w	r3, r3, #31
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d104      	bne.n	80047c8 <USB_EPStartXfer+0xc1c>
 80047be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80047c2:	3b01      	subs	r3, #1
 80047c4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80047c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80047ca:	881b      	ldrh	r3, [r3, #0]
 80047cc:	b29a      	uxth	r2, r3
 80047ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	029b      	lsls	r3, r3, #10
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	4313      	orrs	r3, r2
 80047da:	b29b      	uxth	r3, r3
 80047dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80047e8:	801a      	strh	r2, [r3, #0]
 80047ea:	e05c      	b.n	80048a6 <USB_EPStartXfer+0xcfa>
 80047ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d10a      	bne.n	800480a <USB_EPStartXfer+0xc5e>
 80047f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80047f6:	881b      	ldrh	r3, [r3, #0]
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004802:	b29a      	uxth	r2, r3
 8004804:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004806:	801a      	strh	r2, [r3, #0]
 8004808:	e04d      	b.n	80048a6 <USB_EPStartXfer+0xcfa>
 800480a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800480e:	085b      	lsrs	r3, r3, #1
 8004810:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004814:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	2b00      	cmp	r3, #0
 800481e:	d004      	beq.n	800482a <USB_EPStartXfer+0xc7e>
 8004820:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004824:	3301      	adds	r3, #1
 8004826:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800482a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800482c:	881b      	ldrh	r3, [r3, #0]
 800482e:	b29a      	uxth	r2, r3
 8004830:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004834:	b29b      	uxth	r3, r3
 8004836:	029b      	lsls	r3, r3, #10
 8004838:	b29b      	uxth	r3, r3
 800483a:	4313      	orrs	r3, r2
 800483c:	b29a      	uxth	r2, r3
 800483e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004840:	801a      	strh	r2, [r3, #0]
 8004842:	e030      	b.n	80048a6 <USB_EPStartXfer+0xcfa>
 8004844:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004848:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	785b      	ldrb	r3, [r3, #1]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d128      	bne.n	80048a6 <USB_EPStartXfer+0xcfa>
 8004854:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004858:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004862:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004866:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004870:	b29b      	uxth	r3, r3
 8004872:	461a      	mov	r2, r3
 8004874:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004878:	4413      	add	r3, r2
 800487a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800487e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004882:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	011a      	lsls	r2, r3, #4
 800488c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004890:	4413      	add	r3, r2
 8004892:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004896:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800489a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800489e:	b29a      	uxth	r2, r3
 80048a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80048a4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80048a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	891b      	ldrh	r3, [r3, #8]
 80048b2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80048b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6959      	ldr	r1, [r3, #20]
 80048c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80048cc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80048d0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80048d4:	6800      	ldr	r0, [r0, #0]
 80048d6:	f000 fe58 	bl	800558a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80048da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	4413      	add	r3, r2
 80048f4:	881b      	ldrh	r3, [r3, #0]
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004900:	817b      	strh	r3, [r7, #10]
 8004902:	897b      	ldrh	r3, [r7, #10]
 8004904:	f083 0310 	eor.w	r3, r3, #16
 8004908:	817b      	strh	r3, [r7, #10]
 800490a:	897b      	ldrh	r3, [r7, #10]
 800490c:	f083 0320 	eor.w	r3, r3, #32
 8004910:	817b      	strh	r3, [r7, #10]
 8004912:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004916:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004920:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	441a      	add	r2, r3
 800492c:	897b      	ldrh	r3, [r7, #10]
 800492e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004932:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004936:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800493a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800493e:	b29b      	uxth	r3, r3
 8004940:	8013      	strh	r3, [r2, #0]
 8004942:	f000 bcde 	b.w	8005302 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004946:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800494a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	7b1b      	ldrb	r3, [r3, #12]
 8004952:	2b00      	cmp	r3, #0
 8004954:	f040 80bb 	bne.w	8004ace <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004958:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800495c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	699a      	ldr	r2, [r3, #24]
 8004964:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004968:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	429a      	cmp	r2, r3
 8004972:	d917      	bls.n	80049a4 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8004974:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004978:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8004984:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004988:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	699a      	ldr	r2, [r3, #24]
 8004990:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004994:	1ad2      	subs	r2, r2, r3
 8004996:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800499a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	619a      	str	r2, [r3, #24]
 80049a2:	e00e      	b.n	80049c2 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80049a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80049b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2200      	movs	r2, #0
 80049c0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80049c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80049d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049de:	b29b      	uxth	r3, r3
 80049e0:	461a      	mov	r2, r3
 80049e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80049e6:	4413      	add	r3, r2
 80049e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80049ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	011a      	lsls	r2, r3, #4
 80049fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80049fe:	4413      	add	r3, r2
 8004a00:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004a04:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004a08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a0c:	881b      	ldrh	r3, [r3, #0]
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a1a:	801a      	strh	r2, [r3, #0]
 8004a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a20:	2b3e      	cmp	r3, #62	@ 0x3e
 8004a22:	d924      	bls.n	8004a6e <USB_EPStartXfer+0xec2>
 8004a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a28:	095b      	lsrs	r3, r3, #5
 8004a2a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004a2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a32:	f003 031f 	and.w	r3, r3, #31
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d104      	bne.n	8004a44 <USB_EPStartXfer+0xe98>
 8004a3a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004a44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a48:	881b      	ldrh	r3, [r3, #0]
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	029b      	lsls	r3, r3, #10
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	4313      	orrs	r3, r2
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a68:	801a      	strh	r2, [r3, #0]
 8004a6a:	f000 bc10 	b.w	800528e <USB_EPStartXfer+0x16e2>
 8004a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10c      	bne.n	8004a90 <USB_EPStartXfer+0xee4>
 8004a76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a7a:	881b      	ldrh	r3, [r3, #0]
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a86:	b29a      	uxth	r2, r3
 8004a88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a8c:	801a      	strh	r2, [r3, #0]
 8004a8e:	e3fe      	b.n	800528e <USB_EPStartXfer+0x16e2>
 8004a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a94:	085b      	lsrs	r3, r3, #1
 8004a96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d004      	beq.n	8004ab0 <USB_EPStartXfer+0xf04>
 8004aa6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004aaa:	3301      	adds	r3, #1
 8004aac:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004ab0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ab4:	881b      	ldrh	r3, [r3, #0]
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	029b      	lsls	r3, r3, #10
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004aca:	801a      	strh	r2, [r3, #0]
 8004acc:	e3df      	b.n	800528e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004ace:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ad2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	78db      	ldrb	r3, [r3, #3]
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	f040 8218 	bne.w	8004f10 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004ae0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ae4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	785b      	ldrb	r3, [r3, #1]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f040 809d 	bne.w	8004c2c <USB_EPStartXfer+0x1080>
 8004af2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004af6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004b00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	461a      	mov	r2, r3
 8004b12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004b16:	4413      	add	r3, r2
 8004b18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004b1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	011a      	lsls	r2, r3, #4
 8004b2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004b2e:	4413      	add	r3, r2
 8004b30:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004b34:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004b38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004b3c:	881b      	ldrh	r3, [r3, #0]
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004b4a:	801a      	strh	r2, [r3, #0]
 8004b4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	2b3e      	cmp	r3, #62	@ 0x3e
 8004b5a:	d92b      	bls.n	8004bb4 <USB_EPStartXfer+0x1008>
 8004b5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	095b      	lsrs	r3, r3, #5
 8004b6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004b6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	f003 031f 	and.w	r3, r3, #31
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d104      	bne.n	8004b8c <USB_EPStartXfer+0xfe0>
 8004b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b86:	3b01      	subs	r3, #1
 8004b88:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004b8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004b90:	881b      	ldrh	r3, [r3, #0]
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	029b      	lsls	r3, r3, #10
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ba6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004bb0:	801a      	strh	r2, [r3, #0]
 8004bb2:	e070      	b.n	8004c96 <USB_EPStartXfer+0x10ea>
 8004bb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10c      	bne.n	8004bde <USB_EPStartXfer+0x1032>
 8004bc4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004bc8:	881b      	ldrh	r3, [r3, #0]
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004bda:	801a      	strh	r2, [r3, #0]
 8004bdc:	e05b      	b.n	8004c96 <USB_EPStartXfer+0x10ea>
 8004bde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004be2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	085b      	lsrs	r3, r3, #1
 8004bec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004bf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	f003 0301 	and.w	r3, r3, #1
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d004      	beq.n	8004c0e <USB_EPStartXfer+0x1062>
 8004c04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c08:	3301      	adds	r3, #1
 8004c0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004c0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004c12:	881b      	ldrh	r3, [r3, #0]
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	029b      	lsls	r3, r3, #10
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	4313      	orrs	r3, r2
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004c28:	801a      	strh	r2, [r3, #0]
 8004c2a:	e034      	b.n	8004c96 <USB_EPStartXfer+0x10ea>
 8004c2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	785b      	ldrb	r3, [r3, #1]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d12c      	bne.n	8004c96 <USB_EPStartXfer+0x10ea>
 8004c3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004c60:	4413      	add	r3, r2
 8004c62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	011a      	lsls	r2, r3, #4
 8004c74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004c78:	4413      	add	r3, r2
 8004c7a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004c7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004c82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004c94:	801a      	strh	r2, [r3, #0]
 8004c96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004ca4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ca8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	785b      	ldrb	r3, [r3, #1]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f040 809d 	bne.w	8004df0 <USB_EPStartXfer+0x1244>
 8004cb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004cc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cc8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004cda:	4413      	add	r3, r2
 8004cdc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004ce0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ce4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	011a      	lsls	r2, r3, #4
 8004cee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004cf8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004cfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004d00:	881b      	ldrh	r3, [r3, #0]
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d08:	b29a      	uxth	r2, r3
 8004d0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004d0e:	801a      	strh	r2, [r3, #0]
 8004d10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	2b3e      	cmp	r3, #62	@ 0x3e
 8004d1e:	d92b      	bls.n	8004d78 <USB_EPStartXfer+0x11cc>
 8004d20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	095b      	lsrs	r3, r3, #5
 8004d2e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004d32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	f003 031f 	and.w	r3, r3, #31
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d104      	bne.n	8004d50 <USB_EPStartXfer+0x11a4>
 8004d46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004d50:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004d54:	881b      	ldrh	r3, [r3, #0]
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	029b      	lsls	r3, r3, #10
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	4313      	orrs	r3, r2
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004d74:	801a      	strh	r2, [r3, #0]
 8004d76:	e069      	b.n	8004e4c <USB_EPStartXfer+0x12a0>
 8004d78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d10c      	bne.n	8004da2 <USB_EPStartXfer+0x11f6>
 8004d88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004d8c:	881b      	ldrh	r3, [r3, #0]
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d98:	b29a      	uxth	r2, r3
 8004d9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004d9e:	801a      	strh	r2, [r3, #0]
 8004da0:	e054      	b.n	8004e4c <USB_EPStartXfer+0x12a0>
 8004da2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004da6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	085b      	lsrs	r3, r3, #1
 8004db0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004db4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004db8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	f003 0301 	and.w	r3, r3, #1
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d004      	beq.n	8004dd2 <USB_EPStartXfer+0x1226>
 8004dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dcc:	3301      	adds	r3, #1
 8004dce:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004dd2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004dd6:	881b      	ldrh	r3, [r3, #0]
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	029b      	lsls	r3, r3, #10
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	4313      	orrs	r3, r2
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004dec:	801a      	strh	r2, [r3, #0]
 8004dee:	e02d      	b.n	8004e4c <USB_EPStartXfer+0x12a0>
 8004df0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004df4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	785b      	ldrb	r3, [r3, #1]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d125      	bne.n	8004e4c <USB_EPStartXfer+0x12a0>
 8004e00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	461a      	mov	r2, r3
 8004e12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004e16:	4413      	add	r3, r2
 8004e18:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004e1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	011a      	lsls	r2, r3, #4
 8004e2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004e2e:	4413      	add	r3, r2
 8004e30:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004e34:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004e38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	b29a      	uxth	r2, r3
 8004e46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004e4a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004e4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	69db      	ldr	r3, [r3, #28]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f000 8218 	beq.w	800528e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004e5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	4413      	add	r3, r2
 8004e78:	881b      	ldrh	r3, [r3, #0]
 8004e7a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004e7e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004e82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d005      	beq.n	8004e96 <USB_EPStartXfer+0x12ea>
 8004e8a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004e8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d10d      	bne.n	8004eb2 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004e96:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004e9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	f040 81f5 	bne.w	800528e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004ea4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004ea8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f040 81ee 	bne.w	800528e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8004eb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ec0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	4413      	add	r3, r2
 8004ecc:	881b      	ldrh	r3, [r3, #0]
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ed4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ed8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8004edc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ee0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	441a      	add	r2, r3
 8004ef6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8004efa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004efe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f06:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	8013      	strh	r3, [r2, #0]
 8004f0e:	e1be      	b.n	800528e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8004f10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	78db      	ldrb	r3, [r3, #3]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	f040 81b4 	bne.w	800528a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8004f22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	699a      	ldr	r2, [r3, #24]
 8004f2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d917      	bls.n	8004f6e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8004f3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8004f4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	699a      	ldr	r2, [r3, #24]
 8004f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f5e:	1ad2      	subs	r2, r2, r3
 8004f60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	619a      	str	r2, [r3, #24]
 8004f6c:	e00e      	b.n	8004f8c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8004f6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8004f7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004f8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	785b      	ldrb	r3, [r3, #1]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f040 8085 	bne.w	80050a8 <USB_EPStartXfer+0x14fc>
 8004f9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fa2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004fac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004fc2:	4413      	add	r3, r2
 8004fc4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004fc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	011a      	lsls	r2, r3, #4
 8004fd6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004fda:	4413      	add	r3, r2
 8004fdc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004fe0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004fe4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004fe8:	881b      	ldrh	r3, [r3, #0]
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ff0:	b29a      	uxth	r2, r3
 8004ff2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004ff6:	801a      	strh	r2, [r3, #0]
 8004ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ffc:	2b3e      	cmp	r3, #62	@ 0x3e
 8004ffe:	d923      	bls.n	8005048 <USB_EPStartXfer+0x149c>
 8005000:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005004:	095b      	lsrs	r3, r3, #5
 8005006:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800500a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800500e:	f003 031f 	and.w	r3, r3, #31
 8005012:	2b00      	cmp	r3, #0
 8005014:	d104      	bne.n	8005020 <USB_EPStartXfer+0x1474>
 8005016:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800501a:	3b01      	subs	r3, #1
 800501c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005020:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005024:	881b      	ldrh	r3, [r3, #0]
 8005026:	b29a      	uxth	r2, r3
 8005028:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800502c:	b29b      	uxth	r3, r3
 800502e:	029b      	lsls	r3, r3, #10
 8005030:	b29b      	uxth	r3, r3
 8005032:	4313      	orrs	r3, r2
 8005034:	b29b      	uxth	r3, r3
 8005036:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800503a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800503e:	b29a      	uxth	r2, r3
 8005040:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005044:	801a      	strh	r2, [r3, #0]
 8005046:	e060      	b.n	800510a <USB_EPStartXfer+0x155e>
 8005048:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800504c:	2b00      	cmp	r3, #0
 800504e:	d10c      	bne.n	800506a <USB_EPStartXfer+0x14be>
 8005050:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005054:	881b      	ldrh	r3, [r3, #0]
 8005056:	b29b      	uxth	r3, r3
 8005058:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800505c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005060:	b29a      	uxth	r2, r3
 8005062:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005066:	801a      	strh	r2, [r3, #0]
 8005068:	e04f      	b.n	800510a <USB_EPStartXfer+0x155e>
 800506a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800506e:	085b      	lsrs	r3, r3, #1
 8005070:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005074:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005078:	f003 0301 	and.w	r3, r3, #1
 800507c:	2b00      	cmp	r3, #0
 800507e:	d004      	beq.n	800508a <USB_EPStartXfer+0x14de>
 8005080:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005084:	3301      	adds	r3, #1
 8005086:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800508a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800508e:	881b      	ldrh	r3, [r3, #0]
 8005090:	b29a      	uxth	r2, r3
 8005092:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005096:	b29b      	uxth	r3, r3
 8005098:	029b      	lsls	r3, r3, #10
 800509a:	b29b      	uxth	r3, r3
 800509c:	4313      	orrs	r3, r2
 800509e:	b29a      	uxth	r2, r3
 80050a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80050a4:	801a      	strh	r2, [r3, #0]
 80050a6:	e030      	b.n	800510a <USB_EPStartXfer+0x155e>
 80050a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	785b      	ldrb	r3, [r3, #1]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d128      	bne.n	800510a <USB_EPStartXfer+0x155e>
 80050b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80050c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	461a      	mov	r2, r3
 80050d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050dc:	4413      	add	r3, r2
 80050de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80050e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	011a      	lsls	r2, r3, #4
 80050f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050f4:	4413      	add	r3, r2
 80050f6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80050fa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80050fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005102:	b29a      	uxth	r2, r3
 8005104:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005108:	801a      	strh	r2, [r3, #0]
 800510a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800510e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005118:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800511c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	785b      	ldrb	r3, [r3, #1]
 8005124:	2b00      	cmp	r3, #0
 8005126:	f040 8085 	bne.w	8005234 <USB_EPStartXfer+0x1688>
 800512a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800512e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005138:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800513c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005146:	b29b      	uxth	r3, r3
 8005148:	461a      	mov	r2, r3
 800514a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800514e:	4413      	add	r3, r2
 8005150:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005154:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005158:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	011a      	lsls	r2, r3, #4
 8005162:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005166:	4413      	add	r3, r2
 8005168:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800516c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005170:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005174:	881b      	ldrh	r3, [r3, #0]
 8005176:	b29b      	uxth	r3, r3
 8005178:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800517c:	b29a      	uxth	r2, r3
 800517e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005182:	801a      	strh	r2, [r3, #0]
 8005184:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005188:	2b3e      	cmp	r3, #62	@ 0x3e
 800518a:	d923      	bls.n	80051d4 <USB_EPStartXfer+0x1628>
 800518c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005190:	095b      	lsrs	r3, r3, #5
 8005192:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005196:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800519a:	f003 031f 	and.w	r3, r3, #31
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d104      	bne.n	80051ac <USB_EPStartXfer+0x1600>
 80051a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80051a6:	3b01      	subs	r3, #1
 80051a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80051ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80051b0:	881b      	ldrh	r3, [r3, #0]
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	029b      	lsls	r3, r3, #10
 80051bc:	b29b      	uxth	r3, r3
 80051be:	4313      	orrs	r3, r2
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80051d0:	801a      	strh	r2, [r3, #0]
 80051d2:	e05c      	b.n	800528e <USB_EPStartXfer+0x16e2>
 80051d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d10c      	bne.n	80051f6 <USB_EPStartXfer+0x164a>
 80051dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80051e0:	881b      	ldrh	r3, [r3, #0]
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80051f2:	801a      	strh	r2, [r3, #0]
 80051f4:	e04b      	b.n	800528e <USB_EPStartXfer+0x16e2>
 80051f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051fa:	085b      	lsrs	r3, r3, #1
 80051fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005200:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	2b00      	cmp	r3, #0
 800520a:	d004      	beq.n	8005216 <USB_EPStartXfer+0x166a>
 800520c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005210:	3301      	adds	r3, #1
 8005212:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005216:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800521a:	881b      	ldrh	r3, [r3, #0]
 800521c:	b29a      	uxth	r2, r3
 800521e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005222:	b29b      	uxth	r3, r3
 8005224:	029b      	lsls	r3, r3, #10
 8005226:	b29b      	uxth	r3, r3
 8005228:	4313      	orrs	r3, r2
 800522a:	b29a      	uxth	r2, r3
 800522c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005230:	801a      	strh	r2, [r3, #0]
 8005232:	e02c      	b.n	800528e <USB_EPStartXfer+0x16e2>
 8005234:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005238:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	785b      	ldrb	r3, [r3, #1]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d124      	bne.n	800528e <USB_EPStartXfer+0x16e2>
 8005244:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005248:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005252:	b29b      	uxth	r3, r3
 8005254:	461a      	mov	r2, r3
 8005256:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800525a:	4413      	add	r3, r2
 800525c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005260:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005264:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	011a      	lsls	r2, r3, #4
 800526e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005272:	4413      	add	r3, r2
 8005274:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005278:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800527c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005280:	b29a      	uxth	r2, r3
 8005282:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005286:	801a      	strh	r2, [r3, #0]
 8005288:	e001      	b.n	800528e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e03a      	b.n	8005304 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800528e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005292:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800529c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	4413      	add	r3, r2
 80052a8:	881b      	ldrh	r3, [r3, #0]
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80052b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052b4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80052b8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80052bc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80052c0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80052c4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80052c8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80052cc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80052d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	441a      	add	r2, r3
 80052ea:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80052ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052fe:	b29b      	uxth	r3, r3
 8005300:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800530e:	b480      	push	{r7}
 8005310:	b085      	sub	sp, #20
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
 8005316:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	785b      	ldrb	r3, [r3, #1]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d020      	beq.n	8005362 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	4413      	add	r3, r2
 800532a:	881b      	ldrh	r3, [r3, #0]
 800532c:	b29b      	uxth	r3, r3
 800532e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005332:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005336:	81bb      	strh	r3, [r7, #12]
 8005338:	89bb      	ldrh	r3, [r7, #12]
 800533a:	f083 0310 	eor.w	r3, r3, #16
 800533e:	81bb      	strh	r3, [r7, #12]
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	441a      	add	r2, r3
 800534a:	89bb      	ldrh	r3, [r7, #12]
 800534c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005350:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005354:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005358:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800535c:	b29b      	uxth	r3, r3
 800535e:	8013      	strh	r3, [r2, #0]
 8005360:	e01f      	b.n	80053a2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	4413      	add	r3, r2
 800536c:	881b      	ldrh	r3, [r3, #0]
 800536e:	b29b      	uxth	r3, r3
 8005370:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005374:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005378:	81fb      	strh	r3, [r7, #14]
 800537a:	89fb      	ldrh	r3, [r7, #14]
 800537c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005380:	81fb      	strh	r3, [r7, #14]
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	441a      	add	r2, r3
 800538c:	89fb      	ldrh	r3, [r7, #14]
 800538e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005392:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005396:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800539a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800539e:	b29b      	uxth	r3, r3
 80053a0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3714      	adds	r7, #20
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bc80      	pop	{r7}
 80053ac:	4770      	bx	lr

080053ae <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80053ae:	b480      	push	{r7}
 80053b0:	b087      	sub	sp, #28
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
 80053b6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	7b1b      	ldrb	r3, [r3, #12]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	f040 809d 	bne.w	80054fc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	785b      	ldrb	r3, [r3, #1]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d04c      	beq.n	8005464 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4413      	add	r3, r2
 80053d4:	881b      	ldrh	r3, [r3, #0]
 80053d6:	823b      	strh	r3, [r7, #16]
 80053d8:	8a3b      	ldrh	r3, [r7, #16]
 80053da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d01b      	beq.n	800541a <USB_EPClearStall+0x6c>
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	4413      	add	r3, r2
 80053ec:	881b      	ldrh	r3, [r3, #0]
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053f8:	81fb      	strh	r3, [r7, #14]
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	441a      	add	r2, r3
 8005404:	89fb      	ldrh	r3, [r7, #14]
 8005406:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800540a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800540e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005412:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005416:	b29b      	uxth	r3, r3
 8005418:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	78db      	ldrb	r3, [r3, #3]
 800541e:	2b01      	cmp	r3, #1
 8005420:	d06c      	beq.n	80054fc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4413      	add	r3, r2
 800542c:	881b      	ldrh	r3, [r3, #0]
 800542e:	b29b      	uxth	r3, r3
 8005430:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005434:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005438:	81bb      	strh	r3, [r7, #12]
 800543a:	89bb      	ldrh	r3, [r7, #12]
 800543c:	f083 0320 	eor.w	r3, r3, #32
 8005440:	81bb      	strh	r3, [r7, #12]
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	441a      	add	r2, r3
 800544c:	89bb      	ldrh	r3, [r7, #12]
 800544e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005452:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005456:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800545a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800545e:	b29b      	uxth	r3, r3
 8005460:	8013      	strh	r3, [r2, #0]
 8005462:	e04b      	b.n	80054fc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	4413      	add	r3, r2
 800546e:	881b      	ldrh	r3, [r3, #0]
 8005470:	82fb      	strh	r3, [r7, #22]
 8005472:	8afb      	ldrh	r3, [r7, #22]
 8005474:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d01b      	beq.n	80054b4 <USB_EPClearStall+0x106>
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	4413      	add	r3, r2
 8005486:	881b      	ldrh	r3, [r3, #0]
 8005488:	b29b      	uxth	r3, r3
 800548a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800548e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005492:	82bb      	strh	r3, [r7, #20]
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	441a      	add	r2, r3
 800549e:	8abb      	ldrh	r3, [r7, #20]
 80054a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80054ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	4413      	add	r3, r2
 80054be:	881b      	ldrh	r3, [r3, #0]
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80054c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054ca:	827b      	strh	r3, [r7, #18]
 80054cc:	8a7b      	ldrh	r3, [r7, #18]
 80054ce:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80054d2:	827b      	strh	r3, [r7, #18]
 80054d4:	8a7b      	ldrh	r3, [r7, #18]
 80054d6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80054da:	827b      	strh	r3, [r7, #18]
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	441a      	add	r2, r3
 80054e6:	8a7b      	ldrh	r3, [r7, #18]
 80054e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	371c      	adds	r7, #28
 8005502:	46bd      	mov	sp, r7
 8005504:	bc80      	pop	{r7}
 8005506:	4770      	bx	lr

08005508 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	460b      	mov	r3, r1
 8005512:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005514:	78fb      	ldrb	r3, [r7, #3]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d103      	bne.n	8005522 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2280      	movs	r2, #128	@ 0x80
 800551e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	bc80      	pop	{r7}
 800552c:	4770      	bx	lr

0800552e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800552e:	b480      	push	{r7}
 8005530:	b083      	sub	sp, #12
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	bc80      	pop	{r7}
 8005540:	4770      	bx	lr

08005542 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005542:	b480      	push	{r7}
 8005544:	b083      	sub	sp, #12
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	bc80      	pop	{r7}
 8005554:	4770      	bx	lr

08005556 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8005556:	b480      	push	{r7}
 8005558:	b085      	sub	sp, #20
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005564:	b29b      	uxth	r3, r3
 8005566:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005568:	68fb      	ldr	r3, [r7, #12]
}
 800556a:	4618      	mov	r0, r3
 800556c:	3714      	adds	r7, #20
 800556e:	46bd      	mov	sp, r7
 8005570:	bc80      	pop	{r7}
 8005572:	4770      	bx	lr

08005574 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800557e:	2300      	movs	r3, #0
}
 8005580:	4618      	mov	r0, r3
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	bc80      	pop	{r7}
 8005588:	4770      	bx	lr

0800558a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800558a:	b480      	push	{r7}
 800558c:	b08b      	sub	sp, #44	@ 0x2c
 800558e:	af00      	add	r7, sp, #0
 8005590:	60f8      	str	r0, [r7, #12]
 8005592:	60b9      	str	r1, [r7, #8]
 8005594:	4611      	mov	r1, r2
 8005596:	461a      	mov	r2, r3
 8005598:	460b      	mov	r3, r1
 800559a:	80fb      	strh	r3, [r7, #6]
 800559c:	4613      	mov	r3, r2
 800559e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80055a0:	88bb      	ldrh	r3, [r7, #4]
 80055a2:	3301      	adds	r3, #1
 80055a4:	085b      	lsrs	r3, r3, #1
 80055a6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80055b0:	88fb      	ldrh	r3, [r7, #6]
 80055b2:	005a      	lsls	r2, r3, #1
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80055bc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80055c2:	e01f      	b.n	8005604 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	3301      	adds	r3, #1
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	b21b      	sxth	r3, r3
 80055d2:	021b      	lsls	r3, r3, #8
 80055d4:	b21a      	sxth	r2, r3
 80055d6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80055da:	4313      	orrs	r3, r2
 80055dc:	b21b      	sxth	r3, r3
 80055de:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80055e0:	6a3b      	ldr	r3, [r7, #32]
 80055e2:	8a7a      	ldrh	r2, [r7, #18]
 80055e4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80055e6:	6a3b      	ldr	r3, [r7, #32]
 80055e8:	3302      	adds	r3, #2
 80055ea:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80055ec:	6a3b      	ldr	r3, [r7, #32]
 80055ee:	3302      	adds	r3, #2
 80055f0:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	3301      	adds	r3, #1
 80055f6:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	3301      	adds	r3, #1
 80055fc:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80055fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005600:	3b01      	subs	r3, #1
 8005602:	627b      	str	r3, [r7, #36]	@ 0x24
 8005604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1dc      	bne.n	80055c4 <USB_WritePMA+0x3a>
  }
}
 800560a:	bf00      	nop
 800560c:	bf00      	nop
 800560e:	372c      	adds	r7, #44	@ 0x2c
 8005610:	46bd      	mov	sp, r7
 8005612:	bc80      	pop	{r7}
 8005614:	4770      	bx	lr

08005616 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005616:	b480      	push	{r7}
 8005618:	b08b      	sub	sp, #44	@ 0x2c
 800561a:	af00      	add	r7, sp, #0
 800561c:	60f8      	str	r0, [r7, #12]
 800561e:	60b9      	str	r1, [r7, #8]
 8005620:	4611      	mov	r1, r2
 8005622:	461a      	mov	r2, r3
 8005624:	460b      	mov	r3, r1
 8005626:	80fb      	strh	r3, [r7, #6]
 8005628:	4613      	mov	r3, r2
 800562a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800562c:	88bb      	ldrh	r3, [r7, #4]
 800562e:	085b      	lsrs	r3, r3, #1
 8005630:	b29b      	uxth	r3, r3
 8005632:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800563c:	88fb      	ldrh	r3, [r7, #6]
 800563e:	005a      	lsls	r2, r3, #1
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	4413      	add	r3, r2
 8005644:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005648:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	627b      	str	r3, [r7, #36]	@ 0x24
 800564e:	e01b      	b.n	8005688 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8005650:	6a3b      	ldr	r3, [r7, #32]
 8005652:	881b      	ldrh	r3, [r3, #0]
 8005654:	b29b      	uxth	r3, r3
 8005656:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005658:	6a3b      	ldr	r3, [r7, #32]
 800565a:	3302      	adds	r3, #2
 800565c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	b2da      	uxtb	r2, r3
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	3301      	adds	r3, #1
 800566a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	0a1b      	lsrs	r3, r3, #8
 8005670:	b2da      	uxtb	r2, r3
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	3301      	adds	r3, #1
 800567a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800567c:	6a3b      	ldr	r3, [r7, #32]
 800567e:	3302      	adds	r3, #2
 8005680:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8005682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005684:	3b01      	subs	r3, #1
 8005686:	627b      	str	r3, [r7, #36]	@ 0x24
 8005688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1e0      	bne.n	8005650 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800568e:	88bb      	ldrh	r3, [r7, #4]
 8005690:	f003 0301 	and.w	r3, r3, #1
 8005694:	b29b      	uxth	r3, r3
 8005696:	2b00      	cmp	r3, #0
 8005698:	d007      	beq.n	80056aa <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800569a:	6a3b      	ldr	r3, [r7, #32]
 800569c:	881b      	ldrh	r3, [r3, #0]
 800569e:	b29b      	uxth	r3, r3
 80056a0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	b2da      	uxtb	r2, r3
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	701a      	strb	r2, [r3, #0]
  }
}
 80056aa:	bf00      	nop
 80056ac:	372c      	adds	r7, #44	@ 0x2c
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bc80      	pop	{r7}
 80056b2:	4770      	bx	lr

080056b4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	460b      	mov	r3, r1
 80056be:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80056c0:	2300      	movs	r3, #0
 80056c2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	7c1b      	ldrb	r3, [r3, #16]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d115      	bne.n	80056f8 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80056cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80056d0:	2202      	movs	r2, #2
 80056d2:	2181      	movs	r1, #129	@ 0x81
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f001 fe82 	bl	80073de <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2201      	movs	r2, #1
 80056de:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80056e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80056e4:	2202      	movs	r2, #2
 80056e6:	2101      	movs	r1, #1
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f001 fe78 	bl	80073de <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 80056f6:	e012      	b.n	800571e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80056f8:	2340      	movs	r3, #64	@ 0x40
 80056fa:	2202      	movs	r2, #2
 80056fc:	2181      	movs	r1, #129	@ 0x81
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f001 fe6d 	bl	80073de <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800570a:	2340      	movs	r3, #64	@ 0x40
 800570c:	2202      	movs	r2, #2
 800570e:	2101      	movs	r1, #1
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f001 fe64 	bl	80073de <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2201      	movs	r2, #1
 800571a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800571e:	2308      	movs	r3, #8
 8005720:	2203      	movs	r2, #3
 8005722:	2182      	movs	r1, #130	@ 0x82
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f001 fe5a 	bl	80073de <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2201      	movs	r2, #1
 800572e:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005730:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005734:	f001 ff7a 	bl	800762c <USBD_static_malloc>
 8005738:	4602      	mov	r2, r0
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005746:	2b00      	cmp	r3, #0
 8005748:	d102      	bne.n	8005750 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800574a:	2301      	movs	r3, #1
 800574c:	73fb      	strb	r3, [r7, #15]
 800574e:	e026      	b.n	800579e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005756:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	2200      	movs	r2, #0
 8005766:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	2200      	movs	r2, #0
 800576e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	7c1b      	ldrb	r3, [r3, #16]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d109      	bne.n	800578e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005780:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005784:	2101      	movs	r1, #1
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f001 ff19 	bl	80075be <USBD_LL_PrepareReceive>
 800578c:	e007      	b.n	800579e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005794:	2340      	movs	r3, #64	@ 0x40
 8005796:	2101      	movs	r1, #1
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f001 ff10 	bl	80075be <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800579e:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3710      	adds	r7, #16
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	460b      	mov	r3, r1
 80057b2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80057b4:	2300      	movs	r3, #0
 80057b6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80057b8:	2181      	movs	r1, #129	@ 0x81
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f001 fe35 	bl	800742a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80057c6:	2101      	movs	r1, #1
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f001 fe2e 	bl	800742a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80057d6:	2182      	movs	r1, #130	@ 0x82
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f001 fe26 	bl	800742a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00e      	beq.n	800580c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80057fe:	4618      	mov	r0, r3
 8005800:	f001 ff20 	bl	8007644 <USBD_static_free>
    pdev->pClassData = NULL;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800580c:	7bfb      	ldrb	r3, [r7, #15]
}
 800580e:	4618      	mov	r0, r3
 8005810:	3710      	adds	r7, #16
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005816:	b580      	push	{r7, lr}
 8005818:	b086      	sub	sp, #24
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
 800581e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005826:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005828:	2300      	movs	r3, #0
 800582a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800582c:	2300      	movs	r3, #0
 800582e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005830:	2300      	movs	r3, #0
 8005832:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800583c:	2b00      	cmp	r3, #0
 800583e:	d039      	beq.n	80058b4 <USBD_CDC_Setup+0x9e>
 8005840:	2b20      	cmp	r3, #32
 8005842:	d17f      	bne.n	8005944 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	88db      	ldrh	r3, [r3, #6]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d029      	beq.n	80058a0 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	b25b      	sxtb	r3, r3
 8005852:	2b00      	cmp	r3, #0
 8005854:	da11      	bge.n	800587a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	683a      	ldr	r2, [r7, #0]
 8005860:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005862:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005864:	683a      	ldr	r2, [r7, #0]
 8005866:	88d2      	ldrh	r2, [r2, #6]
 8005868:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800586a:	6939      	ldr	r1, [r7, #16]
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	88db      	ldrh	r3, [r3, #6]
 8005870:	461a      	mov	r2, r3
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f001 fa06 	bl	8006c84 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005878:	e06b      	b.n	8005952 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	785a      	ldrb	r2, [r3, #1]
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	88db      	ldrh	r3, [r3, #6]
 8005888:	b2da      	uxtb	r2, r3
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005890:	6939      	ldr	r1, [r7, #16]
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	88db      	ldrh	r3, [r3, #6]
 8005896:	461a      	mov	r2, r3
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f001 fa21 	bl	8006ce0 <USBD_CtlPrepareRx>
      break;
 800589e:	e058      	b.n	8005952 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	683a      	ldr	r2, [r7, #0]
 80058aa:	7850      	ldrb	r0, [r2, #1]
 80058ac:	2200      	movs	r2, #0
 80058ae:	6839      	ldr	r1, [r7, #0]
 80058b0:	4798      	blx	r3
      break;
 80058b2:	e04e      	b.n	8005952 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	785b      	ldrb	r3, [r3, #1]
 80058b8:	2b0b      	cmp	r3, #11
 80058ba:	d02e      	beq.n	800591a <USBD_CDC_Setup+0x104>
 80058bc:	2b0b      	cmp	r3, #11
 80058be:	dc38      	bgt.n	8005932 <USBD_CDC_Setup+0x11c>
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d002      	beq.n	80058ca <USBD_CDC_Setup+0xb4>
 80058c4:	2b0a      	cmp	r3, #10
 80058c6:	d014      	beq.n	80058f2 <USBD_CDC_Setup+0xdc>
 80058c8:	e033      	b.n	8005932 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80058d0:	2b03      	cmp	r3, #3
 80058d2:	d107      	bne.n	80058e4 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80058d4:	f107 030c 	add.w	r3, r7, #12
 80058d8:	2202      	movs	r2, #2
 80058da:	4619      	mov	r1, r3
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f001 f9d1 	bl	8006c84 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80058e2:	e02e      	b.n	8005942 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80058e4:	6839      	ldr	r1, [r7, #0]
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f001 f962 	bl	8006bb0 <USBD_CtlError>
            ret = USBD_FAIL;
 80058ec:	2302      	movs	r3, #2
 80058ee:	75fb      	strb	r3, [r7, #23]
          break;
 80058f0:	e027      	b.n	8005942 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80058f8:	2b03      	cmp	r3, #3
 80058fa:	d107      	bne.n	800590c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80058fc:	f107 030f 	add.w	r3, r7, #15
 8005900:	2201      	movs	r2, #1
 8005902:	4619      	mov	r1, r3
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f001 f9bd 	bl	8006c84 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800590a:	e01a      	b.n	8005942 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800590c:	6839      	ldr	r1, [r7, #0]
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f001 f94e 	bl	8006bb0 <USBD_CtlError>
            ret = USBD_FAIL;
 8005914:	2302      	movs	r3, #2
 8005916:	75fb      	strb	r3, [r7, #23]
          break;
 8005918:	e013      	b.n	8005942 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005920:	2b03      	cmp	r3, #3
 8005922:	d00d      	beq.n	8005940 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8005924:	6839      	ldr	r1, [r7, #0]
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f001 f942 	bl	8006bb0 <USBD_CtlError>
            ret = USBD_FAIL;
 800592c:	2302      	movs	r3, #2
 800592e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005930:	e006      	b.n	8005940 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8005932:	6839      	ldr	r1, [r7, #0]
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f001 f93b 	bl	8006bb0 <USBD_CtlError>
          ret = USBD_FAIL;
 800593a:	2302      	movs	r3, #2
 800593c:	75fb      	strb	r3, [r7, #23]
          break;
 800593e:	e000      	b.n	8005942 <USBD_CDC_Setup+0x12c>
          break;
 8005940:	bf00      	nop
      }
      break;
 8005942:	e006      	b.n	8005952 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005944:	6839      	ldr	r1, [r7, #0]
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f001 f932 	bl	8006bb0 <USBD_CtlError>
      ret = USBD_FAIL;
 800594c:	2302      	movs	r3, #2
 800594e:	75fb      	strb	r3, [r7, #23]
      break;
 8005950:	bf00      	nop
  }

  return ret;
 8005952:	7dfb      	ldrb	r3, [r7, #23]
}
 8005954:	4618      	mov	r0, r3
 8005956:	3718      	adds	r7, #24
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	460b      	mov	r3, r1
 8005966:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800596e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005976:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800597e:	2b00      	cmp	r3, #0
 8005980:	d03a      	beq.n	80059f8 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005982:	78fa      	ldrb	r2, [r7, #3]
 8005984:	6879      	ldr	r1, [r7, #4]
 8005986:	4613      	mov	r3, r2
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	4413      	add	r3, r2
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	440b      	add	r3, r1
 8005990:	331c      	adds	r3, #28
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d029      	beq.n	80059ec <USBD_CDC_DataIn+0x90>
 8005998:	78fa      	ldrb	r2, [r7, #3]
 800599a:	6879      	ldr	r1, [r7, #4]
 800599c:	4613      	mov	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	4413      	add	r3, r2
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	440b      	add	r3, r1
 80059a6:	331c      	adds	r3, #28
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	78f9      	ldrb	r1, [r7, #3]
 80059ac:	68b8      	ldr	r0, [r7, #8]
 80059ae:	460b      	mov	r3, r1
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	440b      	add	r3, r1
 80059b4:	00db      	lsls	r3, r3, #3
 80059b6:	4403      	add	r3, r0
 80059b8:	3320      	adds	r3, #32
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	fbb2 f1f3 	udiv	r1, r2, r3
 80059c0:	fb01 f303 	mul.w	r3, r1, r3
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d110      	bne.n	80059ec <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80059ca:	78fa      	ldrb	r2, [r7, #3]
 80059cc:	6879      	ldr	r1, [r7, #4]
 80059ce:	4613      	mov	r3, r2
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	4413      	add	r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	440b      	add	r3, r1
 80059d8:	331c      	adds	r3, #28
 80059da:	2200      	movs	r2, #0
 80059dc:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80059de:	78f9      	ldrb	r1, [r7, #3]
 80059e0:	2300      	movs	r3, #0
 80059e2:	2200      	movs	r2, #0
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f001 fdc7 	bl	8007578 <USBD_LL_Transmit>
 80059ea:	e003      	b.n	80059f4 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 80059f4:	2300      	movs	r3, #0
 80059f6:	e000      	b.n	80059fa <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80059f8:	2302      	movs	r3, #2
  }
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b084      	sub	sp, #16
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a14:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005a16:	78fb      	ldrb	r3, [r7, #3]
 8005a18:	4619      	mov	r1, r3
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f001 fdf2 	bl	8007604 <USBD_LL_GetRxDataSize>
 8005a20:	4602      	mov	r2, r0
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00d      	beq.n	8005a4e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005a46:	4611      	mov	r1, r2
 8005a48:	4798      	blx	r3

    return USBD_OK;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	e000      	b.n	8005a50 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005a4e:	2302      	movs	r3, #2
  }
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3710      	adds	r7, #16
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a66:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d014      	beq.n	8005a9c <USBD_CDC_EP0_RxReady+0x44>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005a78:	2bff      	cmp	r3, #255	@ 0xff
 8005a7a:	d00f      	beq.n	8005a9c <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005a8a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005a92:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	22ff      	movs	r2, #255	@ 0xff
 8005a98:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3710      	adds	r7, #16
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
	...

08005aa8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2243      	movs	r2, #67	@ 0x43
 8005ab4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005ab6:	4b03      	ldr	r3, [pc, #12]	@ (8005ac4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bc80      	pop	{r7}
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	20000094 	.word	0x20000094

08005ac8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2243      	movs	r2, #67	@ 0x43
 8005ad4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005ad6:	4b03      	ldr	r3, [pc, #12]	@ (8005ae4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bc80      	pop	{r7}
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop
 8005ae4:	20000050 	.word	0x20000050

08005ae8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2243      	movs	r2, #67	@ 0x43
 8005af4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005af6:	4b03      	ldr	r3, [pc, #12]	@ (8005b04 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bc80      	pop	{r7}
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	200000d8 	.word	0x200000d8

08005b08 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	220a      	movs	r2, #10
 8005b14:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005b16:	4b03      	ldr	r3, [pc, #12]	@ (8005b24 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bc80      	pop	{r7}
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	2000000c 	.word	0x2000000c

08005b28 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005b32:	2302      	movs	r3, #2
 8005b34:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d005      	beq.n	8005b48 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	683a      	ldr	r2, [r7, #0]
 8005b40:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8005b44:	2300      	movs	r3, #0
 8005b46:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3714      	adds	r7, #20
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bc80      	pop	{r7}
 8005b52:	4770      	bx	lr

08005b54 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b087      	sub	sp, #28
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	4613      	mov	r3, r2
 8005b60:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b68:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	68ba      	ldr	r2, [r7, #8]
 8005b6e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005b72:	88fa      	ldrh	r2, [r7, #6]
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	371c      	adds	r7, #28
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bc80      	pop	{r7}
 8005b84:	4770      	bx	lr

08005b86 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005b86:	b480      	push	{r7}
 8005b88:	b085      	sub	sp, #20
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
 8005b8e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b96:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	683a      	ldr	r2, [r7, #0]
 8005b9c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3714      	adds	r7, #20
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bc80      	pop	{r7}
 8005baa:	4770      	bx	lr

08005bac <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005bba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d01c      	beq.n	8005c00 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d115      	bne.n	8005bfc <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	2181      	movs	r1, #129	@ 0x81
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f001 fcc0 	bl	8007578 <USBD_LL_Transmit>

      return USBD_OK;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	e002      	b.n	8005c02 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e000      	b.n	8005c02 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8005c00:	2302      	movs	r3, #2
  }
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3710      	adds	r7, #16
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}

08005c0a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005c0a:	b580      	push	{r7, lr}
 8005c0c:	b084      	sub	sp, #16
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c18:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d017      	beq.n	8005c54 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	7c1b      	ldrb	r3, [r3, #16]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d109      	bne.n	8005c40 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005c32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005c36:	2101      	movs	r1, #1
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f001 fcc0 	bl	80075be <USBD_LL_PrepareReceive>
 8005c3e:	e007      	b.n	8005c50 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005c46:	2340      	movs	r3, #64	@ 0x40
 8005c48:	2101      	movs	r1, #1
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f001 fcb7 	bl	80075be <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005c50:	2300      	movs	r3, #0
 8005c52:	e000      	b.n	8005c56 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005c54:	2302      	movs	r3, #2
  }
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3710      	adds	r7, #16
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}

08005c5e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005c5e:	b580      	push	{r7, lr}
 8005c60:	b084      	sub	sp, #16
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	60f8      	str	r0, [r7, #12]
 8005c66:	60b9      	str	r1, [r7, #8]
 8005c68:	4613      	mov	r3, r2
 8005c6a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d101      	bne.n	8005c76 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005c72:	2302      	movs	r3, #2
 8005c74:	e01a      	b.n	8005cac <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d003      	beq.n	8005c88 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d003      	beq.n	8005c96 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	68ba      	ldr	r2, [r7, #8]
 8005c92:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	79fa      	ldrb	r2, [r7, #7]
 8005ca2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f001 fb25 	bl	80072f4 <USBD_LL_Init>

  return USBD_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3710      	adds	r7, #16
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d006      	beq.n	8005cd6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	683a      	ldr	r2, [r7, #0]
 8005ccc:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	73fb      	strb	r3, [r7, #15]
 8005cd4:	e001      	b.n	8005cda <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005cd6:	2302      	movs	r3, #2
 8005cd8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3714      	adds	r7, #20
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bc80      	pop	{r7}
 8005ce4:	4770      	bx	lr

08005ce6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b082      	sub	sp, #8
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f001 fb5a 	bl	80073a8 <USBD_LL_Start>

  return USBD_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3708      	adds	r7, #8
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005cfe:	b480      	push	{r7}
 8005d00:	b083      	sub	sp, #12
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005d06:	2300      	movs	r3, #0
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bc80      	pop	{r7}
 8005d10:	4770      	bx	lr

08005d12 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005d12:	b580      	push	{r7, lr}
 8005d14:	b084      	sub	sp, #16
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005d1e:	2302      	movs	r3, #2
 8005d20:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00c      	beq.n	8005d46 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	78fa      	ldrb	r2, [r7, #3]
 8005d36:	4611      	mov	r1, r2
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	4798      	blx	r3
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d101      	bne.n	8005d46 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005d42:	2300      	movs	r3, #0
 8005d44:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3710      	adds	r7, #16
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	460b      	mov	r3, r1
 8005d5a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	78fa      	ldrb	r2, [r7, #3]
 8005d66:	4611      	mov	r1, r2
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	4798      	blx	r3

  return USBD_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3708      	adds	r7, #8
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b082      	sub	sp, #8
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
 8005d7e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8005d86:	6839      	ldr	r1, [r7, #0]
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f000 fed8 	bl	8006b3e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005daa:	f003 031f 	and.w	r3, r3, #31
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d016      	beq.n	8005de0 <USBD_LL_SetupStage+0x6a>
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d81c      	bhi.n	8005df0 <USBD_LL_SetupStage+0x7a>
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d002      	beq.n	8005dc0 <USBD_LL_SetupStage+0x4a>
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d008      	beq.n	8005dd0 <USBD_LL_SetupStage+0x5a>
 8005dbe:	e017      	b.n	8005df0 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f000 f9cb 	bl	8006164 <USBD_StdDevReq>
      break;
 8005dce:	e01a      	b.n	8005e06 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 fa2d 	bl	8006238 <USBD_StdItfReq>
      break;
 8005dde:	e012      	b.n	8005e06 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8005de6:	4619      	mov	r1, r3
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 fa6d 	bl	80062c8 <USBD_StdEPReq>
      break;
 8005dee:	e00a      	b.n	8005e06 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005df6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f001 fb32 	bl	8007468 <USBD_LL_StallEP>
      break;
 8005e04:	bf00      	nop
  }

  return USBD_OK;
 8005e06:	2300      	movs	r3, #0
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3708      	adds	r7, #8
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b086      	sub	sp, #24
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	460b      	mov	r3, r1
 8005e1a:	607a      	str	r2, [r7, #4]
 8005e1c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005e1e:	7afb      	ldrb	r3, [r7, #11]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d14b      	bne.n	8005ebc <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005e2a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005e32:	2b03      	cmp	r3, #3
 8005e34:	d134      	bne.n	8005ea0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	68da      	ldr	r2, [r3, #12]
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d919      	bls.n	8005e76 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	68da      	ldr	r2, [r3, #12]
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	1ad2      	subs	r2, r2, r3
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	68da      	ldr	r2, [r3, #12]
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d203      	bcs.n	8005e64 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	e002      	b.n	8005e6a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	6879      	ldr	r1, [r7, #4]
 8005e6e:	68f8      	ldr	r0, [r7, #12]
 8005e70:	f000 ff54 	bl	8006d1c <USBD_CtlContinueRx>
 8005e74:	e038      	b.n	8005ee8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00a      	beq.n	8005e98 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005e88:	2b03      	cmp	r3, #3
 8005e8a:	d105      	bne.n	8005e98 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	68f8      	ldr	r0, [r7, #12]
 8005e96:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	f000 ff51 	bl	8006d40 <USBD_CtlSendStatus>
 8005e9e:	e023      	b.n	8005ee8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005ea6:	2b05      	cmp	r3, #5
 8005ea8:	d11e      	bne.n	8005ee8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005eb2:	2100      	movs	r1, #0
 8005eb4:	68f8      	ldr	r0, [r7, #12]
 8005eb6:	f001 fad7 	bl	8007468 <USBD_LL_StallEP>
 8005eba:	e015      	b.n	8005ee8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005ec2:	699b      	ldr	r3, [r3, #24]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d00d      	beq.n	8005ee4 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005ece:	2b03      	cmp	r3, #3
 8005ed0:	d108      	bne.n	8005ee4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	7afa      	ldrb	r2, [r7, #11]
 8005edc:	4611      	mov	r1, r2
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	4798      	blx	r3
 8005ee2:	e001      	b.n	8005ee8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005ee4:	2302      	movs	r3, #2
 8005ee6:	e000      	b.n	8005eea <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3718      	adds	r7, #24
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}

08005ef2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b086      	sub	sp, #24
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	60f8      	str	r0, [r7, #12]
 8005efa:	460b      	mov	r3, r1
 8005efc:	607a      	str	r2, [r7, #4]
 8005efe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005f00:	7afb      	ldrb	r3, [r7, #11]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d17f      	bne.n	8006006 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	3314      	adds	r3, #20
 8005f0a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	d15c      	bne.n	8005fd0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	68da      	ldr	r2, [r3, #12]
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d915      	bls.n	8005f4e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	68da      	ldr	r2, [r3, #12]
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	1ad2      	subs	r2, r2, r3
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	461a      	mov	r2, r3
 8005f38:	6879      	ldr	r1, [r7, #4]
 8005f3a:	68f8      	ldr	r0, [r7, #12]
 8005f3c:	f000 febe 	bl	8006cbc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f40:	2300      	movs	r3, #0
 8005f42:	2200      	movs	r2, #0
 8005f44:	2100      	movs	r1, #0
 8005f46:	68f8      	ldr	r0, [r7, #12]
 8005f48:	f001 fb39 	bl	80075be <USBD_LL_PrepareReceive>
 8005f4c:	e04e      	b.n	8005fec <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	6912      	ldr	r2, [r2, #16]
 8005f56:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f5a:	fb01 f202 	mul.w	r2, r1, r2
 8005f5e:	1a9b      	subs	r3, r3, r2
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d11c      	bne.n	8005f9e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	689a      	ldr	r2, [r3, #8]
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d316      	bcc.n	8005f9e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	689a      	ldr	r2, [r3, #8]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d20f      	bcs.n	8005f9e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005f7e:	2200      	movs	r2, #0
 8005f80:	2100      	movs	r1, #0
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f000 fe9a 	bl	8006cbc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f90:	2300      	movs	r3, #0
 8005f92:	2200      	movs	r2, #0
 8005f94:	2100      	movs	r1, #0
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f001 fb11 	bl	80075be <USBD_LL_PrepareReceive>
 8005f9c:	e026      	b.n	8005fec <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00a      	beq.n	8005fc0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005fb0:	2b03      	cmp	r3, #3
 8005fb2:	d105      	bne.n	8005fc0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005fc0:	2180      	movs	r1, #128	@ 0x80
 8005fc2:	68f8      	ldr	r0, [r7, #12]
 8005fc4:	f001 fa50 	bl	8007468 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f000 fecc 	bl	8006d66 <USBD_CtlReceiveStatus>
 8005fce:	e00d      	b.n	8005fec <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005fd6:	2b04      	cmp	r3, #4
 8005fd8:	d004      	beq.n	8005fe4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d103      	bne.n	8005fec <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005fe4:	2180      	movs	r1, #128	@ 0x80
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	f001 fa3e 	bl	8007468 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d11d      	bne.n	8006032 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	f7ff fe81 	bl	8005cfe <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006004:	e015      	b.n	8006032 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00d      	beq.n	800602e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006018:	2b03      	cmp	r3, #3
 800601a:	d108      	bne.n	800602e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006022:	695b      	ldr	r3, [r3, #20]
 8006024:	7afa      	ldrb	r2, [r7, #11]
 8006026:	4611      	mov	r1, r2
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	4798      	blx	r3
 800602c:	e001      	b.n	8006032 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800602e:	2302      	movs	r3, #2
 8006030:	e000      	b.n	8006034 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3718      	adds	r7, #24
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006044:	2340      	movs	r3, #64	@ 0x40
 8006046:	2200      	movs	r2, #0
 8006048:	2100      	movs	r1, #0
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f001 f9c7 	bl	80073de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2240      	movs	r2, #64	@ 0x40
 800605c:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006060:	2340      	movs	r3, #64	@ 0x40
 8006062:	2200      	movs	r2, #0
 8006064:	2180      	movs	r1, #128	@ 0x80
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f001 f9b9 	bl	80073de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2240      	movs	r2, #64	@ 0x40
 8006076:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800609c:	2b00      	cmp	r3, #0
 800609e:	d009      	beq.n	80060b4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	6852      	ldr	r2, [r2, #4]
 80060ac:	b2d2      	uxtb	r2, r2
 80060ae:	4611      	mov	r1, r2
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	4798      	blx	r3
  }

  return USBD_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3708      	adds	r7, #8
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80060be:	b480      	push	{r7}
 80060c0:	b083      	sub	sp, #12
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
 80060c6:	460b      	mov	r3, r1
 80060c8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	78fa      	ldrb	r2, [r7, #3]
 80060ce:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	370c      	adds	r7, #12
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bc80      	pop	{r7}
 80060da:	4770      	bx	lr

080060dc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2204      	movs	r2, #4
 80060f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	370c      	adds	r7, #12
 80060fe:	46bd      	mov	sp, r7
 8006100:	bc80      	pop	{r7}
 8006102:	4770      	bx	lr

08006104 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006112:	2b04      	cmp	r3, #4
 8006114:	d105      	bne.n	8006122 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006122:	2300      	movs	r3, #0
}
 8006124:	4618      	mov	r0, r3
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	bc80      	pop	{r7}
 800612c:	4770      	bx	lr

0800612e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800612e:	b580      	push	{r7, lr}
 8006130:	b082      	sub	sp, #8
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800613c:	2b03      	cmp	r3, #3
 800613e:	d10b      	bne.n	8006158 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006146:	69db      	ldr	r3, [r3, #28]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d005      	beq.n	8006158 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006152:	69db      	ldr	r3, [r3, #28]
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	3708      	adds	r7, #8
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
	...

08006164 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800616e:	2300      	movs	r3, #0
 8006170:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800617a:	2b40      	cmp	r3, #64	@ 0x40
 800617c:	d005      	beq.n	800618a <USBD_StdDevReq+0x26>
 800617e:	2b40      	cmp	r3, #64	@ 0x40
 8006180:	d84f      	bhi.n	8006222 <USBD_StdDevReq+0xbe>
 8006182:	2b00      	cmp	r3, #0
 8006184:	d009      	beq.n	800619a <USBD_StdDevReq+0x36>
 8006186:	2b20      	cmp	r3, #32
 8006188:	d14b      	bne.n	8006222 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	6839      	ldr	r1, [r7, #0]
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	4798      	blx	r3
      break;
 8006198:	e048      	b.n	800622c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	785b      	ldrb	r3, [r3, #1]
 800619e:	2b09      	cmp	r3, #9
 80061a0:	d839      	bhi.n	8006216 <USBD_StdDevReq+0xb2>
 80061a2:	a201      	add	r2, pc, #4	@ (adr r2, 80061a8 <USBD_StdDevReq+0x44>)
 80061a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a8:	080061f9 	.word	0x080061f9
 80061ac:	0800620d 	.word	0x0800620d
 80061b0:	08006217 	.word	0x08006217
 80061b4:	08006203 	.word	0x08006203
 80061b8:	08006217 	.word	0x08006217
 80061bc:	080061db 	.word	0x080061db
 80061c0:	080061d1 	.word	0x080061d1
 80061c4:	08006217 	.word	0x08006217
 80061c8:	080061ef 	.word	0x080061ef
 80061cc:	080061e5 	.word	0x080061e5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80061d0:	6839      	ldr	r1, [r7, #0]
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 f9dc 	bl	8006590 <USBD_GetDescriptor>
          break;
 80061d8:	e022      	b.n	8006220 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80061da:	6839      	ldr	r1, [r7, #0]
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 fb3f 	bl	8006860 <USBD_SetAddress>
          break;
 80061e2:	e01d      	b.n	8006220 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80061e4:	6839      	ldr	r1, [r7, #0]
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 fb7e 	bl	80068e8 <USBD_SetConfig>
          break;
 80061ec:	e018      	b.n	8006220 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80061ee:	6839      	ldr	r1, [r7, #0]
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 fc07 	bl	8006a04 <USBD_GetConfig>
          break;
 80061f6:	e013      	b.n	8006220 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80061f8:	6839      	ldr	r1, [r7, #0]
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 fc37 	bl	8006a6e <USBD_GetStatus>
          break;
 8006200:	e00e      	b.n	8006220 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006202:	6839      	ldr	r1, [r7, #0]
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 fc65 	bl	8006ad4 <USBD_SetFeature>
          break;
 800620a:	e009      	b.n	8006220 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800620c:	6839      	ldr	r1, [r7, #0]
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 fc74 	bl	8006afc <USBD_ClrFeature>
          break;
 8006214:	e004      	b.n	8006220 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006216:	6839      	ldr	r1, [r7, #0]
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 fcc9 	bl	8006bb0 <USBD_CtlError>
          break;
 800621e:	bf00      	nop
      }
      break;
 8006220:	e004      	b.n	800622c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006222:	6839      	ldr	r1, [r7, #0]
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 fcc3 	bl	8006bb0 <USBD_CtlError>
      break;
 800622a:	bf00      	nop
  }

  return ret;
 800622c:	7bfb      	ldrb	r3, [r7, #15]
}
 800622e:	4618      	mov	r0, r3
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop

08006238 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006242:	2300      	movs	r3, #0
 8006244:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800624e:	2b40      	cmp	r3, #64	@ 0x40
 8006250:	d005      	beq.n	800625e <USBD_StdItfReq+0x26>
 8006252:	2b40      	cmp	r3, #64	@ 0x40
 8006254:	d82e      	bhi.n	80062b4 <USBD_StdItfReq+0x7c>
 8006256:	2b00      	cmp	r3, #0
 8006258:	d001      	beq.n	800625e <USBD_StdItfReq+0x26>
 800625a:	2b20      	cmp	r3, #32
 800625c:	d12a      	bne.n	80062b4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006264:	3b01      	subs	r3, #1
 8006266:	2b02      	cmp	r3, #2
 8006268:	d81d      	bhi.n	80062a6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	889b      	ldrh	r3, [r3, #4]
 800626e:	b2db      	uxtb	r3, r3
 8006270:	2b01      	cmp	r3, #1
 8006272:	d813      	bhi.n	800629c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	6839      	ldr	r1, [r7, #0]
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	4798      	blx	r3
 8006282:	4603      	mov	r3, r0
 8006284:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	88db      	ldrh	r3, [r3, #6]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d110      	bne.n	80062b0 <USBD_StdItfReq+0x78>
 800628e:	7bfb      	ldrb	r3, [r7, #15]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d10d      	bne.n	80062b0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 fd53 	bl	8006d40 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800629a:	e009      	b.n	80062b0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800629c:	6839      	ldr	r1, [r7, #0]
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 fc86 	bl	8006bb0 <USBD_CtlError>
          break;
 80062a4:	e004      	b.n	80062b0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80062a6:	6839      	ldr	r1, [r7, #0]
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 fc81 	bl	8006bb0 <USBD_CtlError>
          break;
 80062ae:	e000      	b.n	80062b2 <USBD_StdItfReq+0x7a>
          break;
 80062b0:	bf00      	nop
      }
      break;
 80062b2:	e004      	b.n	80062be <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80062b4:	6839      	ldr	r1, [r7, #0]
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 fc7a 	bl	8006bb0 <USBD_CtlError>
      break;
 80062bc:	bf00      	nop
  }

  return USBD_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3710      	adds	r7, #16
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80062d2:	2300      	movs	r3, #0
 80062d4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	889b      	ldrh	r3, [r3, #4]
 80062da:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80062e4:	2b40      	cmp	r3, #64	@ 0x40
 80062e6:	d007      	beq.n	80062f8 <USBD_StdEPReq+0x30>
 80062e8:	2b40      	cmp	r3, #64	@ 0x40
 80062ea:	f200 8146 	bhi.w	800657a <USBD_StdEPReq+0x2b2>
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d00a      	beq.n	8006308 <USBD_StdEPReq+0x40>
 80062f2:	2b20      	cmp	r3, #32
 80062f4:	f040 8141 	bne.w	800657a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	6839      	ldr	r1, [r7, #0]
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	4798      	blx	r3
      break;
 8006306:	e13d      	b.n	8006584 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006310:	2b20      	cmp	r3, #32
 8006312:	d10a      	bne.n	800632a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	6839      	ldr	r1, [r7, #0]
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	4798      	blx	r3
 8006322:	4603      	mov	r3, r0
 8006324:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006326:	7bfb      	ldrb	r3, [r7, #15]
 8006328:	e12d      	b.n	8006586 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	785b      	ldrb	r3, [r3, #1]
 800632e:	2b03      	cmp	r3, #3
 8006330:	d007      	beq.n	8006342 <USBD_StdEPReq+0x7a>
 8006332:	2b03      	cmp	r3, #3
 8006334:	f300 811b 	bgt.w	800656e <USBD_StdEPReq+0x2a6>
 8006338:	2b00      	cmp	r3, #0
 800633a:	d072      	beq.n	8006422 <USBD_StdEPReq+0x15a>
 800633c:	2b01      	cmp	r3, #1
 800633e:	d03a      	beq.n	80063b6 <USBD_StdEPReq+0xee>
 8006340:	e115      	b.n	800656e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006348:	2b02      	cmp	r3, #2
 800634a:	d002      	beq.n	8006352 <USBD_StdEPReq+0x8a>
 800634c:	2b03      	cmp	r3, #3
 800634e:	d015      	beq.n	800637c <USBD_StdEPReq+0xb4>
 8006350:	e02b      	b.n	80063aa <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006352:	7bbb      	ldrb	r3, [r7, #14]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d00c      	beq.n	8006372 <USBD_StdEPReq+0xaa>
 8006358:	7bbb      	ldrb	r3, [r7, #14]
 800635a:	2b80      	cmp	r3, #128	@ 0x80
 800635c:	d009      	beq.n	8006372 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800635e:	7bbb      	ldrb	r3, [r7, #14]
 8006360:	4619      	mov	r1, r3
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f001 f880 	bl	8007468 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006368:	2180      	movs	r1, #128	@ 0x80
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f001 f87c 	bl	8007468 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006370:	e020      	b.n	80063b4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006372:	6839      	ldr	r1, [r7, #0]
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 fc1b 	bl	8006bb0 <USBD_CtlError>
              break;
 800637a:	e01b      	b.n	80063b4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	885b      	ldrh	r3, [r3, #2]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d10e      	bne.n	80063a2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006384:	7bbb      	ldrb	r3, [r7, #14]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00b      	beq.n	80063a2 <USBD_StdEPReq+0xda>
 800638a:	7bbb      	ldrb	r3, [r7, #14]
 800638c:	2b80      	cmp	r3, #128	@ 0x80
 800638e:	d008      	beq.n	80063a2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	88db      	ldrh	r3, [r3, #6]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d104      	bne.n	80063a2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006398:	7bbb      	ldrb	r3, [r7, #14]
 800639a:	4619      	mov	r1, r3
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f001 f863 	bl	8007468 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 fccc 	bl	8006d40 <USBD_CtlSendStatus>

              break;
 80063a8:	e004      	b.n	80063b4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80063aa:	6839      	ldr	r1, [r7, #0]
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 fbff 	bl	8006bb0 <USBD_CtlError>
              break;
 80063b2:	bf00      	nop
          }
          break;
 80063b4:	e0e0      	b.n	8006578 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063bc:	2b02      	cmp	r3, #2
 80063be:	d002      	beq.n	80063c6 <USBD_StdEPReq+0xfe>
 80063c0:	2b03      	cmp	r3, #3
 80063c2:	d015      	beq.n	80063f0 <USBD_StdEPReq+0x128>
 80063c4:	e026      	b.n	8006414 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063c6:	7bbb      	ldrb	r3, [r7, #14]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00c      	beq.n	80063e6 <USBD_StdEPReq+0x11e>
 80063cc:	7bbb      	ldrb	r3, [r7, #14]
 80063ce:	2b80      	cmp	r3, #128	@ 0x80
 80063d0:	d009      	beq.n	80063e6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80063d2:	7bbb      	ldrb	r3, [r7, #14]
 80063d4:	4619      	mov	r1, r3
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f001 f846 	bl	8007468 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80063dc:	2180      	movs	r1, #128	@ 0x80
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f001 f842 	bl	8007468 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80063e4:	e01c      	b.n	8006420 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80063e6:	6839      	ldr	r1, [r7, #0]
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 fbe1 	bl	8006bb0 <USBD_CtlError>
              break;
 80063ee:	e017      	b.n	8006420 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	885b      	ldrh	r3, [r3, #2]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d112      	bne.n	800641e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80063f8:	7bbb      	ldrb	r3, [r7, #14]
 80063fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d004      	beq.n	800640c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006402:	7bbb      	ldrb	r3, [r7, #14]
 8006404:	4619      	mov	r1, r3
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f001 f84d 	bl	80074a6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 fc97 	bl	8006d40 <USBD_CtlSendStatus>
              }
              break;
 8006412:	e004      	b.n	800641e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006414:	6839      	ldr	r1, [r7, #0]
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 fbca 	bl	8006bb0 <USBD_CtlError>
              break;
 800641c:	e000      	b.n	8006420 <USBD_StdEPReq+0x158>
              break;
 800641e:	bf00      	nop
          }
          break;
 8006420:	e0aa      	b.n	8006578 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006428:	2b02      	cmp	r3, #2
 800642a:	d002      	beq.n	8006432 <USBD_StdEPReq+0x16a>
 800642c:	2b03      	cmp	r3, #3
 800642e:	d032      	beq.n	8006496 <USBD_StdEPReq+0x1ce>
 8006430:	e097      	b.n	8006562 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006432:	7bbb      	ldrb	r3, [r7, #14]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d007      	beq.n	8006448 <USBD_StdEPReq+0x180>
 8006438:	7bbb      	ldrb	r3, [r7, #14]
 800643a:	2b80      	cmp	r3, #128	@ 0x80
 800643c:	d004      	beq.n	8006448 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800643e:	6839      	ldr	r1, [r7, #0]
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 fbb5 	bl	8006bb0 <USBD_CtlError>
                break;
 8006446:	e091      	b.n	800656c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006448:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800644c:	2b00      	cmp	r3, #0
 800644e:	da0b      	bge.n	8006468 <USBD_StdEPReq+0x1a0>
 8006450:	7bbb      	ldrb	r3, [r7, #14]
 8006452:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006456:	4613      	mov	r3, r2
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	4413      	add	r3, r2
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	3310      	adds	r3, #16
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	4413      	add	r3, r2
 8006464:	3304      	adds	r3, #4
 8006466:	e00b      	b.n	8006480 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006468:	7bbb      	ldrb	r3, [r7, #14]
 800646a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800646e:	4613      	mov	r3, r2
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	4413      	add	r3, r2
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	4413      	add	r3, r2
 800647e:	3304      	adds	r3, #4
 8006480:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	2200      	movs	r2, #0
 8006486:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	2202      	movs	r2, #2
 800648c:	4619      	mov	r1, r3
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 fbf8 	bl	8006c84 <USBD_CtlSendData>
              break;
 8006494:	e06a      	b.n	800656c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006496:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800649a:	2b00      	cmp	r3, #0
 800649c:	da11      	bge.n	80064c2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800649e:	7bbb      	ldrb	r3, [r7, #14]
 80064a0:	f003 020f 	and.w	r2, r3, #15
 80064a4:	6879      	ldr	r1, [r7, #4]
 80064a6:	4613      	mov	r3, r2
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	4413      	add	r3, r2
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	440b      	add	r3, r1
 80064b0:	3318      	adds	r3, #24
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d117      	bne.n	80064e8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80064b8:	6839      	ldr	r1, [r7, #0]
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 fb78 	bl	8006bb0 <USBD_CtlError>
                  break;
 80064c0:	e054      	b.n	800656c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80064c2:	7bbb      	ldrb	r3, [r7, #14]
 80064c4:	f003 020f 	and.w	r2, r3, #15
 80064c8:	6879      	ldr	r1, [r7, #4]
 80064ca:	4613      	mov	r3, r2
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	4413      	add	r3, r2
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	440b      	add	r3, r1
 80064d4:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d104      	bne.n	80064e8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80064de:	6839      	ldr	r1, [r7, #0]
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 fb65 	bl	8006bb0 <USBD_CtlError>
                  break;
 80064e6:	e041      	b.n	800656c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	da0b      	bge.n	8006508 <USBD_StdEPReq+0x240>
 80064f0:	7bbb      	ldrb	r3, [r7, #14]
 80064f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80064f6:	4613      	mov	r3, r2
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	4413      	add	r3, r2
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	3310      	adds	r3, #16
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	4413      	add	r3, r2
 8006504:	3304      	adds	r3, #4
 8006506:	e00b      	b.n	8006520 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006508:	7bbb      	ldrb	r3, [r7, #14]
 800650a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800650e:	4613      	mov	r3, r2
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	4413      	add	r3, r2
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	4413      	add	r3, r2
 800651e:	3304      	adds	r3, #4
 8006520:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006522:	7bbb      	ldrb	r3, [r7, #14]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d002      	beq.n	800652e <USBD_StdEPReq+0x266>
 8006528:	7bbb      	ldrb	r3, [r7, #14]
 800652a:	2b80      	cmp	r3, #128	@ 0x80
 800652c:	d103      	bne.n	8006536 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	2200      	movs	r2, #0
 8006532:	601a      	str	r2, [r3, #0]
 8006534:	e00e      	b.n	8006554 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006536:	7bbb      	ldrb	r3, [r7, #14]
 8006538:	4619      	mov	r1, r3
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 ffd2 	bl	80074e4 <USBD_LL_IsStallEP>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d003      	beq.n	800654e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	2201      	movs	r2, #1
 800654a:	601a      	str	r2, [r3, #0]
 800654c:	e002      	b.n	8006554 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	2200      	movs	r2, #0
 8006552:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	2202      	movs	r2, #2
 8006558:	4619      	mov	r1, r3
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 fb92 	bl	8006c84 <USBD_CtlSendData>
              break;
 8006560:	e004      	b.n	800656c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8006562:	6839      	ldr	r1, [r7, #0]
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 fb23 	bl	8006bb0 <USBD_CtlError>
              break;
 800656a:	bf00      	nop
          }
          break;
 800656c:	e004      	b.n	8006578 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800656e:	6839      	ldr	r1, [r7, #0]
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 fb1d 	bl	8006bb0 <USBD_CtlError>
          break;
 8006576:	bf00      	nop
      }
      break;
 8006578:	e004      	b.n	8006584 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800657a:	6839      	ldr	r1, [r7, #0]
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 fb17 	bl	8006bb0 <USBD_CtlError>
      break;
 8006582:	bf00      	nop
  }

  return ret;
 8006584:	7bfb      	ldrb	r3, [r7, #15]
}
 8006586:	4618      	mov	r0, r3
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
	...

08006590 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800659a:	2300      	movs	r3, #0
 800659c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800659e:	2300      	movs	r3, #0
 80065a0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80065a2:	2300      	movs	r3, #0
 80065a4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	885b      	ldrh	r3, [r3, #2]
 80065aa:	0a1b      	lsrs	r3, r3, #8
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	3b01      	subs	r3, #1
 80065b0:	2b06      	cmp	r3, #6
 80065b2:	f200 8128 	bhi.w	8006806 <USBD_GetDescriptor+0x276>
 80065b6:	a201      	add	r2, pc, #4	@ (adr r2, 80065bc <USBD_GetDescriptor+0x2c>)
 80065b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065bc:	080065d9 	.word	0x080065d9
 80065c0:	080065f1 	.word	0x080065f1
 80065c4:	08006631 	.word	0x08006631
 80065c8:	08006807 	.word	0x08006807
 80065cc:	08006807 	.word	0x08006807
 80065d0:	080067a7 	.word	0x080067a7
 80065d4:	080067d3 	.word	0x080067d3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	7c12      	ldrb	r2, [r2, #16]
 80065e4:	f107 0108 	add.w	r1, r7, #8
 80065e8:	4610      	mov	r0, r2
 80065ea:	4798      	blx	r3
 80065ec:	60f8      	str	r0, [r7, #12]
      break;
 80065ee:	e112      	b.n	8006816 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	7c1b      	ldrb	r3, [r3, #16]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d10d      	bne.n	8006614 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80065fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006600:	f107 0208 	add.w	r2, r7, #8
 8006604:	4610      	mov	r0, r2
 8006606:	4798      	blx	r3
 8006608:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	3301      	adds	r3, #1
 800660e:	2202      	movs	r2, #2
 8006610:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006612:	e100      	b.n	8006816 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800661a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800661c:	f107 0208 	add.w	r2, r7, #8
 8006620:	4610      	mov	r0, r2
 8006622:	4798      	blx	r3
 8006624:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	3301      	adds	r3, #1
 800662a:	2202      	movs	r2, #2
 800662c:	701a      	strb	r2, [r3, #0]
      break;
 800662e:	e0f2      	b.n	8006816 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	885b      	ldrh	r3, [r3, #2]
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b05      	cmp	r3, #5
 8006638:	f200 80ac 	bhi.w	8006794 <USBD_GetDescriptor+0x204>
 800663c:	a201      	add	r2, pc, #4	@ (adr r2, 8006644 <USBD_GetDescriptor+0xb4>)
 800663e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006642:	bf00      	nop
 8006644:	0800665d 	.word	0x0800665d
 8006648:	08006691 	.word	0x08006691
 800664c:	080066c5 	.word	0x080066c5
 8006650:	080066f9 	.word	0x080066f9
 8006654:	0800672d 	.word	0x0800672d
 8006658:	08006761 	.word	0x08006761
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d00b      	beq.n	8006680 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	7c12      	ldrb	r2, [r2, #16]
 8006674:	f107 0108 	add.w	r1, r7, #8
 8006678:	4610      	mov	r0, r2
 800667a:	4798      	blx	r3
 800667c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800667e:	e091      	b.n	80067a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006680:	6839      	ldr	r1, [r7, #0]
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 fa94 	bl	8006bb0 <USBD_CtlError>
            err++;
 8006688:	7afb      	ldrb	r3, [r7, #11]
 800668a:	3301      	adds	r3, #1
 800668c:	72fb      	strb	r3, [r7, #11]
          break;
 800668e:	e089      	b.n	80067a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00b      	beq.n	80066b4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	7c12      	ldrb	r2, [r2, #16]
 80066a8:	f107 0108 	add.w	r1, r7, #8
 80066ac:	4610      	mov	r0, r2
 80066ae:	4798      	blx	r3
 80066b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066b2:	e077      	b.n	80067a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066b4:	6839      	ldr	r1, [r7, #0]
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 fa7a 	bl	8006bb0 <USBD_CtlError>
            err++;
 80066bc:	7afb      	ldrb	r3, [r7, #11]
 80066be:	3301      	adds	r3, #1
 80066c0:	72fb      	strb	r3, [r7, #11]
          break;
 80066c2:	e06f      	b.n	80067a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d00b      	beq.n	80066e8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	7c12      	ldrb	r2, [r2, #16]
 80066dc:	f107 0108 	add.w	r1, r7, #8
 80066e0:	4610      	mov	r0, r2
 80066e2:	4798      	blx	r3
 80066e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066e6:	e05d      	b.n	80067a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066e8:	6839      	ldr	r1, [r7, #0]
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 fa60 	bl	8006bb0 <USBD_CtlError>
            err++;
 80066f0:	7afb      	ldrb	r3, [r7, #11]
 80066f2:	3301      	adds	r3, #1
 80066f4:	72fb      	strb	r3, [r7, #11]
          break;
 80066f6:	e055      	b.n	80067a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00b      	beq.n	800671c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	7c12      	ldrb	r2, [r2, #16]
 8006710:	f107 0108 	add.w	r1, r7, #8
 8006714:	4610      	mov	r0, r2
 8006716:	4798      	blx	r3
 8006718:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800671a:	e043      	b.n	80067a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800671c:	6839      	ldr	r1, [r7, #0]
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 fa46 	bl	8006bb0 <USBD_CtlError>
            err++;
 8006724:	7afb      	ldrb	r3, [r7, #11]
 8006726:	3301      	adds	r3, #1
 8006728:	72fb      	strb	r3, [r7, #11]
          break;
 800672a:	e03b      	b.n	80067a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006732:	695b      	ldr	r3, [r3, #20]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d00b      	beq.n	8006750 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800673e:	695b      	ldr	r3, [r3, #20]
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	7c12      	ldrb	r2, [r2, #16]
 8006744:	f107 0108 	add.w	r1, r7, #8
 8006748:	4610      	mov	r0, r2
 800674a:	4798      	blx	r3
 800674c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800674e:	e029      	b.n	80067a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006750:	6839      	ldr	r1, [r7, #0]
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 fa2c 	bl	8006bb0 <USBD_CtlError>
            err++;
 8006758:	7afb      	ldrb	r3, [r7, #11]
 800675a:	3301      	adds	r3, #1
 800675c:	72fb      	strb	r3, [r7, #11]
          break;
 800675e:	e021      	b.n	80067a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d00b      	beq.n	8006784 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	7c12      	ldrb	r2, [r2, #16]
 8006778:	f107 0108 	add.w	r1, r7, #8
 800677c:	4610      	mov	r0, r2
 800677e:	4798      	blx	r3
 8006780:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006782:	e00f      	b.n	80067a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006784:	6839      	ldr	r1, [r7, #0]
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 fa12 	bl	8006bb0 <USBD_CtlError>
            err++;
 800678c:	7afb      	ldrb	r3, [r7, #11]
 800678e:	3301      	adds	r3, #1
 8006790:	72fb      	strb	r3, [r7, #11]
          break;
 8006792:	e007      	b.n	80067a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006794:	6839      	ldr	r1, [r7, #0]
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 fa0a 	bl	8006bb0 <USBD_CtlError>
          err++;
 800679c:	7afb      	ldrb	r3, [r7, #11]
 800679e:	3301      	adds	r3, #1
 80067a0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80067a2:	e038      	b.n	8006816 <USBD_GetDescriptor+0x286>
 80067a4:	e037      	b.n	8006816 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	7c1b      	ldrb	r3, [r3, #16]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d109      	bne.n	80067c2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80067b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067b6:	f107 0208 	add.w	r2, r7, #8
 80067ba:	4610      	mov	r0, r2
 80067bc:	4798      	blx	r3
 80067be:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067c0:	e029      	b.n	8006816 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80067c2:	6839      	ldr	r1, [r7, #0]
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 f9f3 	bl	8006bb0 <USBD_CtlError>
        err++;
 80067ca:	7afb      	ldrb	r3, [r7, #11]
 80067cc:	3301      	adds	r3, #1
 80067ce:	72fb      	strb	r3, [r7, #11]
      break;
 80067d0:	e021      	b.n	8006816 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	7c1b      	ldrb	r3, [r3, #16]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d10d      	bne.n	80067f6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80067e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067e2:	f107 0208 	add.w	r2, r7, #8
 80067e6:	4610      	mov	r0, r2
 80067e8:	4798      	blx	r3
 80067ea:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	3301      	adds	r3, #1
 80067f0:	2207      	movs	r2, #7
 80067f2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067f4:	e00f      	b.n	8006816 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80067f6:	6839      	ldr	r1, [r7, #0]
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 f9d9 	bl	8006bb0 <USBD_CtlError>
        err++;
 80067fe:	7afb      	ldrb	r3, [r7, #11]
 8006800:	3301      	adds	r3, #1
 8006802:	72fb      	strb	r3, [r7, #11]
      break;
 8006804:	e007      	b.n	8006816 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006806:	6839      	ldr	r1, [r7, #0]
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 f9d1 	bl	8006bb0 <USBD_CtlError>
      err++;
 800680e:	7afb      	ldrb	r3, [r7, #11]
 8006810:	3301      	adds	r3, #1
 8006812:	72fb      	strb	r3, [r7, #11]
      break;
 8006814:	bf00      	nop
  }

  if (err != 0U)
 8006816:	7afb      	ldrb	r3, [r7, #11]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d11c      	bne.n	8006856 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800681c:	893b      	ldrh	r3, [r7, #8]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d011      	beq.n	8006846 <USBD_GetDescriptor+0x2b6>
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	88db      	ldrh	r3, [r3, #6]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d00d      	beq.n	8006846 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	88da      	ldrh	r2, [r3, #6]
 800682e:	893b      	ldrh	r3, [r7, #8]
 8006830:	4293      	cmp	r3, r2
 8006832:	bf28      	it	cs
 8006834:	4613      	movcs	r3, r2
 8006836:	b29b      	uxth	r3, r3
 8006838:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800683a:	893b      	ldrh	r3, [r7, #8]
 800683c:	461a      	mov	r2, r3
 800683e:	68f9      	ldr	r1, [r7, #12]
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 fa1f 	bl	8006c84 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	88db      	ldrh	r3, [r3, #6]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d104      	bne.n	8006858 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 fa76 	bl	8006d40 <USBD_CtlSendStatus>
 8006854:	e000      	b.n	8006858 <USBD_GetDescriptor+0x2c8>
    return;
 8006856:	bf00      	nop
    }
  }
}
 8006858:	3710      	adds	r7, #16
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop

08006860 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	889b      	ldrh	r3, [r3, #4]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d130      	bne.n	80068d4 <USBD_SetAddress+0x74>
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	88db      	ldrh	r3, [r3, #6]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d12c      	bne.n	80068d4 <USBD_SetAddress+0x74>
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	885b      	ldrh	r3, [r3, #2]
 800687e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006880:	d828      	bhi.n	80068d4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	885b      	ldrh	r3, [r3, #2]
 8006886:	b2db      	uxtb	r3, r3
 8006888:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800688c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006894:	2b03      	cmp	r3, #3
 8006896:	d104      	bne.n	80068a2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006898:	6839      	ldr	r1, [r7, #0]
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 f988 	bl	8006bb0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068a0:	e01d      	b.n	80068de <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	7bfa      	ldrb	r2, [r7, #15]
 80068a6:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80068aa:	7bfb      	ldrb	r3, [r7, #15]
 80068ac:	4619      	mov	r1, r3
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 fe43 	bl	800753a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f000 fa43 	bl	8006d40 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80068ba:	7bfb      	ldrb	r3, [r7, #15]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d004      	beq.n	80068ca <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2202      	movs	r2, #2
 80068c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068c8:	e009      	b.n	80068de <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2201      	movs	r2, #1
 80068ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068d2:	e004      	b.n	80068de <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80068d4:	6839      	ldr	r1, [r7, #0]
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 f96a 	bl	8006bb0 <USBD_CtlError>
  }
}
 80068dc:	bf00      	nop
 80068de:	bf00      	nop
 80068e0:	3710      	adds	r7, #16
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
	...

080068e8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	885b      	ldrh	r3, [r3, #2]
 80068f6:	b2da      	uxtb	r2, r3
 80068f8:	4b41      	ldr	r3, [pc, #260]	@ (8006a00 <USBD_SetConfig+0x118>)
 80068fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80068fc:	4b40      	ldr	r3, [pc, #256]	@ (8006a00 <USBD_SetConfig+0x118>)
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	2b01      	cmp	r3, #1
 8006902:	d904      	bls.n	800690e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006904:	6839      	ldr	r1, [r7, #0]
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 f952 	bl	8006bb0 <USBD_CtlError>
 800690c:	e075      	b.n	80069fa <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006914:	2b02      	cmp	r3, #2
 8006916:	d002      	beq.n	800691e <USBD_SetConfig+0x36>
 8006918:	2b03      	cmp	r3, #3
 800691a:	d023      	beq.n	8006964 <USBD_SetConfig+0x7c>
 800691c:	e062      	b.n	80069e4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800691e:	4b38      	ldr	r3, [pc, #224]	@ (8006a00 <USBD_SetConfig+0x118>)
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d01a      	beq.n	800695c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006926:	4b36      	ldr	r3, [pc, #216]	@ (8006a00 <USBD_SetConfig+0x118>)
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	461a      	mov	r2, r3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2203      	movs	r2, #3
 8006934:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006938:	4b31      	ldr	r3, [pc, #196]	@ (8006a00 <USBD_SetConfig+0x118>)
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	4619      	mov	r1, r3
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f7ff f9e7 	bl	8005d12 <USBD_SetClassConfig>
 8006944:	4603      	mov	r3, r0
 8006946:	2b02      	cmp	r3, #2
 8006948:	d104      	bne.n	8006954 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800694a:	6839      	ldr	r1, [r7, #0]
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 f92f 	bl	8006bb0 <USBD_CtlError>
            return;
 8006952:	e052      	b.n	80069fa <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 f9f3 	bl	8006d40 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800695a:	e04e      	b.n	80069fa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 f9ef 	bl	8006d40 <USBD_CtlSendStatus>
        break;
 8006962:	e04a      	b.n	80069fa <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006964:	4b26      	ldr	r3, [pc, #152]	@ (8006a00 <USBD_SetConfig+0x118>)
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d112      	bne.n	8006992 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2202      	movs	r2, #2
 8006970:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8006974:	4b22      	ldr	r3, [pc, #136]	@ (8006a00 <USBD_SetConfig+0x118>)
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	461a      	mov	r2, r3
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800697e:	4b20      	ldr	r3, [pc, #128]	@ (8006a00 <USBD_SetConfig+0x118>)
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	4619      	mov	r1, r3
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f7ff f9e3 	bl	8005d50 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 f9d8 	bl	8006d40 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006990:	e033      	b.n	80069fa <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006992:	4b1b      	ldr	r3, [pc, #108]	@ (8006a00 <USBD_SetConfig+0x118>)
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	461a      	mov	r2, r3
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	429a      	cmp	r2, r3
 800699e:	d01d      	beq.n	80069dc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	4619      	mov	r1, r3
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f7ff f9d1 	bl	8005d50 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80069ae:	4b14      	ldr	r3, [pc, #80]	@ (8006a00 <USBD_SetConfig+0x118>)
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	461a      	mov	r2, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80069b8:	4b11      	ldr	r3, [pc, #68]	@ (8006a00 <USBD_SetConfig+0x118>)
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	4619      	mov	r1, r3
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f7ff f9a7 	bl	8005d12 <USBD_SetClassConfig>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	d104      	bne.n	80069d4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80069ca:	6839      	ldr	r1, [r7, #0]
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 f8ef 	bl	8006bb0 <USBD_CtlError>
            return;
 80069d2:	e012      	b.n	80069fa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 f9b3 	bl	8006d40 <USBD_CtlSendStatus>
        break;
 80069da:	e00e      	b.n	80069fa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 f9af 	bl	8006d40 <USBD_CtlSendStatus>
        break;
 80069e2:	e00a      	b.n	80069fa <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80069e4:	6839      	ldr	r1, [r7, #0]
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 f8e2 	bl	8006bb0 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80069ec:	4b04      	ldr	r3, [pc, #16]	@ (8006a00 <USBD_SetConfig+0x118>)
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	4619      	mov	r1, r3
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f7ff f9ac 	bl	8005d50 <USBD_ClrClassConfig>
        break;
 80069f8:	bf00      	nop
    }
  }
}
 80069fa:	3708      	adds	r7, #8
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	200001f0 	.word	0x200001f0

08006a04 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	88db      	ldrh	r3, [r3, #6]
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d004      	beq.n	8006a20 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006a16:	6839      	ldr	r1, [r7, #0]
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f000 f8c9 	bl	8006bb0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006a1e:	e022      	b.n	8006a66 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	dc02      	bgt.n	8006a30 <USBD_GetConfig+0x2c>
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	dc03      	bgt.n	8006a36 <USBD_GetConfig+0x32>
 8006a2e:	e015      	b.n	8006a5c <USBD_GetConfig+0x58>
 8006a30:	2b03      	cmp	r3, #3
 8006a32:	d00b      	beq.n	8006a4c <USBD_GetConfig+0x48>
 8006a34:	e012      	b.n	8006a5c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	3308      	adds	r3, #8
 8006a40:	2201      	movs	r2, #1
 8006a42:	4619      	mov	r1, r3
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 f91d 	bl	8006c84 <USBD_CtlSendData>
        break;
 8006a4a:	e00c      	b.n	8006a66 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	3304      	adds	r3, #4
 8006a50:	2201      	movs	r2, #1
 8006a52:	4619      	mov	r1, r3
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 f915 	bl	8006c84 <USBD_CtlSendData>
        break;
 8006a5a:	e004      	b.n	8006a66 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8006a5c:	6839      	ldr	r1, [r7, #0]
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 f8a6 	bl	8006bb0 <USBD_CtlError>
        break;
 8006a64:	bf00      	nop
}
 8006a66:	bf00      	nop
 8006a68:	3708      	adds	r7, #8
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}

08006a6e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a6e:	b580      	push	{r7, lr}
 8006a70:	b082      	sub	sp, #8
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
 8006a76:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a7e:	3b01      	subs	r3, #1
 8006a80:	2b02      	cmp	r3, #2
 8006a82:	d81e      	bhi.n	8006ac2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	88db      	ldrh	r3, [r3, #6]
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	d004      	beq.n	8006a96 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006a8c:	6839      	ldr	r1, [r7, #0]
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 f88e 	bl	8006bb0 <USBD_CtlError>
        break;
 8006a94:	e01a      	b.n	8006acc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2201      	movs	r2, #1
 8006a9a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d005      	beq.n	8006ab2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	f043 0202 	orr.w	r2, r3, #2
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	330c      	adds	r3, #12
 8006ab6:	2202      	movs	r2, #2
 8006ab8:	4619      	mov	r1, r3
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 f8e2 	bl	8006c84 <USBD_CtlSendData>
      break;
 8006ac0:	e004      	b.n	8006acc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006ac2:	6839      	ldr	r1, [r7, #0]
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 f873 	bl	8006bb0 <USBD_CtlError>
      break;
 8006aca:	bf00      	nop
  }
}
 8006acc:	bf00      	nop
 8006ace:	3708      	adds	r7, #8
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b082      	sub	sp, #8
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	885b      	ldrh	r3, [r3, #2]
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d106      	bne.n	8006af4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2201      	movs	r2, #1
 8006aea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f926 	bl	8006d40 <USBD_CtlSendStatus>
  }
}
 8006af4:	bf00      	nop
 8006af6:	3708      	adds	r7, #8
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	2b02      	cmp	r3, #2
 8006b10:	d80b      	bhi.n	8006b2a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	885b      	ldrh	r3, [r3, #2]
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d10c      	bne.n	8006b34 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 f90c 	bl	8006d40 <USBD_CtlSendStatus>
      }
      break;
 8006b28:	e004      	b.n	8006b34 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006b2a:	6839      	ldr	r1, [r7, #0]
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 f83f 	bl	8006bb0 <USBD_CtlError>
      break;
 8006b32:	e000      	b.n	8006b36 <USBD_ClrFeature+0x3a>
      break;
 8006b34:	bf00      	nop
  }
}
 8006b36:	bf00      	nop
 8006b38:	3708      	adds	r7, #8
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006b3e:	b480      	push	{r7}
 8006b40:	b083      	sub	sp, #12
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
 8006b46:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	781a      	ldrb	r2, [r3, #0]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	785a      	ldrb	r2, [r3, #1]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	3302      	adds	r3, #2
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	461a      	mov	r2, r3
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	3303      	adds	r3, #3
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	021b      	lsls	r3, r3, #8
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	4413      	add	r3, r2
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	3304      	adds	r3, #4
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	461a      	mov	r2, r3
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	3305      	adds	r3, #5
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	021b      	lsls	r3, r3, #8
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	4413      	add	r3, r2
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	3306      	adds	r3, #6
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	461a      	mov	r2, r3
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	3307      	adds	r3, #7
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	021b      	lsls	r3, r3, #8
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	4413      	add	r3, r2
 8006ba0:	b29a      	uxth	r2, r3
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	80da      	strh	r2, [r3, #6]

}
 8006ba6:	bf00      	nop
 8006ba8:	370c      	adds	r7, #12
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bc80      	pop	{r7}
 8006bae:	4770      	bx	lr

08006bb0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006bba:	2180      	movs	r1, #128	@ 0x80
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 fc53 	bl	8007468 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006bc2:	2100      	movs	r1, #0
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 fc4f 	bl	8007468 <USBD_LL_StallEP>
}
 8006bca:	bf00      	nop
 8006bcc:	3708      	adds	r7, #8
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b086      	sub	sp, #24
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	60f8      	str	r0, [r7, #12]
 8006bda:	60b9      	str	r1, [r7, #8]
 8006bdc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006bde:	2300      	movs	r3, #0
 8006be0:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d032      	beq.n	8006c4e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f000 f834 	bl	8006c56 <USBD_GetLen>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	005b      	lsls	r3, r3, #1
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006bfc:	7dfb      	ldrb	r3, [r7, #23]
 8006bfe:	1c5a      	adds	r2, r3, #1
 8006c00:	75fa      	strb	r2, [r7, #23]
 8006c02:	461a      	mov	r2, r3
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	4413      	add	r3, r2
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	7812      	ldrb	r2, [r2, #0]
 8006c0c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006c0e:	7dfb      	ldrb	r3, [r7, #23]
 8006c10:	1c5a      	adds	r2, r3, #1
 8006c12:	75fa      	strb	r2, [r7, #23]
 8006c14:	461a      	mov	r2, r3
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	4413      	add	r3, r2
 8006c1a:	2203      	movs	r2, #3
 8006c1c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006c1e:	e012      	b.n	8006c46 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	1c5a      	adds	r2, r3, #1
 8006c24:	60fa      	str	r2, [r7, #12]
 8006c26:	7dfa      	ldrb	r2, [r7, #23]
 8006c28:	1c51      	adds	r1, r2, #1
 8006c2a:	75f9      	strb	r1, [r7, #23]
 8006c2c:	4611      	mov	r1, r2
 8006c2e:	68ba      	ldr	r2, [r7, #8]
 8006c30:	440a      	add	r2, r1
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006c36:	7dfb      	ldrb	r3, [r7, #23]
 8006c38:	1c5a      	adds	r2, r3, #1
 8006c3a:	75fa      	strb	r2, [r7, #23]
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	4413      	add	r3, r2
 8006c42:	2200      	movs	r2, #0
 8006c44:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d1e8      	bne.n	8006c20 <USBD_GetString+0x4e>
    }
  }
}
 8006c4e:	bf00      	nop
 8006c50:	3718      	adds	r7, #24
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006c56:	b480      	push	{r7}
 8006c58:	b085      	sub	sp, #20
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006c62:	e005      	b.n	8006c70 <USBD_GetLen+0x1a>
  {
    len++;
 8006c64:	7bfb      	ldrb	r3, [r7, #15]
 8006c66:	3301      	adds	r3, #1
 8006c68:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d1f5      	bne.n	8006c64 <USBD_GetLen+0xe>
  }

  return len;
 8006c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3714      	adds	r7, #20
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bc80      	pop	{r7}
 8006c82:	4770      	bx	lr

08006c84 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	4613      	mov	r3, r2
 8006c90:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2202      	movs	r2, #2
 8006c96:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006c9a:	88fa      	ldrh	r2, [r7, #6]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006ca0:	88fa      	ldrh	r2, [r7, #6]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006ca6:	88fb      	ldrh	r3, [r7, #6]
 8006ca8:	68ba      	ldr	r2, [r7, #8]
 8006caa:	2100      	movs	r1, #0
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	f000 fc63 	bl	8007578 <USBD_LL_Transmit>

  return USBD_OK;
 8006cb2:	2300      	movs	r3, #0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3710      	adds	r7, #16
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006cca:	88fb      	ldrh	r3, [r7, #6]
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	2100      	movs	r1, #0
 8006cd0:	68f8      	ldr	r0, [r7, #12]
 8006cd2:	f000 fc51 	bl	8007578 <USBD_LL_Transmit>

  return USBD_OK;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3710      	adds	r7, #16
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	4613      	mov	r3, r2
 8006cec:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2203      	movs	r2, #3
 8006cf2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8006cf6:	88fa      	ldrh	r2, [r7, #6]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006cfe:	88fa      	ldrh	r2, [r7, #6]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d06:	88fb      	ldrh	r3, [r7, #6]
 8006d08:	68ba      	ldr	r2, [r7, #8]
 8006d0a:	2100      	movs	r1, #0
 8006d0c:	68f8      	ldr	r0, [r7, #12]
 8006d0e:	f000 fc56 	bl	80075be <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3710      	adds	r7, #16
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b084      	sub	sp, #16
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	4613      	mov	r3, r2
 8006d28:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d2a:	88fb      	ldrh	r3, [r7, #6]
 8006d2c:	68ba      	ldr	r2, [r7, #8]
 8006d2e:	2100      	movs	r1, #0
 8006d30:	68f8      	ldr	r0, [r7, #12]
 8006d32:	f000 fc44 	bl	80075be <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3710      	adds	r7, #16
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2204      	movs	r2, #4
 8006d4c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006d50:	2300      	movs	r3, #0
 8006d52:	2200      	movs	r2, #0
 8006d54:	2100      	movs	r1, #0
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 fc0e 	bl	8007578 <USBD_LL_Transmit>

  return USBD_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3708      	adds	r7, #8
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b082      	sub	sp, #8
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2205      	movs	r2, #5
 8006d72:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d76:	2300      	movs	r3, #0
 8006d78:	2200      	movs	r2, #0
 8006d7a:	2100      	movs	r1, #0
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 fc1e 	bl	80075be <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d82:	2300      	movs	r3, #0
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3708      	adds	r7, #8
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006d90:	2200      	movs	r2, #0
 8006d92:	4912      	ldr	r1, [pc, #72]	@ (8006ddc <MX_USB_DEVICE_Init+0x50>)
 8006d94:	4812      	ldr	r0, [pc, #72]	@ (8006de0 <MX_USB_DEVICE_Init+0x54>)
 8006d96:	f7fe ff62 	bl	8005c5e <USBD_Init>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d001      	beq.n	8006da4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006da0:	f7f9 fa9e 	bl	80002e0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006da4:	490f      	ldr	r1, [pc, #60]	@ (8006de4 <MX_USB_DEVICE_Init+0x58>)
 8006da6:	480e      	ldr	r0, [pc, #56]	@ (8006de0 <MX_USB_DEVICE_Init+0x54>)
 8006da8:	f7fe ff84 	bl	8005cb4 <USBD_RegisterClass>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d001      	beq.n	8006db6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006db2:	f7f9 fa95 	bl	80002e0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006db6:	490c      	ldr	r1, [pc, #48]	@ (8006de8 <MX_USB_DEVICE_Init+0x5c>)
 8006db8:	4809      	ldr	r0, [pc, #36]	@ (8006de0 <MX_USB_DEVICE_Init+0x54>)
 8006dba:	f7fe feb5 	bl	8005b28 <USBD_CDC_RegisterInterface>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d001      	beq.n	8006dc8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006dc4:	f7f9 fa8c 	bl	80002e0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006dc8:	4805      	ldr	r0, [pc, #20]	@ (8006de0 <MX_USB_DEVICE_Init+0x54>)
 8006dca:	f7fe ff8c 	bl	8005ce6 <USBD_Start>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d001      	beq.n	8006dd8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006dd4:	f7f9 fa84 	bl	80002e0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006dd8:	bf00      	nop
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	2000012c 	.word	0x2000012c
 8006de0:	200001f4 	.word	0x200001f4
 8006de4:	20000018 	.word	0x20000018
 8006de8:	2000011c 	.word	0x2000011c

08006dec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006df0:	2200      	movs	r2, #0
 8006df2:	4905      	ldr	r1, [pc, #20]	@ (8006e08 <CDC_Init_FS+0x1c>)
 8006df4:	4805      	ldr	r0, [pc, #20]	@ (8006e0c <CDC_Init_FS+0x20>)
 8006df6:	f7fe fead 	bl	8005b54 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006dfa:	4905      	ldr	r1, [pc, #20]	@ (8006e10 <CDC_Init_FS+0x24>)
 8006dfc:	4803      	ldr	r0, [pc, #12]	@ (8006e0c <CDC_Init_FS+0x20>)
 8006dfe:	f7fe fec2 	bl	8005b86 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006e02:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	200008b8 	.word	0x200008b8
 8006e0c:	200001f4 	.word	0x200001f4
 8006e10:	200004b8 	.word	0x200004b8

08006e14 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006e14:	b480      	push	{r7}
 8006e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006e18:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bc80      	pop	{r7}
 8006e20:	4770      	bx	lr
	...

08006e24 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	6039      	str	r1, [r7, #0]
 8006e2e:	71fb      	strb	r3, [r7, #7]
 8006e30:	4613      	mov	r3, r2
 8006e32:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006e34:	79fb      	ldrb	r3, [r7, #7]
 8006e36:	2b23      	cmp	r3, #35	@ 0x23
 8006e38:	d84a      	bhi.n	8006ed0 <CDC_Control_FS+0xac>
 8006e3a:	a201      	add	r2, pc, #4	@ (adr r2, 8006e40 <CDC_Control_FS+0x1c>)
 8006e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e40:	08006ed1 	.word	0x08006ed1
 8006e44:	08006ed1 	.word	0x08006ed1
 8006e48:	08006ed1 	.word	0x08006ed1
 8006e4c:	08006ed1 	.word	0x08006ed1
 8006e50:	08006ed1 	.word	0x08006ed1
 8006e54:	08006ed1 	.word	0x08006ed1
 8006e58:	08006ed1 	.word	0x08006ed1
 8006e5c:	08006ed1 	.word	0x08006ed1
 8006e60:	08006ed1 	.word	0x08006ed1
 8006e64:	08006ed1 	.word	0x08006ed1
 8006e68:	08006ed1 	.word	0x08006ed1
 8006e6c:	08006ed1 	.word	0x08006ed1
 8006e70:	08006ed1 	.word	0x08006ed1
 8006e74:	08006ed1 	.word	0x08006ed1
 8006e78:	08006ed1 	.word	0x08006ed1
 8006e7c:	08006ed1 	.word	0x08006ed1
 8006e80:	08006ed1 	.word	0x08006ed1
 8006e84:	08006ed1 	.word	0x08006ed1
 8006e88:	08006ed1 	.word	0x08006ed1
 8006e8c:	08006ed1 	.word	0x08006ed1
 8006e90:	08006ed1 	.word	0x08006ed1
 8006e94:	08006ed1 	.word	0x08006ed1
 8006e98:	08006ed1 	.word	0x08006ed1
 8006e9c:	08006ed1 	.word	0x08006ed1
 8006ea0:	08006ed1 	.word	0x08006ed1
 8006ea4:	08006ed1 	.word	0x08006ed1
 8006ea8:	08006ed1 	.word	0x08006ed1
 8006eac:	08006ed1 	.word	0x08006ed1
 8006eb0:	08006ed1 	.word	0x08006ed1
 8006eb4:	08006ed1 	.word	0x08006ed1
 8006eb8:	08006ed1 	.word	0x08006ed1
 8006ebc:	08006ed1 	.word	0x08006ed1
 8006ec0:	08006ed1 	.word	0x08006ed1
 8006ec4:	08006ed1 	.word	0x08006ed1
 8006ec8:	08006ed1 	.word	0x08006ed1
 8006ecc:	08006ed1 	.word	0x08006ed1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006ed0:	bf00      	nop
  }

  return (USBD_OK);
 8006ed2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bc80      	pop	{r7}
 8006edc:	4770      	bx	lr
 8006ede:	bf00      	nop

08006ee0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b082      	sub	sp, #8
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006eea:	6879      	ldr	r1, [r7, #4]
 8006eec:	4805      	ldr	r0, [pc, #20]	@ (8006f04 <CDC_Receive_FS+0x24>)
 8006eee:	f7fe fe4a 	bl	8005b86 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006ef2:	4804      	ldr	r0, [pc, #16]	@ (8006f04 <CDC_Receive_FS+0x24>)
 8006ef4:	f7fe fe89 	bl	8005c0a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006ef8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3708      	adds	r7, #8
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	200001f4 	.word	0x200001f4

08006f08 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	460b      	mov	r3, r1
 8006f12:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006f14:	2300      	movs	r3, #0
 8006f16:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006f18:	4b0d      	ldr	r3, [pc, #52]	@ (8006f50 <CDC_Transmit_FS+0x48>)
 8006f1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f1e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d001      	beq.n	8006f2e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e00b      	b.n	8006f46 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006f2e:	887b      	ldrh	r3, [r7, #2]
 8006f30:	461a      	mov	r2, r3
 8006f32:	6879      	ldr	r1, [r7, #4]
 8006f34:	4806      	ldr	r0, [pc, #24]	@ (8006f50 <CDC_Transmit_FS+0x48>)
 8006f36:	f7fe fe0d 	bl	8005b54 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006f3a:	4805      	ldr	r0, [pc, #20]	@ (8006f50 <CDC_Transmit_FS+0x48>)
 8006f3c:	f7fe fe36 	bl	8005bac <USBD_CDC_TransmitPacket>
 8006f40:	4603      	mov	r3, r0
 8006f42:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3710      	adds	r7, #16
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	200001f4 	.word	0x200001f4

08006f54 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	6039      	str	r1, [r7, #0]
 8006f5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	2212      	movs	r2, #18
 8006f64:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006f66:	4b03      	ldr	r3, [pc, #12]	@ (8006f74 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	370c      	adds	r7, #12
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bc80      	pop	{r7}
 8006f70:	4770      	bx	lr
 8006f72:	bf00      	nop
 8006f74:	20000148 	.word	0x20000148

08006f78 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	4603      	mov	r3, r0
 8006f80:	6039      	str	r1, [r7, #0]
 8006f82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	2204      	movs	r2, #4
 8006f88:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006f8a:	4b03      	ldr	r3, [pc, #12]	@ (8006f98 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bc80      	pop	{r7}
 8006f94:	4770      	bx	lr
 8006f96:	bf00      	nop
 8006f98:	2000015c 	.word	0x2000015c

08006f9c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b082      	sub	sp, #8
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	6039      	str	r1, [r7, #0]
 8006fa6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006fa8:	79fb      	ldrb	r3, [r7, #7]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d105      	bne.n	8006fba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006fae:	683a      	ldr	r2, [r7, #0]
 8006fb0:	4907      	ldr	r1, [pc, #28]	@ (8006fd0 <USBD_FS_ProductStrDescriptor+0x34>)
 8006fb2:	4808      	ldr	r0, [pc, #32]	@ (8006fd4 <USBD_FS_ProductStrDescriptor+0x38>)
 8006fb4:	f7ff fe0d 	bl	8006bd2 <USBD_GetString>
 8006fb8:	e004      	b.n	8006fc4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006fba:	683a      	ldr	r2, [r7, #0]
 8006fbc:	4904      	ldr	r1, [pc, #16]	@ (8006fd0 <USBD_FS_ProductStrDescriptor+0x34>)
 8006fbe:	4805      	ldr	r0, [pc, #20]	@ (8006fd4 <USBD_FS_ProductStrDescriptor+0x38>)
 8006fc0:	f7ff fe07 	bl	8006bd2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006fc4:	4b02      	ldr	r3, [pc, #8]	@ (8006fd0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3708      	adds	r7, #8
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	20000cb8 	.word	0x20000cb8
 8006fd4:	0800807c 	.word	0x0800807c

08006fd8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b082      	sub	sp, #8
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	4603      	mov	r3, r0
 8006fe0:	6039      	str	r1, [r7, #0]
 8006fe2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006fe4:	683a      	ldr	r2, [r7, #0]
 8006fe6:	4904      	ldr	r1, [pc, #16]	@ (8006ff8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006fe8:	4804      	ldr	r0, [pc, #16]	@ (8006ffc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006fea:	f7ff fdf2 	bl	8006bd2 <USBD_GetString>
  return USBD_StrDesc;
 8006fee:	4b02      	ldr	r3, [pc, #8]	@ (8006ff8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3708      	adds	r7, #8
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}
 8006ff8:	20000cb8 	.word	0x20000cb8
 8006ffc:	08008094 	.word	0x08008094

08007000 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
 8007006:	4603      	mov	r3, r0
 8007008:	6039      	str	r1, [r7, #0]
 800700a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	221a      	movs	r2, #26
 8007010:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007012:	f000 f843 	bl	800709c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007016:	4b02      	ldr	r3, [pc, #8]	@ (8007020 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007018:	4618      	mov	r0, r3
 800701a:	3708      	adds	r7, #8
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}
 8007020:	20000160 	.word	0x20000160

08007024 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	4603      	mov	r3, r0
 800702c:	6039      	str	r1, [r7, #0]
 800702e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007030:	79fb      	ldrb	r3, [r7, #7]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d105      	bne.n	8007042 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007036:	683a      	ldr	r2, [r7, #0]
 8007038:	4907      	ldr	r1, [pc, #28]	@ (8007058 <USBD_FS_ConfigStrDescriptor+0x34>)
 800703a:	4808      	ldr	r0, [pc, #32]	@ (800705c <USBD_FS_ConfigStrDescriptor+0x38>)
 800703c:	f7ff fdc9 	bl	8006bd2 <USBD_GetString>
 8007040:	e004      	b.n	800704c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007042:	683a      	ldr	r2, [r7, #0]
 8007044:	4904      	ldr	r1, [pc, #16]	@ (8007058 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007046:	4805      	ldr	r0, [pc, #20]	@ (800705c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007048:	f7ff fdc3 	bl	8006bd2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800704c:	4b02      	ldr	r3, [pc, #8]	@ (8007058 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800704e:	4618      	mov	r0, r3
 8007050:	3708      	adds	r7, #8
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	20000cb8 	.word	0x20000cb8
 800705c:	080080a8 	.word	0x080080a8

08007060 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b082      	sub	sp, #8
 8007064:	af00      	add	r7, sp, #0
 8007066:	4603      	mov	r3, r0
 8007068:	6039      	str	r1, [r7, #0]
 800706a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800706c:	79fb      	ldrb	r3, [r7, #7]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d105      	bne.n	800707e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007072:	683a      	ldr	r2, [r7, #0]
 8007074:	4907      	ldr	r1, [pc, #28]	@ (8007094 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007076:	4808      	ldr	r0, [pc, #32]	@ (8007098 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007078:	f7ff fdab 	bl	8006bd2 <USBD_GetString>
 800707c:	e004      	b.n	8007088 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800707e:	683a      	ldr	r2, [r7, #0]
 8007080:	4904      	ldr	r1, [pc, #16]	@ (8007094 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007082:	4805      	ldr	r0, [pc, #20]	@ (8007098 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007084:	f7ff fda5 	bl	8006bd2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007088:	4b02      	ldr	r3, [pc, #8]	@ (8007094 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800708a:	4618      	mov	r0, r3
 800708c:	3708      	adds	r7, #8
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	20000cb8 	.word	0x20000cb8
 8007098:	080080b4 	.word	0x080080b4

0800709c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80070a2:	4b0f      	ldr	r3, [pc, #60]	@ (80070e0 <Get_SerialNum+0x44>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80070a8:	4b0e      	ldr	r3, [pc, #56]	@ (80070e4 <Get_SerialNum+0x48>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80070ae:	4b0e      	ldr	r3, [pc, #56]	@ (80070e8 <Get_SerialNum+0x4c>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4413      	add	r3, r2
 80070ba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d009      	beq.n	80070d6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80070c2:	2208      	movs	r2, #8
 80070c4:	4909      	ldr	r1, [pc, #36]	@ (80070ec <Get_SerialNum+0x50>)
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f000 f814 	bl	80070f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80070cc:	2204      	movs	r2, #4
 80070ce:	4908      	ldr	r1, [pc, #32]	@ (80070f0 <Get_SerialNum+0x54>)
 80070d0:	68b8      	ldr	r0, [r7, #8]
 80070d2:	f000 f80f 	bl	80070f4 <IntToUnicode>
  }
}
 80070d6:	bf00      	nop
 80070d8:	3710      	adds	r7, #16
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	1ffff7e8 	.word	0x1ffff7e8
 80070e4:	1ffff7ec 	.word	0x1ffff7ec
 80070e8:	1ffff7f0 	.word	0x1ffff7f0
 80070ec:	20000162 	.word	0x20000162
 80070f0:	20000172 	.word	0x20000172

080070f4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b087      	sub	sp, #28
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	4613      	mov	r3, r2
 8007100:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007102:	2300      	movs	r3, #0
 8007104:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007106:	2300      	movs	r3, #0
 8007108:	75fb      	strb	r3, [r7, #23]
 800710a:	e027      	b.n	800715c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	0f1b      	lsrs	r3, r3, #28
 8007110:	2b09      	cmp	r3, #9
 8007112:	d80b      	bhi.n	800712c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	0f1b      	lsrs	r3, r3, #28
 8007118:	b2da      	uxtb	r2, r3
 800711a:	7dfb      	ldrb	r3, [r7, #23]
 800711c:	005b      	lsls	r3, r3, #1
 800711e:	4619      	mov	r1, r3
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	440b      	add	r3, r1
 8007124:	3230      	adds	r2, #48	@ 0x30
 8007126:	b2d2      	uxtb	r2, r2
 8007128:	701a      	strb	r2, [r3, #0]
 800712a:	e00a      	b.n	8007142 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	0f1b      	lsrs	r3, r3, #28
 8007130:	b2da      	uxtb	r2, r3
 8007132:	7dfb      	ldrb	r3, [r7, #23]
 8007134:	005b      	lsls	r3, r3, #1
 8007136:	4619      	mov	r1, r3
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	440b      	add	r3, r1
 800713c:	3237      	adds	r2, #55	@ 0x37
 800713e:	b2d2      	uxtb	r2, r2
 8007140:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	011b      	lsls	r3, r3, #4
 8007146:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007148:	7dfb      	ldrb	r3, [r7, #23]
 800714a:	005b      	lsls	r3, r3, #1
 800714c:	3301      	adds	r3, #1
 800714e:	68ba      	ldr	r2, [r7, #8]
 8007150:	4413      	add	r3, r2
 8007152:	2200      	movs	r2, #0
 8007154:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007156:	7dfb      	ldrb	r3, [r7, #23]
 8007158:	3301      	adds	r3, #1
 800715a:	75fb      	strb	r3, [r7, #23]
 800715c:	7dfa      	ldrb	r2, [r7, #23]
 800715e:	79fb      	ldrb	r3, [r7, #7]
 8007160:	429a      	cmp	r2, r3
 8007162:	d3d3      	bcc.n	800710c <IntToUnicode+0x18>
  }
}
 8007164:	bf00      	nop
 8007166:	bf00      	nop
 8007168:	371c      	adds	r7, #28
 800716a:	46bd      	mov	sp, r7
 800716c:	bc80      	pop	{r7}
 800716e:	4770      	bx	lr

08007170 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a0d      	ldr	r2, [pc, #52]	@ (80071b4 <HAL_PCD_MspInit+0x44>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d113      	bne.n	80071aa <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007182:	4b0d      	ldr	r3, [pc, #52]	@ (80071b8 <HAL_PCD_MspInit+0x48>)
 8007184:	69db      	ldr	r3, [r3, #28]
 8007186:	4a0c      	ldr	r2, [pc, #48]	@ (80071b8 <HAL_PCD_MspInit+0x48>)
 8007188:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800718c:	61d3      	str	r3, [r2, #28]
 800718e:	4b0a      	ldr	r3, [pc, #40]	@ (80071b8 <HAL_PCD_MspInit+0x48>)
 8007190:	69db      	ldr	r3, [r3, #28]
 8007192:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007196:	60fb      	str	r3, [r7, #12]
 8007198:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800719a:	2200      	movs	r2, #0
 800719c:	2100      	movs	r1, #0
 800719e:	2014      	movs	r0, #20
 80071a0:	f7f9 fb2b 	bl	80007fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80071a4:	2014      	movs	r0, #20
 80071a6:	f7f9 fb44 	bl	8000832 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80071aa:	bf00      	nop
 80071ac:	3710      	adds	r7, #16
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	bf00      	nop
 80071b4:	40005c00 	.word	0x40005c00
 80071b8:	40021000 	.word	0x40021000

080071bc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80071d0:	4619      	mov	r1, r3
 80071d2:	4610      	mov	r0, r2
 80071d4:	f7fe fdcf 	bl	8005d76 <USBD_LL_SetupStage>
}
 80071d8:	bf00      	nop
 80071da:	3708      	adds	r7, #8
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	460b      	mov	r3, r1
 80071ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80071f2:	78fa      	ldrb	r2, [r7, #3]
 80071f4:	6879      	ldr	r1, [r7, #4]
 80071f6:	4613      	mov	r3, r2
 80071f8:	009b      	lsls	r3, r3, #2
 80071fa:	4413      	add	r3, r2
 80071fc:	00db      	lsls	r3, r3, #3
 80071fe:	440b      	add	r3, r1
 8007200:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	78fb      	ldrb	r3, [r7, #3]
 8007208:	4619      	mov	r1, r3
 800720a:	f7fe fe01 	bl	8005e10 <USBD_LL_DataOutStage>
}
 800720e:	bf00      	nop
 8007210:	3708      	adds	r7, #8
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}

08007216 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007216:	b580      	push	{r7, lr}
 8007218:	b082      	sub	sp, #8
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
 800721e:	460b      	mov	r3, r1
 8007220:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8007228:	78fa      	ldrb	r2, [r7, #3]
 800722a:	6879      	ldr	r1, [r7, #4]
 800722c:	4613      	mov	r3, r2
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	4413      	add	r3, r2
 8007232:	00db      	lsls	r3, r3, #3
 8007234:	440b      	add	r3, r1
 8007236:	3324      	adds	r3, #36	@ 0x24
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	78fb      	ldrb	r3, [r7, #3]
 800723c:	4619      	mov	r1, r3
 800723e:	f7fe fe58 	bl	8005ef2 <USBD_LL_DataInStage>
}
 8007242:	bf00      	nop
 8007244:	3708      	adds	r7, #8
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800724a:	b580      	push	{r7, lr}
 800724c:	b082      	sub	sp, #8
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007258:	4618      	mov	r0, r3
 800725a:	f7fe ff68 	bl	800612e <USBD_LL_SOF>
}
 800725e:	bf00      	nop
 8007260:	3708      	adds	r7, #8
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}

08007266 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007266:	b580      	push	{r7, lr}
 8007268:	b084      	sub	sp, #16
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800726e:	2301      	movs	r3, #1
 8007270:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	799b      	ldrb	r3, [r3, #6]
 8007276:	2b02      	cmp	r3, #2
 8007278:	d001      	beq.n	800727e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800727a:	f7f9 f831 	bl	80002e0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007284:	7bfa      	ldrb	r2, [r7, #15]
 8007286:	4611      	mov	r1, r2
 8007288:	4618      	mov	r0, r3
 800728a:	f7fe ff18 	bl	80060be <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007294:	4618      	mov	r0, r3
 8007296:	f7fe fed1 	bl	800603c <USBD_LL_Reset>
}
 800729a:	bf00      	nop
 800729c:	3710      	adds	r7, #16
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
	...

080072a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7fe ff12 	bl	80060dc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	7a9b      	ldrb	r3, [r3, #10]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d005      	beq.n	80072cc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80072c0:	4b04      	ldr	r3, [pc, #16]	@ (80072d4 <HAL_PCD_SuspendCallback+0x30>)
 80072c2:	691b      	ldr	r3, [r3, #16]
 80072c4:	4a03      	ldr	r2, [pc, #12]	@ (80072d4 <HAL_PCD_SuspendCallback+0x30>)
 80072c6:	f043 0306 	orr.w	r3, r3, #6
 80072ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80072cc:	bf00      	nop
 80072ce:	3708      	adds	r7, #8
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	e000ed00 	.word	0xe000ed00

080072d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7fe ff0c 	bl	8006104 <USBD_LL_Resume>
}
 80072ec:	bf00      	nop
 80072ee:	3708      	adds	r7, #8
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80072fc:	4a28      	ldr	r2, [pc, #160]	@ (80073a0 <USBD_LL_Init+0xac>)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4a26      	ldr	r2, [pc, #152]	@ (80073a0 <USBD_LL_Init+0xac>)
 8007308:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800730c:	4b24      	ldr	r3, [pc, #144]	@ (80073a0 <USBD_LL_Init+0xac>)
 800730e:	4a25      	ldr	r2, [pc, #148]	@ (80073a4 <USBD_LL_Init+0xb0>)
 8007310:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007312:	4b23      	ldr	r3, [pc, #140]	@ (80073a0 <USBD_LL_Init+0xac>)
 8007314:	2208      	movs	r2, #8
 8007316:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007318:	4b21      	ldr	r3, [pc, #132]	@ (80073a0 <USBD_LL_Init+0xac>)
 800731a:	2202      	movs	r2, #2
 800731c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800731e:	4b20      	ldr	r3, [pc, #128]	@ (80073a0 <USBD_LL_Init+0xac>)
 8007320:	2200      	movs	r2, #0
 8007322:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007324:	4b1e      	ldr	r3, [pc, #120]	@ (80073a0 <USBD_LL_Init+0xac>)
 8007326:	2200      	movs	r2, #0
 8007328:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800732a:	4b1d      	ldr	r3, [pc, #116]	@ (80073a0 <USBD_LL_Init+0xac>)
 800732c:	2200      	movs	r2, #0
 800732e:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007330:	481b      	ldr	r0, [pc, #108]	@ (80073a0 <USBD_LL_Init+0xac>)
 8007332:	f7f9 fc35 	bl	8000ba0 <HAL_PCD_Init>
 8007336:	4603      	mov	r3, r0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d001      	beq.n	8007340 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800733c:	f7f8 ffd0 	bl	80002e0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007346:	2318      	movs	r3, #24
 8007348:	2200      	movs	r2, #0
 800734a:	2100      	movs	r1, #0
 800734c:	f7fb f946 	bl	80025dc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007356:	2358      	movs	r3, #88	@ 0x58
 8007358:	2200      	movs	r2, #0
 800735a:	2180      	movs	r1, #128	@ 0x80
 800735c:	f7fb f93e 	bl	80025dc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007366:	23c0      	movs	r3, #192	@ 0xc0
 8007368:	2200      	movs	r2, #0
 800736a:	2181      	movs	r1, #129	@ 0x81
 800736c:	f7fb f936 	bl	80025dc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007376:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800737a:	2200      	movs	r2, #0
 800737c:	2101      	movs	r1, #1
 800737e:	f7fb f92d 	bl	80025dc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007388:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800738c:	2200      	movs	r2, #0
 800738e:	2182      	movs	r1, #130	@ 0x82
 8007390:	f7fb f924 	bl	80025dc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	3708      	adds	r7, #8
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	20000eb8 	.word	0x20000eb8
 80073a4:	40005c00 	.word	0x40005c00

080073a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073b0:	2300      	movs	r3, #0
 80073b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073b4:	2300      	movs	r3, #0
 80073b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80073be:	4618      	mov	r0, r3
 80073c0:	f7f9 fce4 	bl	8000d8c <HAL_PCD_Start>
 80073c4:	4603      	mov	r3, r0
 80073c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073c8:	7bfb      	ldrb	r3, [r7, #15]
 80073ca:	4618      	mov	r0, r3
 80073cc:	f000 f94e 	bl	800766c <USBD_Get_USB_Status>
 80073d0:	4603      	mov	r3, r0
 80073d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3710      	adds	r7, #16
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}

080073de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80073de:	b580      	push	{r7, lr}
 80073e0:	b084      	sub	sp, #16
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
 80073e6:	4608      	mov	r0, r1
 80073e8:	4611      	mov	r1, r2
 80073ea:	461a      	mov	r2, r3
 80073ec:	4603      	mov	r3, r0
 80073ee:	70fb      	strb	r3, [r7, #3]
 80073f0:	460b      	mov	r3, r1
 80073f2:	70bb      	strb	r3, [r7, #2]
 80073f4:	4613      	mov	r3, r2
 80073f6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073f8:	2300      	movs	r3, #0
 80073fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073fc:	2300      	movs	r3, #0
 80073fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007406:	78bb      	ldrb	r3, [r7, #2]
 8007408:	883a      	ldrh	r2, [r7, #0]
 800740a:	78f9      	ldrb	r1, [r7, #3]
 800740c:	f7f9 fe38 	bl	8001080 <HAL_PCD_EP_Open>
 8007410:	4603      	mov	r3, r0
 8007412:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007414:	7bfb      	ldrb	r3, [r7, #15]
 8007416:	4618      	mov	r0, r3
 8007418:	f000 f928 	bl	800766c <USBD_Get_USB_Status>
 800741c:	4603      	mov	r3, r0
 800741e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007420:	7bbb      	ldrb	r3, [r7, #14]
}
 8007422:	4618      	mov	r0, r3
 8007424:	3710      	adds	r7, #16
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}

0800742a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800742a:	b580      	push	{r7, lr}
 800742c:	b084      	sub	sp, #16
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
 8007432:	460b      	mov	r3, r1
 8007434:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007436:	2300      	movs	r3, #0
 8007438:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800743a:	2300      	movs	r3, #0
 800743c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007444:	78fa      	ldrb	r2, [r7, #3]
 8007446:	4611      	mov	r1, r2
 8007448:	4618      	mov	r0, r3
 800744a:	f7f9 fe76 	bl	800113a <HAL_PCD_EP_Close>
 800744e:	4603      	mov	r3, r0
 8007450:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007452:	7bfb      	ldrb	r3, [r7, #15]
 8007454:	4618      	mov	r0, r3
 8007456:	f000 f909 	bl	800766c <USBD_Get_USB_Status>
 800745a:	4603      	mov	r3, r0
 800745c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800745e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007460:	4618      	mov	r0, r3
 8007462:	3710      	adds	r7, #16
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	460b      	mov	r3, r1
 8007472:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007474:	2300      	movs	r3, #0
 8007476:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007478:	2300      	movs	r3, #0
 800747a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007482:	78fa      	ldrb	r2, [r7, #3]
 8007484:	4611      	mov	r1, r2
 8007486:	4618      	mov	r0, r3
 8007488:	f7f9 ff1e 	bl	80012c8 <HAL_PCD_EP_SetStall>
 800748c:	4603      	mov	r3, r0
 800748e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007490:	7bfb      	ldrb	r3, [r7, #15]
 8007492:	4618      	mov	r0, r3
 8007494:	f000 f8ea 	bl	800766c <USBD_Get_USB_Status>
 8007498:	4603      	mov	r3, r0
 800749a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800749c:	7bbb      	ldrb	r3, [r7, #14]
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3710      	adds	r7, #16
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}

080074a6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b084      	sub	sp, #16
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
 80074ae:	460b      	mov	r3, r1
 80074b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074b2:	2300      	movs	r3, #0
 80074b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074b6:	2300      	movs	r3, #0
 80074b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80074c0:	78fa      	ldrb	r2, [r7, #3]
 80074c2:	4611      	mov	r1, r2
 80074c4:	4618      	mov	r0, r3
 80074c6:	f7f9 ff5f 	bl	8001388 <HAL_PCD_EP_ClrStall>
 80074ca:	4603      	mov	r3, r0
 80074cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074ce:	7bfb      	ldrb	r3, [r7, #15]
 80074d0:	4618      	mov	r0, r3
 80074d2:	f000 f8cb 	bl	800766c <USBD_Get_USB_Status>
 80074d6:	4603      	mov	r3, r0
 80074d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074da:	7bbb      	ldrb	r3, [r7, #14]
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3710      	adds	r7, #16
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b085      	sub	sp, #20
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	460b      	mov	r3, r1
 80074ee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80074f6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80074f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	da0b      	bge.n	8007518 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007500:	78fb      	ldrb	r3, [r7, #3]
 8007502:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007506:	68f9      	ldr	r1, [r7, #12]
 8007508:	4613      	mov	r3, r2
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	4413      	add	r3, r2
 800750e:	00db      	lsls	r3, r3, #3
 8007510:	440b      	add	r3, r1
 8007512:	3312      	adds	r3, #18
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	e00b      	b.n	8007530 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007518:	78fb      	ldrb	r3, [r7, #3]
 800751a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800751e:	68f9      	ldr	r1, [r7, #12]
 8007520:	4613      	mov	r3, r2
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	4413      	add	r3, r2
 8007526:	00db      	lsls	r3, r3, #3
 8007528:	440b      	add	r3, r1
 800752a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800752e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007530:	4618      	mov	r0, r3
 8007532:	3714      	adds	r7, #20
 8007534:	46bd      	mov	sp, r7
 8007536:	bc80      	pop	{r7}
 8007538:	4770      	bx	lr

0800753a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800753a:	b580      	push	{r7, lr}
 800753c:	b084      	sub	sp, #16
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
 8007542:	460b      	mov	r3, r1
 8007544:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007546:	2300      	movs	r3, #0
 8007548:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800754a:	2300      	movs	r3, #0
 800754c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007554:	78fa      	ldrb	r2, [r7, #3]
 8007556:	4611      	mov	r1, r2
 8007558:	4618      	mov	r0, r3
 800755a:	f7f9 fd6d 	bl	8001038 <HAL_PCD_SetAddress>
 800755e:	4603      	mov	r3, r0
 8007560:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007562:	7bfb      	ldrb	r3, [r7, #15]
 8007564:	4618      	mov	r0, r3
 8007566:	f000 f881 	bl	800766c <USBD_Get_USB_Status>
 800756a:	4603      	mov	r3, r0
 800756c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800756e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007570:	4618      	mov	r0, r3
 8007572:	3710      	adds	r7, #16
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b086      	sub	sp, #24
 800757c:	af00      	add	r7, sp, #0
 800757e:	60f8      	str	r0, [r7, #12]
 8007580:	607a      	str	r2, [r7, #4]
 8007582:	461a      	mov	r2, r3
 8007584:	460b      	mov	r3, r1
 8007586:	72fb      	strb	r3, [r7, #11]
 8007588:	4613      	mov	r3, r2
 800758a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800758c:	2300      	movs	r3, #0
 800758e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007590:	2300      	movs	r3, #0
 8007592:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800759a:	893b      	ldrh	r3, [r7, #8]
 800759c:	7af9      	ldrb	r1, [r7, #11]
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	f7f9 fe5b 	bl	800125a <HAL_PCD_EP_Transmit>
 80075a4:	4603      	mov	r3, r0
 80075a6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075a8:	7dfb      	ldrb	r3, [r7, #23]
 80075aa:	4618      	mov	r0, r3
 80075ac:	f000 f85e 	bl	800766c <USBD_Get_USB_Status>
 80075b0:	4603      	mov	r3, r0
 80075b2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80075b4:	7dbb      	ldrb	r3, [r7, #22]
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3718      	adds	r7, #24
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}

080075be <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80075be:	b580      	push	{r7, lr}
 80075c0:	b086      	sub	sp, #24
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	60f8      	str	r0, [r7, #12]
 80075c6:	607a      	str	r2, [r7, #4]
 80075c8:	461a      	mov	r2, r3
 80075ca:	460b      	mov	r3, r1
 80075cc:	72fb      	strb	r3, [r7, #11]
 80075ce:	4613      	mov	r3, r2
 80075d0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075d2:	2300      	movs	r3, #0
 80075d4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075d6:	2300      	movs	r3, #0
 80075d8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80075e0:	893b      	ldrh	r3, [r7, #8]
 80075e2:	7af9      	ldrb	r1, [r7, #11]
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	f7f9 fdf0 	bl	80011ca <HAL_PCD_EP_Receive>
 80075ea:	4603      	mov	r3, r0
 80075ec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075ee:	7dfb      	ldrb	r3, [r7, #23]
 80075f0:	4618      	mov	r0, r3
 80075f2:	f000 f83b 	bl	800766c <USBD_Get_USB_Status>
 80075f6:	4603      	mov	r3, r0
 80075f8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80075fa:	7dbb      	ldrb	r3, [r7, #22]
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3718      	adds	r7, #24
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b082      	sub	sp, #8
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	460b      	mov	r3, r1
 800760e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007616:	78fa      	ldrb	r2, [r7, #3]
 8007618:	4611      	mov	r1, r2
 800761a:	4618      	mov	r0, r3
 800761c:	f7f9 fe06 	bl	800122c <HAL_PCD_EP_GetRxCount>
 8007620:	4603      	mov	r3, r0
}
 8007622:	4618      	mov	r0, r3
 8007624:	3708      	adds	r7, #8
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
	...

0800762c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007634:	4b02      	ldr	r3, [pc, #8]	@ (8007640 <USBD_static_malloc+0x14>)
}
 8007636:	4618      	mov	r0, r3
 8007638:	370c      	adds	r7, #12
 800763a:	46bd      	mov	sp, r7
 800763c:	bc80      	pop	{r7}
 800763e:	4770      	bx	lr
 8007640:	20001190 	.word	0x20001190

08007644 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]

}
 800764c:	bf00      	nop
 800764e:	370c      	adds	r7, #12
 8007650:	46bd      	mov	sp, r7
 8007652:	bc80      	pop	{r7}
 8007654:	4770      	bx	lr

08007656 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007656:	b480      	push	{r7}
 8007658:	b083      	sub	sp, #12
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
 800765e:	460b      	mov	r3, r1
 8007660:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007662:	bf00      	nop
 8007664:	370c      	adds	r7, #12
 8007666:	46bd      	mov	sp, r7
 8007668:	bc80      	pop	{r7}
 800766a:	4770      	bx	lr

0800766c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800766c:	b480      	push	{r7}
 800766e:	b085      	sub	sp, #20
 8007670:	af00      	add	r7, sp, #0
 8007672:	4603      	mov	r3, r0
 8007674:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007676:	2300      	movs	r3, #0
 8007678:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800767a:	79fb      	ldrb	r3, [r7, #7]
 800767c:	2b03      	cmp	r3, #3
 800767e:	d817      	bhi.n	80076b0 <USBD_Get_USB_Status+0x44>
 8007680:	a201      	add	r2, pc, #4	@ (adr r2, 8007688 <USBD_Get_USB_Status+0x1c>)
 8007682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007686:	bf00      	nop
 8007688:	08007699 	.word	0x08007699
 800768c:	0800769f 	.word	0x0800769f
 8007690:	080076a5 	.word	0x080076a5
 8007694:	080076ab 	.word	0x080076ab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007698:	2300      	movs	r3, #0
 800769a:	73fb      	strb	r3, [r7, #15]
    break;
 800769c:	e00b      	b.n	80076b6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800769e:	2302      	movs	r3, #2
 80076a0:	73fb      	strb	r3, [r7, #15]
    break;
 80076a2:	e008      	b.n	80076b6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80076a4:	2301      	movs	r3, #1
 80076a6:	73fb      	strb	r3, [r7, #15]
    break;
 80076a8:	e005      	b.n	80076b6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80076aa:	2302      	movs	r3, #2
 80076ac:	73fb      	strb	r3, [r7, #15]
    break;
 80076ae:	e002      	b.n	80076b6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80076b0:	2302      	movs	r3, #2
 80076b2:	73fb      	strb	r3, [r7, #15]
    break;
 80076b4:	bf00      	nop
  }
  return usb_status;
 80076b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3714      	adds	r7, #20
 80076bc:	46bd      	mov	sp, r7
 80076be:	bc80      	pop	{r7}
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop

080076c4 <sniprintf>:
 80076c4:	b40c      	push	{r2, r3}
 80076c6:	b530      	push	{r4, r5, lr}
 80076c8:	4b18      	ldr	r3, [pc, #96]	@ (800772c <sniprintf+0x68>)
 80076ca:	1e0c      	subs	r4, r1, #0
 80076cc:	681d      	ldr	r5, [r3, #0]
 80076ce:	b09d      	sub	sp, #116	@ 0x74
 80076d0:	da08      	bge.n	80076e4 <sniprintf+0x20>
 80076d2:	238b      	movs	r3, #139	@ 0x8b
 80076d4:	f04f 30ff 	mov.w	r0, #4294967295
 80076d8:	602b      	str	r3, [r5, #0]
 80076da:	b01d      	add	sp, #116	@ 0x74
 80076dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80076e0:	b002      	add	sp, #8
 80076e2:	4770      	bx	lr
 80076e4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80076e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80076ec:	f04f 0300 	mov.w	r3, #0
 80076f0:	931b      	str	r3, [sp, #108]	@ 0x6c
 80076f2:	bf0c      	ite	eq
 80076f4:	4623      	moveq	r3, r4
 80076f6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80076fa:	9304      	str	r3, [sp, #16]
 80076fc:	9307      	str	r3, [sp, #28]
 80076fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007702:	9002      	str	r0, [sp, #8]
 8007704:	9006      	str	r0, [sp, #24]
 8007706:	f8ad 3016 	strh.w	r3, [sp, #22]
 800770a:	4628      	mov	r0, r5
 800770c:	ab21      	add	r3, sp, #132	@ 0x84
 800770e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007710:	a902      	add	r1, sp, #8
 8007712:	9301      	str	r3, [sp, #4]
 8007714:	f000 f9a0 	bl	8007a58 <_svfiprintf_r>
 8007718:	1c43      	adds	r3, r0, #1
 800771a:	bfbc      	itt	lt
 800771c:	238b      	movlt	r3, #139	@ 0x8b
 800771e:	602b      	strlt	r3, [r5, #0]
 8007720:	2c00      	cmp	r4, #0
 8007722:	d0da      	beq.n	80076da <sniprintf+0x16>
 8007724:	2200      	movs	r2, #0
 8007726:	9b02      	ldr	r3, [sp, #8]
 8007728:	701a      	strb	r2, [r3, #0]
 800772a:	e7d6      	b.n	80076da <sniprintf+0x16>
 800772c:	2000017c 	.word	0x2000017c

08007730 <memset>:
 8007730:	4603      	mov	r3, r0
 8007732:	4402      	add	r2, r0
 8007734:	4293      	cmp	r3, r2
 8007736:	d100      	bne.n	800773a <memset+0xa>
 8007738:	4770      	bx	lr
 800773a:	f803 1b01 	strb.w	r1, [r3], #1
 800773e:	e7f9      	b.n	8007734 <memset+0x4>

08007740 <__errno>:
 8007740:	4b01      	ldr	r3, [pc, #4]	@ (8007748 <__errno+0x8>)
 8007742:	6818      	ldr	r0, [r3, #0]
 8007744:	4770      	bx	lr
 8007746:	bf00      	nop
 8007748:	2000017c 	.word	0x2000017c

0800774c <__libc_init_array>:
 800774c:	b570      	push	{r4, r5, r6, lr}
 800774e:	2600      	movs	r6, #0
 8007750:	4d0c      	ldr	r5, [pc, #48]	@ (8007784 <__libc_init_array+0x38>)
 8007752:	4c0d      	ldr	r4, [pc, #52]	@ (8007788 <__libc_init_array+0x3c>)
 8007754:	1b64      	subs	r4, r4, r5
 8007756:	10a4      	asrs	r4, r4, #2
 8007758:	42a6      	cmp	r6, r4
 800775a:	d109      	bne.n	8007770 <__libc_init_array+0x24>
 800775c:	f000 fc76 	bl	800804c <_init>
 8007760:	2600      	movs	r6, #0
 8007762:	4d0a      	ldr	r5, [pc, #40]	@ (800778c <__libc_init_array+0x40>)
 8007764:	4c0a      	ldr	r4, [pc, #40]	@ (8007790 <__libc_init_array+0x44>)
 8007766:	1b64      	subs	r4, r4, r5
 8007768:	10a4      	asrs	r4, r4, #2
 800776a:	42a6      	cmp	r6, r4
 800776c:	d105      	bne.n	800777a <__libc_init_array+0x2e>
 800776e:	bd70      	pop	{r4, r5, r6, pc}
 8007770:	f855 3b04 	ldr.w	r3, [r5], #4
 8007774:	4798      	blx	r3
 8007776:	3601      	adds	r6, #1
 8007778:	e7ee      	b.n	8007758 <__libc_init_array+0xc>
 800777a:	f855 3b04 	ldr.w	r3, [r5], #4
 800777e:	4798      	blx	r3
 8007780:	3601      	adds	r6, #1
 8007782:	e7f2      	b.n	800776a <__libc_init_array+0x1e>
 8007784:	08008124 	.word	0x08008124
 8007788:	08008124 	.word	0x08008124
 800778c:	08008124 	.word	0x08008124
 8007790:	08008128 	.word	0x08008128

08007794 <__retarget_lock_acquire_recursive>:
 8007794:	4770      	bx	lr

08007796 <__retarget_lock_release_recursive>:
 8007796:	4770      	bx	lr

08007798 <memcpy>:
 8007798:	440a      	add	r2, r1
 800779a:	4291      	cmp	r1, r2
 800779c:	f100 33ff 	add.w	r3, r0, #4294967295
 80077a0:	d100      	bne.n	80077a4 <memcpy+0xc>
 80077a2:	4770      	bx	lr
 80077a4:	b510      	push	{r4, lr}
 80077a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077aa:	4291      	cmp	r1, r2
 80077ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077b0:	d1f9      	bne.n	80077a6 <memcpy+0xe>
 80077b2:	bd10      	pop	{r4, pc}

080077b4 <_free_r>:
 80077b4:	b538      	push	{r3, r4, r5, lr}
 80077b6:	4605      	mov	r5, r0
 80077b8:	2900      	cmp	r1, #0
 80077ba:	d040      	beq.n	800783e <_free_r+0x8a>
 80077bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077c0:	1f0c      	subs	r4, r1, #4
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	bfb8      	it	lt
 80077c6:	18e4      	addlt	r4, r4, r3
 80077c8:	f000 f8de 	bl	8007988 <__malloc_lock>
 80077cc:	4a1c      	ldr	r2, [pc, #112]	@ (8007840 <_free_r+0x8c>)
 80077ce:	6813      	ldr	r3, [r2, #0]
 80077d0:	b933      	cbnz	r3, 80077e0 <_free_r+0x2c>
 80077d2:	6063      	str	r3, [r4, #4]
 80077d4:	6014      	str	r4, [r2, #0]
 80077d6:	4628      	mov	r0, r5
 80077d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077dc:	f000 b8da 	b.w	8007994 <__malloc_unlock>
 80077e0:	42a3      	cmp	r3, r4
 80077e2:	d908      	bls.n	80077f6 <_free_r+0x42>
 80077e4:	6820      	ldr	r0, [r4, #0]
 80077e6:	1821      	adds	r1, r4, r0
 80077e8:	428b      	cmp	r3, r1
 80077ea:	bf01      	itttt	eq
 80077ec:	6819      	ldreq	r1, [r3, #0]
 80077ee:	685b      	ldreq	r3, [r3, #4]
 80077f0:	1809      	addeq	r1, r1, r0
 80077f2:	6021      	streq	r1, [r4, #0]
 80077f4:	e7ed      	b.n	80077d2 <_free_r+0x1e>
 80077f6:	461a      	mov	r2, r3
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	b10b      	cbz	r3, 8007800 <_free_r+0x4c>
 80077fc:	42a3      	cmp	r3, r4
 80077fe:	d9fa      	bls.n	80077f6 <_free_r+0x42>
 8007800:	6811      	ldr	r1, [r2, #0]
 8007802:	1850      	adds	r0, r2, r1
 8007804:	42a0      	cmp	r0, r4
 8007806:	d10b      	bne.n	8007820 <_free_r+0x6c>
 8007808:	6820      	ldr	r0, [r4, #0]
 800780a:	4401      	add	r1, r0
 800780c:	1850      	adds	r0, r2, r1
 800780e:	4283      	cmp	r3, r0
 8007810:	6011      	str	r1, [r2, #0]
 8007812:	d1e0      	bne.n	80077d6 <_free_r+0x22>
 8007814:	6818      	ldr	r0, [r3, #0]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	4408      	add	r0, r1
 800781a:	6010      	str	r0, [r2, #0]
 800781c:	6053      	str	r3, [r2, #4]
 800781e:	e7da      	b.n	80077d6 <_free_r+0x22>
 8007820:	d902      	bls.n	8007828 <_free_r+0x74>
 8007822:	230c      	movs	r3, #12
 8007824:	602b      	str	r3, [r5, #0]
 8007826:	e7d6      	b.n	80077d6 <_free_r+0x22>
 8007828:	6820      	ldr	r0, [r4, #0]
 800782a:	1821      	adds	r1, r4, r0
 800782c:	428b      	cmp	r3, r1
 800782e:	bf01      	itttt	eq
 8007830:	6819      	ldreq	r1, [r3, #0]
 8007832:	685b      	ldreq	r3, [r3, #4]
 8007834:	1809      	addeq	r1, r1, r0
 8007836:	6021      	streq	r1, [r4, #0]
 8007838:	6063      	str	r3, [r4, #4]
 800783a:	6054      	str	r4, [r2, #4]
 800783c:	e7cb      	b.n	80077d6 <_free_r+0x22>
 800783e:	bd38      	pop	{r3, r4, r5, pc}
 8007840:	200014f4 	.word	0x200014f4

08007844 <sbrk_aligned>:
 8007844:	b570      	push	{r4, r5, r6, lr}
 8007846:	4e0f      	ldr	r6, [pc, #60]	@ (8007884 <sbrk_aligned+0x40>)
 8007848:	460c      	mov	r4, r1
 800784a:	6831      	ldr	r1, [r6, #0]
 800784c:	4605      	mov	r5, r0
 800784e:	b911      	cbnz	r1, 8007856 <sbrk_aligned+0x12>
 8007850:	f000 fba8 	bl	8007fa4 <_sbrk_r>
 8007854:	6030      	str	r0, [r6, #0]
 8007856:	4621      	mov	r1, r4
 8007858:	4628      	mov	r0, r5
 800785a:	f000 fba3 	bl	8007fa4 <_sbrk_r>
 800785e:	1c43      	adds	r3, r0, #1
 8007860:	d103      	bne.n	800786a <sbrk_aligned+0x26>
 8007862:	f04f 34ff 	mov.w	r4, #4294967295
 8007866:	4620      	mov	r0, r4
 8007868:	bd70      	pop	{r4, r5, r6, pc}
 800786a:	1cc4      	adds	r4, r0, #3
 800786c:	f024 0403 	bic.w	r4, r4, #3
 8007870:	42a0      	cmp	r0, r4
 8007872:	d0f8      	beq.n	8007866 <sbrk_aligned+0x22>
 8007874:	1a21      	subs	r1, r4, r0
 8007876:	4628      	mov	r0, r5
 8007878:	f000 fb94 	bl	8007fa4 <_sbrk_r>
 800787c:	3001      	adds	r0, #1
 800787e:	d1f2      	bne.n	8007866 <sbrk_aligned+0x22>
 8007880:	e7ef      	b.n	8007862 <sbrk_aligned+0x1e>
 8007882:	bf00      	nop
 8007884:	200014f0 	.word	0x200014f0

08007888 <_malloc_r>:
 8007888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800788c:	1ccd      	adds	r5, r1, #3
 800788e:	f025 0503 	bic.w	r5, r5, #3
 8007892:	3508      	adds	r5, #8
 8007894:	2d0c      	cmp	r5, #12
 8007896:	bf38      	it	cc
 8007898:	250c      	movcc	r5, #12
 800789a:	2d00      	cmp	r5, #0
 800789c:	4606      	mov	r6, r0
 800789e:	db01      	blt.n	80078a4 <_malloc_r+0x1c>
 80078a0:	42a9      	cmp	r1, r5
 80078a2:	d904      	bls.n	80078ae <_malloc_r+0x26>
 80078a4:	230c      	movs	r3, #12
 80078a6:	6033      	str	r3, [r6, #0]
 80078a8:	2000      	movs	r0, #0
 80078aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007984 <_malloc_r+0xfc>
 80078b2:	f000 f869 	bl	8007988 <__malloc_lock>
 80078b6:	f8d8 3000 	ldr.w	r3, [r8]
 80078ba:	461c      	mov	r4, r3
 80078bc:	bb44      	cbnz	r4, 8007910 <_malloc_r+0x88>
 80078be:	4629      	mov	r1, r5
 80078c0:	4630      	mov	r0, r6
 80078c2:	f7ff ffbf 	bl	8007844 <sbrk_aligned>
 80078c6:	1c43      	adds	r3, r0, #1
 80078c8:	4604      	mov	r4, r0
 80078ca:	d158      	bne.n	800797e <_malloc_r+0xf6>
 80078cc:	f8d8 4000 	ldr.w	r4, [r8]
 80078d0:	4627      	mov	r7, r4
 80078d2:	2f00      	cmp	r7, #0
 80078d4:	d143      	bne.n	800795e <_malloc_r+0xd6>
 80078d6:	2c00      	cmp	r4, #0
 80078d8:	d04b      	beq.n	8007972 <_malloc_r+0xea>
 80078da:	6823      	ldr	r3, [r4, #0]
 80078dc:	4639      	mov	r1, r7
 80078de:	4630      	mov	r0, r6
 80078e0:	eb04 0903 	add.w	r9, r4, r3
 80078e4:	f000 fb5e 	bl	8007fa4 <_sbrk_r>
 80078e8:	4581      	cmp	r9, r0
 80078ea:	d142      	bne.n	8007972 <_malloc_r+0xea>
 80078ec:	6821      	ldr	r1, [r4, #0]
 80078ee:	4630      	mov	r0, r6
 80078f0:	1a6d      	subs	r5, r5, r1
 80078f2:	4629      	mov	r1, r5
 80078f4:	f7ff ffa6 	bl	8007844 <sbrk_aligned>
 80078f8:	3001      	adds	r0, #1
 80078fa:	d03a      	beq.n	8007972 <_malloc_r+0xea>
 80078fc:	6823      	ldr	r3, [r4, #0]
 80078fe:	442b      	add	r3, r5
 8007900:	6023      	str	r3, [r4, #0]
 8007902:	f8d8 3000 	ldr.w	r3, [r8]
 8007906:	685a      	ldr	r2, [r3, #4]
 8007908:	bb62      	cbnz	r2, 8007964 <_malloc_r+0xdc>
 800790a:	f8c8 7000 	str.w	r7, [r8]
 800790e:	e00f      	b.n	8007930 <_malloc_r+0xa8>
 8007910:	6822      	ldr	r2, [r4, #0]
 8007912:	1b52      	subs	r2, r2, r5
 8007914:	d420      	bmi.n	8007958 <_malloc_r+0xd0>
 8007916:	2a0b      	cmp	r2, #11
 8007918:	d917      	bls.n	800794a <_malloc_r+0xc2>
 800791a:	1961      	adds	r1, r4, r5
 800791c:	42a3      	cmp	r3, r4
 800791e:	6025      	str	r5, [r4, #0]
 8007920:	bf18      	it	ne
 8007922:	6059      	strne	r1, [r3, #4]
 8007924:	6863      	ldr	r3, [r4, #4]
 8007926:	bf08      	it	eq
 8007928:	f8c8 1000 	streq.w	r1, [r8]
 800792c:	5162      	str	r2, [r4, r5]
 800792e:	604b      	str	r3, [r1, #4]
 8007930:	4630      	mov	r0, r6
 8007932:	f000 f82f 	bl	8007994 <__malloc_unlock>
 8007936:	f104 000b 	add.w	r0, r4, #11
 800793a:	1d23      	adds	r3, r4, #4
 800793c:	f020 0007 	bic.w	r0, r0, #7
 8007940:	1ac2      	subs	r2, r0, r3
 8007942:	bf1c      	itt	ne
 8007944:	1a1b      	subne	r3, r3, r0
 8007946:	50a3      	strne	r3, [r4, r2]
 8007948:	e7af      	b.n	80078aa <_malloc_r+0x22>
 800794a:	6862      	ldr	r2, [r4, #4]
 800794c:	42a3      	cmp	r3, r4
 800794e:	bf0c      	ite	eq
 8007950:	f8c8 2000 	streq.w	r2, [r8]
 8007954:	605a      	strne	r2, [r3, #4]
 8007956:	e7eb      	b.n	8007930 <_malloc_r+0xa8>
 8007958:	4623      	mov	r3, r4
 800795a:	6864      	ldr	r4, [r4, #4]
 800795c:	e7ae      	b.n	80078bc <_malloc_r+0x34>
 800795e:	463c      	mov	r4, r7
 8007960:	687f      	ldr	r7, [r7, #4]
 8007962:	e7b6      	b.n	80078d2 <_malloc_r+0x4a>
 8007964:	461a      	mov	r2, r3
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	42a3      	cmp	r3, r4
 800796a:	d1fb      	bne.n	8007964 <_malloc_r+0xdc>
 800796c:	2300      	movs	r3, #0
 800796e:	6053      	str	r3, [r2, #4]
 8007970:	e7de      	b.n	8007930 <_malloc_r+0xa8>
 8007972:	230c      	movs	r3, #12
 8007974:	4630      	mov	r0, r6
 8007976:	6033      	str	r3, [r6, #0]
 8007978:	f000 f80c 	bl	8007994 <__malloc_unlock>
 800797c:	e794      	b.n	80078a8 <_malloc_r+0x20>
 800797e:	6005      	str	r5, [r0, #0]
 8007980:	e7d6      	b.n	8007930 <_malloc_r+0xa8>
 8007982:	bf00      	nop
 8007984:	200014f4 	.word	0x200014f4

08007988 <__malloc_lock>:
 8007988:	4801      	ldr	r0, [pc, #4]	@ (8007990 <__malloc_lock+0x8>)
 800798a:	f7ff bf03 	b.w	8007794 <__retarget_lock_acquire_recursive>
 800798e:	bf00      	nop
 8007990:	200014ec 	.word	0x200014ec

08007994 <__malloc_unlock>:
 8007994:	4801      	ldr	r0, [pc, #4]	@ (800799c <__malloc_unlock+0x8>)
 8007996:	f7ff befe 	b.w	8007796 <__retarget_lock_release_recursive>
 800799a:	bf00      	nop
 800799c:	200014ec 	.word	0x200014ec

080079a0 <__ssputs_r>:
 80079a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079a4:	461f      	mov	r7, r3
 80079a6:	688e      	ldr	r6, [r1, #8]
 80079a8:	4682      	mov	sl, r0
 80079aa:	42be      	cmp	r6, r7
 80079ac:	460c      	mov	r4, r1
 80079ae:	4690      	mov	r8, r2
 80079b0:	680b      	ldr	r3, [r1, #0]
 80079b2:	d82d      	bhi.n	8007a10 <__ssputs_r+0x70>
 80079b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80079b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80079bc:	d026      	beq.n	8007a0c <__ssputs_r+0x6c>
 80079be:	6965      	ldr	r5, [r4, #20]
 80079c0:	6909      	ldr	r1, [r1, #16]
 80079c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80079c6:	eba3 0901 	sub.w	r9, r3, r1
 80079ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80079ce:	1c7b      	adds	r3, r7, #1
 80079d0:	444b      	add	r3, r9
 80079d2:	106d      	asrs	r5, r5, #1
 80079d4:	429d      	cmp	r5, r3
 80079d6:	bf38      	it	cc
 80079d8:	461d      	movcc	r5, r3
 80079da:	0553      	lsls	r3, r2, #21
 80079dc:	d527      	bpl.n	8007a2e <__ssputs_r+0x8e>
 80079de:	4629      	mov	r1, r5
 80079e0:	f7ff ff52 	bl	8007888 <_malloc_r>
 80079e4:	4606      	mov	r6, r0
 80079e6:	b360      	cbz	r0, 8007a42 <__ssputs_r+0xa2>
 80079e8:	464a      	mov	r2, r9
 80079ea:	6921      	ldr	r1, [r4, #16]
 80079ec:	f7ff fed4 	bl	8007798 <memcpy>
 80079f0:	89a3      	ldrh	r3, [r4, #12]
 80079f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80079f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079fa:	81a3      	strh	r3, [r4, #12]
 80079fc:	6126      	str	r6, [r4, #16]
 80079fe:	444e      	add	r6, r9
 8007a00:	6026      	str	r6, [r4, #0]
 8007a02:	463e      	mov	r6, r7
 8007a04:	6165      	str	r5, [r4, #20]
 8007a06:	eba5 0509 	sub.w	r5, r5, r9
 8007a0a:	60a5      	str	r5, [r4, #8]
 8007a0c:	42be      	cmp	r6, r7
 8007a0e:	d900      	bls.n	8007a12 <__ssputs_r+0x72>
 8007a10:	463e      	mov	r6, r7
 8007a12:	4632      	mov	r2, r6
 8007a14:	4641      	mov	r1, r8
 8007a16:	6820      	ldr	r0, [r4, #0]
 8007a18:	f000 faaa 	bl	8007f70 <memmove>
 8007a1c:	2000      	movs	r0, #0
 8007a1e:	68a3      	ldr	r3, [r4, #8]
 8007a20:	1b9b      	subs	r3, r3, r6
 8007a22:	60a3      	str	r3, [r4, #8]
 8007a24:	6823      	ldr	r3, [r4, #0]
 8007a26:	4433      	add	r3, r6
 8007a28:	6023      	str	r3, [r4, #0]
 8007a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a2e:	462a      	mov	r2, r5
 8007a30:	f000 fad6 	bl	8007fe0 <_realloc_r>
 8007a34:	4606      	mov	r6, r0
 8007a36:	2800      	cmp	r0, #0
 8007a38:	d1e0      	bne.n	80079fc <__ssputs_r+0x5c>
 8007a3a:	4650      	mov	r0, sl
 8007a3c:	6921      	ldr	r1, [r4, #16]
 8007a3e:	f7ff feb9 	bl	80077b4 <_free_r>
 8007a42:	230c      	movs	r3, #12
 8007a44:	f8ca 3000 	str.w	r3, [sl]
 8007a48:	89a3      	ldrh	r3, [r4, #12]
 8007a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8007a4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a52:	81a3      	strh	r3, [r4, #12]
 8007a54:	e7e9      	b.n	8007a2a <__ssputs_r+0x8a>
	...

08007a58 <_svfiprintf_r>:
 8007a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a5c:	4698      	mov	r8, r3
 8007a5e:	898b      	ldrh	r3, [r1, #12]
 8007a60:	4607      	mov	r7, r0
 8007a62:	061b      	lsls	r3, r3, #24
 8007a64:	460d      	mov	r5, r1
 8007a66:	4614      	mov	r4, r2
 8007a68:	b09d      	sub	sp, #116	@ 0x74
 8007a6a:	d510      	bpl.n	8007a8e <_svfiprintf_r+0x36>
 8007a6c:	690b      	ldr	r3, [r1, #16]
 8007a6e:	b973      	cbnz	r3, 8007a8e <_svfiprintf_r+0x36>
 8007a70:	2140      	movs	r1, #64	@ 0x40
 8007a72:	f7ff ff09 	bl	8007888 <_malloc_r>
 8007a76:	6028      	str	r0, [r5, #0]
 8007a78:	6128      	str	r0, [r5, #16]
 8007a7a:	b930      	cbnz	r0, 8007a8a <_svfiprintf_r+0x32>
 8007a7c:	230c      	movs	r3, #12
 8007a7e:	603b      	str	r3, [r7, #0]
 8007a80:	f04f 30ff 	mov.w	r0, #4294967295
 8007a84:	b01d      	add	sp, #116	@ 0x74
 8007a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a8a:	2340      	movs	r3, #64	@ 0x40
 8007a8c:	616b      	str	r3, [r5, #20]
 8007a8e:	2300      	movs	r3, #0
 8007a90:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a92:	2320      	movs	r3, #32
 8007a94:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007a98:	2330      	movs	r3, #48	@ 0x30
 8007a9a:	f04f 0901 	mov.w	r9, #1
 8007a9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007aa2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007c3c <_svfiprintf_r+0x1e4>
 8007aa6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007aaa:	4623      	mov	r3, r4
 8007aac:	469a      	mov	sl, r3
 8007aae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ab2:	b10a      	cbz	r2, 8007ab8 <_svfiprintf_r+0x60>
 8007ab4:	2a25      	cmp	r2, #37	@ 0x25
 8007ab6:	d1f9      	bne.n	8007aac <_svfiprintf_r+0x54>
 8007ab8:	ebba 0b04 	subs.w	fp, sl, r4
 8007abc:	d00b      	beq.n	8007ad6 <_svfiprintf_r+0x7e>
 8007abe:	465b      	mov	r3, fp
 8007ac0:	4622      	mov	r2, r4
 8007ac2:	4629      	mov	r1, r5
 8007ac4:	4638      	mov	r0, r7
 8007ac6:	f7ff ff6b 	bl	80079a0 <__ssputs_r>
 8007aca:	3001      	adds	r0, #1
 8007acc:	f000 80a7 	beq.w	8007c1e <_svfiprintf_r+0x1c6>
 8007ad0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ad2:	445a      	add	r2, fp
 8007ad4:	9209      	str	r2, [sp, #36]	@ 0x24
 8007ad6:	f89a 3000 	ldrb.w	r3, [sl]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	f000 809f 	beq.w	8007c1e <_svfiprintf_r+0x1c6>
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ae6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007aea:	f10a 0a01 	add.w	sl, sl, #1
 8007aee:	9304      	str	r3, [sp, #16]
 8007af0:	9307      	str	r3, [sp, #28]
 8007af2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007af6:	931a      	str	r3, [sp, #104]	@ 0x68
 8007af8:	4654      	mov	r4, sl
 8007afa:	2205      	movs	r2, #5
 8007afc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b00:	484e      	ldr	r0, [pc, #312]	@ (8007c3c <_svfiprintf_r+0x1e4>)
 8007b02:	f000 fa5f 	bl	8007fc4 <memchr>
 8007b06:	9a04      	ldr	r2, [sp, #16]
 8007b08:	b9d8      	cbnz	r0, 8007b42 <_svfiprintf_r+0xea>
 8007b0a:	06d0      	lsls	r0, r2, #27
 8007b0c:	bf44      	itt	mi
 8007b0e:	2320      	movmi	r3, #32
 8007b10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b14:	0711      	lsls	r1, r2, #28
 8007b16:	bf44      	itt	mi
 8007b18:	232b      	movmi	r3, #43	@ 0x2b
 8007b1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b1e:	f89a 3000 	ldrb.w	r3, [sl]
 8007b22:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b24:	d015      	beq.n	8007b52 <_svfiprintf_r+0xfa>
 8007b26:	4654      	mov	r4, sl
 8007b28:	2000      	movs	r0, #0
 8007b2a:	f04f 0c0a 	mov.w	ip, #10
 8007b2e:	9a07      	ldr	r2, [sp, #28]
 8007b30:	4621      	mov	r1, r4
 8007b32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b36:	3b30      	subs	r3, #48	@ 0x30
 8007b38:	2b09      	cmp	r3, #9
 8007b3a:	d94b      	bls.n	8007bd4 <_svfiprintf_r+0x17c>
 8007b3c:	b1b0      	cbz	r0, 8007b6c <_svfiprintf_r+0x114>
 8007b3e:	9207      	str	r2, [sp, #28]
 8007b40:	e014      	b.n	8007b6c <_svfiprintf_r+0x114>
 8007b42:	eba0 0308 	sub.w	r3, r0, r8
 8007b46:	fa09 f303 	lsl.w	r3, r9, r3
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	46a2      	mov	sl, r4
 8007b4e:	9304      	str	r3, [sp, #16]
 8007b50:	e7d2      	b.n	8007af8 <_svfiprintf_r+0xa0>
 8007b52:	9b03      	ldr	r3, [sp, #12]
 8007b54:	1d19      	adds	r1, r3, #4
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	9103      	str	r1, [sp, #12]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	bfbb      	ittet	lt
 8007b5e:	425b      	neglt	r3, r3
 8007b60:	f042 0202 	orrlt.w	r2, r2, #2
 8007b64:	9307      	strge	r3, [sp, #28]
 8007b66:	9307      	strlt	r3, [sp, #28]
 8007b68:	bfb8      	it	lt
 8007b6a:	9204      	strlt	r2, [sp, #16]
 8007b6c:	7823      	ldrb	r3, [r4, #0]
 8007b6e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007b70:	d10a      	bne.n	8007b88 <_svfiprintf_r+0x130>
 8007b72:	7863      	ldrb	r3, [r4, #1]
 8007b74:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b76:	d132      	bne.n	8007bde <_svfiprintf_r+0x186>
 8007b78:	9b03      	ldr	r3, [sp, #12]
 8007b7a:	3402      	adds	r4, #2
 8007b7c:	1d1a      	adds	r2, r3, #4
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	9203      	str	r2, [sp, #12]
 8007b82:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007b86:	9305      	str	r3, [sp, #20]
 8007b88:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007c40 <_svfiprintf_r+0x1e8>
 8007b8c:	2203      	movs	r2, #3
 8007b8e:	4650      	mov	r0, sl
 8007b90:	7821      	ldrb	r1, [r4, #0]
 8007b92:	f000 fa17 	bl	8007fc4 <memchr>
 8007b96:	b138      	cbz	r0, 8007ba8 <_svfiprintf_r+0x150>
 8007b98:	2240      	movs	r2, #64	@ 0x40
 8007b9a:	9b04      	ldr	r3, [sp, #16]
 8007b9c:	eba0 000a 	sub.w	r0, r0, sl
 8007ba0:	4082      	lsls	r2, r0
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	3401      	adds	r4, #1
 8007ba6:	9304      	str	r3, [sp, #16]
 8007ba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bac:	2206      	movs	r2, #6
 8007bae:	4825      	ldr	r0, [pc, #148]	@ (8007c44 <_svfiprintf_r+0x1ec>)
 8007bb0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007bb4:	f000 fa06 	bl	8007fc4 <memchr>
 8007bb8:	2800      	cmp	r0, #0
 8007bba:	d036      	beq.n	8007c2a <_svfiprintf_r+0x1d2>
 8007bbc:	4b22      	ldr	r3, [pc, #136]	@ (8007c48 <_svfiprintf_r+0x1f0>)
 8007bbe:	bb1b      	cbnz	r3, 8007c08 <_svfiprintf_r+0x1b0>
 8007bc0:	9b03      	ldr	r3, [sp, #12]
 8007bc2:	3307      	adds	r3, #7
 8007bc4:	f023 0307 	bic.w	r3, r3, #7
 8007bc8:	3308      	adds	r3, #8
 8007bca:	9303      	str	r3, [sp, #12]
 8007bcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bce:	4433      	add	r3, r6
 8007bd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bd2:	e76a      	b.n	8007aaa <_svfiprintf_r+0x52>
 8007bd4:	460c      	mov	r4, r1
 8007bd6:	2001      	movs	r0, #1
 8007bd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bdc:	e7a8      	b.n	8007b30 <_svfiprintf_r+0xd8>
 8007bde:	2300      	movs	r3, #0
 8007be0:	f04f 0c0a 	mov.w	ip, #10
 8007be4:	4619      	mov	r1, r3
 8007be6:	3401      	adds	r4, #1
 8007be8:	9305      	str	r3, [sp, #20]
 8007bea:	4620      	mov	r0, r4
 8007bec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bf0:	3a30      	subs	r2, #48	@ 0x30
 8007bf2:	2a09      	cmp	r2, #9
 8007bf4:	d903      	bls.n	8007bfe <_svfiprintf_r+0x1a6>
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d0c6      	beq.n	8007b88 <_svfiprintf_r+0x130>
 8007bfa:	9105      	str	r1, [sp, #20]
 8007bfc:	e7c4      	b.n	8007b88 <_svfiprintf_r+0x130>
 8007bfe:	4604      	mov	r4, r0
 8007c00:	2301      	movs	r3, #1
 8007c02:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c06:	e7f0      	b.n	8007bea <_svfiprintf_r+0x192>
 8007c08:	ab03      	add	r3, sp, #12
 8007c0a:	9300      	str	r3, [sp, #0]
 8007c0c:	462a      	mov	r2, r5
 8007c0e:	4638      	mov	r0, r7
 8007c10:	4b0e      	ldr	r3, [pc, #56]	@ (8007c4c <_svfiprintf_r+0x1f4>)
 8007c12:	a904      	add	r1, sp, #16
 8007c14:	f3af 8000 	nop.w
 8007c18:	1c42      	adds	r2, r0, #1
 8007c1a:	4606      	mov	r6, r0
 8007c1c:	d1d6      	bne.n	8007bcc <_svfiprintf_r+0x174>
 8007c1e:	89ab      	ldrh	r3, [r5, #12]
 8007c20:	065b      	lsls	r3, r3, #25
 8007c22:	f53f af2d 	bmi.w	8007a80 <_svfiprintf_r+0x28>
 8007c26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c28:	e72c      	b.n	8007a84 <_svfiprintf_r+0x2c>
 8007c2a:	ab03      	add	r3, sp, #12
 8007c2c:	9300      	str	r3, [sp, #0]
 8007c2e:	462a      	mov	r2, r5
 8007c30:	4638      	mov	r0, r7
 8007c32:	4b06      	ldr	r3, [pc, #24]	@ (8007c4c <_svfiprintf_r+0x1f4>)
 8007c34:	a904      	add	r1, sp, #16
 8007c36:	f000 f87d 	bl	8007d34 <_printf_i>
 8007c3a:	e7ed      	b.n	8007c18 <_svfiprintf_r+0x1c0>
 8007c3c:	080080e6 	.word	0x080080e6
 8007c40:	080080ec 	.word	0x080080ec
 8007c44:	080080f0 	.word	0x080080f0
 8007c48:	00000000 	.word	0x00000000
 8007c4c:	080079a1 	.word	0x080079a1

08007c50 <_printf_common>:
 8007c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c54:	4616      	mov	r6, r2
 8007c56:	4698      	mov	r8, r3
 8007c58:	688a      	ldr	r2, [r1, #8]
 8007c5a:	690b      	ldr	r3, [r1, #16]
 8007c5c:	4607      	mov	r7, r0
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	bfb8      	it	lt
 8007c62:	4613      	movlt	r3, r2
 8007c64:	6033      	str	r3, [r6, #0]
 8007c66:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007c6a:	460c      	mov	r4, r1
 8007c6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007c70:	b10a      	cbz	r2, 8007c76 <_printf_common+0x26>
 8007c72:	3301      	adds	r3, #1
 8007c74:	6033      	str	r3, [r6, #0]
 8007c76:	6823      	ldr	r3, [r4, #0]
 8007c78:	0699      	lsls	r1, r3, #26
 8007c7a:	bf42      	ittt	mi
 8007c7c:	6833      	ldrmi	r3, [r6, #0]
 8007c7e:	3302      	addmi	r3, #2
 8007c80:	6033      	strmi	r3, [r6, #0]
 8007c82:	6825      	ldr	r5, [r4, #0]
 8007c84:	f015 0506 	ands.w	r5, r5, #6
 8007c88:	d106      	bne.n	8007c98 <_printf_common+0x48>
 8007c8a:	f104 0a19 	add.w	sl, r4, #25
 8007c8e:	68e3      	ldr	r3, [r4, #12]
 8007c90:	6832      	ldr	r2, [r6, #0]
 8007c92:	1a9b      	subs	r3, r3, r2
 8007c94:	42ab      	cmp	r3, r5
 8007c96:	dc2b      	bgt.n	8007cf0 <_printf_common+0xa0>
 8007c98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007c9c:	6822      	ldr	r2, [r4, #0]
 8007c9e:	3b00      	subs	r3, #0
 8007ca0:	bf18      	it	ne
 8007ca2:	2301      	movne	r3, #1
 8007ca4:	0692      	lsls	r2, r2, #26
 8007ca6:	d430      	bmi.n	8007d0a <_printf_common+0xba>
 8007ca8:	4641      	mov	r1, r8
 8007caa:	4638      	mov	r0, r7
 8007cac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007cb0:	47c8      	blx	r9
 8007cb2:	3001      	adds	r0, #1
 8007cb4:	d023      	beq.n	8007cfe <_printf_common+0xae>
 8007cb6:	6823      	ldr	r3, [r4, #0]
 8007cb8:	6922      	ldr	r2, [r4, #16]
 8007cba:	f003 0306 	and.w	r3, r3, #6
 8007cbe:	2b04      	cmp	r3, #4
 8007cc0:	bf14      	ite	ne
 8007cc2:	2500      	movne	r5, #0
 8007cc4:	6833      	ldreq	r3, [r6, #0]
 8007cc6:	f04f 0600 	mov.w	r6, #0
 8007cca:	bf08      	it	eq
 8007ccc:	68e5      	ldreq	r5, [r4, #12]
 8007cce:	f104 041a 	add.w	r4, r4, #26
 8007cd2:	bf08      	it	eq
 8007cd4:	1aed      	subeq	r5, r5, r3
 8007cd6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007cda:	bf08      	it	eq
 8007cdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	bfc4      	itt	gt
 8007ce4:	1a9b      	subgt	r3, r3, r2
 8007ce6:	18ed      	addgt	r5, r5, r3
 8007ce8:	42b5      	cmp	r5, r6
 8007cea:	d11a      	bne.n	8007d22 <_printf_common+0xd2>
 8007cec:	2000      	movs	r0, #0
 8007cee:	e008      	b.n	8007d02 <_printf_common+0xb2>
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	4652      	mov	r2, sl
 8007cf4:	4641      	mov	r1, r8
 8007cf6:	4638      	mov	r0, r7
 8007cf8:	47c8      	blx	r9
 8007cfa:	3001      	adds	r0, #1
 8007cfc:	d103      	bne.n	8007d06 <_printf_common+0xb6>
 8007cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8007d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d06:	3501      	adds	r5, #1
 8007d08:	e7c1      	b.n	8007c8e <_printf_common+0x3e>
 8007d0a:	2030      	movs	r0, #48	@ 0x30
 8007d0c:	18e1      	adds	r1, r4, r3
 8007d0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007d12:	1c5a      	adds	r2, r3, #1
 8007d14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007d18:	4422      	add	r2, r4
 8007d1a:	3302      	adds	r3, #2
 8007d1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007d20:	e7c2      	b.n	8007ca8 <_printf_common+0x58>
 8007d22:	2301      	movs	r3, #1
 8007d24:	4622      	mov	r2, r4
 8007d26:	4641      	mov	r1, r8
 8007d28:	4638      	mov	r0, r7
 8007d2a:	47c8      	blx	r9
 8007d2c:	3001      	adds	r0, #1
 8007d2e:	d0e6      	beq.n	8007cfe <_printf_common+0xae>
 8007d30:	3601      	adds	r6, #1
 8007d32:	e7d9      	b.n	8007ce8 <_printf_common+0x98>

08007d34 <_printf_i>:
 8007d34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d38:	7e0f      	ldrb	r7, [r1, #24]
 8007d3a:	4691      	mov	r9, r2
 8007d3c:	2f78      	cmp	r7, #120	@ 0x78
 8007d3e:	4680      	mov	r8, r0
 8007d40:	460c      	mov	r4, r1
 8007d42:	469a      	mov	sl, r3
 8007d44:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007d46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007d4a:	d807      	bhi.n	8007d5c <_printf_i+0x28>
 8007d4c:	2f62      	cmp	r7, #98	@ 0x62
 8007d4e:	d80a      	bhi.n	8007d66 <_printf_i+0x32>
 8007d50:	2f00      	cmp	r7, #0
 8007d52:	f000 80d1 	beq.w	8007ef8 <_printf_i+0x1c4>
 8007d56:	2f58      	cmp	r7, #88	@ 0x58
 8007d58:	f000 80b8 	beq.w	8007ecc <_printf_i+0x198>
 8007d5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007d64:	e03a      	b.n	8007ddc <_printf_i+0xa8>
 8007d66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007d6a:	2b15      	cmp	r3, #21
 8007d6c:	d8f6      	bhi.n	8007d5c <_printf_i+0x28>
 8007d6e:	a101      	add	r1, pc, #4	@ (adr r1, 8007d74 <_printf_i+0x40>)
 8007d70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d74:	08007dcd 	.word	0x08007dcd
 8007d78:	08007de1 	.word	0x08007de1
 8007d7c:	08007d5d 	.word	0x08007d5d
 8007d80:	08007d5d 	.word	0x08007d5d
 8007d84:	08007d5d 	.word	0x08007d5d
 8007d88:	08007d5d 	.word	0x08007d5d
 8007d8c:	08007de1 	.word	0x08007de1
 8007d90:	08007d5d 	.word	0x08007d5d
 8007d94:	08007d5d 	.word	0x08007d5d
 8007d98:	08007d5d 	.word	0x08007d5d
 8007d9c:	08007d5d 	.word	0x08007d5d
 8007da0:	08007edf 	.word	0x08007edf
 8007da4:	08007e0b 	.word	0x08007e0b
 8007da8:	08007e99 	.word	0x08007e99
 8007dac:	08007d5d 	.word	0x08007d5d
 8007db0:	08007d5d 	.word	0x08007d5d
 8007db4:	08007f01 	.word	0x08007f01
 8007db8:	08007d5d 	.word	0x08007d5d
 8007dbc:	08007e0b 	.word	0x08007e0b
 8007dc0:	08007d5d 	.word	0x08007d5d
 8007dc4:	08007d5d 	.word	0x08007d5d
 8007dc8:	08007ea1 	.word	0x08007ea1
 8007dcc:	6833      	ldr	r3, [r6, #0]
 8007dce:	1d1a      	adds	r2, r3, #4
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	6032      	str	r2, [r6, #0]
 8007dd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007dd8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007ddc:	2301      	movs	r3, #1
 8007dde:	e09c      	b.n	8007f1a <_printf_i+0x1e6>
 8007de0:	6833      	ldr	r3, [r6, #0]
 8007de2:	6820      	ldr	r0, [r4, #0]
 8007de4:	1d19      	adds	r1, r3, #4
 8007de6:	6031      	str	r1, [r6, #0]
 8007de8:	0606      	lsls	r6, r0, #24
 8007dea:	d501      	bpl.n	8007df0 <_printf_i+0xbc>
 8007dec:	681d      	ldr	r5, [r3, #0]
 8007dee:	e003      	b.n	8007df8 <_printf_i+0xc4>
 8007df0:	0645      	lsls	r5, r0, #25
 8007df2:	d5fb      	bpl.n	8007dec <_printf_i+0xb8>
 8007df4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007df8:	2d00      	cmp	r5, #0
 8007dfa:	da03      	bge.n	8007e04 <_printf_i+0xd0>
 8007dfc:	232d      	movs	r3, #45	@ 0x2d
 8007dfe:	426d      	negs	r5, r5
 8007e00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e04:	230a      	movs	r3, #10
 8007e06:	4858      	ldr	r0, [pc, #352]	@ (8007f68 <_printf_i+0x234>)
 8007e08:	e011      	b.n	8007e2e <_printf_i+0xfa>
 8007e0a:	6821      	ldr	r1, [r4, #0]
 8007e0c:	6833      	ldr	r3, [r6, #0]
 8007e0e:	0608      	lsls	r0, r1, #24
 8007e10:	f853 5b04 	ldr.w	r5, [r3], #4
 8007e14:	d402      	bmi.n	8007e1c <_printf_i+0xe8>
 8007e16:	0649      	lsls	r1, r1, #25
 8007e18:	bf48      	it	mi
 8007e1a:	b2ad      	uxthmi	r5, r5
 8007e1c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007e1e:	6033      	str	r3, [r6, #0]
 8007e20:	bf14      	ite	ne
 8007e22:	230a      	movne	r3, #10
 8007e24:	2308      	moveq	r3, #8
 8007e26:	4850      	ldr	r0, [pc, #320]	@ (8007f68 <_printf_i+0x234>)
 8007e28:	2100      	movs	r1, #0
 8007e2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007e2e:	6866      	ldr	r6, [r4, #4]
 8007e30:	2e00      	cmp	r6, #0
 8007e32:	60a6      	str	r6, [r4, #8]
 8007e34:	db05      	blt.n	8007e42 <_printf_i+0x10e>
 8007e36:	6821      	ldr	r1, [r4, #0]
 8007e38:	432e      	orrs	r6, r5
 8007e3a:	f021 0104 	bic.w	r1, r1, #4
 8007e3e:	6021      	str	r1, [r4, #0]
 8007e40:	d04b      	beq.n	8007eda <_printf_i+0x1a6>
 8007e42:	4616      	mov	r6, r2
 8007e44:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e48:	fb03 5711 	mls	r7, r3, r1, r5
 8007e4c:	5dc7      	ldrb	r7, [r0, r7]
 8007e4e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007e52:	462f      	mov	r7, r5
 8007e54:	42bb      	cmp	r3, r7
 8007e56:	460d      	mov	r5, r1
 8007e58:	d9f4      	bls.n	8007e44 <_printf_i+0x110>
 8007e5a:	2b08      	cmp	r3, #8
 8007e5c:	d10b      	bne.n	8007e76 <_printf_i+0x142>
 8007e5e:	6823      	ldr	r3, [r4, #0]
 8007e60:	07df      	lsls	r7, r3, #31
 8007e62:	d508      	bpl.n	8007e76 <_printf_i+0x142>
 8007e64:	6923      	ldr	r3, [r4, #16]
 8007e66:	6861      	ldr	r1, [r4, #4]
 8007e68:	4299      	cmp	r1, r3
 8007e6a:	bfde      	ittt	le
 8007e6c:	2330      	movle	r3, #48	@ 0x30
 8007e6e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007e72:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007e76:	1b92      	subs	r2, r2, r6
 8007e78:	6122      	str	r2, [r4, #16]
 8007e7a:	464b      	mov	r3, r9
 8007e7c:	4621      	mov	r1, r4
 8007e7e:	4640      	mov	r0, r8
 8007e80:	f8cd a000 	str.w	sl, [sp]
 8007e84:	aa03      	add	r2, sp, #12
 8007e86:	f7ff fee3 	bl	8007c50 <_printf_common>
 8007e8a:	3001      	adds	r0, #1
 8007e8c:	d14a      	bne.n	8007f24 <_printf_i+0x1f0>
 8007e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e92:	b004      	add	sp, #16
 8007e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e98:	6823      	ldr	r3, [r4, #0]
 8007e9a:	f043 0320 	orr.w	r3, r3, #32
 8007e9e:	6023      	str	r3, [r4, #0]
 8007ea0:	2778      	movs	r7, #120	@ 0x78
 8007ea2:	4832      	ldr	r0, [pc, #200]	@ (8007f6c <_printf_i+0x238>)
 8007ea4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007ea8:	6823      	ldr	r3, [r4, #0]
 8007eaa:	6831      	ldr	r1, [r6, #0]
 8007eac:	061f      	lsls	r7, r3, #24
 8007eae:	f851 5b04 	ldr.w	r5, [r1], #4
 8007eb2:	d402      	bmi.n	8007eba <_printf_i+0x186>
 8007eb4:	065f      	lsls	r7, r3, #25
 8007eb6:	bf48      	it	mi
 8007eb8:	b2ad      	uxthmi	r5, r5
 8007eba:	6031      	str	r1, [r6, #0]
 8007ebc:	07d9      	lsls	r1, r3, #31
 8007ebe:	bf44      	itt	mi
 8007ec0:	f043 0320 	orrmi.w	r3, r3, #32
 8007ec4:	6023      	strmi	r3, [r4, #0]
 8007ec6:	b11d      	cbz	r5, 8007ed0 <_printf_i+0x19c>
 8007ec8:	2310      	movs	r3, #16
 8007eca:	e7ad      	b.n	8007e28 <_printf_i+0xf4>
 8007ecc:	4826      	ldr	r0, [pc, #152]	@ (8007f68 <_printf_i+0x234>)
 8007ece:	e7e9      	b.n	8007ea4 <_printf_i+0x170>
 8007ed0:	6823      	ldr	r3, [r4, #0]
 8007ed2:	f023 0320 	bic.w	r3, r3, #32
 8007ed6:	6023      	str	r3, [r4, #0]
 8007ed8:	e7f6      	b.n	8007ec8 <_printf_i+0x194>
 8007eda:	4616      	mov	r6, r2
 8007edc:	e7bd      	b.n	8007e5a <_printf_i+0x126>
 8007ede:	6833      	ldr	r3, [r6, #0]
 8007ee0:	6825      	ldr	r5, [r4, #0]
 8007ee2:	1d18      	adds	r0, r3, #4
 8007ee4:	6961      	ldr	r1, [r4, #20]
 8007ee6:	6030      	str	r0, [r6, #0]
 8007ee8:	062e      	lsls	r6, r5, #24
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	d501      	bpl.n	8007ef2 <_printf_i+0x1be>
 8007eee:	6019      	str	r1, [r3, #0]
 8007ef0:	e002      	b.n	8007ef8 <_printf_i+0x1c4>
 8007ef2:	0668      	lsls	r0, r5, #25
 8007ef4:	d5fb      	bpl.n	8007eee <_printf_i+0x1ba>
 8007ef6:	8019      	strh	r1, [r3, #0]
 8007ef8:	2300      	movs	r3, #0
 8007efa:	4616      	mov	r6, r2
 8007efc:	6123      	str	r3, [r4, #16]
 8007efe:	e7bc      	b.n	8007e7a <_printf_i+0x146>
 8007f00:	6833      	ldr	r3, [r6, #0]
 8007f02:	2100      	movs	r1, #0
 8007f04:	1d1a      	adds	r2, r3, #4
 8007f06:	6032      	str	r2, [r6, #0]
 8007f08:	681e      	ldr	r6, [r3, #0]
 8007f0a:	6862      	ldr	r2, [r4, #4]
 8007f0c:	4630      	mov	r0, r6
 8007f0e:	f000 f859 	bl	8007fc4 <memchr>
 8007f12:	b108      	cbz	r0, 8007f18 <_printf_i+0x1e4>
 8007f14:	1b80      	subs	r0, r0, r6
 8007f16:	6060      	str	r0, [r4, #4]
 8007f18:	6863      	ldr	r3, [r4, #4]
 8007f1a:	6123      	str	r3, [r4, #16]
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f22:	e7aa      	b.n	8007e7a <_printf_i+0x146>
 8007f24:	4632      	mov	r2, r6
 8007f26:	4649      	mov	r1, r9
 8007f28:	4640      	mov	r0, r8
 8007f2a:	6923      	ldr	r3, [r4, #16]
 8007f2c:	47d0      	blx	sl
 8007f2e:	3001      	adds	r0, #1
 8007f30:	d0ad      	beq.n	8007e8e <_printf_i+0x15a>
 8007f32:	6823      	ldr	r3, [r4, #0]
 8007f34:	079b      	lsls	r3, r3, #30
 8007f36:	d413      	bmi.n	8007f60 <_printf_i+0x22c>
 8007f38:	68e0      	ldr	r0, [r4, #12]
 8007f3a:	9b03      	ldr	r3, [sp, #12]
 8007f3c:	4298      	cmp	r0, r3
 8007f3e:	bfb8      	it	lt
 8007f40:	4618      	movlt	r0, r3
 8007f42:	e7a6      	b.n	8007e92 <_printf_i+0x15e>
 8007f44:	2301      	movs	r3, #1
 8007f46:	4632      	mov	r2, r6
 8007f48:	4649      	mov	r1, r9
 8007f4a:	4640      	mov	r0, r8
 8007f4c:	47d0      	blx	sl
 8007f4e:	3001      	adds	r0, #1
 8007f50:	d09d      	beq.n	8007e8e <_printf_i+0x15a>
 8007f52:	3501      	adds	r5, #1
 8007f54:	68e3      	ldr	r3, [r4, #12]
 8007f56:	9903      	ldr	r1, [sp, #12]
 8007f58:	1a5b      	subs	r3, r3, r1
 8007f5a:	42ab      	cmp	r3, r5
 8007f5c:	dcf2      	bgt.n	8007f44 <_printf_i+0x210>
 8007f5e:	e7eb      	b.n	8007f38 <_printf_i+0x204>
 8007f60:	2500      	movs	r5, #0
 8007f62:	f104 0619 	add.w	r6, r4, #25
 8007f66:	e7f5      	b.n	8007f54 <_printf_i+0x220>
 8007f68:	080080f7 	.word	0x080080f7
 8007f6c:	08008108 	.word	0x08008108

08007f70 <memmove>:
 8007f70:	4288      	cmp	r0, r1
 8007f72:	b510      	push	{r4, lr}
 8007f74:	eb01 0402 	add.w	r4, r1, r2
 8007f78:	d902      	bls.n	8007f80 <memmove+0x10>
 8007f7a:	4284      	cmp	r4, r0
 8007f7c:	4623      	mov	r3, r4
 8007f7e:	d807      	bhi.n	8007f90 <memmove+0x20>
 8007f80:	1e43      	subs	r3, r0, #1
 8007f82:	42a1      	cmp	r1, r4
 8007f84:	d008      	beq.n	8007f98 <memmove+0x28>
 8007f86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f8e:	e7f8      	b.n	8007f82 <memmove+0x12>
 8007f90:	4601      	mov	r1, r0
 8007f92:	4402      	add	r2, r0
 8007f94:	428a      	cmp	r2, r1
 8007f96:	d100      	bne.n	8007f9a <memmove+0x2a>
 8007f98:	bd10      	pop	{r4, pc}
 8007f9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007fa2:	e7f7      	b.n	8007f94 <memmove+0x24>

08007fa4 <_sbrk_r>:
 8007fa4:	b538      	push	{r3, r4, r5, lr}
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	4d05      	ldr	r5, [pc, #20]	@ (8007fc0 <_sbrk_r+0x1c>)
 8007faa:	4604      	mov	r4, r0
 8007fac:	4608      	mov	r0, r1
 8007fae:	602b      	str	r3, [r5, #0]
 8007fb0:	f7f8 fa04 	bl	80003bc <_sbrk>
 8007fb4:	1c43      	adds	r3, r0, #1
 8007fb6:	d102      	bne.n	8007fbe <_sbrk_r+0x1a>
 8007fb8:	682b      	ldr	r3, [r5, #0]
 8007fba:	b103      	cbz	r3, 8007fbe <_sbrk_r+0x1a>
 8007fbc:	6023      	str	r3, [r4, #0]
 8007fbe:	bd38      	pop	{r3, r4, r5, pc}
 8007fc0:	200014e8 	.word	0x200014e8

08007fc4 <memchr>:
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	b510      	push	{r4, lr}
 8007fc8:	b2c9      	uxtb	r1, r1
 8007fca:	4402      	add	r2, r0
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	4618      	mov	r0, r3
 8007fd0:	d101      	bne.n	8007fd6 <memchr+0x12>
 8007fd2:	2000      	movs	r0, #0
 8007fd4:	e003      	b.n	8007fde <memchr+0x1a>
 8007fd6:	7804      	ldrb	r4, [r0, #0]
 8007fd8:	3301      	adds	r3, #1
 8007fda:	428c      	cmp	r4, r1
 8007fdc:	d1f6      	bne.n	8007fcc <memchr+0x8>
 8007fde:	bd10      	pop	{r4, pc}

08007fe0 <_realloc_r>:
 8007fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fe4:	4607      	mov	r7, r0
 8007fe6:	4614      	mov	r4, r2
 8007fe8:	460d      	mov	r5, r1
 8007fea:	b921      	cbnz	r1, 8007ff6 <_realloc_r+0x16>
 8007fec:	4611      	mov	r1, r2
 8007fee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ff2:	f7ff bc49 	b.w	8007888 <_malloc_r>
 8007ff6:	b92a      	cbnz	r2, 8008004 <_realloc_r+0x24>
 8007ff8:	f7ff fbdc 	bl	80077b4 <_free_r>
 8007ffc:	4625      	mov	r5, r4
 8007ffe:	4628      	mov	r0, r5
 8008000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008004:	f000 f81a 	bl	800803c <_malloc_usable_size_r>
 8008008:	4284      	cmp	r4, r0
 800800a:	4606      	mov	r6, r0
 800800c:	d802      	bhi.n	8008014 <_realloc_r+0x34>
 800800e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008012:	d8f4      	bhi.n	8007ffe <_realloc_r+0x1e>
 8008014:	4621      	mov	r1, r4
 8008016:	4638      	mov	r0, r7
 8008018:	f7ff fc36 	bl	8007888 <_malloc_r>
 800801c:	4680      	mov	r8, r0
 800801e:	b908      	cbnz	r0, 8008024 <_realloc_r+0x44>
 8008020:	4645      	mov	r5, r8
 8008022:	e7ec      	b.n	8007ffe <_realloc_r+0x1e>
 8008024:	42b4      	cmp	r4, r6
 8008026:	4622      	mov	r2, r4
 8008028:	4629      	mov	r1, r5
 800802a:	bf28      	it	cs
 800802c:	4632      	movcs	r2, r6
 800802e:	f7ff fbb3 	bl	8007798 <memcpy>
 8008032:	4629      	mov	r1, r5
 8008034:	4638      	mov	r0, r7
 8008036:	f7ff fbbd 	bl	80077b4 <_free_r>
 800803a:	e7f1      	b.n	8008020 <_realloc_r+0x40>

0800803c <_malloc_usable_size_r>:
 800803c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008040:	1f18      	subs	r0, r3, #4
 8008042:	2b00      	cmp	r3, #0
 8008044:	bfbc      	itt	lt
 8008046:	580b      	ldrlt	r3, [r1, r0]
 8008048:	18c0      	addlt	r0, r0, r3
 800804a:	4770      	bx	lr

0800804c <_init>:
 800804c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800804e:	bf00      	nop
 8008050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008052:	bc08      	pop	{r3}
 8008054:	469e      	mov	lr, r3
 8008056:	4770      	bx	lr

08008058 <_fini>:
 8008058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800805a:	bf00      	nop
 800805c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800805e:	bc08      	pop	{r3}
 8008060:	469e      	mov	lr, r3
 8008062:	4770      	bx	lr
